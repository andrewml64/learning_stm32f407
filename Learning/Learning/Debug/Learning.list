
Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800aa8c  0800aa8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb0  0800abb0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800abb0  0800abb0  0001abb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abb8  0800abb8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abb8  0800abb8  0001abb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abbc  0800abbc  0001abbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800abc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000084c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008dc  200008dc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171ff  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000398b  00000000  00000000  000372bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  0003ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001120  00000000  00000000  0003bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002496f  00000000  00000000  0003d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001921c  00000000  00000000  0006197f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda5c  00000000  00000000  0007ab9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001485f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005454  00000000  00000000  00148648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa74 	.word	0x0800aa74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800aa74 	.word	0x0800aa74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b9aa 	b.w	8000dd8 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f83c 	bl	8000b08 <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2lz>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	460d      	mov	r5, r1
 8000aa6:	f000 f9f9 	bl	8000e9c <__aeabi_dcmplt>
 8000aaa:	b928      	cbnz	r0, 8000ab8 <__aeabi_d2lz+0x1c>
 8000aac:	4620      	mov	r0, r4
 8000aae:	4629      	mov	r1, r5
 8000ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab4:	f000 b80a 	b.w	8000acc <__aeabi_d2ulz>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000abe:	f000 f805 	bl	8000acc <__aeabi_d2ulz>
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
 8000aca:	bf00      	nop

08000acc <__aeabi_d2ulz>:
 8000acc:	b5d0      	push	{r4, r6, r7, lr}
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__aeabi_d2ulz+0x34>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4606      	mov	r6, r0
 8000ad4:	460f      	mov	r7, r1
 8000ad6:	f7ff fd8f 	bl	80005f8 <__aeabi_dmul>
 8000ada:	f000 fa07 	bl	8000eec <__aeabi_d2uiz>
 8000ade:	4604      	mov	r4, r0
 8000ae0:	f7ff fd10 	bl	8000504 <__aeabi_ui2d>
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <__aeabi_d2ulz+0x38>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f7ff fd86 	bl	80005f8 <__aeabi_dmul>
 8000aec:	4602      	mov	r2, r0
 8000aee:	460b      	mov	r3, r1
 8000af0:	4630      	mov	r0, r6
 8000af2:	4639      	mov	r1, r7
 8000af4:	f7ff fbc8 	bl	8000288 <__aeabi_dsub>
 8000af8:	f000 f9f8 	bl	8000eec <__aeabi_d2uiz>
 8000afc:	4621      	mov	r1, r4
 8000afe:	bdd0      	pop	{r4, r6, r7, pc}
 8000b00:	3df00000 	.word	0x3df00000
 8000b04:	41f00000 	.word	0x41f00000

08000b08 <__udivmoddi4>:
 8000b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b0c:	9d08      	ldr	r5, [sp, #32]
 8000b0e:	4604      	mov	r4, r0
 8000b10:	468e      	mov	lr, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d14d      	bne.n	8000bb2 <__udivmoddi4+0xaa>
 8000b16:	428a      	cmp	r2, r1
 8000b18:	4694      	mov	ip, r2
 8000b1a:	d969      	bls.n	8000bf0 <__udivmoddi4+0xe8>
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	b152      	cbz	r2, 8000b38 <__udivmoddi4+0x30>
 8000b22:	fa01 f302 	lsl.w	r3, r1, r2
 8000b26:	f1c2 0120 	rsb	r1, r2, #32
 8000b2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b32:	ea41 0e03 	orr.w	lr, r1, r3
 8000b36:	4094      	lsls	r4, r2
 8000b38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b3c:	0c21      	lsrs	r1, r4, #16
 8000b3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b42:	fa1f f78c 	uxth.w	r7, ip
 8000b46:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b4e:	fb06 f107 	mul.w	r1, r6, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x64>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b5e:	f080 811f 	bcs.w	8000da0 <__udivmoddi4+0x298>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 811c 	bls.w	8000da0 <__udivmoddi4+0x298>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 f707 	mul.w	r7, r0, r7
 8000b80:	42a7      	cmp	r7, r4
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x92>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8c:	f080 810a 	bcs.w	8000da4 <__udivmoddi4+0x29c>
 8000b90:	42a7      	cmp	r7, r4
 8000b92:	f240 8107 	bls.w	8000da4 <__udivmoddi4+0x29c>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9e:	1be4      	subs	r4, r4, r7
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa4>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xc2>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80ef 	beq.w	8000d9a <__udivmoddi4+0x292>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x160>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd4>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80f9 	bhi.w	8000dce <__udivmoddi4+0x2c6>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	469e      	mov	lr, r3
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa4>
 8000bea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa4>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xec>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 8092 	bne.w	8000d22 <__udivmoddi4+0x21a>
 8000bfe:	eba1 010c 	sub.w	r1, r1, ip
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	2601      	movs	r6, #1
 8000c0c:	0c20      	lsrs	r0, r4, #16
 8000c0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c12:	fb07 1113 	mls	r1, r7, r3, r1
 8000c16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1a:	fb0e f003 	mul.w	r0, lr, r3
 8000c1e:	4288      	cmp	r0, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x12c>
 8000c22:	eb1c 0101 	adds.w	r1, ip, r1
 8000c26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x12a>
 8000c2c:	4288      	cmp	r0, r1
 8000c2e:	f200 80cb 	bhi.w	8000dc8 <__udivmoddi4+0x2c0>
 8000c32:	4643      	mov	r3, r8
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c44:	fb0e fe00 	mul.w	lr, lr, r0
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x156>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	d202      	bcs.n	8000c5c <__udivmoddi4+0x154>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	f200 80bb 	bhi.w	8000dd2 <__udivmoddi4+0x2ca>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c66:	e79c      	b.n	8000ba2 <__udivmoddi4+0x9a>
 8000c68:	f1c6 0720 	rsb	r7, r6, #32
 8000c6c:	40b3      	lsls	r3, r6
 8000c6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c76:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	431c      	orrs	r4, r3
 8000c80:	40f9      	lsrs	r1, r7
 8000c82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c86:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c8e:	0c20      	lsrs	r0, r4, #16
 8000c90:	fa1f fe8c 	uxth.w	lr, ip
 8000c94:	fb09 1118 	mls	r1, r9, r8, r1
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x1b8>
 8000ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb0:	f080 8088 	bcs.w	8000dc4 <__udivmoddi4+0x2bc>
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	f240 8085 	bls.w	8000dc4 <__udivmoddi4+0x2bc>
 8000cba:	f1a8 0802 	sub.w	r8, r8, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ccc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd4:	458e      	cmp	lr, r1
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1e2>
 8000cd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cdc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce0:	d26c      	bcs.n	8000dbc <__udivmoddi4+0x2b4>
 8000ce2:	458e      	cmp	lr, r1
 8000ce4:	d96a      	bls.n	8000dbc <__udivmoddi4+0x2b4>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4461      	add	r1, ip
 8000cea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cee:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf2:	eba1 010e 	sub.w	r1, r1, lr
 8000cf6:	42a1      	cmp	r1, r4
 8000cf8:	46c8      	mov	r8, r9
 8000cfa:	46a6      	mov	lr, r4
 8000cfc:	d356      	bcc.n	8000dac <__udivmoddi4+0x2a4>
 8000cfe:	d053      	beq.n	8000da8 <__udivmoddi4+0x2a0>
 8000d00:	b15d      	cbz	r5, 8000d1a <__udivmoddi4+0x212>
 8000d02:	ebb3 0208 	subs.w	r2, r3, r8
 8000d06:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d12:	40f1      	lsrs	r1, r6
 8000d14:	431f      	orrs	r7, r3
 8000d16:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	40d8      	lsrs	r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d30:	4091      	lsls	r1, r2
 8000d32:	4301      	orrs	r1, r0
 8000d34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d40:	fb07 3610 	mls	r6, r7, r0, r3
 8000d44:	0c0b      	lsrs	r3, r1, #16
 8000d46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	fa04 f402 	lsl.w	r4, r4, r2
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x260>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5e:	d22f      	bcs.n	8000dc0 <__udivmoddi4+0x2b8>
 8000d60:	429e      	cmp	r6, r3
 8000d62:	d92d      	bls.n	8000dc0 <__udivmoddi4+0x2b8>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	b289      	uxth	r1, r1
 8000d6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d70:	fb07 3316 	mls	r3, r7, r6, r3
 8000d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d78:	fb06 f30e 	mul.w	r3, r6, lr
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x28a>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d88:	d216      	bcs.n	8000db8 <__udivmoddi4+0x2b0>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d914      	bls.n	8000db8 <__udivmoddi4+0x2b0>
 8000d8e:	3e02      	subs	r6, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	1ac9      	subs	r1, r1, r3
 8000d94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d98:	e738      	b.n	8000c0c <__udivmoddi4+0x104>
 8000d9a:	462e      	mov	r6, r5
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	e705      	b.n	8000bac <__udivmoddi4+0xa4>
 8000da0:	4606      	mov	r6, r0
 8000da2:	e6e3      	b.n	8000b6c <__udivmoddi4+0x64>
 8000da4:	4618      	mov	r0, r3
 8000da6:	e6f8      	b.n	8000b9a <__udivmoddi4+0x92>
 8000da8:	454b      	cmp	r3, r9
 8000daa:	d2a9      	bcs.n	8000d00 <__udivmoddi4+0x1f8>
 8000dac:	ebb9 0802 	subs.w	r8, r9, r2
 8000db0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db4:	3801      	subs	r0, #1
 8000db6:	e7a3      	b.n	8000d00 <__udivmoddi4+0x1f8>
 8000db8:	4646      	mov	r6, r8
 8000dba:	e7ea      	b.n	8000d92 <__udivmoddi4+0x28a>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	e794      	b.n	8000cea <__udivmoddi4+0x1e2>
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	e7d1      	b.n	8000d68 <__udivmoddi4+0x260>
 8000dc4:	46d0      	mov	r8, sl
 8000dc6:	e77b      	b.n	8000cc0 <__udivmoddi4+0x1b8>
 8000dc8:	3b02      	subs	r3, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	e732      	b.n	8000c34 <__udivmoddi4+0x12c>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e709      	b.n	8000be6 <__udivmoddi4+0xde>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e742      	b.n	8000c5e <__udivmoddi4+0x156>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <__gedf2>:
 8000ddc:	f04f 3cff 	mov.w	ip, #4294967295
 8000de0:	e006      	b.n	8000df0 <__cmpdf2+0x4>
 8000de2:	bf00      	nop

08000de4 <__ledf2>:
 8000de4:	f04f 0c01 	mov.w	ip, #1
 8000de8:	e002      	b.n	8000df0 <__cmpdf2+0x4>
 8000dea:	bf00      	nop

08000dec <__cmpdf2>:
 8000dec:	f04f 0c01 	mov.w	ip, #1
 8000df0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000df4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e00:	bf18      	it	ne
 8000e02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e06:	d01b      	beq.n	8000e40 <__cmpdf2+0x54>
 8000e08:	b001      	add	sp, #4
 8000e0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e0e:	bf0c      	ite	eq
 8000e10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e14:	ea91 0f03 	teqne	r1, r3
 8000e18:	bf02      	ittt	eq
 8000e1a:	ea90 0f02 	teqeq	r0, r2
 8000e1e:	2000      	moveq	r0, #0
 8000e20:	4770      	bxeq	lr
 8000e22:	f110 0f00 	cmn.w	r0, #0
 8000e26:	ea91 0f03 	teq	r1, r3
 8000e2a:	bf58      	it	pl
 8000e2c:	4299      	cmppl	r1, r3
 8000e2e:	bf08      	it	eq
 8000e30:	4290      	cmpeq	r0, r2
 8000e32:	bf2c      	ite	cs
 8000e34:	17d8      	asrcs	r0, r3, #31
 8000e36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e3a:	f040 0001 	orr.w	r0, r0, #1
 8000e3e:	4770      	bx	lr
 8000e40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e48:	d102      	bne.n	8000e50 <__cmpdf2+0x64>
 8000e4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e4e:	d107      	bne.n	8000e60 <__cmpdf2+0x74>
 8000e50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e58:	d1d6      	bne.n	8000e08 <__cmpdf2+0x1c>
 8000e5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e5e:	d0d3      	beq.n	8000e08 <__cmpdf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cdrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4662      	mov	r2, ip
 8000e6e:	468c      	mov	ip, r1
 8000e70:	4619      	mov	r1, r3
 8000e72:	4663      	mov	r3, ip
 8000e74:	e000      	b.n	8000e78 <__aeabi_cdcmpeq>
 8000e76:	bf00      	nop

08000e78 <__aeabi_cdcmpeq>:
 8000e78:	b501      	push	{r0, lr}
 8000e7a:	f7ff ffb7 	bl	8000dec <__cmpdf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd01      	pop	{r0, pc}

08000e88 <__aeabi_dcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cdcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_dcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cdcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_dcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cdcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_dcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffce 	bl	8000e68 <__aeabi_cdrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_dcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc4 	bl	8000e68 <__aeabi_cdrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	b095      	sub	sp, #84	; 0x54
 8000f32:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t buf[16];
	uint16_t C1 = 1, C2 = 1, C3 = 1, C4 = 1, C5 = 1, C6 = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000f50:	2301      	movs	r3, #1
 8000f52:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint32_t pressure = 0, temp = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t dT = 0, TEMP, P;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
	int64_t OFF = 0, SENS = 0;
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f001 f832 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 fbbc 	bl	80016f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fce4 	bl	800194c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f84:	f000 fc22 	bl	80017cc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f88:	f000 fc4e 	bl	8001828 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000f8c:	f000 fc7c 	bl	8001888 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f90:	f008 fdb8 	bl	8009b04 <MX_USB_HOST_Init>
  MX_USART2_Init();
 8000f94:	f000 fcae 	bl	80018f4 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
	HAL_Delay(100);
 8000f98:	2064      	movs	r0, #100	; 0x64
 8000f9a:	f001 f893 	bl	80020c4 <HAL_Delay>

	// Send reset command to baro sensor on initialization
	buf[0] = BARO_RESET;
 8000f9e:	231e      	movs	r3, #30
 8000fa0:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8000fa2:	23ee      	movs	r3, #238	; 0xee
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	48a2      	ldr	r0, [pc, #648]	; (800123c <main+0x310>)
 8000fb2:	f003 f8c1 	bl	8004138 <HAL_I2C_Master_Transmit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <main+0xa2>
		strcpy((char*)buf, "Error TX_1\r\n");
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	4a9f      	ldr	r2, [pc, #636]	; (8001240 <main+0x314>)
 8000fc4:	461e      	mov	r6, r3
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fca:	c607      	stmia	r6!, {r0, r1, r2}
 8000fcc:	7033      	strb	r3, [r6, #0]
	}
	HAL_Delay(50);
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	f001 f878 	bl	80020c4 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C1;
 8000fd4:	22a0      	movs	r2, #160	; 0xa0
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8000fde:	23ee      	movs	r3, #238	; 0xee
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	1d3a      	adds	r2, r7, #4
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	4893      	ldr	r0, [pc, #588]	; (800123c <main+0x310>)
 8000fee:	f003 f8a3 	bl	8004138 <HAL_I2C_Master_Transmit>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8000ff6:	7ffb      	ldrb	r3, [r7, #31]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <main+0xe0>
		strcpy((char*)buf, "Error TX_1a\r\n");
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4a91      	ldr	r2, [pc, #580]	; (8001244 <main+0x318>)
 8001000:	461e      	mov	r6, r3
 8001002:	4613      	mov	r3, r2
 8001004:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001006:	c607      	stmia	r6!, {r0, r1, r2}
 8001008:	8033      	strh	r3, [r6, #0]
 800100a:	e020      	b.n	800104e <main+0x122>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800100c:	23ee      	movs	r3, #238	; 0xee
 800100e:	b299      	uxth	r1, r3
 8001010:	1d3a      	adds	r2, r7, #4
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2302      	movs	r3, #2
 800101a:	4888      	ldr	r0, [pc, #544]	; (800123c <main+0x310>)
 800101c:	f003 f98a 	bl	8004334 <HAL_I2C_Master_Receive>
 8001020:	4603      	mov	r3, r0
 8001022:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001024:	7ffb      	ldrb	r3, [r7, #31]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <main+0x110>
			  strcpy((char*)buf, "Error Rx\r\n");
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4a86      	ldr	r2, [pc, #536]	; (8001248 <main+0x31c>)
 800102e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001030:	c303      	stmia	r3!, {r0, r1}
 8001032:	801a      	strh	r2, [r3, #0]
 8001034:	3302      	adds	r3, #2
 8001036:	0c12      	lsrs	r2, r2, #16
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e008      	b.n	800104e <main+0x122>
		  } else {
			  C1 = ((buf[0] << 8) | buf[1]);
 800103c:	793b      	ldrb	r3, [r7, #4]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	797b      	ldrb	r3, [r7, #5]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21b      	sxth	r3, r3
 800104a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  }
	}
	HAL_Delay(50);
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f001 f838 	bl	80020c4 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C2;
 8001054:	22a0      	movs	r2, #160	; 0xa0
 8001056:	2304      	movs	r3, #4
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800105e:	23ee      	movs	r3, #238	; 0xee
 8001060:	b299      	uxth	r1, r3
 8001062:	1d3a      	adds	r2, r7, #4
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	4873      	ldr	r0, [pc, #460]	; (800123c <main+0x310>)
 800106e:	f003 f863 	bl	8004138 <HAL_I2C_Master_Transmit>
 8001072:	4603      	mov	r3, r0
 8001074:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001076:	7ffb      	ldrb	r3, [r7, #31]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <main+0x160>
		strcpy((char*)buf, "Error TX_1b\r\n");
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4a73      	ldr	r2, [pc, #460]	; (800124c <main+0x320>)
 8001080:	461e      	mov	r6, r3
 8001082:	4613      	mov	r3, r2
 8001084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001086:	c607      	stmia	r6!, {r0, r1, r2}
 8001088:	8033      	strh	r3, [r6, #0]
 800108a:	e020      	b.n	80010ce <main+0x1a2>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800108c:	23ee      	movs	r3, #238	; 0xee
 800108e:	b299      	uxth	r1, r3
 8001090:	1d3a      	adds	r2, r7, #4
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2302      	movs	r3, #2
 800109a:	4868      	ldr	r0, [pc, #416]	; (800123c <main+0x310>)
 800109c:	f003 f94a 	bl	8004334 <HAL_I2C_Master_Receive>
 80010a0:	4603      	mov	r3, r0
 80010a2:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 80010a4:	7ffb      	ldrb	r3, [r7, #31]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <main+0x190>
			  strcpy((char*)buf, "Error Rx\r\n");
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4a66      	ldr	r2, [pc, #408]	; (8001248 <main+0x31c>)
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	c303      	stmia	r3!, {r0, r1}
 80010b2:	801a      	strh	r2, [r3, #0]
 80010b4:	3302      	adds	r3, #2
 80010b6:	0c12      	lsrs	r2, r2, #16
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e008      	b.n	80010ce <main+0x1a2>
		  } else {
			  C2 = ((buf[0] << 8) | buf[1]);
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	797b      	ldrb	r3, [r7, #5]
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		  }
	}
	HAL_Delay(50);
 80010ce:	2032      	movs	r0, #50	; 0x32
 80010d0:	f000 fff8 	bl	80020c4 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C3;
 80010d4:	22a0      	movs	r2, #160	; 0xa0
 80010d6:	2306      	movs	r3, #6
 80010d8:	4313      	orrs	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80010de:	23ee      	movs	r3, #238	; 0xee
 80010e0:	b299      	uxth	r1, r3
 80010e2:	1d3a      	adds	r2, r7, #4
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	4853      	ldr	r0, [pc, #332]	; (800123c <main+0x310>)
 80010ee:	f003 f823 	bl	8004138 <HAL_I2C_Master_Transmit>
 80010f2:	4603      	mov	r3, r0
 80010f4:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <main+0x1e0>
		strcpy((char*)buf, "Error TX_1c\r\n");
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4a54      	ldr	r2, [pc, #336]	; (8001250 <main+0x324>)
 8001100:	461e      	mov	r6, r3
 8001102:	4613      	mov	r3, r2
 8001104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001106:	c607      	stmia	r6!, {r0, r1, r2}
 8001108:	8033      	strh	r3, [r6, #0]
 800110a:	e020      	b.n	800114e <main+0x222>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800110c:	23ee      	movs	r3, #238	; 0xee
 800110e:	b299      	uxth	r1, r3
 8001110:	1d3a      	adds	r2, r7, #4
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2302      	movs	r3, #2
 800111a:	4848      	ldr	r0, [pc, #288]	; (800123c <main+0x310>)
 800111c:	f003 f90a 	bl	8004334 <HAL_I2C_Master_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001124:	7ffb      	ldrb	r3, [r7, #31]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <main+0x210>
			  strcpy((char*)buf, "Error Rx\r\n");
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4a46      	ldr	r2, [pc, #280]	; (8001248 <main+0x31c>)
 800112e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001130:	c303      	stmia	r3!, {r0, r1}
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	3302      	adds	r3, #2
 8001136:	0c12      	lsrs	r2, r2, #16
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e008      	b.n	800114e <main+0x222>
		  } else {
			  C3 = ((buf[0] << 8) | buf[1]);
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21b      	sxth	r3, r3
 800114a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		  }
	}
	HAL_Delay(50);
 800114e:	2032      	movs	r0, #50	; 0x32
 8001150:	f000 ffb8 	bl	80020c4 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C4;
 8001154:	22a0      	movs	r2, #160	; 0xa0
 8001156:	2308      	movs	r3, #8
 8001158:	4313      	orrs	r3, r2
 800115a:	b2db      	uxtb	r3, r3
 800115c:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800115e:	23ee      	movs	r3, #238	; 0xee
 8001160:	b299      	uxth	r1, r3
 8001162:	1d3a      	adds	r2, r7, #4
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	4833      	ldr	r0, [pc, #204]	; (800123c <main+0x310>)
 800116e:	f002 ffe3 	bl	8004138 <HAL_I2C_Master_Transmit>
 8001172:	4603      	mov	r3, r0
 8001174:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d007      	beq.n	800118c <main+0x260>
		strcpy((char*)buf, "Error TX_1d\r\n");
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4a35      	ldr	r2, [pc, #212]	; (8001254 <main+0x328>)
 8001180:	461e      	mov	r6, r3
 8001182:	4613      	mov	r3, r2
 8001184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001186:	c607      	stmia	r6!, {r0, r1, r2}
 8001188:	8033      	strh	r3, [r6, #0]
 800118a:	e020      	b.n	80011ce <main+0x2a2>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800118c:	23ee      	movs	r3, #238	; 0xee
 800118e:	b299      	uxth	r1, r3
 8001190:	1d3a      	adds	r2, r7, #4
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2302      	movs	r3, #2
 800119a:	4828      	ldr	r0, [pc, #160]	; (800123c <main+0x310>)
 800119c:	f003 f8ca 	bl	8004334 <HAL_I2C_Master_Receive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 80011a4:	7ffb      	ldrb	r3, [r7, #31]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d008      	beq.n	80011bc <main+0x290>
			  strcpy((char*)buf, "Error Rx\r\n");
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4a26      	ldr	r2, [pc, #152]	; (8001248 <main+0x31c>)
 80011ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b0:	c303      	stmia	r3!, {r0, r1}
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	3302      	adds	r3, #2
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e008      	b.n	80011ce <main+0x2a2>
		  } else {
			  C4 = ((buf[0] << 8) | buf[1]);
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		  }
	}
	HAL_Delay(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f000 ff78 	bl	80020c4 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C5;
 80011d4:	22a0      	movs	r2, #160	; 0xa0
 80011d6:	230a      	movs	r3, #10
 80011d8:	4313      	orrs	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80011de:	23ee      	movs	r3, #238	; 0xee
 80011e0:	b299      	uxth	r1, r3
 80011e2:	1d3a      	adds	r2, r7, #4
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <main+0x310>)
 80011ee:	f002 ffa3 	bl	8004138 <HAL_I2C_Master_Transmit>
 80011f2:	4603      	mov	r3, r0
 80011f4:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <main+0x2e0>
		strcpy((char*)buf, "Error TX_1e\r\n");
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4a16      	ldr	r2, [pc, #88]	; (8001258 <main+0x32c>)
 8001200:	461e      	mov	r6, r3
 8001202:	4613      	mov	r3, r2
 8001204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001206:	c607      	stmia	r6!, {r0, r1, r2}
 8001208:	8033      	strh	r3, [r6, #0]
 800120a:	e02f      	b.n	800126c <main+0x340>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800120c:	23ee      	movs	r3, #238	; 0xee
 800120e:	b299      	uxth	r1, r3
 8001210:	1d3a      	adds	r2, r7, #4
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2302      	movs	r3, #2
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <main+0x310>)
 800121c:	f003 f88a 	bl	8004334 <HAL_I2C_Master_Receive>
 8001220:	4603      	mov	r3, r0
 8001222:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d018      	beq.n	800125c <main+0x330>
			  strcpy((char*)buf, "Error Rx\r\n");
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <main+0x31c>)
 800122e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001230:	c303      	stmia	r3!, {r0, r1}
 8001232:	801a      	strh	r2, [r3, #0]
 8001234:	3302      	adds	r3, #2
 8001236:	0c12      	lsrs	r2, r2, #16
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e017      	b.n	800126c <main+0x340>
 800123c:	200000ac 	.word	0x200000ac
 8001240:	0800aa8c 	.word	0x0800aa8c
 8001244:	0800aa9c 	.word	0x0800aa9c
 8001248:	0800aaac 	.word	0x0800aaac
 800124c:	0800aab8 	.word	0x0800aab8
 8001250:	0800aac8 	.word	0x0800aac8
 8001254:	0800aad8 	.word	0x0800aad8
 8001258:	0800aae8 	.word	0x0800aae8
		  } else {
			  C5 = ((buf[0] << 8) | buf[1]);
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	797b      	ldrb	r3, [r7, #5]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  }
	}
	HAL_Delay(50);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 ff29 	bl	80020c4 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C6;
 8001272:	22a0      	movs	r2, #160	; 0xa0
 8001274:	230c      	movs	r3, #12
 8001276:	4313      	orrs	r3, r2
 8001278:	b2db      	uxtb	r3, r3
 800127a:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800127c:	23ee      	movs	r3, #238	; 0xee
 800127e:	b299      	uxth	r1, r3
 8001280:	1d3a      	adds	r2, r7, #4
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	4869      	ldr	r0, [pc, #420]	; (8001430 <main+0x504>)
 800128c:	f002 ff54 	bl	8004138 <HAL_I2C_Master_Transmit>
 8001290:	4603      	mov	r3, r0
 8001292:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <main+0x37e>
		strcpy((char*)buf, "Error TX_1f\r\n");
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4a65      	ldr	r2, [pc, #404]	; (8001434 <main+0x508>)
 800129e:	461e      	mov	r6, r3
 80012a0:	4613      	mov	r3, r2
 80012a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a4:	c607      	stmia	r6!, {r0, r1, r2}
 80012a6:	8033      	strh	r3, [r6, #0]
 80012a8:	e01f      	b.n	80012ea <main+0x3be>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 80012aa:	23ee      	movs	r3, #238	; 0xee
 80012ac:	b299      	uxth	r1, r3
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2302      	movs	r3, #2
 80012b8:	485d      	ldr	r0, [pc, #372]	; (8001430 <main+0x504>)
 80012ba:	f003 f83b 	bl	8004334 <HAL_I2C_Master_Receive>
 80012be:	4603      	mov	r3, r0
 80012c0:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <main+0x3ae>
			  strcpy((char*)buf, "Error Rx\r\n");
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4a5b      	ldr	r2, [pc, #364]	; (8001438 <main+0x50c>)
 80012cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80012ce:	c303      	stmia	r3!, {r0, r1}
 80012d0:	801a      	strh	r2, [r3, #0]
 80012d2:	3302      	adds	r3, #2
 80012d4:	0c12      	lsrs	r2, r2, #16
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	e007      	b.n	80012ea <main+0x3be>
		  } else {
			  C6 = ((buf[0] << 8) | buf[1]);
 80012da:	793b      	ldrb	r3, [r7, #4]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	b21a      	sxth	r2, r3
 80012e0:	797b      	ldrb	r3, [r7, #5]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  }
	}
	HAL_Delay(50);
 80012ea:	2032      	movs	r0, #50	; 0x32
 80012ec:	f000 feea 	bl	80020c4 <HAL_Delay>
  while (1)
  {

	  // Convert to reading pressure values

	  buf[0] = BARO_CONVERT_PRESSURE;
 80012f0:	2348      	movs	r3, #72	; 0x48
 80012f2:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80012f4:	23ee      	movs	r3, #238	; 0xee
 80012f6:	b299      	uxth	r1, r3
 80012f8:	1d3a      	adds	r2, r7, #4
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	484b      	ldr	r0, [pc, #300]	; (8001430 <main+0x504>)
 8001304:	f002 ff18 	bl	8004138 <HAL_I2C_Master_Transmit>
 8001308:	4603      	mov	r3, r0
 800130a:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <main+0x3f4>
		  strcpy((char*)buf, "Error TX_2\r\n");
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4a49      	ldr	r2, [pc, #292]	; (800143c <main+0x510>)
 8001316:	461e      	mov	r6, r3
 8001318:	4613      	mov	r3, r2
 800131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131c:	c607      	stmia	r6!, {r0, r1, r2}
 800131e:	7033      	strb	r3, [r6, #0]
	  }

	  HAL_Delay(15);
 8001320:	200f      	movs	r0, #15
 8001322:	f000 fecf 	bl	80020c4 <HAL_Delay>

	  // Read Pressure value

	  buf[0] = ADC_BARO_READ_ADDR;
 8001326:	2300      	movs	r3, #0
 8001328:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800132a:	23ee      	movs	r3, #238	; 0xee
 800132c:	b299      	uxth	r1, r3
 800132e:	1d3a      	adds	r2, r7, #4
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2301      	movs	r3, #1
 8001338:	483d      	ldr	r0, [pc, #244]	; (8001430 <main+0x504>)
 800133a:	f002 fefd 	bl	8004138 <HAL_I2C_Master_Transmit>
 800133e:	4603      	mov	r3, r0
 8001340:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <main+0x42c>
		  strcpy((char*)buf, "Error TX_3\r\n");
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <main+0x514>)
 800134c:	461e      	mov	r6, r3
 800134e:	4613      	mov	r3, r2
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	c607      	stmia	r6!, {r0, r1, r2}
 8001354:	7033      	strb	r3, [r6, #0]
 8001356:	e01f      	b.n	8001398 <main+0x46c>
	  } else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 8001358:	23ee      	movs	r3, #238	; 0xee
 800135a:	b299      	uxth	r1, r3
 800135c:	1d3a      	adds	r2, r7, #4
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2303      	movs	r3, #3
 8001366:	4832      	ldr	r0, [pc, #200]	; (8001430 <main+0x504>)
 8001368:	f002 ffe4 	bl	8004334 <HAL_I2C_Master_Receive>
 800136c:	4603      	mov	r3, r0
 800136e:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001370:	7ffb      	ldrb	r3, [r7, #31]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <main+0x45c>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <main+0x50c>)
 800137a:	ca07      	ldmia	r2, {r0, r1, r2}
 800137c:	c303      	stmia	r3!, {r0, r1}
 800137e:	801a      	strh	r2, [r3, #0]
 8001380:	3302      	adds	r3, #2
 8001382:	0c12      	lsrs	r2, r2, #16
 8001384:	701a      	strb	r2, [r3, #0]
 8001386:	e007      	b.n	8001398 <main+0x46c>
		  } else {
			  pressure = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 8001388:	793b      	ldrb	r3, [r7, #4]
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	797b      	ldrb	r3, [r7, #5]
 800138e:	021b      	lsls	r3, r3, #8
 8001390:	4313      	orrs	r3, r2
 8001392:	79ba      	ldrb	r2, [r7, #6]
 8001394:	4313      	orrs	r3, r2
 8001396:	63bb      	str	r3, [r7, #56]	; 0x38
		  }
	  }

	  //Convert to reading temperature value

	  buf[0] = BARO_CONVERT_TEMP;
 8001398:	2358      	movs	r3, #88	; 0x58
 800139a:	713b      	strb	r3, [r7, #4]
	 	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800139c:	23ee      	movs	r3, #238	; 0xee
 800139e:	b299      	uxth	r1, r3
 80013a0:	1d3a      	adds	r2, r7, #4
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	4821      	ldr	r0, [pc, #132]	; (8001430 <main+0x504>)
 80013ac:	f002 fec4 	bl	8004138 <HAL_I2C_Master_Transmit>
 80013b0:	4603      	mov	r3, r0
 80013b2:	77fb      	strb	r3, [r7, #31]
	 	  if (ret != HAL_OK){
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <main+0x49c>
	 		  strcpy((char*)buf, "Error TX_2\r\n");
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <main+0x510>)
 80013be:	461e      	mov	r6, r3
 80013c0:	4613      	mov	r3, r2
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	c607      	stmia	r6!, {r0, r1, r2}
 80013c6:	7033      	strb	r3, [r6, #0]
	 	  }

	  HAL_Delay(15);
 80013c8:	200f      	movs	r0, #15
 80013ca:	f000 fe7b 	bl	80020c4 <HAL_Delay>

	  // Read temperature value

	  buf[0] = ADC_BARO_READ_ADDR;
 80013ce:	2300      	movs	r3, #0
 80013d0:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80013d2:	23ee      	movs	r3, #238	; 0xee
 80013d4:	b299      	uxth	r1, r3
 80013d6:	1d3a      	adds	r2, r7, #4
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2301      	movs	r3, #1
 80013e0:	4813      	ldr	r0, [pc, #76]	; (8001430 <main+0x504>)
 80013e2:	f002 fea9 	bl	8004138 <HAL_I2C_Master_Transmit>
 80013e6:	4603      	mov	r3, r0
 80013e8:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 80013ea:	7ffb      	ldrb	r3, [r7, #31]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <main+0x4d4>
		  strcpy((char*)buf, "Error TX_3\r\n");
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <main+0x514>)
 80013f4:	461e      	mov	r6, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fa:	c607      	stmia	r6!, {r0, r1, r2}
 80013fc:	7033      	strb	r3, [r6, #0]
 80013fe:	e029      	b.n	8001454 <main+0x528>
	  } else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 8001400:	23ee      	movs	r3, #238	; 0xee
 8001402:	b299      	uxth	r1, r3
 8001404:	1d3a      	adds	r2, r7, #4
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2303      	movs	r3, #3
 800140e:	4808      	ldr	r0, [pc, #32]	; (8001430 <main+0x504>)
 8001410:	f002 ff90 	bl	8004334 <HAL_I2C_Master_Receive>
 8001414:	4603      	mov	r3, r0
 8001416:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001418:	7ffb      	ldrb	r3, [r7, #31]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d012      	beq.n	8001444 <main+0x518>
			  strcpy((char*)buf, "Error Rx\r\n");
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4a05      	ldr	r2, [pc, #20]	; (8001438 <main+0x50c>)
 8001422:	ca07      	ldmia	r2, {r0, r1, r2}
 8001424:	c303      	stmia	r3!, {r0, r1}
 8001426:	801a      	strh	r2, [r3, #0]
 8001428:	3302      	adds	r3, #2
 800142a:	0c12      	lsrs	r2, r2, #16
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e011      	b.n	8001454 <main+0x528>
 8001430:	200000ac 	.word	0x200000ac
 8001434:	0800aaf8 	.word	0x0800aaf8
 8001438:	0800aaac 	.word	0x0800aaac
 800143c:	0800ab08 	.word	0x0800ab08
 8001440:	0800ab18 	.word	0x0800ab18
		  } else {
			  temp = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	041a      	lsls	r2, r3, #16
 8001448:	797b      	ldrb	r3, [r7, #5]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	4313      	orrs	r3, r2
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
		  }
	  }

	  dT = temp - C5*pow(2,8);
 8001454:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001456:	f7ff f855 	bl	8000504 <__aeabi_ui2d>
 800145a:	4682      	mov	sl, r0
 800145c:	468b      	mov	fp, r1
 800145e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f85f 	bl	8000524 <__aeabi_i2d>
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b96      	ldr	r3, [pc, #600]	; (80016c4 <main+0x798>)
 800146c:	f7ff f8c4 	bl	80005f8 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4650      	mov	r0, sl
 8001476:	4659      	mov	r1, fp
 8001478:	f7fe ff06 	bl	8000288 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff faca 	bl	8000a1c <__aeabi_d2iz>
 8001488:	4603      	mov	r3, r0
 800148a:	633b      	str	r3, [r7, #48]	; 0x30
	  TEMP = 2000 + dT*C6/pow(2,23);
 800148c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800148e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f845 	bl	8000524 <__aeabi_i2d>
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b8a      	ldr	r3, [pc, #552]	; (80016c8 <main+0x79c>)
 80014a0:	f7ff f9d4 	bl	800084c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	4b86      	ldr	r3, [pc, #536]	; (80016cc <main+0x7a0>)
 80014b2:	f7fe feeb 	bl	800028c <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff faad 	bl	8000a1c <__aeabi_d2iz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	61bb      	str	r3, [r7, #24]
	  strcpy((char*)buf, "Temperature: ");
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4a81      	ldr	r2, [pc, #516]	; (80016d0 <main+0x7a4>)
 80014ca:	461e      	mov	r6, r3
 80014cc:	4613      	mov	r3, r2
 80014ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d0:	c607      	stmia	r6!, {r0, r1, r2}
 80014d2:	8033      	strh	r3, [r6, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe7a 	bl	80001d0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	1d39      	adds	r1, r7, #4
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	487b      	ldr	r0, [pc, #492]	; (80016d4 <main+0x7a8>)
 80014e8:	f004 ffba 	bl	8006460 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i.%02u C\r\n", (int)TEMP/100, (unsigned int)TEMP%100);
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <main+0x7ac>)
 80014f0:	fb82 1203 	smull	r1, r2, r2, r3
 80014f4:	1152      	asrs	r2, r2, #5
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad1      	subs	r1, r2, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4b76      	ldr	r3, [pc, #472]	; (80016d8 <main+0x7ac>)
 80014fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2064      	movs	r0, #100	; 0x64
 8001506:	fb00 f303 	mul.w	r3, r0, r3
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	1d38      	adds	r0, r7, #4
 800150e:	460a      	mov	r2, r1
 8001510:	4972      	ldr	r1, [pc, #456]	; (80016dc <main+0x7b0>)
 8001512:	f008 ff31 	bl	800a378 <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe fe59 	bl	80001d0 <strlen>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	1d39      	adds	r1, r7, #4
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	486a      	ldr	r0, [pc, #424]	; (80016d4 <main+0x7a8>)
 800152a:	f004 ff99 	bl	8006460 <HAL_USART_Transmit>

	  OFF = C2*pow(2,16) + (C4*dT)/pow(2,7);
 800152e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fff6 	bl	8000524 <__aeabi_i2d>
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <main+0x7b4>)
 800153e:	f7ff f85b 	bl	80005f8 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4692      	mov	sl, r2
 8001548:	469b      	mov	fp, r3
 800154a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800154e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001550:	fb02 f303 	mul.w	r3, r2, r3
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffe5 	bl	8000524 <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <main+0x7b8>)
 8001560:	f7ff f974 	bl	800084c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4650      	mov	r0, sl
 800156a:	4659      	mov	r1, fp
 800156c:	f7fe fe8e 	bl	800028c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fa90 	bl	8000a9c <__aeabi_d2lz>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  SENS = C1*pow(2,15) + (C3*dT)/pow(2,8);
 8001584:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffcb 	bl	8000524 <__aeabi_i2d>
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <main+0x7bc>)
 8001594:	f7ff f830 	bl	80005f8 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4692      	mov	sl, r2
 800159e:	469b      	mov	fp, r3
 80015a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80015a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015a6:	fb02 f303 	mul.w	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffba 	bl	8000524 <__aeabi_i2d>
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <main+0x798>)
 80015b6:	f7ff f949 	bl	800084c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4650      	mov	r0, sl
 80015c0:	4659      	mov	r1, fp
 80015c2:	f7fe fe63 	bl	800028c <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa65 	bl	8000a9c <__aeabi_d2lz>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  P = (pressure*SENS/pow(2,21) - OFF)/pow(2,15);
 80015da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015dc:	2200      	movs	r2, #0
 80015de:	4698      	mov	r8, r3
 80015e0:	4691      	mov	r9, r2
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	fb09 f203 	mul.w	r2, r9, r3
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	fb08 f303 	mul.w	r3, r8, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	6a3a      	ldr	r2, [r7, #32]
 80015f2:	fba2 4508 	umull	r4, r5, r2, r8
 80015f6:	442b      	add	r3, r5
 80015f8:	461d      	mov	r5, r3
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe ffcd 	bl	800059c <__aeabi_l2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <main+0x7c0>)
 8001608:	f7ff f920 	bl	800084c <__aeabi_ddiv>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4692      	mov	sl, r2
 8001612:	469b      	mov	fp, r3
 8001614:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001618:	f7fe ffc0 	bl	800059c <__aeabi_l2d>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4650      	mov	r0, sl
 8001622:	4659      	mov	r1, fp
 8001624:	f7fe fe30 	bl	8000288 <__aeabi_dsub>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <main+0x7bc>)
 8001636:	f7ff f909 	bl	800084c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff f9eb 	bl	8000a1c <__aeabi_d2iz>
 8001646:	4603      	mov	r3, r0
 8001648:	617b      	str	r3, [r7, #20]

	  strcpy((char*)buf, "Pressure: ");
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <main+0x7c4>)
 800164e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001650:	c303      	stmia	r3!, {r0, r1}
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	3302      	adds	r3, #2
 8001656:	0c12      	lsrs	r2, r2, #16
 8001658:	701a      	strb	r2, [r3, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe fdb7 	bl	80001d0 <strlen>
 8001662:	4603      	mov	r3, r0
 8001664:	b29a      	uxth	r2, r3
 8001666:	1d39      	adds	r1, r7, #4
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	4819      	ldr	r0, [pc, #100]	; (80016d4 <main+0x7a8>)
 800166e:	f004 fef7 	bl	8006460 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i.%02u Pa\r\n", (int)P/100, (unsigned int)P % 100 );
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <main+0x7ac>)
 8001676:	fb82 1203 	smull	r1, r2, r2, r3
 800167a:	1152      	asrs	r2, r2, #5
 800167c:	17db      	asrs	r3, r3, #31
 800167e:	1ad1      	subs	r1, r2, r3
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <main+0x7ac>)
 8001684:	fba3 0302 	umull	r0, r3, r3, r2
 8001688:	095b      	lsrs	r3, r3, #5
 800168a:	2064      	movs	r0, #100	; 0x64
 800168c:	fb00 f303 	mul.w	r3, r0, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	1d38      	adds	r0, r7, #4
 8001694:	460a      	mov	r2, r1
 8001696:	4917      	ldr	r1, [pc, #92]	; (80016f4 <main+0x7c8>)
 8001698:	f008 fe6e 	bl	800a378 <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fd96 	bl	80001d0 <strlen>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	1d39      	adds	r1, r7, #4
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <main+0x7a8>)
 80016b0:	f004 fed6 	bl	8006460 <HAL_USART_Transmit>

	  HAL_Delay(500);
 80016b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b8:	f000 fd04 	bl	80020c4 <HAL_Delay>
	  /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80016bc:	f008 fa48 	bl	8009b50 <MX_USB_HOST_Process>
	  buf[0] = BARO_CONVERT_PRESSURE;
 80016c0:	e616      	b.n	80012f0 <main+0x3c4>
 80016c2:	bf00      	nop
 80016c4:	40700000 	.word	0x40700000
 80016c8:	41600000 	.word	0x41600000
 80016cc:	409f4000 	.word	0x409f4000
 80016d0:	0800ab28 	.word	0x0800ab28
 80016d4:	200001a0 	.word	0x200001a0
 80016d8:	51eb851f 	.word	0x51eb851f
 80016dc:	0800ab38 	.word	0x0800ab38
 80016e0:	40f00000 	.word	0x40f00000
 80016e4:	40600000 	.word	0x40600000
 80016e8:	40e00000 	.word	0x40e00000
 80016ec:	41400000 	.word	0x41400000
 80016f0:	0800ab44 	.word	0x0800ab44
 80016f4:	0800ab50 	.word	0x0800ab50

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b094      	sub	sp, #80	; 0x50
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2230      	movs	r2, #48	; 0x30
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f008 fd3e 	bl	800a188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <SystemClock_Config+0xcc>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	4a27      	ldr	r2, [pc, #156]	; (80017c4 <SystemClock_Config+0xcc>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172a:	6413      	str	r3, [r2, #64]	; 0x40
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <SystemClock_Config+0xcc>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <SystemClock_Config+0xd0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <SystemClock_Config+0xd0>)
 8001742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <SystemClock_Config+0xd0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001754:	2301      	movs	r3, #1
 8001756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175e:	2302      	movs	r3, #2
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001768:	2308      	movs	r3, #8
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800176c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001770:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001776:	2307      	movs	r3, #7
 8001778:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	4618      	mov	r0, r3
 8001780:	f003 ffcc 	bl	800571c <HAL_RCC_OscConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800178a:	f000 f9dd 	bl	8001b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
 8001790:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	2302      	movs	r3, #2
 8001794:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800179a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800179e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2105      	movs	r1, #5
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 fa2d 	bl	8005c0c <HAL_RCC_ClockConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017b8:	f000 f9c6 	bl	8001b48 <Error_Handler>
  }
}
 80017bc:	bf00      	nop
 80017be:	3750      	adds	r7, #80	; 0x50
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000

080017cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_I2C1_Init+0x50>)
 80017d2:	4a13      	ldr	r2, [pc, #76]	; (8001820 <MX_I2C1_Init+0x54>)
 80017d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_I2C1_Init+0x50>)
 80017d8:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_I2C1_Init+0x58>)
 80017da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_I2C1_Init+0x50>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_I2C1_Init+0x50>)
 800180a:	f002 fb51 	bl	8003eb0 <HAL_I2C_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001814:	f000 f998 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200000ac 	.word	0x200000ac
 8001820:	40005400 	.word	0x40005400
 8001824:	000186a0 	.word	0x000186a0

08001828 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_I2S3_Init+0x54>)
 800182e:	4a14      	ldr	r2, [pc, #80]	; (8001880 <MX_I2S3_Init+0x58>)
 8001830:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_I2S3_Init+0x54>)
 8001834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001838:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_I2S3_Init+0x54>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_I2S3_Init+0x54>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <MX_I2S3_Init+0x54>)
 8001848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_I2S3_Init+0x54>)
 8001850:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <MX_I2S3_Init+0x5c>)
 8001852:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_I2S3_Init+0x54>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_I2S3_Init+0x54>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_I2S3_Init+0x54>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_I2S3_Init+0x54>)
 8001868:	f003 fab8 	bl	8004ddc <HAL_I2S_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001872:	f000 f969 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000100 	.word	0x20000100
 8001880:	40003c00 	.word	0x40003c00
 8001884:	00017700 	.word	0x00017700

08001888 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_SPI1_Init+0x64>)
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <MX_SPI1_Init+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_SPI1_Init+0x64>)
 8001894:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001898:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_SPI1_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_SPI1_Init+0x64>)
 80018b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_SPI1_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_SPI1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_SPI1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_SPI1_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_SPI1_Init+0x64>)
 80018d4:	220a      	movs	r2, #10
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_SPI1_Init+0x64>)
 80018da:	f004 fcf7 	bl	80062cc <HAL_SPI_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018e4:	f000 f930 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000148 	.word	0x20000148
 80018f0:	40013000 	.word	0x40013000

080018f4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_USART2_Init+0x50>)
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <MX_USART2_Init+0x54>)
 80018fc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART2_Init+0x50>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_USART2_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <MX_USART2_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART2_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <MX_USART2_Init+0x50>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART2_Init+0x50>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001924:	4b07      	ldr	r3, [pc, #28]	; (8001944 <MX_USART2_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART2_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <MX_USART2_Init+0x50>)
 8001932:	f004 fd54 	bl	80063de <HAL_USART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 800193c:	f000 f904 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200001a0 	.word	0x200001a0
 8001948:	40004400 	.word	0x40004400

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	4b72      	ldr	r3, [pc, #456]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a71      	ldr	r2, [pc, #452]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a6a      	ldr	r2, [pc, #424]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b64      	ldr	r3, [pc, #400]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a63      	ldr	r2, [pc, #396]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a5c      	ldr	r2, [pc, #368]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a55      	ldr	r2, [pc, #340]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 80019f8:	f043 0308 	orr.w	r3, r3, #8
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <MX_GPIO_Init+0x1e4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	4849      	ldr	r0, [pc, #292]	; (8001b34 <MX_GPIO_Init+0x1e8>)
 8001a10:	f000 fe2a 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2101      	movs	r1, #1
 8001a18:	4847      	ldr	r0, [pc, #284]	; (8001b38 <MX_GPIO_Init+0x1ec>)
 8001a1a:	f000 fe25 	bl	8002668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001a24:	4845      	ldr	r0, [pc, #276]	; (8001b3c <MX_GPIO_Init+0x1f0>)
 8001a26:	f000 fe1f 	bl	8002668 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	483c      	ldr	r0, [pc, #240]	; (8001b34 <MX_GPIO_Init+0x1e8>)
 8001a42:	f000 fc75 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a46:	2301      	movs	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4836      	ldr	r0, [pc, #216]	; (8001b38 <MX_GPIO_Init+0x1ec>)
 8001a5e:	f000 fc67 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a62:	2308      	movs	r3, #8
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a72:	2305      	movs	r3, #5
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	482e      	ldr	r0, [pc, #184]	; (8001b38 <MX_GPIO_Init+0x1ec>)
 8001a7e:	f000 fc57 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	482a      	ldr	r0, [pc, #168]	; (8001b40 <MX_GPIO_Init+0x1f4>)
 8001a98:	f000 fc4a 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4825      	ldr	r0, [pc, #148]	; (8001b44 <MX_GPIO_Init+0x1f8>)
 8001ab0:	f000 fc3e 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481c      	ldr	r0, [pc, #112]	; (8001b44 <MX_GPIO_Init+0x1f8>)
 8001ad2:	f000 fc2d 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ad6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001ada:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_GPIO_Init+0x1f0>)
 8001af0:	f000 fc1e 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001af4:	2320      	movs	r3, #32
 8001af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <MX_GPIO_Init+0x1f0>)
 8001b08:	f000 fc12 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_GPIO_Init+0x1e8>)
 8001b22:	f000 fc05 	bl	8002330 <HAL_GPIO_Init>

}
 8001b26:	bf00      	nop
 8001b28:	3730      	adds	r7, #48	; 0x30
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40020000 	.word	0x40020000
 8001b44:	40020400 	.word	0x40020400

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <Error_Handler+0x8>
	...

08001b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a0f      	ldr	r2, [pc, #60]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b92:	2007      	movs	r0, #7
 8001b94:	f000 fb8a 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_I2C_MspInit+0x84>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001be2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <HAL_I2C_MspInit+0x8c>)
 8001c00:	f000 fb96 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c12:	6413      	str	r3, [r2, #64]	; 0x40
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_I2C_MspInit+0x88>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40005400 	.word	0x40005400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020400 	.word	0x40020400

08001c34 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08e      	sub	sp, #56	; 0x38
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <HAL_I2S_MspInit+0xf0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d15a      	bne.n	8001d1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c64:	2301      	movs	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001c68:	23c0      	movs	r3, #192	; 0xc0
 8001c6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f9e9 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001c80:	f7ff ff62 	bl	8001b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c92:	6413      	str	r3, [r2, #64]	; 0x40
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	4a18      	ldr	r2, [pc, #96]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6313      	str	r3, [r2, #48]	; 0x30
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_I2S_MspInit+0xf4>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cd8:	2310      	movs	r3, #16
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ce8:	2306      	movs	r3, #6
 8001cea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480e      	ldr	r0, [pc, #56]	; (8001d2c <HAL_I2S_MspInit+0xf8>)
 8001cf4:	f000 fb1c 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001cf8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4806      	ldr	r0, [pc, #24]	; (8001d30 <HAL_I2S_MspInit+0xfc>)
 8001d16:	f000 fb0b 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3738      	adds	r7, #56	; 0x38
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40003c00 	.word	0x40003c00
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020800 	.word	0x40020800

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_SPI_MspInit+0x84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12b      	bne.n	8001dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_SPI_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d8e:	23e0      	movs	r3, #224	; 0xe0
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d9e:	2305      	movs	r3, #5
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <HAL_SPI_MspInit+0x8c>)
 8001daa:	f000 fac1 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40013000 	.word	0x40013000
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_USART_MspInit+0xc0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d149      	bne.n	8001e7a <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a26      	ldr	r2, [pc, #152]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001e28:	f043 0308 	orr.w	r3, r3, #8
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <HAL_USART_MspInit+0xc4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <HAL_USART_MspInit+0xc8>)
 8001e56:	f000 fa6b 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e66:	2303      	movs	r3, #3
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	4619      	mov	r1, r3
 8001e74:	4806      	ldr	r0, [pc, #24]	; (8001e90 <HAL_USART_MspInit+0xcc>)
 8001e76:	f000 fa5b 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40004400 	.word	0x40004400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	40020c00 	.word	0x40020c00

08001e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <NMI_Handler+0x4>

08001e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <HardFault_Handler+0x4>

08001ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler+0x4>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee0:	f000 f8d0 	bl	8002084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <OTG_FS_IRQHandler+0x10>)
 8001eee:	f000 fe3f 	bl	8002b70 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200005c8 	.word	0x200005c8

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f008 f8f2 	bl	800a114 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20020000 	.word	0x20020000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	200001e4 	.word	0x200001e4
 8001f64:	200008e0 	.word	0x200008e0

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f94:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f98:	e002      	b.n	8001fa0 <LoopCopyDataInit>

08001f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9e:	3304      	adds	r3, #4

08001fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa4:	d3f9      	bcc.n	8001f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa8:	4c0b      	ldr	r4, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fac:	e001      	b.n	8001fb2 <LoopFillZerobss>

08001fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb0:	3204      	adds	r2, #4

08001fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb4:	d3fb      	bcc.n	8001fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb6:	f7ff ffd7 	bl	8001f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fba:	f008 f8b1 	bl	800a120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fbe:	f7fe ffb5 	bl	8000f2c <main>
  bx  lr    
 8001fc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001fd0:	0800abc0 	.word	0x0800abc0
  ldr r2, =_sbss
 8001fd4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001fd8:	200008dc 	.word	0x200008dc

08001fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe4:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_Init+0x40>)
 8001fea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_Init+0x40>)
 8001ff6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_Init+0x40>)
 8002002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002006:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f94f 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200e:	2000      	movs	r0, #0
 8002010:	f000 f808 	bl	8002024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002014:	f7ff fd9e 	bl	8001b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_InitTick+0x54>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x58>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	fbb3 f3f1 	udiv	r3, r3, r1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f967 	bl	8002316 <HAL_SYSTICK_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e00e      	b.n	8002070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d80a      	bhi.n	800206e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	f04f 30ff 	mov.w	r0, #4294967295
 8002060:	f000 f92f 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002064:	4a06      	ldr	r2, [pc, #24]	; (8002080 <HAL_InitTick+0x5c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	e000      	b.n	8002070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000000 	.word	0x20000000
 800207c:	20000008 	.word	0x20000008
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_IncTick+0x20>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	461a      	mov	r2, r3
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4413      	add	r3, r2
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_IncTick+0x24>)
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000008 	.word	0x20000008
 80020a8:	200001e8 	.word	0x200001e8

080020ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return uwTick;
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_GetTick+0x14>)
 80020b2:	681b      	ldr	r3, [r3, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200001e8 	.word	0x200001e8

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff ffee 	bl	80020ac <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d005      	beq.n	80020ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_Delay+0x44>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffde 	bl	80020ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d8f7      	bhi.n	80020ec <HAL_Delay+0x28>
  {
  }
}
 80020fc:	bf00      	nop
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000008 	.word	0x20000008

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <__NVIC_EnableIRQ+0x38>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff29 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d4:	f7ff ff3e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff8e 	bl	8002200 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff31 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffa2 	bl	8002268 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e16b      	b.n	8002624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 815a 	bne.w	800261e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d005      	beq.n	8002382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	2b02      	cmp	r3, #2
 8002380:	d130      	bne.n	80023e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023b8:	2201      	movs	r2, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0201 	and.w	r2, r3, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d017      	beq.n	8002420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80b4 	beq.w	800261e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b60      	ldr	r3, [pc, #384]	; (800263c <HAL_GPIO_Init+0x30c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a5f      	ldr	r2, [pc, #380]	; (800263c <HAL_GPIO_Init+0x30c>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_GPIO_Init+0x30c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d2:	4a5b      	ldr	r2, [pc, #364]	; (8002640 <HAL_GPIO_Init+0x310>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a52      	ldr	r2, [pc, #328]	; (8002644 <HAL_GPIO_Init+0x314>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <HAL_GPIO_Init+0x226>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a51      	ldr	r2, [pc, #324]	; (8002648 <HAL_GPIO_Init+0x318>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d025      	beq.n	8002552 <HAL_GPIO_Init+0x222>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a50      	ldr	r2, [pc, #320]	; (800264c <HAL_GPIO_Init+0x31c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01f      	beq.n	800254e <HAL_GPIO_Init+0x21e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4f      	ldr	r2, [pc, #316]	; (8002650 <HAL_GPIO_Init+0x320>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x21a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4e      	ldr	r2, [pc, #312]	; (8002654 <HAL_GPIO_Init+0x324>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x216>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4d      	ldr	r2, [pc, #308]	; (8002658 <HAL_GPIO_Init+0x328>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x212>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4c      	ldr	r2, [pc, #304]	; (800265c <HAL_GPIO_Init+0x32c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x20e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4b      	ldr	r2, [pc, #300]	; (8002660 <HAL_GPIO_Init+0x330>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x20a>
 8002536:	2307      	movs	r3, #7
 8002538:	e00e      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800253a:	2308      	movs	r3, #8
 800253c:	e00c      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800253e:	2306      	movs	r3, #6
 8002540:	e00a      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002542:	2305      	movs	r3, #5
 8002544:	e008      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002546:	2304      	movs	r3, #4
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800254a:	2303      	movs	r3, #3
 800254c:	e004      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800254e:	2302      	movs	r3, #2
 8002550:	e002      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002556:	2300      	movs	r3, #0
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f002 0203 	and.w	r2, r2, #3
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	4093      	lsls	r3, r2
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002568:	4935      	ldr	r1, [pc, #212]	; (8002640 <HAL_GPIO_Init+0x310>)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_GPIO_Init+0x334>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800259a:	4a32      	ldr	r2, [pc, #200]	; (8002664 <HAL_GPIO_Init+0x334>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a0:	4b30      	ldr	r3, [pc, #192]	; (8002664 <HAL_GPIO_Init+0x334>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c4:	4a27      	ldr	r2, [pc, #156]	; (8002664 <HAL_GPIO_Init+0x334>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <HAL_GPIO_Init+0x334>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_GPIO_Init+0x334>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <HAL_GPIO_Init+0x334>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002618:	4a12      	ldr	r2, [pc, #72]	; (8002664 <HAL_GPIO_Init+0x334>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	f67f ae90 	bls.w	800234c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40013800 	.word	0x40013800
 8002644:	40020000 	.word	0x40020000
 8002648:	40020400 	.word	0x40020400
 800264c:	40020800 	.word	0x40020800
 8002650:	40020c00 	.word	0x40020c00
 8002654:	40021000 	.word	0x40021000
 8002658:	40021400 	.word	0x40021400
 800265c:	40021800 	.word	0x40021800
 8002660:	40021c00 	.word	0x40021c00
 8002664:	40013c00 	.word	0x40013c00

08002668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	807b      	strh	r3, [r7, #2]
 8002674:	4613      	mov	r3, r2
 8002676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002678:	787b      	ldrb	r3, [r7, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002684:	e003      	b.n	800268e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	041a      	lsls	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	619a      	str	r2, [r3, #24]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800269a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269c:	b08f      	sub	sp, #60	; 0x3c
 800269e:	af0a      	add	r7, sp, #40	; 0x28
 80026a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e054      	b.n	8002756 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f007 fa7a 	bl	8009bc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 faa8 	bl	8006c40 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	687e      	ldr	r6, [r7, #4]
 80026f8:	466d      	mov	r5, sp
 80026fa:	f106 0410 	add.w	r4, r6, #16
 80026fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800270a:	e885 0003 	stmia.w	r5, {r0, r1}
 800270e:	1d33      	adds	r3, r6, #4
 8002710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	f004 fa22 	bl	8006b5c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fa9f 	bl	8006c62 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	687e      	ldr	r6, [r7, #4]
 800272c:	466d      	mov	r5, sp
 800272e:	f106 0410 	add.w	r4, r6, #16
 8002732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800273a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800273e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002742:	1d33      	adds	r3, r6, #4
 8002744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	f004 fc28 	bl	8006f9c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800275e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800275e:	b590      	push	{r4, r7, lr}
 8002760:	b089      	sub	sp, #36	; 0x24
 8002762:	af04      	add	r7, sp, #16
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	4608      	mov	r0, r1
 8002768:	4611      	mov	r1, r2
 800276a:	461a      	mov	r2, r3
 800276c:	4603      	mov	r3, r0
 800276e:	70fb      	strb	r3, [r7, #3]
 8002770:	460b      	mov	r3, r1
 8002772:	70bb      	strb	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_HCD_HC_Init+0x28>
 8002782:	2302      	movs	r3, #2
 8002784:	e076      	b.n	8002874 <HAL_HCD_HC_Init+0x116>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	333d      	adds	r3, #61	; 0x3d
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3338      	adds	r3, #56	; 0x38
 80027ae:	787a      	ldrb	r2, [r7, #1]
 80027b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3340      	adds	r3, #64	; 0x40
 80027c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80027c2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3339      	adds	r3, #57	; 0x39
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333f      	adds	r3, #63	; 0x3f
 80027e4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80027e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	78ba      	ldrb	r2, [r7, #2]
 80027ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027f2:	b2d0      	uxtb	r0, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	333a      	adds	r3, #58	; 0x3a
 8002800:	4602      	mov	r2, r0
 8002802:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002804:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da09      	bge.n	8002820 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	333b      	adds	r3, #59	; 0x3b
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e008      	b.n	8002832 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	333b      	adds	r3, #59	; 0x3b
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	333c      	adds	r3, #60	; 0x3c
 8002840:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002844:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	787c      	ldrb	r4, [r7, #1]
 800284c:	78ba      	ldrb	r2, [r7, #2]
 800284e:	78f9      	ldrb	r1, [r7, #3]
 8002850:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	4623      	mov	r3, r4
 8002862:	f004 fd21 	bl	80072a8 <USB_HC_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bd90      	pop	{r4, r7, pc}

0800287c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_HCD_HC_Halt+0x1e>
 8002896:	2302      	movs	r3, #2
 8002898:	e00f      	b.n	80028ba <HAL_HCD_HC_Halt+0x3e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 ff71 	bl	8007792 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	70fb      	strb	r3, [r7, #3]
 80028d6:	460b      	mov	r3, r1
 80028d8:	70bb      	strb	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	333b      	adds	r3, #59	; 0x3b
 80028ec:	78ba      	ldrb	r2, [r7, #2]
 80028ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	333f      	adds	r3, #63	; 0x3f
 80028fe:	787a      	ldrb	r2, [r7, #1]
 8002900:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002902:	7c3b      	ldrb	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d112      	bne.n	800292e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3342      	adds	r3, #66	; 0x42
 8002916:	2203      	movs	r2, #3
 8002918:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	333d      	adds	r3, #61	; 0x3d
 8002928:	7f3a      	ldrb	r2, [r7, #28]
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	e008      	b.n	8002940 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3342      	adds	r3, #66	; 0x42
 800293c:	2202      	movs	r2, #2
 800293e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002940:	787b      	ldrb	r3, [r7, #1]
 8002942:	2b03      	cmp	r3, #3
 8002944:	f200 80c6 	bhi.w	8002ad4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002961 	.word	0x08002961
 8002954:	08002ac1 	.word	0x08002ac1
 8002958:	080029c5 	.word	0x080029c5
 800295c:	08002a43 	.word	0x08002a43
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002960:	7c3b      	ldrb	r3, [r7, #16]
 8002962:	2b01      	cmp	r3, #1
 8002964:	f040 80b8 	bne.w	8002ad8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002968:	78bb      	ldrb	r3, [r7, #2]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 80b4 	bne.w	8002ad8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002970:	8b3b      	ldrh	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d108      	bne.n	8002988 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3355      	adds	r3, #85	; 0x55
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3355      	adds	r3, #85	; 0x55
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3342      	adds	r3, #66	; 0x42
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029ae:	e093      	b.n	8002ad8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3342      	adds	r3, #66	; 0x42
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
      break;
 80029c2:	e089      	b.n	8002ad8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80029c4:	78bb      	ldrb	r3, [r7, #2]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3355      	adds	r3, #85	; 0x55
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3342      	adds	r3, #66	; 0x42
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80029f0:	e073      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3342      	adds	r3, #66	; 0x42
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]
      break;
 8002a04:	e069      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3354      	adds	r3, #84	; 0x54
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3342      	adds	r3, #66	; 0x42
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
      break;
 8002a2c:	e055      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3342      	adds	r3, #66	; 0x42
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	701a      	strb	r2, [r3, #0]
      break;
 8002a40:	e04b      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a42:	78bb      	ldrb	r3, [r7, #2]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d11d      	bne.n	8002a84 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3355      	adds	r3, #85	; 0x55
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3342      	adds	r3, #66	; 0x42
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a6e:	e034      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3342      	adds	r3, #66	; 0x42
 8002a7e:	2202      	movs	r2, #2
 8002a80:	701a      	strb	r2, [r3, #0]
      break;
 8002a82:	e02a      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3354      	adds	r3, #84	; 0x54
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3342      	adds	r3, #66	; 0x42
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
      break;
 8002aaa:	e016      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3342      	adds	r3, #66	; 0x42
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
      break;
 8002abe:	e00c      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3342      	adds	r3, #66	; 0x42
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
      break;
 8002ad2:	e002      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002ad8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3344      	adds	r3, #68	; 0x44
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	8b3a      	ldrh	r2, [r7, #24]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	202c      	movs	r0, #44	; 0x2c
 8002af4:	fb00 f303 	mul.w	r3, r0, r3
 8002af8:	440b      	add	r3, r1
 8002afa:	334c      	adds	r3, #76	; 0x4c
 8002afc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	212c      	movs	r1, #44	; 0x2c
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	4413      	add	r3, r2
 8002b0a:	3360      	adds	r3, #96	; 0x60
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3350      	adds	r3, #80	; 0x50
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b22:	78fb      	ldrb	r3, [r7, #3]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3339      	adds	r3, #57	; 0x39
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3361      	adds	r3, #97	; 0x61
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	222c      	movs	r2, #44	; 0x2c
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	3338      	adds	r3, #56	; 0x38
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	18d1      	adds	r1, r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f004 fcc4 	bl	80074ec <USB_HC_StartXfer>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop

08002b70 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 f9c5 	bl	8006f16 <USB_GetMode>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	f040 80f6 	bne.w	8002d80 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f9a9 	bl	8006ef0 <USB_ReadInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80ec 	beq.w	8002d7e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 f9a0 	bl	8006ef0 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bba:	d104      	bne.n	8002bc6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002bc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 f990 	bl	8006ef0 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bda:	d104      	bne.n	8002be6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002be4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 f980 	bl	8006ef0 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bfa:	d104      	bne.n	8002c06 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 f970 	bl	8006ef0 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d103      	bne.n	8002c22 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 f962 	bl	8006ef0 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c36:	d11c      	bne.n	8002c72 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c40:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c52:	2110      	movs	r1, #16
 8002c54:	6938      	ldr	r0, [r7, #16]
 8002c56:	f004 f851 	bl	8006cfc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c5a:	6938      	ldr	r0, [r7, #16]
 8002c5c:	f004 f882 	bl	8006d64 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 fa58 	bl	800711c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f007 f825 	bl	8009cbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 f93a 	bl	8006ef0 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c86:	d102      	bne.n	8002c8e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f001 f89e 	bl	8003dca <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 f92c 	bl	8006ef0 <USB_ReadInterrupts>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d106      	bne.n	8002cb0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f006 ffee 	bl	8009c84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2208      	movs	r2, #8
 8002cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 f91b 	bl	8006ef0 <USB_ReadInterrupts>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d101      	bne.n	8002cc8 <HAL_HCD_IRQHandler+0x158>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_HCD_IRQHandler+0x15a>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0210 	bic.w	r2, r2, #16
 8002cdc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 ffa1 	bl	8003c26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0210 	orr.w	r2, r2, #16
 8002cf2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 f8f9 	bl	8006ef0 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d08:	d13a      	bne.n	8002d80 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 fd2e 	bl	8007770 <USB_HC_ReadInterrupt>
 8002d14:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e025      	b.n	8002d68 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d46:	d106      	bne.n	8002d56 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8ab 	bl	8002eaa <HCD_HC_IN_IRQHandler>
 8002d54:	e005      	b.n	8002d62 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fbf9 	bl	8003554 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	3301      	adds	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d3d4      	bcc.n	8002d1c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7a:	615a      	str	r2, [r3, #20]
 8002d7c:	e000      	b.n	8002d80 <HAL_HCD_IRQHandler+0x210>
      return;
 8002d7e:	bf00      	nop
    }
  }
}
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_HCD_Start+0x16>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e013      	b.n	8002dc4 <HAL_HCD_Start+0x3e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f004 fa1a 	bl	80071e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 ff32 	bl	8006c1e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_HCD_Stop+0x16>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e00d      	b.n	8002dfe <HAL_HCD_Stop+0x32>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f004 fe08 	bl	8007a04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f004 f9bc 	bl	8007190 <USB_ResetPort>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	781b      	ldrb	r3, [r3, #0]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3350      	adds	r3, #80	; 0x50
 8002e64:	681b      	ldr	r3, [r3, #0]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fa00 	bl	8007284 <USB_GetCurrentFrame>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 f9db 	bl	8007256 <USB_GetHostSpeed>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d11a      	bne.n	8002f10 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2304      	movs	r3, #4
 8002eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3361      	adds	r3, #97	; 0x61
 8002efa:	2206      	movs	r2, #6
 8002efc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f004 fc42 	bl	8007792 <USB_HC_Halt>
 8002f0e:	e0af      	b.n	8003070 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d11b      	bne.n	8002f60 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f004 fc1a 	bl	8007792 <USB_HC_Halt>
 8002f5e:	e087      	b.n	8003070 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d109      	bne.n	8002f8a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f82:	461a      	mov	r2, r3
 8002f84:	2320      	movs	r3, #32
 8002f86:	6093      	str	r3, [r2, #8]
 8002f88:	e072      	b.n	8003070 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d11a      	bne.n	8002fd6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	2308      	movs	r3, #8
 8002fb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3361      	adds	r3, #97	; 0x61
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fbdf 	bl	8007792 <USB_HC_Halt>
 8002fd4:	e04c      	b.n	8003070 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fec:	d11b      	bne.n	8003026 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003000:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3361      	adds	r3, #97	; 0x61
 8003010:	2208      	movs	r2, #8
 8003012:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	4611      	mov	r1, r2
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fbb7 	bl	8007792 <USB_HC_Halt>
 8003024:	e024      	b.n	8003070 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003038:	2b80      	cmp	r3, #128	; 0x80
 800303a:	d119      	bne.n	8003070 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3361      	adds	r3, #97	; 0x61
 800305c:	2206      	movs	r2, #6
 800305e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fb91 	bl	8007792 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003086:	d112      	bne.n	80030ae <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f004 fb7d 	bl	8007792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030aa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80030ac:	e24e      	b.n	800354c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 80df 	bne.w	8003284 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d019      	beq.n	8003102 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3348      	adds	r3, #72	; 0x48
 80030dc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80030f0:	1ad2      	subs	r2, r2, r3
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	202c      	movs	r0, #44	; 0x2c
 80030f8:	fb00 f303 	mul.w	r3, r0, r3
 80030fc:	440b      	add	r3, r1
 80030fe:	3350      	adds	r3, #80	; 0x50
 8003100:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3361      	adds	r3, #97	; 0x61
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	335c      	adds	r3, #92	; 0x5c
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	461a      	mov	r2, r3
 8003134:	2301      	movs	r3, #1
 8003136:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	333f      	adds	r3, #63	; 0x3f
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	333f      	adds	r3, #63	; 0x3f
 800315a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800315c:	2b02      	cmp	r3, #2
 800315e:	d111      	bne.n	8003184 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f004 fb11 	bl	8007792 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2310      	movs	r3, #16
 8003180:	6093      	str	r3, [r2, #8]
 8003182:	e03a      	b.n	80031fa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	333f      	adds	r3, #63	; 0x3f
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d009      	beq.n	80031ac <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	333f      	adds	r3, #63	; 0x3f
 80031a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d126      	bne.n	80031fa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031ca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3360      	adds	r3, #96	; 0x60
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	b2d9      	uxtb	r1, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	202c      	movs	r0, #44	; 0x2c
 80031e8:	fb00 f303 	mul.w	r3, r0, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f006 fd6f 	bl	8009cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d12b      	bne.n	800325a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3348      	adds	r3, #72	; 0x48
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	202c      	movs	r0, #44	; 0x2c
 8003218:	fb00 f202 	mul.w	r2, r0, r2
 800321c:	440a      	add	r2, r1
 800321e:	3240      	adds	r2, #64	; 0x40
 8003220:	8812      	ldrh	r2, [r2, #0]
 8003222:	fbb3 f3f2 	udiv	r3, r3, r2
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 818e 	beq.w	800354c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3354      	adds	r3, #84	; 0x54
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	f083 0301 	eor.w	r3, r3, #1
 8003244:	b2d8      	uxtb	r0, r3
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3354      	adds	r3, #84	; 0x54
 8003254:	4602      	mov	r2, r0
 8003256:	701a      	strb	r2, [r3, #0]
}
 8003258:	e178      	b.n	800354c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3354      	adds	r3, #84	; 0x54
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	f083 0301 	eor.w	r3, r3, #1
 800326e:	b2d8      	uxtb	r0, r3
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3354      	adds	r3, #84	; 0x54
 800327e:	4602      	mov	r2, r0
 8003280:	701a      	strb	r2, [r3, #0]
}
 8003282:	e163      	b.n	800354c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b02      	cmp	r3, #2
 8003298:	f040 80f6 	bne.w	8003488 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3361      	adds	r3, #97	; 0x61
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d109      	bne.n	80032c4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3360      	adds	r3, #96	; 0x60
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e0c9      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3361      	adds	r3, #97	; 0x61
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d109      	bne.n	80032ec <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3360      	adds	r3, #96	; 0x60
 80032e6:	2205      	movs	r2, #5
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e0b5      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3361      	adds	r3, #97	; 0x61
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d009      	beq.n	8003314 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	212c      	movs	r1, #44	; 0x2c
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	3361      	adds	r3, #97	; 0x61
 800330e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003310:	2b08      	cmp	r3, #8
 8003312:	d150      	bne.n	80033b6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	212c      	movs	r1, #44	; 0x2c
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	4413      	add	r3, r2
 8003320:	335c      	adds	r3, #92	; 0x5c
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	202c      	movs	r0, #44	; 0x2c
 800332c:	fb00 f303 	mul.w	r3, r0, r3
 8003330:	440b      	add	r3, r1
 8003332:	335c      	adds	r3, #92	; 0x5c
 8003334:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d912      	bls.n	8003370 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	335c      	adds	r3, #92	; 0x5c
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3360      	adds	r3, #96	; 0x60
 800336a:	2204      	movs	r2, #4
 800336c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800336e:	e073      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	212c      	movs	r1, #44	; 0x2c
 8003376:	fb01 f303 	mul.w	r3, r1, r3
 800337a:	4413      	add	r3, r2
 800337c:	3360      	adds	r3, #96	; 0x60
 800337e:	2202      	movs	r2, #2
 8003380:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003398:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033a0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	461a      	mov	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033b4:	e050      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	3361      	adds	r3, #97	; 0x61
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d122      	bne.n	8003410 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	212c      	movs	r1, #44	; 0x2c
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	4413      	add	r3, r2
 80033d6:	3360      	adds	r3, #96	; 0x60
 80033d8:	2202      	movs	r2, #2
 80033da:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033f2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033fa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	461a      	mov	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e023      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	3361      	adds	r3, #97	; 0x61
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b07      	cmp	r3, #7
 8003422:	d119      	bne.n	8003458 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	335c      	adds	r3, #92	; 0x5c
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	202c      	movs	r0, #44	; 0x2c
 800343c:	fb00 f303 	mul.w	r3, r0, r3
 8003440:	440b      	add	r3, r1
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3360      	adds	r3, #96	; 0x60
 8003454:	2204      	movs	r2, #4
 8003456:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	2302      	movs	r3, #2
 8003468:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	b2d9      	uxtb	r1, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	202c      	movs	r0, #44	; 0x2c
 8003474:	fb00 f303 	mul.w	r3, r0, r3
 8003478:	4413      	add	r3, r2
 800347a:	3360      	adds	r3, #96	; 0x60
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f006 fc29 	bl	8009cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003486:	e061      	b.n	800354c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b10      	cmp	r3, #16
 800349c:	d156      	bne.n	800354c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	333f      	adds	r3, #63	; 0x3f
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d111      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	335c      	adds	r3, #92	; 0x5c
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 f95f 	bl	8007792 <USB_HC_Halt>
 80034d4:	e031      	b.n	800353a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	333f      	adds	r3, #63	; 0x3f
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	333f      	adds	r3, #63	; 0x3f
 80034f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d11d      	bne.n	800353a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	335c      	adds	r3, #92	; 0x5c
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d110      	bne.n	800353a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3361      	adds	r3, #97	; 0x61
 8003526:	2203      	movs	r2, #3
 8003528:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f004 f92c 	bl	8007792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	461a      	mov	r2, r3
 8003548:	2310      	movs	r3, #16
 800354a:	6093      	str	r3, [r2, #8]
}
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d11a      	bne.n	80035ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2304      	movs	r3, #4
 8003594:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3361      	adds	r3, #97	; 0x61
 80035a4:	2206      	movs	r2, #6
 80035a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 f8ed 	bl	8007792 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80035b8:	e331      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d12e      	bne.n	800362e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035dc:	461a      	mov	r2, r3
 80035de:	2320      	movs	r3, #32
 80035e0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	333d      	adds	r3, #61	; 0x3d
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	f040 8313 	bne.w	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	212c      	movs	r1, #44	; 0x2c
 80035fe:	fb01 f303 	mul.w	r3, r1, r3
 8003602:	4413      	add	r3, r2
 8003604:	333d      	adds	r3, #61	; 0x3d
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3360      	adds	r3, #96	; 0x60
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f004 f8b3 	bl	8007792 <USB_HC_Halt>
}
 800362c:	e2f7      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003644:	d112      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003658:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f004 f894 	bl	8007792 <USB_HC_Halt>
}
 800366a:	e2d8      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	4413      	add	r3, r2
 8003674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d140      	bne.n	8003704 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	335c      	adds	r3, #92	; 0x5c
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d111      	bne.n	80036ce <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	333d      	adds	r3, #61	; 0x3d
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	461a      	mov	r2, r3
 80036dc:	2301      	movs	r3, #1
 80036de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3361      	adds	r3, #97	; 0x61
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f004 f848 	bl	8007792 <USB_HC_Halt>
}
 8003702:	e28c      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d12c      	bne.n	8003774 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	3361      	adds	r3, #97	; 0x61
 8003728:	2204      	movs	r2, #4
 800372a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	212c      	movs	r1, #44	; 0x2c
 8003732:	fb01 f303 	mul.w	r3, r1, r3
 8003736:	4413      	add	r3, r2
 8003738:	333d      	adds	r3, #61	; 0x3d
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	212c      	movs	r1, #44	; 0x2c
 8003744:	fb01 f303 	mul.w	r3, r1, r3
 8003748:	4413      	add	r3, r2
 800374a:	335c      	adds	r3, #92	; 0x5c
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f819 	bl	8007792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	2340      	movs	r3, #64	; 0x40
 8003770:	6093      	str	r3, [r2, #8]
}
 8003772:	e254      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d11a      	bne.n	80037c0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	461a      	mov	r2, r3
 8003798:	2308      	movs	r3, #8
 800379a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	2205      	movs	r2, #5
 80037ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 ffea 	bl	8007792 <USB_HC_Halt>
}
 80037be:	e22e      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d140      	bne.n	8003858 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	335c      	adds	r3, #92	; 0x5c
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3361      	adds	r3, #97	; 0x61
 80037f6:	2203      	movs	r2, #3
 80037f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	333d      	adds	r3, #61	; 0x3d
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d112      	bne.n	8003834 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	333c      	adds	r3, #60	; 0x3c
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	333d      	adds	r3, #61	; 0x3d
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f003 ffa7 	bl	8007792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	461a      	mov	r2, r3
 8003852:	2310      	movs	r3, #16
 8003854:	6093      	str	r3, [r2, #8]
}
 8003856:	e1e2      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d164      	bne.n	8003938 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d111      	bne.n	800389a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	3361      	adds	r3, #97	; 0x61
 8003884:	2206      	movs	r2, #6
 8003886:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f003 ff7d 	bl	8007792 <USB_HC_Halt>
 8003898:	e044      	b.n	8003924 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	335c      	adds	r3, #92	; 0x5c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	202c      	movs	r0, #44	; 0x2c
 80038b2:	fb00 f303 	mul.w	r3, r0, r3
 80038b6:	440b      	add	r3, r1
 80038b8:	335c      	adds	r3, #92	; 0x5c
 80038ba:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	212c      	movs	r1, #44	; 0x2c
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	335c      	adds	r3, #92	; 0x5c
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d920      	bls.n	8003912 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	335c      	adds	r3, #92	; 0x5c
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3360      	adds	r3, #96	; 0x60
 80038f0:	2204      	movs	r2, #4
 80038f2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	b2d9      	uxtb	r1, r3
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	202c      	movs	r0, #44	; 0x2c
 80038fe:	fb00 f303 	mul.w	r3, r0, r3
 8003902:	4413      	add	r3, r2
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f006 f9e4 	bl	8009cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003910:	e008      	b.n	8003924 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	212c      	movs	r1, #44	; 0x2c
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	4413      	add	r3, r2
 800391e:	3360      	adds	r3, #96	; 0x60
 8003920:	2202      	movs	r2, #2
 8003922:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	6093      	str	r3, [r2, #8]
}
 8003936:	e172      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394e:	d11b      	bne.n	8003988 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	3361      	adds	r3, #97	; 0x61
 800395e:	2208      	movs	r2, #8
 8003960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f003 ff10 	bl	8007792 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003984:	6093      	str	r3, [r2, #8]
}
 8003986:	e14a      	b.n	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	f040 813f 	bne.w	8003c1e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3361      	adds	r3, #97	; 0x61
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d17d      	bne.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3360      	adds	r3, #96	; 0x60
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	333f      	adds	r3, #63	; 0x3f
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d00a      	beq.n	80039f0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	333f      	adds	r3, #63	; 0x3f
 80039e8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	f040 8100 	bne.w	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d113      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3355      	adds	r3, #85	; 0x55
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	f083 0301 	eor.w	r3, r3, #1
 8003a0c:	b2d8      	uxtb	r0, r3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3355      	adds	r3, #85	; 0x55
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	f040 80e3 	bne.w	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	212c      	movs	r1, #44	; 0x2c
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	4413      	add	r3, r2
 8003a36:	334c      	adds	r3, #76	; 0x4c
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80d8 	beq.w	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	334c      	adds	r3, #76	; 0x4c
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	fb00 f202 	mul.w	r2, r0, r2
 8003a5a:	440a      	add	r2, r1
 8003a5c:	3240      	adds	r2, #64	; 0x40
 8003a5e:	8812      	ldrh	r2, [r2, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	3b01      	subs	r3, #1
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	202c      	movs	r0, #44	; 0x2c
 8003a6a:	fb00 f202 	mul.w	r2, r0, r2
 8003a6e:	440a      	add	r2, r1
 8003a70:	3240      	adds	r2, #64	; 0x40
 8003a72:	8812      	ldrh	r2, [r2, #0]
 8003a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80b5 	beq.w	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3355      	adds	r3, #85	; 0x55
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2d8      	uxtb	r0, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3355      	adds	r3, #85	; 0x55
 8003aaa:	4602      	mov	r2, r0
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e09f      	b.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3361      	adds	r3, #97	; 0x61
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d109      	bne.n	8003ad8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3360      	adds	r3, #96	; 0x60
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e08b      	b.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3361      	adds	r3, #97	; 0x61
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d109      	bne.n	8003b00 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	3360      	adds	r3, #96	; 0x60
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e077      	b.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3361      	adds	r3, #97	; 0x61
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d109      	bne.n	8003b28 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	212c      	movs	r1, #44	; 0x2c
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3360      	adds	r3, #96	; 0x60
 8003b22:	2205      	movs	r2, #5
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e063      	b.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3361      	adds	r3, #97	; 0x61
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d009      	beq.n	8003b50 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	212c      	movs	r1, #44	; 0x2c
 8003b42:	fb01 f303 	mul.w	r3, r1, r3
 8003b46:	4413      	add	r3, r2
 8003b48:	3361      	adds	r3, #97	; 0x61
 8003b4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d14f      	bne.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	335c      	adds	r3, #92	; 0x5c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	202c      	movs	r0, #44	; 0x2c
 8003b68:	fb00 f303 	mul.w	r3, r0, r3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	335c      	adds	r3, #92	; 0x5c
 8003b70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	335c      	adds	r3, #92	; 0x5c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d912      	bls.n	8003bac <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	335c      	adds	r3, #92	; 0x5c
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	212c      	movs	r1, #44	; 0x2c
 8003b9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3360      	adds	r3, #96	; 0x60
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	e021      	b.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3360      	adds	r3, #96	; 0x60
 8003bba:	2202      	movs	r2, #2
 8003bbc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2302      	movs	r3, #2
 8003c00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	b2d9      	uxtb	r1, r3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	202c      	movs	r0, #44	; 0x2c
 8003c0c:	fb00 f303 	mul.w	r3, r0, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3360      	adds	r3, #96	; 0x60
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f006 f85d 	bl	8009cd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c1e:	bf00      	nop
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b08a      	sub	sp, #40	; 0x28
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	0c5b      	lsrs	r3, r3, #17
 8003c4c:	f003 030f 	and.w	r3, r3, #15
 8003c50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d004      	beq.n	8003c6c <HCD_RXQLVL_IRQHandler+0x46>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	f000 80a9 	beq.w	8003dbc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c6a:	e0aa      	b.n	8003dc2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80a6 	beq.w	8003dc0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3344      	adds	r3, #68	; 0x44
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 809b 	beq.w	8003dc0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	212c      	movs	r1, #44	; 0x2c
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	4413      	add	r3, r2
 8003c96:	3350      	adds	r3, #80	; 0x50
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	202c      	movs	r0, #44	; 0x2c
 8003ca4:	fb00 f303 	mul.w	r3, r0, r3
 8003ca8:	440b      	add	r3, r1
 8003caa:	334c      	adds	r3, #76	; 0x4c
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d87a      	bhi.n	8003da8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	212c      	movs	r1, #44	; 0x2c
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3344      	adds	r3, #68	; 0x44
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f003 f8b8 	bl	8006e40 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	3344      	adds	r3, #68	; 0x44
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	441a      	add	r2, r3
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	202c      	movs	r0, #44	; 0x2c
 8003cea:	fb00 f303 	mul.w	r3, r0, r3
 8003cee:	440b      	add	r3, r1
 8003cf0:	3344      	adds	r3, #68	; 0x44
 8003cf2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	3350      	adds	r3, #80	; 0x50
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	441a      	add	r2, r3
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	202c      	movs	r0, #44	; 0x2c
 8003d0e:	fb00 f303 	mul.w	r3, r0, r3
 8003d12:	440b      	add	r3, r1
 8003d14:	3350      	adds	r3, #80	; 0x50
 8003d16:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	0cdb      	lsrs	r3, r3, #19
 8003d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d2c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	212c      	movs	r1, #44	; 0x2c
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	3340      	adds	r3, #64	; 0x40
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d13c      	bne.n	8003dc0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d039      	beq.n	8003dc0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d62:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d6a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3354      	adds	r3, #84	; 0x54
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2d8      	uxtb	r0, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3354      	adds	r3, #84	; 0x54
 8003da2:	4602      	mov	r2, r0
 8003da4:	701a      	strb	r2, [r3, #0]
      break;
 8003da6:	e00b      	b.n	8003dc0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3360      	adds	r3, #96	; 0x60
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
      break;
 8003dba:	e001      	b.n	8003dc0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003dc0:	bf00      	nop
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003df6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d10b      	bne.n	8003e1a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d102      	bne.n	8003e12 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f005 ff47 	bl	8009ca0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d132      	bne.n	8003e8a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f043 0308 	orr.w	r3, r3, #8
 8003e2a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d126      	bne.n	8003e84 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d113      	bne.n	8003e66 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e48:	d106      	bne.n	8003e58 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 f963 	bl	800711c <USB_InitFSLSPClkSel>
 8003e56:	e011      	b.n	8003e7c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 f95c 	bl	800711c <USB_InitFSLSPClkSel>
 8003e64:	e00a      	b.n	8003e7c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d106      	bne.n	8003e7c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e7a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f005 ff39 	bl	8009cf4 <HAL_HCD_PortEnabled_Callback>
 8003e82:	e002      	b.n	8003e8a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f005 ff43 	bl	8009d10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d103      	bne.n	8003e9c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e12b      	b.n	800411a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fe64 	bl	8001ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	; 0x24
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f14:	f002 f872 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4a81      	ldr	r2, [pc, #516]	; (8004124 <HAL_I2C_Init+0x274>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d807      	bhi.n	8003f34 <HAL_I2C_Init+0x84>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a80      	ldr	r2, [pc, #512]	; (8004128 <HAL_I2C_Init+0x278>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bf94      	ite	ls
 8003f2c:	2301      	movls	r3, #1
 8003f2e:	2300      	movhi	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e006      	b.n	8003f42 <HAL_I2C_Init+0x92>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a7d      	ldr	r2, [pc, #500]	; (800412c <HAL_I2C_Init+0x27c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0e7      	b.n	800411a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a78      	ldr	r2, [pc, #480]	; (8004130 <HAL_I2C_Init+0x280>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9b      	lsrs	r3, r3, #18
 8003f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a6a      	ldr	r2, [pc, #424]	; (8004124 <HAL_I2C_Init+0x274>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d802      	bhi.n	8003f84 <HAL_I2C_Init+0xd4>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3301      	adds	r3, #1
 8003f82:	e009      	b.n	8003f98 <HAL_I2C_Init+0xe8>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	4a69      	ldr	r2, [pc, #420]	; (8004134 <HAL_I2C_Init+0x284>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	3301      	adds	r3, #1
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003faa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	495c      	ldr	r1, [pc, #368]	; (8004124 <HAL_I2C_Init+0x274>)
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	d819      	bhi.n	8003fec <HAL_I2C_Init+0x13c>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e59      	subs	r1, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc6:	1c59      	adds	r1, r3, #1
 8003fc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fcc:	400b      	ands	r3, r1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_I2C_Init+0x138>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1e59      	subs	r1, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	e051      	b.n	800408c <HAL_I2C_Init+0x1dc>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	e04f      	b.n	800408c <HAL_I2C_Init+0x1dc>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d111      	bne.n	8004018 <HAL_I2C_Init+0x168>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e58      	subs	r0, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e012      	b.n	800403e <HAL_I2C_Init+0x18e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1e58      	subs	r0, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	0099      	lsls	r1, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Init+0x196>
 8004042:	2301      	movs	r3, #1
 8004044:	e022      	b.n	800408c <HAL_I2C_Init+0x1dc>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <HAL_I2C_Init+0x1bc>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1e58      	subs	r0, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	440b      	add	r3, r1
 800405c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406a:	e00f      	b.n	800408c <HAL_I2C_Init+0x1dc>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6809      	ldr	r1, [r1, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6911      	ldr	r1, [r2, #16]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68d2      	ldr	r2, [r2, #12]
 80040c6:	4311      	orrs	r1, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	000186a0 	.word	0x000186a0
 8004128:	001e847f 	.word	0x001e847f
 800412c:	003d08ff 	.word	0x003d08ff
 8004130:	431bde83 	.word	0x431bde83
 8004134:	10624dd3 	.word	0x10624dd3

08004138 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	461a      	mov	r2, r3
 8004144:	460b      	mov	r3, r1
 8004146:	817b      	strh	r3, [r7, #10]
 8004148:	4613      	mov	r3, r2
 800414a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800414c:	f7fd ffae 	bl	80020ac <HAL_GetTick>
 8004150:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	f040 80e0 	bne.w	8004320 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2319      	movs	r3, #25
 8004166:	2201      	movs	r2, #1
 8004168:	4970      	ldr	r1, [pc, #448]	; (800432c <HAL_I2C_Master_Transmit+0x1f4>)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fc58 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
 8004178:	e0d3      	b.n	8004322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_I2C_Master_Transmit+0x50>
 8004184:	2302      	movs	r3, #2
 8004186:	e0cc      	b.n	8004322 <HAL_I2C_Master_Transmit+0x1ea>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d007      	beq.n	80041ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2221      	movs	r2, #33	; 0x21
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2210      	movs	r2, #16
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	893a      	ldrh	r2, [r7, #8]
 80041de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a50      	ldr	r2, [pc, #320]	; (8004330 <HAL_I2C_Master_Transmit+0x1f8>)
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041f0:	8979      	ldrh	r1, [r7, #10]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fac2 	bl	8004780 <I2C_MasterRequestWrite>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e08d      	b.n	8004322 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800421c:	e066      	b.n	80042ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	6a39      	ldr	r1, [r7, #32]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fcd2 	bl	8004bcc <I2C_WaitOnTXEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00d      	beq.n	800424a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b04      	cmp	r3, #4
 8004234:	d107      	bne.n	8004246 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06b      	b.n	8004322 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b04      	cmp	r3, #4
 8004286:	d11b      	bne.n	80042c0 <HAL_I2C_Master_Transmit+0x188>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d017      	beq.n	80042c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	6a39      	ldr	r1, [r7, #32]
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fcc2 	bl	8004c4e <I2C_WaitOnBTFFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00d      	beq.n	80042ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d107      	bne.n	80042e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01a      	b.n	8004322 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d194      	bne.n	800421e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	00100002 	.word	0x00100002
 8004330:	ffff0000 	.word	0xffff0000

08004334 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	461a      	mov	r2, r3
 8004340:	460b      	mov	r3, r1
 8004342:	817b      	strh	r3, [r7, #10]
 8004344:	4613      	mov	r3, r2
 8004346:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004348:	f7fd feb0 	bl	80020ac <HAL_GetTick>
 800434c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	f040 820b 	bne.w	8004772 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	2319      	movs	r3, #25
 8004362:	2201      	movs	r2, #1
 8004364:	497c      	ldr	r1, [pc, #496]	; (8004558 <HAL_I2C_Master_Receive+0x224>)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fb5a 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004372:	2302      	movs	r3, #2
 8004374:	e1fe      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_I2C_Master_Receive+0x50>
 8004380:	2302      	movs	r3, #2
 8004382:	e1f7      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d007      	beq.n	80043aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2222      	movs	r2, #34	; 0x22
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2210      	movs	r2, #16
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	893a      	ldrh	r2, [r7, #8]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a5c      	ldr	r2, [pc, #368]	; (800455c <HAL_I2C_Master_Receive+0x228>)
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fa46 	bl	8004884 <I2C_MasterRequestRead>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1b8      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	623b      	str	r3, [r7, #32]
 800441e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e18c      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	2b01      	cmp	r3, #1
 8004438:	d11b      	bne.n	8004472 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e16c      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	2b02      	cmp	r3, #2
 8004478:	d11b      	bne.n	80044b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	e14c      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044d8:	e138      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	2b03      	cmp	r3, #3
 80044e0:	f200 80f1 	bhi.w	80046c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d123      	bne.n	8004534 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fbed 	bl	8004cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e139      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004532:	e10b      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	2b02      	cmp	r3, #2
 800453a:	d14e      	bne.n	80045da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2200      	movs	r2, #0
 8004544:	4906      	ldr	r1, [pc, #24]	; (8004560 <HAL_I2C_Master_Receive+0x22c>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fa6a 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e10e      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
 8004556:	bf00      	nop
 8004558:	00100002 	.word	0x00100002
 800455c:	ffff0000 	.word	0xffff0000
 8004560:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045d8:	e0b8      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2200      	movs	r2, #0
 80045e2:	4966      	ldr	r1, [pc, #408]	; (800477c <HAL_I2C_Master_Receive+0x448>)
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fa1b 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0bf      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	2200      	movs	r2, #0
 800463e:	494f      	ldr	r1, [pc, #316]	; (800477c <HAL_I2C_Master_Receive+0x448>)
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f9ed 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e091      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046c4:	e042      	b.n	800474c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fb00 	bl	8004cd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e04c      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d118      	bne.n	800474c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	f47f aec2 	bne.w	80044da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004772:	2302      	movs	r3, #2
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010004 	.word	0x00010004

08004780 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	460b      	mov	r3, r1
 800478e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d006      	beq.n	80047aa <I2C_MasterRequestWrite+0x2a>
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d003      	beq.n	80047aa <I2C_MasterRequestWrite+0x2a>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047a8:	d108      	bne.n	80047bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e00b      	b.n	80047d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	2b12      	cmp	r3, #18
 80047c2:	d107      	bne.n	80047d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f91d 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00d      	beq.n	8004808 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d103      	bne.n	8004804 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e035      	b.n	8004874 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004810:	d108      	bne.n	8004824 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004812:	897b      	ldrh	r3, [r7, #10]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004820:	611a      	str	r2, [r3, #16]
 8004822:	e01b      	b.n	800485c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004824:	897b      	ldrh	r3, [r7, #10]
 8004826:	11db      	asrs	r3, r3, #7
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0306 	and.w	r3, r3, #6
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f063 030f 	orn	r3, r3, #15
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	490e      	ldr	r1, [pc, #56]	; (800487c <I2C_MasterRequestWrite+0xfc>)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f943 	bl	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e010      	b.n	8004874 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004852:	897b      	ldrh	r3, [r7, #10]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4907      	ldr	r1, [pc, #28]	; (8004880 <I2C_MasterRequestWrite+0x100>)
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f933 	bl	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	00010008 	.word	0x00010008
 8004880:	00010002 	.word	0x00010002

08004884 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af02      	add	r7, sp, #8
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	460b      	mov	r3, r1
 8004892:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d006      	beq.n	80048be <I2C_MasterRequestRead+0x3a>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d003      	beq.n	80048be <I2C_MasterRequestRead+0x3a>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048bc:	d108      	bne.n	80048d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e00b      	b.n	80048e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	2b11      	cmp	r3, #17
 80048d6:	d107      	bne.n	80048e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 f893 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490e:	d103      	bne.n	8004918 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e079      	b.n	8004a10 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004924:	d108      	bne.n	8004938 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004926:	897b      	ldrh	r3, [r7, #10]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	611a      	str	r2, [r3, #16]
 8004936:	e05f      	b.n	80049f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004938:	897b      	ldrh	r3, [r7, #10]
 800493a:	11db      	asrs	r3, r3, #7
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0306 	and.w	r3, r3, #6
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f063 030f 	orn	r3, r3, #15
 8004948:	b2da      	uxtb	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4930      	ldr	r1, [pc, #192]	; (8004a18 <I2C_MasterRequestRead+0x194>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f8b9 	bl	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e054      	b.n	8004a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004966:	897b      	ldrh	r3, [r7, #10]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4929      	ldr	r1, [pc, #164]	; (8004a1c <I2C_MasterRequestRead+0x198>)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f8a9 	bl	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e044      	b.n	8004a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f831 	bl	8004a20 <I2C_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00d      	beq.n	80049e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d2:	d103      	bne.n	80049dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e017      	b.n	8004a10 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049e0:	897b      	ldrh	r3, [r7, #10]
 80049e2:	11db      	asrs	r3, r3, #7
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0306 	and.w	r3, r3, #6
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f063 030e 	orn	r3, r3, #14
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <I2C_MasterRequestRead+0x198>)
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f865 	bl	8004ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	00010008 	.word	0x00010008
 8004a1c:	00010002 	.word	0x00010002

08004a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a30:	e025      	b.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d021      	beq.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fd fb37 	bl	80020ac <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d116      	bne.n	8004a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e023      	b.n	8004ac6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10d      	bne.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	e00c      	b.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	43da      	mvns	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d0b6      	beq.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004adc:	e051      	b.n	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d123      	bne.n	8004b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f043 0204 	orr.w	r2, r3, #4
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e046      	b.n	8004bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3c:	d021      	beq.n	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3e:	f7fd fab5 	bl	80020ac <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d116      	bne.n	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e020      	b.n	8004bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10c      	bne.n	8004ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	43da      	mvns	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4013      	ands	r3, r2
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e00b      	b.n	8004bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	43da      	mvns	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf14      	ite	ne
 8004bb8:	2301      	movne	r3, #1
 8004bba:	2300      	moveq	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d18d      	bne.n	8004ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bd8:	e02d      	b.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f8ce 	bl	8004d7c <I2C_IsAcknowledgeFailed>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e02d      	b.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d021      	beq.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf2:	f7fd fa5b 	bl	80020ac <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d302      	bcc.n	8004c08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d116      	bne.n	8004c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f043 0220 	orr.w	r2, r3, #32
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e007      	b.n	8004c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c40:	2b80      	cmp	r3, #128	; 0x80
 8004c42:	d1ca      	bne.n	8004bda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c5a:	e02d      	b.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f88d 	bl	8004d7c <I2C_IsAcknowledgeFailed>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e02d      	b.n	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d021      	beq.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c74:	f7fd fa1a 	bl	80020ac <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d302      	bcc.n	8004c8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e007      	b.n	8004cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d1ca      	bne.n	8004c5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cdc:	e042      	b.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d119      	bne.n	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0210 	mvn.w	r2, #16
 8004cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e029      	b.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d20:	f7fd f9c4 	bl	80020ac <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f043 0220 	orr.w	r2, r3, #32
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e007      	b.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d1b5      	bne.n	8004cde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d92:	d11b      	bne.n	8004dcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	f043 0204 	orr.w	r2, r3, #4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e128      	b.n	8005040 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a90      	ldr	r2, [pc, #576]	; (8005048 <HAL_I2S_Init+0x26c>)
 8004e06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fc ff13 	bl	8001c34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e24:	f023 030f 	bic.w	r3, r3, #15
 8004e28:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d060      	beq.n	8004efc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004e42:	2310      	movs	r3, #16
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e001      	b.n	8004e4c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d802      	bhi.n	8004e5a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004e5a:	2001      	movs	r0, #1
 8004e5c:	f001 f9d8 	bl	8006210 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e60:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e6a:	d125      	bne.n	8004eb8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	3305      	adds	r3, #5
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	e01f      	b.n	8004ed6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb2:	3305      	adds	r3, #5
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	e00e      	b.n	8004ed6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	461a      	mov	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed2:	3305      	adds	r3, #5
 8004ed4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4a5c      	ldr	r2, [pc, #368]	; (800504c <HAL_I2S_Init+0x270>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004efc:	2302      	movs	r3, #2
 8004efe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d902      	bls.n	8004f10 <HAL_I2S_Init+0x134>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2bff      	cmp	r3, #255	; 0xff
 8004f0e:	d907      	bls.n	8004f20 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f14:	f043 0210 	orr.w	r2, r3, #16
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e08f      	b.n	8005040 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	ea42 0103 	orr.w	r1, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f3e:	f023 030f 	bic.w	r3, r3, #15
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6851      	ldr	r1, [r2, #4]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6892      	ldr	r2, [r2, #8]
 8004f4a:	4311      	orrs	r1, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	68d2      	ldr	r2, [r2, #12]
 8004f50:	4311      	orrs	r1, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6992      	ldr	r2, [r2, #24]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f62:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d161      	bne.n	8005030 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a38      	ldr	r2, [pc, #224]	; (8005050 <HAL_I2S_Init+0x274>)
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a37      	ldr	r2, [pc, #220]	; (8005054 <HAL_I2S_Init+0x278>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d101      	bne.n	8004f80 <HAL_I2S_Init+0x1a4>
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <HAL_I2S_Init+0x27c>)
 8004f7e:	e001      	b.n	8004f84 <HAL_I2S_Init+0x1a8>
 8004f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	4932      	ldr	r1, [pc, #200]	; (8005054 <HAL_I2S_Init+0x278>)
 8004f8c:	428a      	cmp	r2, r1
 8004f8e:	d101      	bne.n	8004f94 <HAL_I2S_Init+0x1b8>
 8004f90:	4a31      	ldr	r2, [pc, #196]	; (8005058 <HAL_I2S_Init+0x27c>)
 8004f92:	e001      	b.n	8004f98 <HAL_I2S_Init+0x1bc>
 8004f94:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004f98:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f9c:	f023 030f 	bic.w	r3, r3, #15
 8004fa0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <HAL_I2S_Init+0x278>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_I2S_Init+0x1d4>
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <HAL_I2S_Init+0x27c>)
 8004fae:	e001      	b.n	8004fb4 <HAL_I2S_Init+0x1d8>
 8004fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a25      	ldr	r2, [pc, #148]	; (8005054 <HAL_I2S_Init+0x278>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2S_Init+0x1ea>
 8004fc2:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_I2S_Init+0x27c>)
 8004fc4:	e001      	b.n	8004fca <HAL_I2S_Init+0x1ee>
 8004fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd6:	d003      	beq.n	8004fe0 <HAL_I2S_Init+0x204>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	e001      	b.n	8004fec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005000:	4313      	orrs	r3, r2
 8005002:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800500a:	4313      	orrs	r3, r2
 800500c:	b29a      	uxth	r2, r3
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	4313      	orrs	r3, r2
 8005012:	b29b      	uxth	r3, r3
 8005014:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005018:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <HAL_I2S_Init+0x278>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_I2S_Init+0x24c>
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_I2S_Init+0x27c>)
 8005026:	e001      	b.n	800502c <HAL_I2S_Init+0x250>
 8005028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800502c:	897a      	ldrh	r2, [r7, #10]
 800502e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	08005153 	.word	0x08005153
 800504c:	cccccccd 	.word	0xcccccccd
 8005050:	08005269 	.word	0x08005269
 8005054:	40003800 	.word	0x40003800
 8005058:	40003400 	.word	0x40003400

0800505c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10e      	bne.n	80050ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ffb8 	bl	800505c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	b292      	uxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10e      	bne.n	800514a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800513a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ff93 	bl	8005070 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800514a:	bf00      	nop
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b086      	sub	sp, #24
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b04      	cmp	r3, #4
 800516c:	d13a      	bne.n	80051e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d109      	bne.n	800518c <I2S_IRQHandler+0x3a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d102      	bne.n	800518c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ffb4 	bl	80050f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b40      	cmp	r3, #64	; 0x40
 8005194:	d126      	bne.n	80051e4 <I2S_IRQHandler+0x92>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d11f      	bne.n	80051e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	f043 0202 	orr.w	r2, r3, #2
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff ff50 	bl	8005084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d136      	bne.n	800525e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d109      	bne.n	800520e <I2S_IRQHandler+0xbc>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005204:	2b80      	cmp	r3, #128	; 0x80
 8005206:	d102      	bne.n	800520e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7ff ff45 	bl	8005098 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b08      	cmp	r3, #8
 8005216:	d122      	bne.n	800525e <I2S_IRQHandler+0x10c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b20      	cmp	r3, #32
 8005224:	d11b      	bne.n	800525e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005234:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff13 	bl	8005084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800525e:	bf00      	nop
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a92      	ldr	r2, [pc, #584]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005282:	4b92      	ldr	r3, [pc, #584]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005284:	e001      	b.n	800528a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a8b      	ldr	r2, [pc, #556]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80052a0:	4b8a      	ldr	r3, [pc, #552]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052a2:	e001      	b.n	80052a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80052a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b4:	d004      	beq.n	80052c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 8099 	bne.w	80053f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d107      	bne.n	80052da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f925 	bl	8005524 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9c8 	bl	8005684 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d13a      	bne.n	8005374 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d035      	beq.n	8005374 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a6e      	ldr	r2, [pc, #440]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005312:	4b6e      	ldr	r3, [pc, #440]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005314:	e001      	b.n	800531a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4969      	ldr	r1, [pc, #420]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005322:	428b      	cmp	r3, r1
 8005324:	d101      	bne.n	800532a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005326:	4b69      	ldr	r3, [pc, #420]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005328:	e001      	b.n	800532e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800532a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800532e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005332:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005342:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f043 0202 	orr.w	r2, r3, #2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe88 	bl	8005084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f003 0308 	and.w	r3, r3, #8
 800537a:	2b08      	cmp	r3, #8
 800537c:	f040 80c3 	bne.w	8005506 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0320 	and.w	r3, r3, #32
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80bd 	beq.w	8005506 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800539a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a49      	ldr	r2, [pc, #292]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80053a6:	4b49      	ldr	r3, [pc, #292]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053a8:	e001      	b.n	80053ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80053aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4944      	ldr	r1, [pc, #272]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053b6:	428b      	cmp	r3, r1
 80053b8:	d101      	bne.n	80053be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80053ba:	4b44      	ldr	r3, [pc, #272]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053bc:	e001      	b.n	80053c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80053be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fe4a 	bl	8005084 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053f0:	e089      	b.n	8005506 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d107      	bne.n	800540c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8be 	bl	8005588 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8fd 	bl	8005620 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d12f      	bne.n	8005490 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02a      	beq.n	8005490 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005448:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d101      	bne.n	8005458 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005456:	e001      	b.n	800545c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005458:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4919      	ldr	r1, [pc, #100]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005464:	428b      	cmp	r3, r1
 8005466:	d101      	bne.n	800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005468:	4b18      	ldr	r3, [pc, #96]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800546a:	e001      	b.n	8005470 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800546c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005470:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005474:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff fdfa 	bl	8005084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d136      	bne.n	8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d031      	beq.n	8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a07      	ldr	r2, [pc, #28]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054b0:	e001      	b.n	80054b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80054b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4902      	ldr	r1, [pc, #8]	; (80054c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054be:	428b      	cmp	r3, r1
 80054c0:	d106      	bne.n	80054d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80054c2:	4b02      	ldr	r3, [pc, #8]	; (80054cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054c4:	e006      	b.n	80054d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80054c6:	bf00      	nop
 80054c8:	40003800 	.word	0x40003800
 80054cc:	40003400 	.word	0x40003400
 80054d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	f043 0204 	orr.w	r2, r3, #4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fdc0 	bl	8005084 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005504:	e000      	b.n	8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005506:	bf00      	nop
}
 8005508:	bf00      	nop
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	1c99      	adds	r1, r3, #2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6251      	str	r1, [r2, #36]	; 0x24
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d113      	bne.n	800557e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005564:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ffc9 	bl	8005510 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c99      	adds	r1, r3, #2
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6251      	str	r1, [r2, #36]	; 0x24
 800559a:	8819      	ldrh	r1, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <I2SEx_TxISR_I2SExt+0x90>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <I2SEx_TxISR_I2SExt+0x22>
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <I2SEx_TxISR_I2SExt+0x94>)
 80055a8:	e001      	b.n	80055ae <I2SEx_TxISR_I2SExt+0x26>
 80055aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ae:	460a      	mov	r2, r1
 80055b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d121      	bne.n	800560e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a12      	ldr	r2, [pc, #72]	; (8005618 <I2SEx_TxISR_I2SExt+0x90>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d101      	bne.n	80055d8 <I2SEx_TxISR_I2SExt+0x50>
 80055d4:	4b11      	ldr	r3, [pc, #68]	; (800561c <I2SEx_TxISR_I2SExt+0x94>)
 80055d6:	e001      	b.n	80055dc <I2SEx_TxISR_I2SExt+0x54>
 80055d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	490d      	ldr	r1, [pc, #52]	; (8005618 <I2SEx_TxISR_I2SExt+0x90>)
 80055e4:	428b      	cmp	r3, r1
 80055e6:	d101      	bne.n	80055ec <I2SEx_TxISR_I2SExt+0x64>
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <I2SEx_TxISR_I2SExt+0x94>)
 80055ea:	e001      	b.n	80055f0 <I2SEx_TxISR_I2SExt+0x68>
 80055ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff ff81 	bl	8005510 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40003800 	.word	0x40003800
 800561c:	40003400 	.word	0x40003400

08005620 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68d8      	ldr	r0, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	1c99      	adds	r1, r3, #2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005638:	b282      	uxth	r2, r0
 800563a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d113      	bne.n	800567c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005662:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff4a 	bl	8005510 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a20      	ldr	r2, [pc, #128]	; (8005714 <I2SEx_RxISR_I2SExt+0x90>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <I2SEx_RxISR_I2SExt+0x16>
 8005696:	4b20      	ldr	r3, [pc, #128]	; (8005718 <I2SEx_RxISR_I2SExt+0x94>)
 8005698:	e001      	b.n	800569e <I2SEx_RxISR_I2SExt+0x1a>
 800569a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800569e:	68d8      	ldr	r0, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	1c99      	adds	r1, r3, #2
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80056aa:	b282      	uxth	r2, r0
 80056ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d121      	bne.n	800570a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <I2SEx_RxISR_I2SExt+0x90>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d101      	bne.n	80056d4 <I2SEx_RxISR_I2SExt+0x50>
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <I2SEx_RxISR_I2SExt+0x94>)
 80056d2:	e001      	b.n	80056d8 <I2SEx_RxISR_I2SExt+0x54>
 80056d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	490d      	ldr	r1, [pc, #52]	; (8005714 <I2SEx_RxISR_I2SExt+0x90>)
 80056e0:	428b      	cmp	r3, r1
 80056e2:	d101      	bne.n	80056e8 <I2SEx_RxISR_I2SExt+0x64>
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <I2SEx_RxISR_I2SExt+0x94>)
 80056e6:	e001      	b.n	80056ec <I2SEx_RxISR_I2SExt+0x68>
 80056e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff03 	bl	8005510 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40003800 	.word	0x40003800
 8005718:	40003400 	.word	0x40003400

0800571c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e267      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d075      	beq.n	8005826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800573a:	4b88      	ldr	r3, [pc, #544]	; (800595c <HAL_RCC_OscConfig+0x240>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
 8005742:	2b04      	cmp	r3, #4
 8005744:	d00c      	beq.n	8005760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005746:	4b85      	ldr	r3, [pc, #532]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800574e:	2b08      	cmp	r3, #8
 8005750:	d112      	bne.n	8005778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005752:	4b82      	ldr	r3, [pc, #520]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800575e:	d10b      	bne.n	8005778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	4b7e      	ldr	r3, [pc, #504]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d05b      	beq.n	8005824 <HAL_RCC_OscConfig+0x108>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d157      	bne.n	8005824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e242      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005780:	d106      	bne.n	8005790 <HAL_RCC_OscConfig+0x74>
 8005782:	4b76      	ldr	r3, [pc, #472]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a75      	ldr	r2, [pc, #468]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e01d      	b.n	80057cc <HAL_RCC_OscConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x98>
 800579a:	4b70      	ldr	r3, [pc, #448]	; (800595c <HAL_RCC_OscConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a6f      	ldr	r2, [pc, #444]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b6d      	ldr	r3, [pc, #436]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6c      	ldr	r2, [pc, #432]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00b      	b.n	80057cc <HAL_RCC_OscConfig+0xb0>
 80057b4:	4b69      	ldr	r3, [pc, #420]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a68      	ldr	r2, [pc, #416]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4b66      	ldr	r3, [pc, #408]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a65      	ldr	r2, [pc, #404]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d013      	beq.n	80057fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fc fc6a 	bl	80020ac <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fc fc66 	bl	80020ac <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e207      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ee:	4b5b      	ldr	r3, [pc, #364]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0xc0>
 80057fa:	e014      	b.n	8005826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fc fc56 	bl	80020ac <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005804:	f7fc fc52 	bl	80020ac <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1f3      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005816:	4b51      	ldr	r3, [pc, #324]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0xe8>
 8005822:	e000      	b.n	8005826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d063      	beq.n	80058fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005832:	4b4a      	ldr	r3, [pc, #296]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583e:	4b47      	ldr	r3, [pc, #284]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005846:	2b08      	cmp	r3, #8
 8005848:	d11c      	bne.n	8005884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584a:	4b44      	ldr	r3, [pc, #272]	; (800595c <HAL_RCC_OscConfig+0x240>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d116      	bne.n	8005884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005856:	4b41      	ldr	r3, [pc, #260]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCC_OscConfig+0x152>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e1c7      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586e:	4b3b      	ldr	r3, [pc, #236]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4937      	ldr	r1, [pc, #220]	; (800595c <HAL_RCC_OscConfig+0x240>)
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005882:	e03a      	b.n	80058fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588c:	4b34      	ldr	r3, [pc, #208]	; (8005960 <HAL_RCC_OscConfig+0x244>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fc fc0b 	bl	80020ac <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800589a:	f7fc fc07 	bl	80020ac <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e1a8      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ac:	4b2b      	ldr	r3, [pc, #172]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b8:	4b28      	ldr	r3, [pc, #160]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4925      	ldr	r1, [pc, #148]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
 80058cc:	e015      	b.n	80058fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ce:	4b24      	ldr	r3, [pc, #144]	; (8005960 <HAL_RCC_OscConfig+0x244>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d4:	f7fc fbea 	bl	80020ac <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fc fbe6 	bl	80020ac <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e187      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ee:	4b1b      	ldr	r3, [pc, #108]	; (800595c <HAL_RCC_OscConfig+0x240>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d036      	beq.n	8005974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <HAL_RCC_OscConfig+0x248>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7fc fbca 	bl	80020ac <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591c:	f7fc fbc6 	bl	80020ac <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e167      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592e:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_RCC_OscConfig+0x240>)
 8005930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x200>
 800593a:	e01b      	b.n	8005974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <HAL_RCC_OscConfig+0x248>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005942:	f7fc fbb3 	bl	80020ac <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005948:	e00e      	b.n	8005968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800594a:	f7fc fbaf 	bl	80020ac <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d907      	bls.n	8005968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e150      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
 800595c:	40023800 	.word	0x40023800
 8005960:	42470000 	.word	0x42470000
 8005964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005968:	4b88      	ldr	r3, [pc, #544]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 800596a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1ea      	bne.n	800594a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 8097 	beq.w	8005ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005986:	4b81      	ldr	r3, [pc, #516]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	4b7d      	ldr	r3, [pc, #500]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	4a7c      	ldr	r2, [pc, #496]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 800599c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a0:	6413      	str	r3, [r2, #64]	; 0x40
 80059a2:	4b7a      	ldr	r3, [pc, #488]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ae:	2301      	movs	r3, #1
 80059b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b2:	4b77      	ldr	r3, [pc, #476]	; (8005b90 <HAL_RCC_OscConfig+0x474>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d118      	bne.n	80059f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059be:	4b74      	ldr	r3, [pc, #464]	; (8005b90 <HAL_RCC_OscConfig+0x474>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a73      	ldr	r2, [pc, #460]	; (8005b90 <HAL_RCC_OscConfig+0x474>)
 80059c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ca:	f7fc fb6f 	bl	80020ac <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d2:	f7fc fb6b 	bl	80020ac <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e10c      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e4:	4b6a      	ldr	r3, [pc, #424]	; (8005b90 <HAL_RCC_OscConfig+0x474>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0f0      	beq.n	80059d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d106      	bne.n	8005a06 <HAL_RCC_OscConfig+0x2ea>
 80059f8:	4b64      	ldr	r3, [pc, #400]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fc:	4a63      	ldr	r2, [pc, #396]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6713      	str	r3, [r2, #112]	; 0x70
 8005a04:	e01c      	b.n	8005a40 <HAL_RCC_OscConfig+0x324>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b05      	cmp	r3, #5
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x30c>
 8005a0e:	4b5f      	ldr	r3, [pc, #380]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a5e      	ldr	r2, [pc, #376]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a14:	f043 0304 	orr.w	r3, r3, #4
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1a:	4b5c      	ldr	r3, [pc, #368]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4a5b      	ldr	r2, [pc, #364]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
 8005a26:	e00b      	b.n	8005a40 <HAL_RCC_OscConfig+0x324>
 8005a28:	4b58      	ldr	r3, [pc, #352]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a57      	ldr	r2, [pc, #348]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	6713      	str	r3, [r2, #112]	; 0x70
 8005a34:	4b55      	ldr	r3, [pc, #340]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	4a54      	ldr	r2, [pc, #336]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a3a:	f023 0304 	bic.w	r3, r3, #4
 8005a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d015      	beq.n	8005a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a48:	f7fc fb30 	bl	80020ac <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4e:	e00a      	b.n	8005a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a50:	f7fc fb2c 	bl	80020ac <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e0cb      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a66:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0ee      	beq.n	8005a50 <HAL_RCC_OscConfig+0x334>
 8005a72:	e014      	b.n	8005a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a74:	f7fc fb1a 	bl	80020ac <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a7a:	e00a      	b.n	8005a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a7c:	f7fc fb16 	bl	80020ac <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e0b5      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a92:	4b3e      	ldr	r3, [pc, #248]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1ee      	bne.n	8005a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d105      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa4:	4b39      	ldr	r3, [pc, #228]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	4a38      	ldr	r2, [pc, #224]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80a1 	beq.w	8005bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aba:	4b34      	ldr	r3, [pc, #208]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d05c      	beq.n	8005b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d141      	bne.n	8005b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ace:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <HAL_RCC_OscConfig+0x478>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad4:	f7fc faea 	bl	80020ac <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005adc:	f7fc fae6 	bl	80020ac <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e087      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aee:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69da      	ldr	r2, [r3, #28]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	019b      	lsls	r3, r3, #6
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	3b01      	subs	r3, #1
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	061b      	lsls	r3, r3, #24
 8005b1e:	491b      	ldr	r1, [pc, #108]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_RCC_OscConfig+0x478>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2a:	f7fc fabf 	bl	80020ac <HAL_GetTick>
 8005b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b30:	e008      	b.n	8005b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b32:	f7fc fabb 	bl	80020ac <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e05c      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b44:	4b11      	ldr	r3, [pc, #68]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0f0      	beq.n	8005b32 <HAL_RCC_OscConfig+0x416>
 8005b50:	e054      	b.n	8005bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b52:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_RCC_OscConfig+0x478>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fc faa8 	bl	80020ac <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fc faa4 	bl	80020ac <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e045      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <HAL_RCC_OscConfig+0x470>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x444>
 8005b7e:	e03d      	b.n	8005bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e038      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	40007000 	.word	0x40007000
 8005b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b98:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <HAL_RCC_OscConfig+0x4ec>)
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d028      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d121      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d11a      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bc8:	4013      	ands	r3, r2
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d111      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	3b01      	subs	r3, #1
 8005be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40023800 	.word	0x40023800

08005c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0cc      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c20:	4b68      	ldr	r3, [pc, #416]	; (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d90c      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b65      	ldr	r3, [pc, #404]	; (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b63      	ldr	r3, [pc, #396]	; (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0b8      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c60:	4b59      	ldr	r3, [pc, #356]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4a58      	ldr	r2, [pc, #352]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c78:	4b53      	ldr	r3, [pc, #332]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	494d      	ldr	r1, [pc, #308]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d044      	beq.n	8005d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b47      	ldr	r3, [pc, #284]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d119      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e07f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d003      	beq.n	8005cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cca:	4b3f      	ldr	r3, [pc, #252]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e06f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cda:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e067      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cea:	4b37      	ldr	r3, [pc, #220]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4934      	ldr	r1, [pc, #208]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cfc:	f7fc f9d6 	bl	80020ac <HAL_GetTick>
 8005d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d04:	f7fc f9d2 	bl	80020ac <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e04f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d1a:	4b2b      	ldr	r3, [pc, #172]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 020c 	and.w	r2, r3, #12
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d1eb      	bne.n	8005d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d2c:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d20c      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3a:	4b22      	ldr	r3, [pc, #136]	; (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e032      	b.n	8005dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d60:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4916      	ldr	r1, [pc, #88]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	490e      	ldr	r1, [pc, #56]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d92:	f000 f821 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005d96:	4602      	mov	r2, r0
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	490a      	ldr	r1, [pc, #40]	; (8005dcc <HAL_RCC_ClockConfig+0x1c0>)
 8005da4:	5ccb      	ldrb	r3, [r1, r3]
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc f936 	bl	8002024 <HAL_InitTick>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40023c00 	.word	0x40023c00
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	0800ab64 	.word	0x0800ab64
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	20000004 	.word	0x20000004

08005dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ddc:	b094      	sub	sp, #80	; 0x50
 8005dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	2300      	movs	r3, #0
 8005de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de8:	2300      	movs	r3, #0
 8005dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005df0:	4b79      	ldr	r3, [pc, #484]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 030c 	and.w	r3, r3, #12
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d00d      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x40>
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	f200 80e1 	bhi.w	8005fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x34>
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d003      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e0a:	e0db      	b.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e0c:	4b73      	ldr	r3, [pc, #460]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005e10:	e0db      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e12:	4b73      	ldr	r3, [pc, #460]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e16:	e0d8      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e18:	4b6f      	ldr	r3, [pc, #444]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e22:	4b6d      	ldr	r3, [pc, #436]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d063      	beq.n	8005ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e2e:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	099b      	lsrs	r3, r3, #6
 8005e34:	2200      	movs	r2, #0
 8005e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
 8005e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	f04f 0000 	mov.w	r0, #0
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	0159      	lsls	r1, r3, #5
 8005e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e5c:	0150      	lsls	r0, r2, #5
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4621      	mov	r1, r4
 8005e64:	1a51      	subs	r1, r2, r1
 8005e66:	6139      	str	r1, [r7, #16]
 8005e68:	4629      	mov	r1, r5
 8005e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	018b      	lsls	r3, r1, #6
 8005e80:	4651      	mov	r1, sl
 8005e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e86:	4651      	mov	r1, sl
 8005e88:	018a      	lsls	r2, r1, #6
 8005e8a:	4651      	mov	r1, sl
 8005e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8005e90:	4659      	mov	r1, fp
 8005e92:	eb63 0901 	sbc.w	r9, r3, r1
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eaa:	4690      	mov	r8, r2
 8005eac:	4699      	mov	r9, r3
 8005eae:	4623      	mov	r3, r4
 8005eb0:	eb18 0303 	adds.w	r3, r8, r3
 8005eb4:	60bb      	str	r3, [r7, #8]
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	eb49 0303 	adc.w	r3, r9, r3
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eca:	4629      	mov	r1, r5
 8005ecc:	024b      	lsls	r3, r1, #9
 8005ece:	4621      	mov	r1, r4
 8005ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	024a      	lsls	r2, r1, #9
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4619      	mov	r1, r3
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ede:	2200      	movs	r2, #0
 8005ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ee8:	f7fa fdc0 	bl	8000a6c <__aeabi_uldivmod>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef4:	e058      	b.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef6:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	2200      	movs	r2, #0
 8005efe:	4618      	mov	r0, r3
 8005f00:	4611      	mov	r1, r2
 8005f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	2300      	movs	r3, #0
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f10:	4642      	mov	r2, r8
 8005f12:	464b      	mov	r3, r9
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f04f 0100 	mov.w	r1, #0
 8005f1c:	0159      	lsls	r1, r3, #5
 8005f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f22:	0150      	lsls	r0, r2, #5
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4641      	mov	r1, r8
 8005f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f2e:	4649      	mov	r1, r9
 8005f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f48:	ebb2 040a 	subs.w	r4, r2, sl
 8005f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	00eb      	lsls	r3, r5, #3
 8005f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5e:	00e2      	lsls	r2, r4, #3
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	4643      	mov	r3, r8
 8005f66:	18e3      	adds	r3, r4, r3
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	eb45 0303 	adc.w	r3, r5, r3
 8005f70:	607b      	str	r3, [r7, #4]
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f7e:	4629      	mov	r1, r5
 8005f80:	028b      	lsls	r3, r1, #10
 8005f82:	4621      	mov	r1, r4
 8005f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f88:	4621      	mov	r1, r4
 8005f8a:	028a      	lsls	r2, r1, #10
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f92:	2200      	movs	r2, #0
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	61fa      	str	r2, [r7, #28]
 8005f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f9c:	f7fa fd66 	bl	8000a6c <__aeabi_uldivmod>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fc2:	e002      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fc4:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3750      	adds	r7, #80	; 0x50
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	007a1200 	.word	0x007a1200

08005fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	20000000 	.word	0x20000000

08005ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006000:	f7ff fff0 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8006004:	4602      	mov	r2, r0
 8006006:	4b05      	ldr	r3, [pc, #20]	; (800601c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	0a9b      	lsrs	r3, r3, #10
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	4903      	ldr	r1, [pc, #12]	; (8006020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006012:	5ccb      	ldrb	r3, [r1, r3]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40023800 	.word	0x40023800
 8006020:	0800ab74 	.word	0x0800ab74

08006024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006028:	f7ff ffdc 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	0b5b      	lsrs	r3, r3, #13
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4903      	ldr	r1, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40023800 	.word	0x40023800
 8006048:	0800ab74 	.word	0x0800ab74

0800604c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d105      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006070:	2b00      	cmp	r3, #0
 8006072:	d035      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006074:	4b62      	ldr	r3, [pc, #392]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800607a:	f7fc f817 	bl	80020ac <HAL_GetTick>
 800607e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006080:	e008      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006082:	f7fc f813 	bl	80020ac <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e0b0      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006094:	4b5b      	ldr	r3, [pc, #364]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f0      	bne.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	019a      	lsls	r2, r3, #6
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	071b      	lsls	r3, r3, #28
 80060ac:	4955      	ldr	r1, [pc, #340]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060b4:	4b52      	ldr	r3, [pc, #328]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060ba:	f7fb fff7 	bl	80020ac <HAL_GetTick>
 80060be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060c0:	e008      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060c2:	f7fb fff3 	bl	80020ac <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e090      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060d4:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0f0      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8083 	beq.w	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	4b44      	ldr	r3, [pc, #272]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	4a43      	ldr	r2, [pc, #268]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fc:	6413      	str	r3, [r2, #64]	; 0x40
 80060fe:	4b41      	ldr	r3, [pc, #260]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800610a:	4b3f      	ldr	r3, [pc, #252]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3e      	ldr	r2, [pc, #248]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006114:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006116:	f7fb ffc9 	bl	80020ac <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800611e:	f7fb ffc5 	bl	80020ac <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e062      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006130:	4b35      	ldr	r3, [pc, #212]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800613c:	4b31      	ldr	r3, [pc, #196]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006144:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d02f      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	429a      	cmp	r2, r3
 8006158:	d028      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800615a:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006162:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006164:	4b29      	ldr	r3, [pc, #164]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800616a:	4b28      	ldr	r3, [pc, #160]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006170:	4a24      	ldr	r2, [pc, #144]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d114      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006182:	f7fb ff93 	bl	80020ac <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006188:	e00a      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618a:	f7fb ff8f 	bl	80020ac <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	; 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e02a      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a0:	4b18      	ldr	r3, [pc, #96]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0ee      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b8:	d10d      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061ba:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ce:	490d      	ldr	r1, [pc, #52]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	608b      	str	r3, [r1, #8]
 80061d4:	e005      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	4a0a      	ldr	r2, [pc, #40]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061e0:	6093      	str	r3, [r2, #8]
 80061e2:	4b08      	ldr	r3, [pc, #32]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ee:	4905      	ldr	r1, [pc, #20]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	42470068 	.word	0x42470068
 8006204:	40023800 	.word	0x40023800
 8006208:	40007000 	.word	0x40007000
 800620c:	42470e40 	.word	0x42470e40

08006210 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d13e      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800622e:	4b23      	ldr	r3, [pc, #140]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d12f      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006244:	4b1e      	ldr	r3, [pc, #120]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006246:	617b      	str	r3, [r7, #20]
          break;
 8006248:	e02f      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800624a:	4b1c      	ldr	r3, [pc, #112]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006256:	d108      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006258:	4b18      	ldr	r3, [pc, #96]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006260:	4a18      	ldr	r2, [pc, #96]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	e007      	b.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006274:	fbb2 f3f3 	udiv	r3, r2, r3
 8006278:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800627a:	4b10      	ldr	r3, [pc, #64]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800627c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006294:	0f1b      	lsrs	r3, r3, #28
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	617b      	str	r3, [r7, #20]
          break;
 80062a2:	e002      	b.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
          break;
 80062a8:	bf00      	nop
        }
      }
      break;
 80062aa:	bf00      	nop
    }
  }
  return frequency;
 80062ac:	697b      	ldr	r3, [r7, #20]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	00bb8000 	.word	0x00bb8000
 80062c4:	007a1200 	.word	0x007a1200
 80062c8:	00f42400 	.word	0x00f42400

080062cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e07b      	b.n	80063d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d108      	bne.n	80062f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ee:	d009      	beq.n	8006304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	61da      	str	r2, [r3, #28]
 80062f6:	e005      	b.n	8006304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fb fd08 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800633a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800634c:	431a      	orrs	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006356:	431a      	orrs	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	431a      	orrs	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006388:	ea42 0103 	orr.w	r1, r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	0c1b      	lsrs	r3, r3, #16
 80063a2:	f003 0104 	and.w	r1, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	f003 0210 	and.w	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e033      	b.n	8006458 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fb fcdd 	bl	8001dc4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f90a 	bl	800662c <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006426:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006436:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006446:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08a      	sub	sp, #40	; 0x28
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b01      	cmp	r3, #1
 800647a:	d17c      	bne.n	8006576 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_USART_Transmit+0x28>
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e075      	b.n	8006578 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_USART_Transmit+0x3a>
 8006496:	2302      	movs	r3, #2
 8006498:	e06e      	b.n	8006578 <HAL_USART_Transmit+0x118>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2212      	movs	r2, #18
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064b0:	f7fb fdfc 	bl	80020ac <HAL_GetTick>
 80064b4:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	88fa      	ldrh	r2, [r7, #6]
 80064ba:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	88fa      	ldrh	r2, [r7, #6]
 80064c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d108      	bne.n	80064de <HAL_USART_Transmit+0x7e>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	61bb      	str	r3, [r7, #24]
 80064dc:	e003      	b.n	80064e6 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80064e6:	e02a      	b.n	800653e <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	2180      	movs	r1, #128	; 0x80
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f844 	bl	8006580 <USART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e03a      	b.n	8006578 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10b      	bne.n	8006520 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006516:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	3302      	adds	r3, #2
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e007      	b.n	8006530 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	3301      	adds	r3, #1
 800652e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1cf      	bne.n	80064e8 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f814 	bl	8006580 <USART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00a      	b.n	8006578 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e000      	b.n	8006578 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8006576:	2302      	movs	r3, #2
  }
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006590:	e038      	b.n	8006604 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d034      	beq.n	8006604 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d007      	beq.n	80065b0 <USART_WaitOnFlagUntilTimeout+0x30>
 80065a0:	f7fb fd84 	bl	80020ac <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d229      	bcs.n	8006604 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065be:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 0220 	bic.w	r2, r2, #32
 80065ce:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065de:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e00f      	b.n	8006624 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4013      	ands	r3, r2
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	429a      	cmp	r2, r3
 8006612:	bf0c      	ite	eq
 8006614:	2301      	moveq	r3, #1
 8006616:	2300      	movne	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	79fb      	ldrb	r3, [r7, #7]
 800661e:	429a      	cmp	r2, r3
 8006620:	d0b7      	beq.n	8006592 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b0c6      	sub	sp, #280	; 0x118
 8006632:	af00      	add	r7, sp, #0
 8006634:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8006638:	2300      	movs	r3, #0
 800663a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800663e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68d9      	ldr	r1, [r3, #12]
 8006646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f021 030c 	bic.w	r3, r1, #12
 8006650:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8006652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006662:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006666:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800666a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006674:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006676:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	431a      	orrs	r2, r3
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006684:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006686:	431a      	orrs	r2, r3
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668c:	4313      	orrs	r3, r2
 800668e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006692:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8006696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a0:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80066a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066b6:	f023 030c 	bic.w	r3, r3, #12
 80066ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80066be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d8:	4313      	orrs	r3, r2
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80066e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ec:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80066ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6959      	ldr	r1, [r3, #20]
 80066f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8006700:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8006702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b8b      	ldr	r3, [pc, #556]	; (8006938 <USART_SetConfig+0x30c>)
 800670a:	429a      	cmp	r2, r3
 800670c:	d006      	beq.n	800671c <USART_SetConfig+0xf0>
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	4b89      	ldr	r3, [pc, #548]	; (800693c <USART_SetConfig+0x310>)
 8006716:	429a      	cmp	r2, r3
 8006718:	f040 8114 	bne.w	8006944 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800671c:	f7ff fc82 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 8006720:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006724:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006728:	2200      	movs	r2, #0
 800672a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800672e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006732:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	1891      	adds	r1, r2, r2
 800673c:	6739      	str	r1, [r7, #112]	; 0x70
 800673e:	415b      	adcs	r3, r3
 8006740:	677b      	str	r3, [r7, #116]	; 0x74
 8006742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006746:	4621      	mov	r1, r4
 8006748:	eb12 0801 	adds.w	r8, r2, r1
 800674c:	4629      	mov	r1, r5
 800674e:	eb43 0901 	adc.w	r9, r3, r1
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006766:	4690      	mov	r8, r2
 8006768:	4699      	mov	r9, r3
 800676a:	4623      	mov	r3, r4
 800676c:	eb18 0303 	adds.w	r3, r8, r3
 8006770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006774:	462b      	mov	r3, r5
 8006776:	eb49 0303 	adc.w	r3, r9, r3
 800677a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800678a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800678e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006792:	460b      	mov	r3, r1
 8006794:	18db      	adds	r3, r3, r3
 8006796:	66bb      	str	r3, [r7, #104]	; 0x68
 8006798:	4613      	mov	r3, r2
 800679a:	eb42 0303 	adc.w	r3, r2, r3
 800679e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067a0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80067a4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80067a8:	f7fa f960 	bl	8000a6c <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b63      	ldr	r3, [pc, #396]	; (8006940 <USART_SetConfig+0x314>)
 80067b2:	fba3 2302 	umull	r2, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	011c      	lsls	r4, r3, #4
 80067ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067c4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	1891      	adds	r1, r2, r2
 80067d2:	6639      	str	r1, [r7, #96]	; 0x60
 80067d4:	415b      	adcs	r3, r3
 80067d6:	667b      	str	r3, [r7, #100]	; 0x64
 80067d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80067dc:	4641      	mov	r1, r8
 80067de:	1851      	adds	r1, r2, r1
 80067e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80067e2:	4649      	mov	r1, r9
 80067e4:	414b      	adcs	r3, r1
 80067e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80067f4:	4659      	mov	r1, fp
 80067f6:	00cb      	lsls	r3, r1, #3
 80067f8:	4651      	mov	r1, sl
 80067fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067fe:	4651      	mov	r1, sl
 8006800:	00ca      	lsls	r2, r1, #3
 8006802:	4610      	mov	r0, r2
 8006804:	4619      	mov	r1, r3
 8006806:	4603      	mov	r3, r0
 8006808:	4642      	mov	r2, r8
 800680a:	189b      	adds	r3, r3, r2
 800680c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006810:	464b      	mov	r3, r9
 8006812:	460a      	mov	r2, r1
 8006814:	eb42 0303 	adc.w	r3, r2, r3
 8006818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800681c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006828:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800682c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006830:	460b      	mov	r3, r1
 8006832:	18db      	adds	r3, r3, r3
 8006834:	653b      	str	r3, [r7, #80]	; 0x50
 8006836:	4613      	mov	r3, r2
 8006838:	eb42 0303 	adc.w	r3, r2, r3
 800683c:	657b      	str	r3, [r7, #84]	; 0x54
 800683e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006842:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006846:	f7fa f911 	bl	8000a6c <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4611      	mov	r1, r2
 8006850:	4b3b      	ldr	r3, [pc, #236]	; (8006940 <USART_SetConfig+0x314>)
 8006852:	fba3 2301 	umull	r2, r3, r3, r1
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2264      	movs	r2, #100	; 0x64
 800685a:	fb02 f303 	mul.w	r3, r2, r3
 800685e:	1acb      	subs	r3, r1, r3
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006866:	4b36      	ldr	r3, [pc, #216]	; (8006940 <USART_SetConfig+0x314>)
 8006868:	fba3 2302 	umull	r2, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006874:	441c      	add	r4, r3
 8006876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800687a:	2200      	movs	r2, #0
 800687c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006880:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006884:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	1891      	adds	r1, r2, r2
 800688e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006890:	415b      	adcs	r3, r3
 8006892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006894:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006898:	4641      	mov	r1, r8
 800689a:	1851      	adds	r1, r2, r1
 800689c:	6439      	str	r1, [r7, #64]	; 0x40
 800689e:	4649      	mov	r1, r9
 80068a0:	414b      	adcs	r3, r1
 80068a2:	647b      	str	r3, [r7, #68]	; 0x44
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 80068b0:	4659      	mov	r1, fp
 80068b2:	00cb      	lsls	r3, r1, #3
 80068b4:	4651      	mov	r1, sl
 80068b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ba:	4651      	mov	r1, sl
 80068bc:	00ca      	lsls	r2, r1, #3
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	4642      	mov	r2, r8
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068cc:	464b      	mov	r3, r9
 80068ce:	460a      	mov	r2, r1
 80068d0:	eb42 0303 	adc.w	r3, r2, r3
 80068d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068ec:	460b      	mov	r3, r1
 80068ee:	18db      	adds	r3, r3, r3
 80068f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80068f2:	4613      	mov	r3, r2
 80068f4:	eb42 0303 	adc.w	r3, r2, r3
 80068f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006902:	f7fa f8b3 	bl	8000a6c <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <USART_SetConfig+0x314>)
 800690c:	fba3 1302 	umull	r1, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	2164      	movs	r1, #100	; 0x64
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	3332      	adds	r3, #50	; 0x32
 800691e:	4a08      	ldr	r2, [pc, #32]	; (8006940 <USART_SetConfig+0x314>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 0207 	and.w	r2, r3, #7
 800692a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4422      	add	r2, r4
 8006932:	609a      	str	r2, [r3, #8]
 8006934:	e109      	b.n	8006b4a <USART_SetConfig+0x51e>
 8006936:	bf00      	nop
 8006938:	40011000 	.word	0x40011000
 800693c:	40011400 	.word	0x40011400
 8006940:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006944:	f7ff fb5a 	bl	8005ffc <HAL_RCC_GetPCLK1Freq>
 8006948:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800694c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006950:	2200      	movs	r2, #0
 8006952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006956:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800695a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800695e:	4642      	mov	r2, r8
 8006960:	464b      	mov	r3, r9
 8006962:	1891      	adds	r1, r2, r2
 8006964:	6339      	str	r1, [r7, #48]	; 0x30
 8006966:	415b      	adcs	r3, r3
 8006968:	637b      	str	r3, [r7, #52]	; 0x34
 800696a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800696e:	4641      	mov	r1, r8
 8006970:	1854      	adds	r4, r2, r1
 8006972:	4649      	mov	r1, r9
 8006974:	eb43 0501 	adc.w	r5, r3, r1
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	00eb      	lsls	r3, r5, #3
 8006982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006986:	00e2      	lsls	r2, r4, #3
 8006988:	4614      	mov	r4, r2
 800698a:	461d      	mov	r5, r3
 800698c:	4643      	mov	r3, r8
 800698e:	18e3      	adds	r3, r4, r3
 8006990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006994:	464b      	mov	r3, r9
 8006996:	eb45 0303 	adc.w	r3, r5, r3
 800699a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800699e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069aa:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069b2:	460b      	mov	r3, r1
 80069b4:	18db      	adds	r3, r3, r3
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b8:	4613      	mov	r3, r2
 80069ba:	eb42 0303 	adc.w	r3, r2, r3
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069c8:	f7fa f850 	bl	8000a6c <__aeabi_uldivmod>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4b61      	ldr	r3, [pc, #388]	; (8006b58 <USART_SetConfig+0x52c>)
 80069d2:	fba3 2302 	umull	r2, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	011c      	lsls	r4, r3, #4
 80069da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069e8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	6239      	str	r1, [r7, #32]
 80069f4:	415b      	adcs	r3, r3
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
 80069f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069fc:	4641      	mov	r1, r8
 80069fe:	eb12 0a01 	adds.w	sl, r2, r1
 8006a02:	4649      	mov	r1, r9
 8006a04:	eb43 0b01 	adc.w	fp, r3, r1
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a1c:	4692      	mov	sl, r2
 8006a1e:	469b      	mov	fp, r3
 8006a20:	4643      	mov	r3, r8
 8006a22:	eb1a 0303 	adds.w	r3, sl, r3
 8006a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a44:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006a48:	460b      	mov	r3, r1
 8006a4a:	18db      	adds	r3, r3, r3
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	eb42 0303 	adc.w	r3, r2, r3
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a5a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a5e:	f7fa f805 	bl	8000a6c <__aeabi_uldivmod>
 8006a62:	4602      	mov	r2, r0
 8006a64:	460b      	mov	r3, r1
 8006a66:	4611      	mov	r1, r2
 8006a68:	4b3b      	ldr	r3, [pc, #236]	; (8006b58 <USART_SetConfig+0x52c>)
 8006a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	2264      	movs	r2, #100	; 0x64
 8006a72:	fb02 f303 	mul.w	r3, r2, r3
 8006a76:	1acb      	subs	r3, r1, r3
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a7e:	4b36      	ldr	r3, [pc, #216]	; (8006b58 <USART_SetConfig+0x52c>)
 8006a80:	fba3 2302 	umull	r2, r3, r3, r2
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a8c:	441c      	add	r4, r3
 8006a8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006aa0:	4642      	mov	r2, r8
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	1891      	adds	r1, r2, r2
 8006aa6:	6139      	str	r1, [r7, #16]
 8006aa8:	415b      	adcs	r3, r3
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ab0:	4641      	mov	r1, r8
 8006ab2:	1851      	adds	r1, r2, r1
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	414b      	adcs	r3, r1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ac8:	4659      	mov	r1, fp
 8006aca:	00cb      	lsls	r3, r1, #3
 8006acc:	4651      	mov	r1, sl
 8006ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad2:	4651      	mov	r1, sl
 8006ad4:	00ca      	lsls	r2, r1, #3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4603      	mov	r3, r0
 8006adc:	4642      	mov	r2, r8
 8006ade:	189b      	adds	r3, r3, r2
 8006ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	460a      	mov	r2, r1
 8006ae8:	eb42 0303 	adc.w	r3, r2, r3
 8006aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006afa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006afc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006b00:	460b      	mov	r3, r1
 8006b02:	18db      	adds	r3, r3, r3
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	eb42 0303 	adc.w	r3, r2, r3
 8006b0c:	607b      	str	r3, [r7, #4]
 8006b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b16:	f7f9 ffa9 	bl	8000a6c <__aeabi_uldivmod>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <USART_SetConfig+0x52c>)
 8006b20:	fba3 1302 	umull	r1, r3, r3, r2
 8006b24:	095b      	lsrs	r3, r3, #5
 8006b26:	2164      	movs	r1, #100	; 0x64
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	3332      	adds	r3, #50	; 0x32
 8006b32:	4a09      	ldr	r2, [pc, #36]	; (8006b58 <USART_SetConfig+0x52c>)
 8006b34:	fba2 2303 	umull	r2, r3, r2, r3
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	f003 0207 	and.w	r2, r3, #7
 8006b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4422      	add	r2, r4
 8006b46:	609a      	str	r2, [r3, #8]
  }
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006b50:	46bd      	mov	sp, r7
 8006b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b56:	bf00      	nop
 8006b58:	51eb851f 	.word	0x51eb851f

08006b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	f107 001c 	add.w	r0, r7, #28
 8006b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d122      	bne.n	8006bba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d105      	bne.n	8006bae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f9c0 	bl	8006f34 <USB_CoreReset>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
 8006bb8:	e01a      	b.n	8006bf0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9b4 	bl	8006f34 <USB_CoreReset>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
 8006be2:	e005      	b.n	8006bf0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d10b      	bne.n	8006c0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f043 0206 	orr.w	r2, r3, #6
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f043 0220 	orr.w	r2, r3, #32
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c1a:	b004      	add	sp, #16
 8006c1c:	4770      	bx	lr

08006c1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f043 0201 	orr.w	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 0201 	bic.w	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d115      	bne.n	8006cb0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006c90:	2001      	movs	r0, #1
 8006c92:	f7fb fa17 	bl	80020c4 <HAL_Delay>
      ms++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f93a 	bl	8006f16 <USB_GetMode>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d01e      	beq.n	8006ce6 <USB_SetCurrentMode+0x84>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b31      	cmp	r3, #49	; 0x31
 8006cac:	d9f0      	bls.n	8006c90 <USB_SetCurrentMode+0x2e>
 8006cae:	e01a      	b.n	8006ce6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d115      	bne.n	8006ce2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	f7fb f9fe 	bl	80020c4 <HAL_Delay>
      ms++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f921 	bl	8006f16 <USB_GetMode>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <USB_SetCurrentMode+0x84>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b31      	cmp	r3, #49	; 0x31
 8006cde:	d9f0      	bls.n	8006cc2 <USB_SetCurrentMode+0x60>
 8006ce0:	e001      	b.n	8006ce6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e005      	b.n	8006cf2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b32      	cmp	r3, #50	; 0x32
 8006cea:	d101      	bne.n	8006cf0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <USB_FlushTxFifo+0x64>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e01b      	b.n	8006d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	daf2      	bge.n	8006d0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	019b      	lsls	r3, r3, #6
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <USB_FlushTxFifo+0x64>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d901      	bls.n	8006d46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e006      	b.n	8006d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d0f0      	beq.n	8006d34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	00030d40 	.word	0x00030d40

08006d64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <USB_FlushRxFifo+0x5c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e018      	b.n	8006db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	daf2      	bge.n	8006d70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2210      	movs	r2, #16
 8006d92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4a08      	ldr	r2, [pc, #32]	; (8006dc0 <USB_FlushRxFifo+0x5c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e006      	b.n	8006db4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	d0f0      	beq.n	8006d94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	00030d40 	.word	0x00030d40

08006dc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b089      	sub	sp, #36	; 0x24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	71fb      	strb	r3, [r7, #7]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d123      	bne.n	8006e32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dea:	88bb      	ldrh	r3, [r7, #4]
 8006dec:	3303      	adds	r3, #3
 8006dee:	089b      	lsrs	r3, r3, #2
 8006df0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	e018      	b.n	8006e2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	031a      	lsls	r2, r3, #12
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e04:	461a      	mov	r2, r3
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3301      	adds	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	3301      	adds	r3, #1
 8006e22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61bb      	str	r3, [r7, #24]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d3e2      	bcc.n	8006df8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3724      	adds	r7, #36	; 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b08b      	sub	sp, #44	; 0x2c
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	089b      	lsrs	r3, r3, #2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	f003 0303 	and.w	r3, r3, #3
 8006e64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e66:	2300      	movs	r3, #0
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	e014      	b.n	8006e96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	3301      	adds	r3, #1
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	3301      	adds	r3, #1
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	3301      	adds	r3, #1
 8006e94:	623b      	str	r3, [r7, #32]
 8006e96:	6a3a      	ldr	r2, [r7, #32]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d3e6      	bcc.n	8006e6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01e      	beq.n	8006ee2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f107 0310 	add.w	r3, r7, #16
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ed6:	8bfb      	ldrh	r3, [r7, #30]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006edc:	8bfb      	ldrh	r3, [r7, #30]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1ea      	bne.n	8006eb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	372c      	adds	r7, #44	; 0x2c
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	4013      	ands	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f08:	68fb      	ldr	r3, [r7, #12]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0301 	and.w	r3, r3, #1
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a13      	ldr	r2, [pc, #76]	; (8006f98 <USB_CoreReset+0x64>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d901      	bls.n	8006f52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e01b      	b.n	8006f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	daf2      	bge.n	8006f40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	f043 0201 	orr.w	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a09      	ldr	r2, [pc, #36]	; (8006f98 <USB_CoreReset+0x64>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d901      	bls.n	8006f7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e006      	b.n	8006f8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d0f0      	beq.n	8006f6a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	00030d40 	.word	0x00030d40

08006f9c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b086      	sub	sp, #24
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d10a      	bne.n	800700e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007006:	f043 0304 	orr.w	r3, r3, #4
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e014      	b.n	8007038 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800701c:	f023 0304 	bic.w	r3, r3, #4
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e009      	b.n	8007038 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007032:	f023 0304 	bic.w	r3, r3, #4
 8007036:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007038:	2110      	movs	r1, #16
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fe5e 	bl	8006cfc <USB_FlushTxFifo>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7ff fe8a 	bl	8006d64 <USB_FlushRxFifo>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	e015      	b.n	800708c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	461a      	mov	r2, r3
 800706e:	f04f 33ff 	mov.w	r3, #4294967295
 8007072:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007080:	461a      	mov	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3301      	adds	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	429a      	cmp	r2, r3
 8007092:	d3e5      	bcc.n	8007060 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f04f 32ff 	mov.w	r2, #4294967295
 80070a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <USB_HostInit+0x16c>)
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a13      	ldr	r2, [pc, #76]	; (800710c <USB_HostInit+0x170>)
 80070c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80070c4:	e009      	b.n	80070da <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a10      	ldr	r2, [pc, #64]	; (8007110 <USB_HostInit+0x174>)
 80070d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a0f      	ldr	r2, [pc, #60]	; (8007114 <USB_HostInit+0x178>)
 80070d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d105      	bne.n	80070ec <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	f043 0210 	orr.w	r2, r3, #16
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <USB_HostInit+0x17c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80070f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007104:	b004      	add	sp, #16
 8007106:	4770      	bx	lr
 8007108:	01000200 	.word	0x01000200
 800710c:	00e00300 	.word	0x00e00300
 8007110:	00600080 	.word	0x00600080
 8007114:	004000e0 	.word	0x004000e0
 8007118:	a3200008 	.word	0xa3200008

0800711c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007154:	4313      	orrs	r3, r2
 8007156:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d107      	bne.n	800716e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007164:	461a      	mov	r2, r3
 8007166:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800716a:	6053      	str	r3, [r2, #4]
 800716c:	e009      	b.n	8007182 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d106      	bne.n	8007182 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800717a:	461a      	mov	r2, r3
 800717c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007180:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80071b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071c0:	2064      	movs	r0, #100	; 0x64
 80071c2:	f7fa ff7f 	bl	80020c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80071ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80071d4:	200a      	movs	r0, #10
 80071d6:	f7fa ff75 	bl	80020c4 <HAL_Delay>

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007208:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <USB_DriveVbus+0x44>
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d106      	bne.n	8007228 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007222:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007226:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007232:	d109      	bne.n	8007248 <USB_DriveVbus+0x64>
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007246:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	0c5b      	lsrs	r3, r3, #17
 8007274:	f003 0303 	and.w	r3, r3, #3
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	b29b      	uxth	r3, r3
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
	...

080072a8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	461a      	mov	r2, r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	70fb      	strb	r3, [r7, #3]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70bb      	strb	r3, [r7, #2]
 80072be:	4613      	mov	r3, r2
 80072c0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d6:	461a      	mov	r2, r3
 80072d8:	f04f 33ff 	mov.w	r3, #4294967295
 80072dc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80072de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d87e      	bhi.n	80073e4 <USB_HC_Init+0x13c>
 80072e6:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <USB_HC_Init+0x44>)
 80072e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ec:	080072fd 	.word	0x080072fd
 80072f0:	080073a7 	.word	0x080073a7
 80072f4:	080072fd 	.word	0x080072fd
 80072f8:	08007369 	.word	0x08007369
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072fc:	78fb      	ldrb	r3, [r7, #3]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	461a      	mov	r2, r3
 800730a:	f240 439d 	movw	r3, #1181	; 0x49d
 800730e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007310:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007314:	2b00      	cmp	r3, #0
 8007316:	da10      	bge.n	800733a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	440a      	add	r2, r1
 800732e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007336:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007338:	e057      	b.n	80073ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d051      	beq.n	80073ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	4413      	add	r3, r2
 800734e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	78fa      	ldrb	r2, [r7, #3]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	440a      	add	r2, r1
 800735c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007360:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007364:	60d3      	str	r3, [r2, #12]
      break;
 8007366:	e040      	b.n	80073ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4413      	add	r3, r2
 8007370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007374:	461a      	mov	r2, r3
 8007376:	f240 639d 	movw	r3, #1693	; 0x69d
 800737a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800737c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007380:	2b00      	cmp	r3, #0
 8007382:	da34      	bge.n	80073ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	4413      	add	r3, r2
 800738c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	0151      	lsls	r1, r2, #5
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	440a      	add	r2, r1
 800739a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800739e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80073a4:	e023      	b.n	80073ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b2:	461a      	mov	r2, r3
 80073b4:	f240 2325 	movw	r3, #549	; 0x225
 80073b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da17      	bge.n	80073f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80073e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80073e2:	e006      	b.n	80073f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	77fb      	strb	r3, [r7, #31]
      break;
 80073e8:	e004      	b.n	80073f4 <USB_HC_Init+0x14c>
      break;
 80073ea:	bf00      	nop
 80073ec:	e002      	b.n	80073f4 <USB_HC_Init+0x14c>
      break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <USB_HC_Init+0x14c>
      break;
 80073f2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	440a      	add	r2, r1
 800740a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800740e:	f043 0302 	orr.w	r3, r3, #2
 8007412:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	2101      	movs	r1, #1
 8007424:	fa01 f303 	lsl.w	r3, r1, r3
 8007428:	6939      	ldr	r1, [r7, #16]
 800742a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800742e:	4313      	orrs	r3, r2
 8007430:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800743e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007442:	2b00      	cmp	r3, #0
 8007444:	da03      	bge.n	800744e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	e001      	b.n	8007452 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff feff 	bl	8007256 <USB_GetHostSpeed>
 8007458:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800745a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800745e:	2b02      	cmp	r3, #2
 8007460:	d106      	bne.n	8007470 <USB_HC_Init+0x1c8>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d003      	beq.n	8007470 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	e001      	b.n	8007474 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007474:	787b      	ldrb	r3, [r7, #1]
 8007476:	059b      	lsls	r3, r3, #22
 8007478:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800747c:	78bb      	ldrb	r3, [r7, #2]
 800747e:	02db      	lsls	r3, r3, #11
 8007480:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007484:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007486:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800748a:	049b      	lsls	r3, r3, #18
 800748c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007490:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007492:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007494:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007498:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	0159      	lsls	r1, r3, #5
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	440b      	add	r3, r1
 80074a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074b0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d003      	beq.n	80074c2 <USB_HC_Init+0x21a>
 80074ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10f      	bne.n	80074e2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80074e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08c      	sub	sp, #48	; 0x30
 80074f0:	af02      	add	r7, sp, #8
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007508:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007512:	2b00      	cmp	r3, #0
 8007514:	d02d      	beq.n	8007572 <USB_HC_StartXfer+0x86>
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	791b      	ldrb	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d129      	bne.n	8007572 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d117      	bne.n	8007554 <USB_HC_StartXfer+0x68>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	79db      	ldrb	r3, [r3, #7]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <USB_HC_StartXfer+0x48>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	79db      	ldrb	r3, [r3, #7]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d10f      	bne.n	8007554 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	440a      	add	r2, r1
 800754a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800754e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007552:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007554:	79fb      	ldrb	r3, [r7, #7]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <USB_HC_StartXfer+0x86>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d107      	bne.n	8007572 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fa0f 	bl	800798c <USB_DoPing>
      return HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	e0f8      	b.n	8007764 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d018      	beq.n	80075ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	8912      	ldrh	r2, [r2, #8]
 8007582:	4413      	add	r3, r2
 8007584:	3b01      	subs	r3, #1
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	8912      	ldrh	r2, [r2, #8]
 800758a:	fbb3 f3f2 	udiv	r3, r3, r2
 800758e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007590:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007592:	8b7b      	ldrh	r3, [r7, #26]
 8007594:	429a      	cmp	r2, r3
 8007596:	d90b      	bls.n	80075b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007598:	8b7b      	ldrh	r3, [r7, #26]
 800759a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800759c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	8912      	ldrh	r2, [r2, #8]
 80075a2:	fb03 f202 	mul.w	r2, r3, r2
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	611a      	str	r2, [r3, #16]
 80075aa:	e001      	b.n	80075b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80075ac:	2301      	movs	r3, #1
 80075ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	78db      	ldrb	r3, [r3, #3]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d007      	beq.n	80075c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	8912      	ldrh	r2, [r2, #8]
 80075be:	fb03 f202 	mul.w	r2, r3, r2
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	611a      	str	r2, [r3, #16]
 80075c6:	e003      	b.n	80075d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	695a      	ldr	r2, [r3, #20]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075da:	04d9      	lsls	r1, r3, #19
 80075dc:	4b63      	ldr	r3, [pc, #396]	; (800776c <USB_HC_StartXfer+0x280>)
 80075de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	7a9b      	ldrb	r3, [r3, #10]
 80075e6:	075b      	lsls	r3, r3, #29
 80075e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075ec:	69f9      	ldr	r1, [r7, #28]
 80075ee:	0148      	lsls	r0, r1, #5
 80075f0:	6a39      	ldr	r1, [r7, #32]
 80075f2:	4401      	add	r1, r0
 80075f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	68d9      	ldr	r1, [r3, #12]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007612:	460a      	mov	r2, r1
 8007614:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf0c      	ite	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	2300      	movne	r3, #0
 800762a:	b2db      	uxtb	r3, r3
 800762c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	4413      	add	r3, r2
 8007636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	6a3a      	ldr	r2, [r7, #32]
 8007642:	440a      	add	r2, r1
 8007644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007648:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800764c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	4413      	add	r3, r2
 8007656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	7e7b      	ldrb	r3, [r7, #25]
 800765e:	075b      	lsls	r3, r3, #29
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	0148      	lsls	r0, r1, #5
 8007664:	6a39      	ldr	r1, [r7, #32]
 8007666:	4401      	add	r1, r0
 8007668:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800766c:	4313      	orrs	r3, r2
 800766e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007686:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	78db      	ldrb	r3, [r3, #3]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	e003      	b.n	80076a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b6:	461a      	mov	r2, r3
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	e04e      	b.n	8007764 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	78db      	ldrb	r3, [r3, #3]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d149      	bne.n	8007762 <USB_HC_StartXfer+0x276>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d045      	beq.n	8007762 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	79db      	ldrb	r3, [r3, #7]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d830      	bhi.n	8007740 <USB_HC_StartXfer+0x254>
 80076de:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <USB_HC_StartXfer+0x1f8>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007719 	.word	0x08007719
 80076ec:	080076f5 	.word	0x080076f5
 80076f0:	08007719 	.word	0x08007719
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	3303      	adds	r3, #3
 80076fa:	089b      	lsrs	r3, r3, #2
 80076fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80076fe:	8afa      	ldrh	r2, [r7, #22]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	b29b      	uxth	r3, r3
 8007706:	429a      	cmp	r2, r3
 8007708:	d91c      	bls.n	8007744 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	619a      	str	r2, [r3, #24]
        }
        break;
 8007716:	e015      	b.n	8007744 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	3303      	adds	r3, #3
 800771e:	089b      	lsrs	r3, r3, #2
 8007720:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007722:	8afa      	ldrh	r2, [r7, #22]
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	b29b      	uxth	r3, r3
 800772e:	429a      	cmp	r2, r3
 8007730:	d90a      	bls.n	8007748 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	619a      	str	r2, [r3, #24]
        }
        break;
 800773e:	e003      	b.n	8007748 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007740:	bf00      	nop
 8007742:	e002      	b.n	800774a <USB_HC_StartXfer+0x25e>
        break;
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <USB_HC_StartXfer+0x25e>
        break;
 8007748:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	68d9      	ldr	r1, [r3, #12]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	785a      	ldrb	r2, [r3, #1]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	b29b      	uxth	r3, r3
 8007758:	2000      	movs	r0, #0
 800775a:	9000      	str	r0, [sp, #0]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f7ff fb31 	bl	8006dc4 <USB_WritePacket>
  }

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3728      	adds	r7, #40	; 0x28
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	1ff80000 	.word	0x1ff80000

08007770 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	b29b      	uxth	r3, r3
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007792:	b480      	push	{r7}
 8007794:	b089      	sub	sp, #36	; 0x24
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	0c9b      	lsrs	r3, r3, #18
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	0fdb      	lsrs	r3, r3, #31
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d104      	bne.n	80077ec <USB_HC_Halt+0x5a>
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e0c8      	b.n	800797e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <USB_HC_Halt+0x66>
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d163      	bne.n	80078c0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	440a      	add	r2, r1
 800780e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007816:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 0320 	and.w	r3, r3, #32
 8007820:	2b00      	cmp	r3, #0
 8007822:	f040 80ab 	bne.w	800797c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d133      	bne.n	800789a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800784c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007850:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800786c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007870:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800787e:	d81d      	bhi.n	80078bc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007896:	d0ec      	beq.n	8007872 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007898:	e070      	b.n	800797c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078ba:	e05f      	b.n	800797c <USB_HC_Halt+0x1ea>
            break;
 80078bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80078be:	e05d      	b.n	800797c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d133      	bne.n	8007958 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	440a      	add	r2, r1
 8007906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800790a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800790e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	440a      	add	r2, r1
 8007926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800792a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800792e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793c:	d81d      	bhi.n	800797a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007954:	d0ec      	beq.n	8007930 <USB_HC_Halt+0x19e>
 8007956:	e011      	b.n	800797c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	440a      	add	r2, r1
 800796e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007972:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	e000      	b.n	800797c <USB_HC_Halt+0x1ea>
          break;
 800797a:	bf00      	nop
    }
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3724      	adds	r7, #36	; 0x24
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
	...

0800798c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800799c:	78fb      	ldrb	r3, [r7, #3]
 800799e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80079a0:	2301      	movs	r3, #1
 80079a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	04da      	lsls	r2, r3, #19
 80079a8:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <USB_DoPing+0x74>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	0151      	lsls	r1, r2, #5
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	440a      	add	r2, r1
 80079b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ea:	461a      	mov	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	1ff80000 	.word	0x1ff80000

08007a04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff f911 	bl	8006c40 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a1e:	2110      	movs	r1, #16
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff f96b 	bl	8006cfc <USB_FlushTxFifo>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff f997 	bl	8006d64 <USB_FlushRxFifo>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007a40:	2300      	movs	r3, #0
 8007a42:	61bb      	str	r3, [r7, #24]
 8007a44:	e01f      	b.n	8007a86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	3301      	adds	r3, #1
 8007a84:	61bb      	str	r3, [r7, #24]
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b0f      	cmp	r3, #15
 8007a8a:	d9dc      	bls.n	8007a46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61bb      	str	r3, [r7, #24]
 8007a90:	e034      	b.n	8007afc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aa8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ab8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ad8:	d80c      	bhi.n	8007af4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af0:	d0ec      	beq.n	8007acc <USB_StopHost+0xc8>
 8007af2:	e000      	b.n	8007af6 <USB_StopHost+0xf2>
        break;
 8007af4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61bb      	str	r3, [r7, #24]
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b0f      	cmp	r3, #15
 8007b00:	d9c7      	bls.n	8007a92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff f880 	bl	8006c1e <USB_EnableGlobalInt>

  return ret;
 8007b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3720      	adds	r7, #32
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b089      	sub	sp, #36	; 0x24
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007b30:	2301      	movs	r3, #1
 8007b32:	2202      	movs	r2, #2
 8007b34:	2102      	movs	r1, #2
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fc66 	bl	8008408 <USBH_FindInterface>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	2bff      	cmp	r3, #255	; 0xff
 8007b44:	d002      	beq.n	8007b4c <USBH_CDC_InterfaceInit+0x24>
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d901      	bls.n	8007b50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e13d      	b.n	8007dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fc3b 	bl	80083d0 <USBH_SelectInterface>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007b64:	2302      	movs	r3, #2
 8007b66:	e131      	b.n	8007dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007b6e:	2050      	movs	r0, #80	; 0x50
 8007b70:	f002 fafa 	bl	800a168 <malloc>
 8007b74:	4603      	mov	r3, r0
 8007b76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e11f      	b.n	8007dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007b8c:	2250      	movs	r2, #80	; 0x50
 8007b8e:	2100      	movs	r1, #0
 8007b90:	68b8      	ldr	r0, [r7, #8]
 8007b92:	f002 faf9 	bl	800a188 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	211a      	movs	r1, #26
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b25b      	sxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da15      	bge.n	8007bda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	211a      	movs	r1, #26
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	4413      	add	r3, r2
 8007bba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bbe:	781a      	ldrb	r2, [r3, #0]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	211a      	movs	r1, #26
 8007bca:	fb01 f303 	mul.w	r3, r1, r3
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007bd4:	881a      	ldrh	r2, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f001 ff2c 	bl	8009a3e <USBH_AllocPipe>
 8007be6:	4603      	mov	r3, r0
 8007be8:	461a      	mov	r2, r3
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	7819      	ldrb	r1, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	7858      	ldrb	r0, [r3, #1]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	8952      	ldrh	r2, [r2, #10]
 8007c06:	9202      	str	r2, [sp, #8]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	9201      	str	r2, [sp, #4]
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	4623      	mov	r3, r4
 8007c10:	4602      	mov	r2, r0
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fee4 	bl	80099e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f002 f9f3 	bl	800a00c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007c26:	2300      	movs	r3, #0
 8007c28:	2200      	movs	r2, #0
 8007c2a:	210a      	movs	r1, #10
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fbeb 	bl	8008408 <USBH_FindInterface>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2bff      	cmp	r3, #255	; 0xff
 8007c3a:	d002      	beq.n	8007c42 <USBH_CDC_InterfaceInit+0x11a>
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d901      	bls.n	8007c46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007c42:	2302      	movs	r3, #2
 8007c44:	e0c2      	b.n	8007dcc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	211a      	movs	r1, #26
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	b25b      	sxtb	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	da16      	bge.n	8007c8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	211a      	movs	r1, #26
 8007c64:	fb01 f303 	mul.w	r3, r1, r3
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	211a      	movs	r1, #26
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c84:	881a      	ldrh	r2, [r3, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	835a      	strh	r2, [r3, #26]
 8007c8a:	e015      	b.n	8007cb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	211a      	movs	r1, #26
 8007c92:	fb01 f303 	mul.w	r3, r1, r3
 8007c96:	4413      	add	r3, r2
 8007c98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c9c:	781a      	ldrb	r2, [r3, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	211a      	movs	r1, #26
 8007ca8:	fb01 f303 	mul.w	r3, r1, r3
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007cb2:	881a      	ldrh	r2, [r3, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	211a      	movs	r1, #26
 8007cbe:	fb01 f303 	mul.w	r3, r1, r3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	da16      	bge.n	8007cfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	211a      	movs	r1, #26
 8007cd6:	fb01 f303 	mul.w	r3, r1, r3
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	211a      	movs	r1, #26
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007cf6:	881a      	ldrh	r2, [r3, #0]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	835a      	strh	r2, [r3, #26]
 8007cfc:	e015      	b.n	8007d2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	211a      	movs	r1, #26
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	4413      	add	r3, r2
 8007d0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	211a      	movs	r1, #26
 8007d1a:	fb01 f303 	mul.w	r3, r1, r3
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d24:	881a      	ldrh	r2, [r3, #0]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	7b9b      	ldrb	r3, [r3, #14]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 fe84 	bl	8009a3e <USBH_AllocPipe>
 8007d36:	4603      	mov	r3, r0
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	7bdb      	ldrb	r3, [r3, #15]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fe7a 	bl	8009a3e <USBH_AllocPipe>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	7b59      	ldrb	r1, [r3, #13]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	7b98      	ldrb	r0, [r3, #14]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	8b12      	ldrh	r2, [r2, #24]
 8007d6a:	9202      	str	r2, [sp, #8]
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	9201      	str	r2, [sp, #4]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	4623      	mov	r3, r4
 8007d74:	4602      	mov	r2, r0
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fe32 	bl	80099e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	7b19      	ldrb	r1, [r3, #12]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	7bd8      	ldrb	r0, [r3, #15]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	8b52      	ldrh	r2, [r2, #26]
 8007d94:	9202      	str	r2, [sp, #8]
 8007d96:	2202      	movs	r2, #2
 8007d98:	9201      	str	r2, [sp, #4]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	4623      	mov	r3, r4
 8007d9e:	4602      	mov	r2, r0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f001 fe1d 	bl	80099e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	7b5b      	ldrb	r3, [r3, #13]
 8007db2:	2200      	movs	r2, #0
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f002 f928 	bl	800a00c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7b1b      	ldrb	r3, [r3, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f002 f921 	bl	800a00c <USBH_LL_SetToggle>

  return USBH_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd90      	pop	{r4, r7, pc}

08007dd4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f001 fe12 	bl	8009a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 fe3d 	bl	8009a80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	7b1b      	ldrb	r3, [r3, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00e      	beq.n	8007e32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	7b1b      	ldrb	r3, [r3, #12]
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fdff 	bl	8009a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	7b1b      	ldrb	r3, [r3, #12]
 8007e24:	4619      	mov	r1, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 fe2a 	bl	8009a80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	7b5b      	ldrb	r3, [r3, #13]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00e      	beq.n	8007e58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	7b5b      	ldrb	r3, [r3, #13]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fdec 	bl	8009a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	7b5b      	ldrb	r3, [r3, #13]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fe17 	bl	8009a80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e5e:	69db      	ldr	r3, [r3, #28]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f002 f983 	bl	800a178 <free>
    phost->pActiveClass->pData = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e78:	2200      	movs	r2, #0
 8007e7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3340      	adds	r3, #64	; 0x40
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f8b1 	bl	8008006 <GetLineCoding>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007ea8:	7afb      	ldrb	r3, [r7, #11]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d105      	bne.n	8007eba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007eba:	7afb      	ldrb	r3, [r7, #11]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d877      	bhi.n	8007fd8 <USBH_CDC_Process+0x114>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <USBH_CDC_Process+0x2c>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f05 	.word	0x08007f05
 8007ef4:	08007f0b 	.word	0x08007f0b
 8007ef8:	08007f3b 	.word	0x08007f3b
 8007efc:	08007faf 	.word	0x08007faf
 8007f00:	08007fbd 	.word	0x08007fbd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
      break;
 8007f08:	e06d      	b.n	8007fe6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f897 	bl	8008044 <SetLineCoding>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d104      	bne.n	8007f2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f28:	e058      	b.n	8007fdc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007f2a:	7bbb      	ldrb	r3, [r7, #14]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d055      	beq.n	8007fdc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2204      	movs	r2, #4
 8007f34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007f38:	e050      	b.n	8007fdc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3340      	adds	r3, #64	; 0x40
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f860 	bl	8008006 <GetLineCoding>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d126      	bne.n	8007f9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f62:	791b      	ldrb	r3, [r3, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d13b      	bne.n	8007fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d133      	bne.n	8007fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d12b      	bne.n	8007fe0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d124      	bne.n	8007fe0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f958 	bl	800824c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007f9c:	e020      	b.n	8007fe0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d01d      	beq.n	8007fe0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007fac:	e018      	b.n	8007fe0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f867 	bl	8008082 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8da 	bl	800816e <CDC_ProcessReception>
      break;
 8007fba:	e014      	b.n	8007fe6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 ffef 	bl	8008fa2 <USBH_ClrFeature>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007fd6:	e005      	b.n	8007fe4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007fd8:	bf00      	nop
 8007fda:	e004      	b.n	8007fe6 <USBH_CDC_Process+0x122>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e002      	b.n	8007fe6 <USBH_CDC_Process+0x122>
      break;
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <USBH_CDC_Process+0x122>
      break;
 8007fe4:	bf00      	nop

  }

  return status;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	22a1      	movs	r2, #161	; 0xa1
 8008014:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2221      	movs	r2, #33	; 0x21
 800801a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2207      	movs	r2, #7
 800802c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2207      	movs	r2, #7
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fa81 	bl	800953c <USBH_CtlReq>
 800803a:	4603      	mov	r3, r0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2221      	movs	r2, #33	; 0x21
 8008052:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2220      	movs	r2, #32
 8008058:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2207      	movs	r2, #7
 800806a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2207      	movs	r2, #7
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fa62 	bl	800953c <USBH_CtlReq>
 8008078:	4603      	mov	r3, r0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b086      	sub	sp, #24
 8008086:	af02      	add	r7, sp, #8
 8008088:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008094:	2300      	movs	r3, #0
 8008096:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d002      	beq.n	80080a8 <CDC_ProcessTransmission+0x26>
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d023      	beq.n	80080ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80080a6:	e05e      	b.n	8008166 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	8b12      	ldrh	r2, [r2, #24]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d90b      	bls.n	80080cc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	69d9      	ldr	r1, [r3, #28]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8b1a      	ldrh	r2, [r3, #24]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	7b5b      	ldrb	r3, [r3, #13]
 80080c0:	2001      	movs	r0, #1
 80080c2:	9000      	str	r0, [sp, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fc48 	bl	800995a <USBH_BulkSendData>
 80080ca:	e00b      	b.n	80080e4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	7b5b      	ldrb	r3, [r3, #13]
 80080da:	2001      	movs	r0, #1
 80080dc:	9000      	str	r0, [sp, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 fc3b 	bl	800995a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80080ec:	e03b      	b.n	8008166 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	7b5b      	ldrb	r3, [r3, #13]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 ff5f 	bl	8009fb8 <USBH_LL_GetURBState>
 80080fa:	4603      	mov	r3, r0
 80080fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80080fe:	7afb      	ldrb	r3, [r7, #11]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d128      	bne.n	8008156 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	8b12      	ldrh	r2, [r2, #24]
 800810c:	4293      	cmp	r3, r2
 800810e:	d90e      	bls.n	800812e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	8b12      	ldrh	r2, [r2, #24]
 8008118:	1a9a      	subs	r2, r3, r2
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	8b12      	ldrh	r2, [r2, #24]
 8008126:	441a      	add	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	61da      	str	r2, [r3, #28]
 800812c:	e002      	b.n	8008134 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008144:	e00e      	b.n	8008164 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f868 	bl	8008224 <USBH_CDC_TransmitCallback>
      break;
 8008154:	e006      	b.n	8008164 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008156:	7afb      	ldrb	r3, [r7, #11]
 8008158:	2b02      	cmp	r3, #2
 800815a:	d103      	bne.n	8008164 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008164:	bf00      	nop
  }
}
 8008166:	bf00      	nop
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008180:	2300      	movs	r3, #0
 8008182:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800818a:	2b03      	cmp	r3, #3
 800818c:	d002      	beq.n	8008194 <CDC_ProcessReception+0x26>
 800818e:	2b04      	cmp	r3, #4
 8008190:	d00e      	beq.n	80081b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008192:	e043      	b.n	800821c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	6a19      	ldr	r1, [r3, #32]
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	8b5a      	ldrh	r2, [r3, #26]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	7b1b      	ldrb	r3, [r3, #12]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fbff 	bl	80099a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2204      	movs	r2, #4
 80081aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80081ae:	e035      	b.n	800821c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	7b1b      	ldrb	r3, [r3, #12]
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fefe 	bl	8009fb8 <USBH_LL_GetURBState>
 80081bc:	4603      	mov	r3, r0
 80081be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80081c0:	7cfb      	ldrb	r3, [r7, #19]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d129      	bne.n	800821a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	7b1b      	ldrb	r3, [r3, #12]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 fe61 	bl	8009e94 <USBH_LL_GetLastXferSize>
 80081d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d016      	beq.n	800820c <CDC_ProcessReception+0x9e>
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	8b5b      	ldrh	r3, [r3, #26]
 80081e2:	461a      	mov	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d910      	bls.n	800820c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad2      	subs	r2, r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	6a1a      	ldr	r2, [r3, #32]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	441a      	add	r2, r3
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2203      	movs	r2, #3
 8008206:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800820a:	e006      	b.n	800821a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f80f 	bl	8008238 <USBH_CDC_ReceiveCallback>
      break;
 800821a:	bf00      	nop
  }
}
 800821c:	bf00      	nop
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008274:	2302      	movs	r3, #2
 8008276:	e029      	b.n	80082cc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	79fa      	ldrb	r2, [r7, #7]
 800827c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f81f 	bl	80082d4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f001 fd31 	bl	8009d2c <USBH_LL_Init>

  return USBH_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	e009      	b.n	80082fa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	33e0      	adds	r3, #224	; 0xe0
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	2200      	movs	r2, #0
 80082f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b0f      	cmp	r3, #15
 80082fe:	d9f2      	bls.n	80082e6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e009      	b.n	800831a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008310:	2200      	movs	r2, #0
 8008312:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008320:	d3f1      	bcc.n	8008306 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2240      	movs	r2, #64	; 0x40
 8008346:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d016      	beq.n	80083be <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10e      	bne.n	80083b8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083a0:	1c59      	adds	r1, r3, #1
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	33de      	adds	r3, #222	; 0xde
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73fb      	strb	r3, [r7, #15]
 80083b6:	e004      	b.n	80083c2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80083b8:	2302      	movs	r3, #2
 80083ba:	73fb      	strb	r3, [r7, #15]
 80083bc:	e001      	b.n	80083c2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80083be:	2302      	movs	r3, #2
 80083c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80083e6:	78fa      	ldrb	r2, [r7, #3]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d204      	bcs.n	80083f6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80083f4:	e001      	b.n	80083fa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80083f6:	2302      	movs	r3, #2
 80083f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	4608      	mov	r0, r1
 8008412:	4611      	mov	r1, r2
 8008414:	461a      	mov	r2, r3
 8008416:	4603      	mov	r3, r0
 8008418:	70fb      	strb	r3, [r7, #3]
 800841a:	460b      	mov	r3, r1
 800841c:	70bb      	strb	r3, [r7, #2]
 800841e:	4613      	mov	r3, r2
 8008420:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008430:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008432:	e025      	b.n	8008480 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008434:	7dfb      	ldrb	r3, [r7, #23]
 8008436:	221a      	movs	r2, #26
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	3308      	adds	r3, #8
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	3302      	adds	r3, #2
 8008444:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	795b      	ldrb	r3, [r3, #5]
 800844a:	78fa      	ldrb	r2, [r7, #3]
 800844c:	429a      	cmp	r2, r3
 800844e:	d002      	beq.n	8008456 <USBH_FindInterface+0x4e>
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	2bff      	cmp	r3, #255	; 0xff
 8008454:	d111      	bne.n	800847a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800845a:	78ba      	ldrb	r2, [r7, #2]
 800845c:	429a      	cmp	r2, r3
 800845e:	d002      	beq.n	8008466 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008460:	78bb      	ldrb	r3, [r7, #2]
 8008462:	2bff      	cmp	r3, #255	; 0xff
 8008464:	d109      	bne.n	800847a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800846a:	787a      	ldrb	r2, [r7, #1]
 800846c:	429a      	cmp	r2, r3
 800846e:	d002      	beq.n	8008476 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008470:	787b      	ldrb	r3, [r7, #1]
 8008472:	2bff      	cmp	r3, #255	; 0xff
 8008474:	d101      	bne.n	800847a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	e006      	b.n	8008488 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	3301      	adds	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d9d6      	bls.n	8008434 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008486:	23ff      	movs	r3, #255	; 0xff
}
 8008488:	4618      	mov	r0, r3
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 fc81 	bl	8009da4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80084a2:	2101      	movs	r1, #1
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 fd9a 	bl	8009fde <USBH_LL_DriverVBUS>

  return USBH_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af04      	add	r7, sp, #16
 80084ba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80084bc:	2302      	movs	r3, #2
 80084be:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d102      	bne.n	80084d6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2203      	movs	r2, #3
 80084d4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b0b      	cmp	r3, #11
 80084de:	f200 81be 	bhi.w	800885e <USBH_Process+0x3aa>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBH_Process+0x34>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	08008519 	.word	0x08008519
 80084ec:	0800854b 	.word	0x0800854b
 80084f0:	080085b3 	.word	0x080085b3
 80084f4:	080087f9 	.word	0x080087f9
 80084f8:	0800885f 	.word	0x0800885f
 80084fc:	08008657 	.word	0x08008657
 8008500:	0800879f 	.word	0x0800879f
 8008504:	0800868d 	.word	0x0800868d
 8008508:	080086ad 	.word	0x080086ad
 800850c:	080086cd 	.word	0x080086cd
 8008510:	08008711 	.word	0x08008711
 8008514:	080087e1 	.word	0x080087e1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 819e 	beq.w	8008862 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800852c:	20c8      	movs	r0, #200	; 0xc8
 800852e:	f001 fd9d 	bl	800a06c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fc93 	bl	8009e5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008548:	e18b      	b.n	8008862 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008550:	2b01      	cmp	r3, #1
 8008552:	d107      	bne.n	8008564 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008562:	e18d      	b.n	8008880 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800856a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800856e:	d914      	bls.n	800859a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008576:	3301      	adds	r3, #1
 8008578:	b2da      	uxtb	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008586:	2b03      	cmp	r3, #3
 8008588:	d903      	bls.n	8008592 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	220d      	movs	r2, #13
 800858e:	701a      	strb	r2, [r3, #0]
      break;
 8008590:	e176      	b.n	8008880 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
      break;
 8008598:	e172      	b.n	8008880 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80085a0:	f103 020a 	add.w	r2, r3, #10
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80085aa:	200a      	movs	r0, #10
 80085ac:	f001 fd5e 	bl	800a06c <USBH_Delay>
      break;
 80085b0:	e166      	b.n	8008880 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085c2:	2104      	movs	r1, #4
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80085c8:	2064      	movs	r0, #100	; 0x64
 80085ca:	f001 fd4f 	bl	800a06c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f001 fc1e 	bl	8009e10 <USBH_LL_GetSpeed>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2205      	movs	r2, #5
 80085e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80085e4:	2100      	movs	r1, #0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 fa29 	bl	8009a3e <USBH_AllocPipe>
 80085ec:	4603      	mov	r3, r0
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80085f4:	2180      	movs	r1, #128	; 0x80
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fa21 	bl	8009a3e <USBH_AllocPipe>
 80085fc:	4603      	mov	r3, r0
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	7919      	ldrb	r1, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008618:	b292      	uxth	r2, r2
 800861a:	9202      	str	r2, [sp, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	9201      	str	r2, [sp, #4]
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	4603      	mov	r3, r0
 8008624:	2280      	movs	r2, #128	; 0x80
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f9da 	bl	80099e0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7959      	ldrb	r1, [r3, #5]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008640:	b292      	uxth	r2, r2
 8008642:	9202      	str	r2, [sp, #8]
 8008644:	2200      	movs	r2, #0
 8008646:	9201      	str	r2, [sp, #4]
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	4603      	mov	r3, r0
 800864c:	2200      	movs	r2, #0
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f001 f9c6 	bl	80099e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008654:	e114      	b.n	8008880 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f918 	bl	800888c <USBH_HandleEnum>
 800865c:	4603      	mov	r3, r0
 800865e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	f040 80fe 	bne.w	8008866 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008678:	2b01      	cmp	r3, #1
 800867a:	d103      	bne.n	8008684 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2208      	movs	r2, #8
 8008680:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008682:	e0f0      	b.n	8008866 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2207      	movs	r2, #7
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e0ec      	b.n	8008866 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80e9 	beq.w	800886a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800869e:	2101      	movs	r1, #1
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2208      	movs	r2, #8
 80086a8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80086aa:	e0de      	b.n	800886a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fc2c 	bl	8008f14 <USBH_SetCfg>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 80d5 	bne.w	800886e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2209      	movs	r2, #9
 80086c8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086ca:	e0d0      	b.n	800886e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80086da:	2101      	movs	r1, #1
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fc3c 	bl	8008f5a <USBH_SetFeature>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	220a      	movs	r2, #10
 80086f2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086f4:	e0bd      	b.n	8008872 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	f040 80b9 	bne.w	8008872 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	220a      	movs	r2, #10
 8008704:	701a      	strb	r2, [r3, #0]
      break;
 8008706:	e0b4      	b.n	8008872 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	220a      	movs	r2, #10
 800870c:	701a      	strb	r2, [r3, #0]
      break;
 800870e:	e0b0      	b.n	8008872 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80ad 	beq.w	8008876 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	e016      	b.n	8008758 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800872a:	7bfa      	ldrb	r2, [r7, #15]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	32de      	adds	r2, #222	; 0xde
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	791a      	ldrb	r2, [r3, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800873c:	429a      	cmp	r2, r3
 800873e:	d108      	bne.n	8008752 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	32de      	adds	r2, #222	; 0xde
 8008746:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008750:	e005      	b.n	800875e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	3301      	adds	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0e5      	beq.n	800872a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008764:	2b00      	cmp	r3, #0
 8008766:	d016      	beq.n	8008796 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2206      	movs	r2, #6
 800877e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008786:	2103      	movs	r1, #3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800878c:	e073      	b.n	8008876 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	220d      	movs	r2, #13
 8008792:	701a      	strb	r2, [r3, #0]
      break;
 8008794:	e06f      	b.n	8008876 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	220d      	movs	r2, #13
 800879a:	701a      	strb	r2, [r3, #0]
      break;
 800879c:	e06b      	b.n	8008876 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d017      	beq.n	80087d8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
 80087b4:	4603      	mov	r3, r0
 80087b6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d103      	bne.n	80087c8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	220b      	movs	r2, #11
 80087c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80087c6:	e058      	b.n	800887a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80087c8:	7bbb      	ldrb	r3, [r7, #14]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d154      	bne.n	800887a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	220d      	movs	r2, #13
 80087d4:	701a      	strb	r2, [r3, #0]
      break;
 80087d6:	e050      	b.n	800887a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	220d      	movs	r2, #13
 80087dc:	701a      	strb	r2, [r3, #0]
      break;
 80087de:	e04c      	b.n	800887a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d049      	beq.n	800887e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
      }
      break;
 80087f6:	e042      	b.n	800887e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff fd67 	bl	80082d4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008834:	2105      	movs	r1, #5
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b01      	cmp	r3, #1
 8008844:	d107      	bne.n	8008856 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff fe20 	bl	8008494 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008854:	e014      	b.n	8008880 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 faa4 	bl	8009da4 <USBH_LL_Start>
      break;
 800885c:	e010      	b.n	8008880 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800885e:	bf00      	nop
 8008860:	e00e      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 8008862:	bf00      	nop
 8008864:	e00c      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 8008866:	bf00      	nop
 8008868:	e00a      	b.n	8008880 <USBH_Process+0x3cc>
    break;
 800886a:	bf00      	nop
 800886c:	e008      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 800886e:	bf00      	nop
 8008870:	e006      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 8008872:	bf00      	nop
 8008874:	e004      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 8008876:	bf00      	nop
 8008878:	e002      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 800887a:	bf00      	nop
 800887c:	e000      	b.n	8008880 <USBH_Process+0x3cc>
      break;
 800887e:	bf00      	nop
  }
  return USBH_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop

0800888c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af04      	add	r7, sp, #16
 8008892:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008894:	2301      	movs	r3, #1
 8008896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008898:	2301      	movs	r3, #1
 800889a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	2b07      	cmp	r3, #7
 80088a2:	f200 81c1 	bhi.w	8008c28 <USBH_HandleEnum+0x39c>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <USBH_HandleEnum+0x20>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088cd 	.word	0x080088cd
 80088b0:	0800898b 	.word	0x0800898b
 80088b4:	080089f5 	.word	0x080089f5
 80088b8:	08008a83 	.word	0x08008a83
 80088bc:	08008aed 	.word	0x08008aed
 80088c0:	08008b5d 	.word	0x08008b5d
 80088c4:	08008ba3 	.word	0x08008ba3
 80088c8:	08008be9 	.word	0x08008be9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80088cc:	2108      	movs	r1, #8
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fa50 	bl	8008d74 <USBH_Get_DevDesc>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d130      	bne.n	8008940 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7919      	ldrb	r1, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008902:	b292      	uxth	r2, r2
 8008904:	9202      	str	r2, [sp, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	9201      	str	r2, [sp, #4]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4603      	mov	r3, r0
 800890e:	2280      	movs	r2, #128	; 0x80
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f865 	bl	80099e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7959      	ldrb	r1, [r3, #5]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800892a:	b292      	uxth	r2, r2
 800892c:	9202      	str	r2, [sp, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	9201      	str	r2, [sp, #4]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	4603      	mov	r3, r0
 8008936:	2200      	movs	r2, #0
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 f851 	bl	80099e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800893e:	e175      	b.n	8008c2c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b03      	cmp	r3, #3
 8008944:	f040 8172 	bne.w	8008c2c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800894e:	3301      	adds	r3, #1
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800895e:	2b03      	cmp	r3, #3
 8008960:	d903      	bls.n	800896a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	220d      	movs	r2, #13
 8008966:	701a      	strb	r2, [r3, #0]
      break;
 8008968:	e160      	b.n	8008c2c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	795b      	ldrb	r3, [r3, #5]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 f885 	bl	8009a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	791b      	ldrb	r3, [r3, #4]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 f87f 	bl	8009a80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
      break;
 8008988:	e150      	b.n	8008c2c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800898a:	2112      	movs	r1, #18
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f9f1 	bl	8008d74 <USBH_Get_DevDesc>
 8008992:	4603      	mov	r3, r0
 8008994:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d103      	bne.n	80089a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089a2:	e145      	b.n	8008c30 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	f040 8142 	bne.w	8008c30 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089b2:	3301      	adds	r3, #1
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d903      	bls.n	80089ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	220d      	movs	r2, #13
 80089ca:	701a      	strb	r2, [r3, #0]
      break;
 80089cc:	e130      	b.n	8008c30 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	795b      	ldrb	r3, [r3, #5]
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f001 f853 	bl	8009a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	791b      	ldrb	r3, [r3, #4]
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 f84d 	bl	8009a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
      break;
 80089f2:	e11d      	b.n	8008c30 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80089f4:	2101      	movs	r1, #1
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa68 	bl	8008ecc <USBH_SetAddress>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d132      	bne.n	8008a6c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008a06:	2002      	movs	r0, #2
 8008a08:	f001 fb30 	bl	800a06c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2203      	movs	r2, #3
 8008a18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	7919      	ldrb	r1, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a2e:	b292      	uxth	r2, r2
 8008a30:	9202      	str	r2, [sp, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	9201      	str	r2, [sp, #4]
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2280      	movs	r2, #128	; 0x80
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 ffcf 	bl	80099e0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7959      	ldrb	r1, [r3, #5]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a56:	b292      	uxth	r2, r2
 8008a58:	9202      	str	r2, [sp, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	9201      	str	r2, [sp, #4]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4603      	mov	r3, r0
 8008a62:	2200      	movs	r2, #0
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 ffbb 	bl	80099e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a6a:	e0e3      	b.n	8008c34 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	f040 80e0 	bne.w	8008c34 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	220d      	movs	r2, #13
 8008a78:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	705a      	strb	r2, [r3, #1]
      break;
 8008a80:	e0d8      	b.n	8008c34 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008a82:	2109      	movs	r1, #9
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f99d 	bl	8008dc4 <USBH_Get_CfgDesc>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2204      	movs	r2, #4
 8008a98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a9a:	e0cd      	b.n	8008c38 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	f040 80ca 	bne.w	8008c38 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008aaa:	3301      	adds	r3, #1
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d903      	bls.n	8008ac6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	220d      	movs	r2, #13
 8008ac2:	701a      	strb	r2, [r3, #0]
      break;
 8008ac4:	e0b8      	b.n	8008c38 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	795b      	ldrb	r3, [r3, #5]
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 ffd7 	bl	8009a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	791b      	ldrb	r3, [r3, #4]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 ffd1 	bl	8009a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	701a      	strb	r2, [r3, #0]
      break;
 8008aea:	e0a5      	b.n	8008c38 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f965 	bl	8008dc4 <USBH_Get_CfgDesc>
 8008afa:	4603      	mov	r3, r0
 8008afc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2205      	movs	r2, #5
 8008b08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b0a:	e097      	b.n	8008c3c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	f040 8094 	bne.w	8008c3c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d903      	bls.n	8008b36 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	220d      	movs	r2, #13
 8008b32:	701a      	strb	r2, [r3, #0]
      break;
 8008b34:	e082      	b.n	8008c3c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	795b      	ldrb	r3, [r3, #5]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 ff9f 	bl	8009a80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	791b      	ldrb	r3, [r3, #4]
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 ff99 	bl	8009a80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
      break;
 8008b5a:	e06f      	b.n	8008c3c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d019      	beq.n	8008b9a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b72:	23ff      	movs	r3, #255	; 0xff
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f949 	bl	8008e0c <USBH_Get_StringDesc>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2206      	movs	r2, #6
 8008b88:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b8a:	e059      	b.n	8008c40 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b8c:	7bbb      	ldrb	r3, [r7, #14]
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d156      	bne.n	8008c40 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2206      	movs	r2, #6
 8008b96:	705a      	strb	r2, [r3, #1]
      break;
 8008b98:	e052      	b.n	8008c40 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2206      	movs	r2, #6
 8008b9e:	705a      	strb	r2, [r3, #1]
      break;
 8008ba0:	e04e      	b.n	8008c40 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d019      	beq.n	8008be0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bb8:	23ff      	movs	r3, #255	; 0xff
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f926 	bl	8008e0c <USBH_Get_StringDesc>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2207      	movs	r2, #7
 8008bce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bd0:	e038      	b.n	8008c44 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d135      	bne.n	8008c44 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2207      	movs	r2, #7
 8008bdc:	705a      	strb	r2, [r3, #1]
      break;
 8008bde:	e031      	b.n	8008c44 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2207      	movs	r2, #7
 8008be4:	705a      	strb	r2, [r3, #1]
      break;
 8008be6:	e02d      	b.n	8008c44 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d017      	beq.n	8008c22 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008bfe:	23ff      	movs	r3, #255	; 0xff
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f903 	bl	8008e0c <USBH_Get_StringDesc>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008c14:	e018      	b.n	8008c48 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d115      	bne.n	8008c48 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c20:	e012      	b.n	8008c48 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
      break;
 8008c26:	e00f      	b.n	8008c48 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008c28:	bf00      	nop
 8008c2a:	e00e      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e00c      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c30:	bf00      	nop
 8008c32:	e00a      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c34:	bf00      	nop
 8008c36:	e008      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e006      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c3c:	bf00      	nop
 8008c3e:	e004      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c40:	bf00      	nop
 8008c42:	e002      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <USBH_HandleEnum+0x3be>
      break;
 8008c48:	bf00      	nop
  }
  return Status;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f804 	bl	8008c96 <USBH_HandleSof>
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b0b      	cmp	r3, #11
 8008ca6:	d10a      	bne.n	8008cbe <USBH_HandleSof+0x28>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	4798      	blx	r3
  }
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008cd6:	bf00      	nop
}
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b083      	sub	sp, #12
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008cf2:	bf00      	nop
}
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f844 	bl	8009dda <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	791b      	ldrb	r3, [r3, #4]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fe91 	bl	8009a80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	795b      	ldrb	r3, [r3, #5]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fe8b 	bl	8009a80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d92:	2100      	movs	r1, #0
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f864 	bl	8008e62 <USBH_GetDescriptor>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	b292      	uxth	r2, r2
 8008db4:	4619      	mov	r1, r3
 8008db6:	f000 f918 	bl	8008fea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af02      	add	r7, sp, #8
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	331c      	adds	r3, #28
 8008dd4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008dd6:	887b      	ldrh	r3, [r7, #2]
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008de0:	2100      	movs	r1, #0
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f83d 	bl	8008e62 <USBH_GetDescriptor>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d107      	bne.n	8008e02 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008df2:	887b      	ldrh	r3, [r7, #2]
 8008df4:	461a      	mov	r2, r3
 8008df6:	68b9      	ldr	r1, [r7, #8]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f987 	bl	800910c <USBH_ParseCfgDesc>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af02      	add	r7, sp, #8
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	461a      	mov	r2, r3
 8008e18:	460b      	mov	r3, r1
 8008e1a:	72fb      	strb	r3, [r7, #11]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008e20:	7afb      	ldrb	r3, [r7, #11]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008e28:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008e30:	893b      	ldrh	r3, [r7, #8]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	460b      	mov	r3, r1
 8008e36:	2100      	movs	r1, #0
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f812 	bl	8008e62 <USBH_GetDescriptor>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d107      	bne.n	8008e58 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e4e:	893a      	ldrh	r2, [r7, #8]
 8008e50:	6879      	ldr	r1, [r7, #4]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fb24 	bl	80094a0 <USBH_ParseStringDesc>
  }

  return status;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	72fb      	strb	r3, [r7, #11]
 8008e70:	4613      	mov	r3, r2
 8008e72:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	789b      	ldrb	r3, [r3, #2]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d11c      	bne.n	8008eb6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2206      	movs	r2, #6
 8008e8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	893a      	ldrh	r2, [r7, #8]
 8008e92:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008e94:	893b      	ldrh	r3, [r7, #8]
 8008e96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e9e:	d104      	bne.n	8008eaa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f240 4209 	movw	r2, #1033	; 0x409
 8008ea6:	829a      	strh	r2, [r3, #20]
 8008ea8:	e002      	b.n	8008eb0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8b3a      	ldrh	r2, [r7, #24]
 8008eb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008eb6:	8b3b      	ldrh	r3, [r7, #24]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fb3d 	bl	800953c <USBH_CtlReq>
 8008ec2:	4603      	mov	r3, r0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	789b      	ldrb	r3, [r3, #2]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d10f      	bne.n	8008f00 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2205      	movs	r2, #5
 8008eea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f00:	2200      	movs	r2, #0
 8008f02:	2100      	movs	r1, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fb19 	bl	800953c <USBH_CtlReq>
 8008f0a:	4603      	mov	r3, r0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	789b      	ldrb	r3, [r3, #2]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d10e      	bne.n	8008f46 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2209      	movs	r2, #9
 8008f32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	887a      	ldrh	r2, [r7, #2]
 8008f38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f46:	2200      	movs	r2, #0
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 faf6 	bl	800953c <USBH_CtlReq>
 8008f50:	4603      	mov	r3, r0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b082      	sub	sp, #8
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	789b      	ldrb	r3, [r3, #2]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d10f      	bne.n	8008f8e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2203      	movs	r2, #3
 8008f78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2100      	movs	r1, #0
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fad2 	bl	800953c <USBH_CtlReq>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	460b      	mov	r3, r1
 8008fac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	789b      	ldrb	r3, [r3, #2]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d10f      	bne.n	8008fd6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 faae 	bl	800953c <USBH_CtlReq>
 8008fe0:	4603      	mov	r3, r0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	781a      	ldrb	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	785a      	ldrb	r2, [r3, #1]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3302      	adds	r3, #2
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b29a      	uxth	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	3303      	adds	r3, #3
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	b29b      	uxth	r3, r3
 800901c:	4313      	orrs	r3, r2
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	791a      	ldrb	r2, [r3, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	795a      	ldrb	r2, [r3, #5]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	799a      	ldrb	r2, [r3, #6]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	79da      	ldrb	r2, [r3, #7]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	79db      	ldrb	r3, [r3, #7]
 8009048:	2b20      	cmp	r3, #32
 800904a:	dc11      	bgt.n	8009070 <USBH_ParseDevDesc+0x86>
 800904c:	2b08      	cmp	r3, #8
 800904e:	db16      	blt.n	800907e <USBH_ParseDevDesc+0x94>
 8009050:	3b08      	subs	r3, #8
 8009052:	2201      	movs	r2, #1
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800905c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009060:	2b00      	cmp	r3, #0
 8009062:	bf14      	ite	ne
 8009064:	2301      	movne	r3, #1
 8009066:	2300      	moveq	r3, #0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <USBH_ParseDevDesc+0x8a>
 800906e:	e006      	b.n	800907e <USBH_ParseDevDesc+0x94>
 8009070:	2b40      	cmp	r3, #64	; 0x40
 8009072:	d104      	bne.n	800907e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	79da      	ldrb	r2, [r3, #7]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	71da      	strb	r2, [r3, #7]
      break;
 800907c:	e003      	b.n	8009086 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2240      	movs	r2, #64	; 0x40
 8009082:	71da      	strb	r2, [r3, #7]
      break;
 8009084:	bf00      	nop
  }

  if (length > 8U)
 8009086:	88fb      	ldrh	r3, [r7, #6]
 8009088:	2b08      	cmp	r3, #8
 800908a:	d939      	bls.n	8009100 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3308      	adds	r3, #8
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	b29a      	uxth	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	3309      	adds	r3, #9
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	021b      	lsls	r3, r3, #8
 800909e:	b29b      	uxth	r3, r3
 80090a0:	4313      	orrs	r3, r2
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	330a      	adds	r3, #10
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	330b      	adds	r3, #11
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	4313      	orrs	r3, r2
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	330c      	adds	r3, #12
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	330d      	adds	r3, #13
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	4313      	orrs	r3, r2
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	7b9a      	ldrb	r2, [r3, #14]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	7bda      	ldrb	r2, [r3, #15]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	7c1a      	ldrb	r2, [r3, #16]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	7c5a      	ldrb	r2, [r3, #17]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	745a      	strb	r2, [r3, #17]
  }
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08c      	sub	sp, #48	; 0x30
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009120:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009132:	2300      	movs	r3, #0
 8009134:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	781a      	ldrb	r2, [r3, #0]
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	785a      	ldrb	r2, [r3, #1]
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3302      	adds	r3, #2
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	b29a      	uxth	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	3303      	adds	r3, #3
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	021b      	lsls	r3, r3, #8
 800915e:	b29b      	uxth	r3, r3
 8009160:	4313      	orrs	r3, r2
 8009162:	b29b      	uxth	r3, r3
 8009164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009168:	bf28      	it	cs
 800916a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800916e:	b29a      	uxth	r2, r3
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	791a      	ldrb	r2, [r3, #4]
 8009178:	6a3b      	ldr	r3, [r7, #32]
 800917a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	795a      	ldrb	r2, [r3, #5]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	799a      	ldrb	r2, [r3, #6]
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	79da      	ldrb	r2, [r3, #7]
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	7a1a      	ldrb	r2, [r3, #8]
 8009198:	6a3b      	ldr	r3, [r7, #32]
 800919a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d002      	beq.n	80091aa <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	2209      	movs	r2, #9
 80091a8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	2b09      	cmp	r3, #9
 80091ae:	f240 809d 	bls.w	80092ec <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80091b2:	2309      	movs	r3, #9
 80091b4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80091ba:	e081      	b.n	80092c0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80091bc:	f107 0316 	add.w	r3, r7, #22
 80091c0:	4619      	mov	r1, r3
 80091c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091c4:	f000 f99f 	bl	8009506 <USBH_GetNextDesc>
 80091c8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	785b      	ldrb	r3, [r3, #1]
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d176      	bne.n	80092c0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	2b09      	cmp	r3, #9
 80091d8:	d002      	beq.n	80091e0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	2209      	movs	r2, #9
 80091de:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80091e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80091e4:	221a      	movs	r2, #26
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
 80091ea:	3308      	adds	r3, #8
 80091ec:	6a3a      	ldr	r2, [r7, #32]
 80091ee:	4413      	add	r3, r2
 80091f0:	3302      	adds	r3, #2
 80091f2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80091f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091f6:	69f8      	ldr	r0, [r7, #28]
 80091f8:	f000 f87e 	bl	80092f8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009206:	e043      	b.n	8009290 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009208:	f107 0316 	add.w	r3, r7, #22
 800920c:	4619      	mov	r1, r3
 800920e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009210:	f000 f979 	bl	8009506 <USBH_GetNextDesc>
 8009214:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	785b      	ldrb	r3, [r3, #1]
 800921a:	2b05      	cmp	r3, #5
 800921c:	d138      	bne.n	8009290 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	795b      	ldrb	r3, [r3, #5]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d10f      	bne.n	8009246 <USBH_ParseCfgDesc+0x13a>
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	799b      	ldrb	r3, [r3, #6]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d10b      	bne.n	8009246 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	79db      	ldrb	r3, [r3, #7]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10f      	bne.n	8009256 <USBH_ParseCfgDesc+0x14a>
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b09      	cmp	r3, #9
 800923c:	d00b      	beq.n	8009256 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	2209      	movs	r2, #9
 8009242:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009244:	e007      	b.n	8009256 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b07      	cmp	r3, #7
 800924c:	d004      	beq.n	8009258 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800924e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009250:	2207      	movs	r2, #7
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e000      	b.n	8009258 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009256:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800925c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009260:	3201      	adds	r2, #1
 8009262:	00d2      	lsls	r2, r2, #3
 8009264:	211a      	movs	r1, #26
 8009266:	fb01 f303 	mul.w	r3, r1, r3
 800926a:	4413      	add	r3, r2
 800926c:	3308      	adds	r3, #8
 800926e:	6a3a      	ldr	r2, [r7, #32]
 8009270:	4413      	add	r3, r2
 8009272:	3304      	adds	r3, #4
 8009274:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f86b 	bl	8009356 <USBH_ParseEPDesc>
 8009280:	4603      	mov	r3, r0
 8009282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800928a:	3301      	adds	r3, #1
 800928c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	791b      	ldrb	r3, [r3, #4]
 8009294:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009298:	429a      	cmp	r2, r3
 800929a:	d204      	bcs.n	80092a6 <USBH_ParseCfgDesc+0x19a>
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	885a      	ldrh	r2, [r3, #2]
 80092a0:	8afb      	ldrh	r3, [r7, #22]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d8b0      	bhi.n	8009208 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	791b      	ldrb	r3, [r3, #4]
 80092aa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d201      	bcs.n	80092b6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e01c      	b.n	80092f0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80092b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092ba:	3301      	adds	r3, #1
 80092bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d805      	bhi.n	80092d4 <USBH_ParseCfgDesc+0x1c8>
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	885a      	ldrh	r2, [r3, #2]
 80092cc:	8afb      	ldrh	r3, [r7, #22]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	f63f af74 	bhi.w	80091bc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	791b      	ldrb	r3, [r3, #4]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	bf28      	it	cs
 80092dc:	2302      	movcs	r3, #2
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d201      	bcs.n	80092ec <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e001      	b.n	80092f0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80092ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3730      	adds	r7, #48	; 0x30
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	785a      	ldrb	r2, [r3, #1]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	789a      	ldrb	r2, [r3, #2]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	78da      	ldrb	r2, [r3, #3]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	791a      	ldrb	r2, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	795a      	ldrb	r2, [r3, #5]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	799a      	ldrb	r2, [r3, #6]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	79da      	ldrb	r2, [r3, #7]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	7a1a      	ldrb	r2, [r3, #8]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	721a      	strb	r2, [r3, #8]
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009356:	b480      	push	{r7}
 8009358:	b087      	sub	sp, #28
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	781a      	ldrb	r2, [r3, #0]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	785a      	ldrb	r2, [r3, #1]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	789a      	ldrb	r2, [r3, #2]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	78da      	ldrb	r2, [r3, #3]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3304      	adds	r3, #4
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3305      	adds	r3, #5
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
 8009396:	021b      	lsls	r3, r3, #8
 8009398:	b29b      	uxth	r3, r3
 800939a:	4313      	orrs	r3, r2
 800939c:	b29a      	uxth	r2, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	799a      	ldrb	r2, [r3, #6]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	889b      	ldrh	r3, [r3, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d102      	bne.n	80093b8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80093b2:	2303      	movs	r3, #3
 80093b4:	75fb      	strb	r3, [r7, #23]
 80093b6:	e033      	b.n	8009420 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	889b      	ldrh	r3, [r3, #4]
 80093bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80093c0:	f023 0307 	bic.w	r3, r3, #7
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	889b      	ldrh	r3, [r3, #4]
 80093ce:	b21a      	sxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3304      	adds	r3, #4
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	b299      	uxth	r1, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	3305      	adds	r3, #5
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	430b      	orrs	r3, r1
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d110      	bne.n	8009412 <USBH_ParseEPDesc+0xbc>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3304      	adds	r3, #4
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	b299      	uxth	r1, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3305      	adds	r3, #5
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	021b      	lsls	r3, r3, #8
 8009402:	b29b      	uxth	r3, r3
 8009404:	430b      	orrs	r3, r1
 8009406:	b29b      	uxth	r3, r3
 8009408:	b21b      	sxth	r3, r3
 800940a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800940e:	b21b      	sxth	r3, r3
 8009410:	e001      	b.n	8009416 <USBH_ParseEPDesc+0xc0>
 8009412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009416:	4313      	orrs	r3, r2
 8009418:	b21b      	sxth	r3, r3
 800941a:	b29a      	uxth	r2, r3
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009426:	2b00      	cmp	r3, #0
 8009428:	d116      	bne.n	8009458 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	78db      	ldrb	r3, [r3, #3]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b01      	cmp	r3, #1
 8009434:	d005      	beq.n	8009442 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	78db      	ldrb	r3, [r3, #3]
 800943a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800943e:	2b03      	cmp	r3, #3
 8009440:	d127      	bne.n	8009492 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	799b      	ldrb	r3, [r3, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d003      	beq.n	8009452 <USBH_ParseEPDesc+0xfc>
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	799b      	ldrb	r3, [r3, #6]
 800944e:	2b10      	cmp	r3, #16
 8009450:	d91f      	bls.n	8009492 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009452:	2303      	movs	r3, #3
 8009454:	75fb      	strb	r3, [r7, #23]
 8009456:	e01c      	b.n	8009492 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	78db      	ldrb	r3, [r3, #3]
 800945c:	f003 0303 	and.w	r3, r3, #3
 8009460:	2b01      	cmp	r3, #1
 8009462:	d10a      	bne.n	800947a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	799b      	ldrb	r3, [r3, #6]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <USBH_ParseEPDesc+0x11e>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	799b      	ldrb	r3, [r3, #6]
 8009470:	2b10      	cmp	r3, #16
 8009472:	d90e      	bls.n	8009492 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009474:	2303      	movs	r3, #3
 8009476:	75fb      	strb	r3, [r7, #23]
 8009478:	e00b      	b.n	8009492 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	78db      	ldrb	r3, [r3, #3]
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b03      	cmp	r3, #3
 8009484:	d105      	bne.n	8009492 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	799b      	ldrb	r3, [r3, #6]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800948e:	2303      	movs	r3, #3
 8009490:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009492:	7dfb      	ldrb	r3, [r7, #23]
}
 8009494:	4618      	mov	r0, r3
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d120      	bne.n	80094fa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	1e9a      	subs	r2, r3, #2
 80094be:	88fb      	ldrh	r3, [r7, #6]
 80094c0:	4293      	cmp	r3, r2
 80094c2:	bf28      	it	cs
 80094c4:	4613      	movcs	r3, r2
 80094c6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3302      	adds	r3, #2
 80094cc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80094ce:	2300      	movs	r3, #0
 80094d0:	82fb      	strh	r3, [r7, #22]
 80094d2:	e00b      	b.n	80094ec <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80094d4:	8afb      	ldrh	r3, [r7, #22]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	701a      	strb	r2, [r3, #0]
      pdest++;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80094e6:	8afb      	ldrh	r3, [r7, #22]
 80094e8:	3302      	adds	r3, #2
 80094ea:	82fb      	strh	r3, [r7, #22]
 80094ec:	8afa      	ldrh	r2, [r7, #22]
 80094ee:	8abb      	ldrh	r3, [r7, #20]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d3ef      	bcc.n	80094d4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
  }
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	881a      	ldrh	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	b29b      	uxth	r3, r3
 800951a:	4413      	add	r3, r2
 800951c:	b29a      	uxth	r2, r3
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4413      	add	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800952e:	68fb      	ldr	r3, [r7, #12]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800954a:	2301      	movs	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	789b      	ldrb	r3, [r3, #2]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d002      	beq.n	800955c <USBH_CtlReq+0x20>
 8009556:	2b02      	cmp	r3, #2
 8009558:	d00f      	beq.n	800957a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800955a:	e027      	b.n	80095ac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2202      	movs	r2, #2
 8009572:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009574:	2301      	movs	r3, #1
 8009576:	75fb      	strb	r3, [r7, #23]
      break;
 8009578:	e018      	b.n	80095ac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f81c 	bl	80095b8 <USBH_HandleControl>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <USBH_CtlReq+0x54>
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d106      	bne.n	800959e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	761a      	strb	r2, [r3, #24]
      break;
 800959c:	e005      	b.n	80095aa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d102      	bne.n	80095aa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	709a      	strb	r2, [r3, #2]
      break;
 80095aa:	bf00      	nop
  }
  return status;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af02      	add	r7, sp, #8
 80095be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7e1b      	ldrb	r3, [r3, #24]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	2b0a      	cmp	r3, #10
 80095d0:	f200 8156 	bhi.w	8009880 <USBH_HandleControl+0x2c8>
 80095d4:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <USBH_HandleControl+0x24>)
 80095d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095da:	bf00      	nop
 80095dc:	08009609 	.word	0x08009609
 80095e0:	08009623 	.word	0x08009623
 80095e4:	0800968d 	.word	0x0800968d
 80095e8:	080096b3 	.word	0x080096b3
 80095ec:	080096eb 	.word	0x080096eb
 80095f0:	08009715 	.word	0x08009715
 80095f4:	08009767 	.word	0x08009767
 80095f8:	08009789 	.word	0x08009789
 80095fc:	080097c5 	.word	0x080097c5
 8009600:	080097eb 	.word	0x080097eb
 8009604:	08009829 	.word	0x08009829
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f103 0110 	add.w	r1, r3, #16
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	795b      	ldrb	r3, [r3, #5]
 8009612:	461a      	mov	r2, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f943 	bl	80098a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	761a      	strb	r2, [r3, #24]
      break;
 8009620:	e139      	b.n	8009896 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	795b      	ldrb	r3, [r3, #5]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fcc5 	bl	8009fb8 <USBH_LL_GetURBState>
 800962e:	4603      	mov	r3, r0
 8009630:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d11e      	bne.n	8009676 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7c1b      	ldrb	r3, [r3, #16]
 800963c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009640:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	8adb      	ldrh	r3, [r3, #22]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800964a:	7b7b      	ldrb	r3, [r7, #13]
 800964c:	2b80      	cmp	r3, #128	; 0x80
 800964e:	d103      	bne.n	8009658 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2203      	movs	r2, #3
 8009654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009656:	e115      	b.n	8009884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2205      	movs	r2, #5
 800965c:	761a      	strb	r2, [r3, #24]
      break;
 800965e:	e111      	b.n	8009884 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009660:	7b7b      	ldrb	r3, [r7, #13]
 8009662:	2b80      	cmp	r3, #128	; 0x80
 8009664:	d103      	bne.n	800966e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2209      	movs	r2, #9
 800966a:	761a      	strb	r2, [r3, #24]
      break;
 800966c:	e10a      	b.n	8009884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2207      	movs	r2, #7
 8009672:	761a      	strb	r2, [r3, #24]
      break;
 8009674:	e106      	b.n	8009884 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	2b04      	cmp	r3, #4
 800967a:	d003      	beq.n	8009684 <USBH_HandleControl+0xcc>
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b02      	cmp	r3, #2
 8009680:	f040 8100 	bne.w	8009884 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	220b      	movs	r2, #11
 8009688:	761a      	strb	r2, [r3, #24]
      break;
 800968a:	e0fb      	b.n	8009884 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6899      	ldr	r1, [r3, #8]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	899a      	ldrh	r2, [r3, #12]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	791b      	ldrb	r3, [r3, #4]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f93a 	bl	800991e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2204      	movs	r2, #4
 80096ae:	761a      	strb	r2, [r3, #24]
      break;
 80096b0:	e0f1      	b.n	8009896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	791b      	ldrb	r3, [r3, #4]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 fc7d 	bl	8009fb8 <USBH_LL_GetURBState>
 80096be:	4603      	mov	r3, r0
 80096c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d102      	bne.n	80096ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2209      	movs	r2, #9
 80096cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	2b05      	cmp	r3, #5
 80096d2:	d102      	bne.n	80096da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80096d4:	2303      	movs	r3, #3
 80096d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096d8:	e0d6      	b.n	8009888 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	2b04      	cmp	r3, #4
 80096de:	f040 80d3 	bne.w	8009888 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	220b      	movs	r2, #11
 80096e6:	761a      	strb	r2, [r3, #24]
      break;
 80096e8:	e0ce      	b.n	8009888 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6899      	ldr	r1, [r3, #8]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	899a      	ldrh	r2, [r3, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	795b      	ldrb	r3, [r3, #5]
 80096f6:	2001      	movs	r0, #1
 80096f8:	9000      	str	r0, [sp, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f8ea 	bl	80098d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009706:	b29a      	uxth	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2206      	movs	r2, #6
 8009710:	761a      	strb	r2, [r3, #24]
      break;
 8009712:	e0c0      	b.n	8009896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	795b      	ldrb	r3, [r3, #5]
 8009718:	4619      	mov	r1, r3
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fc4c 	bl	8009fb8 <USBH_LL_GetURBState>
 8009720:	4603      	mov	r3, r0
 8009722:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d103      	bne.n	8009732 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2207      	movs	r2, #7
 800972e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009730:	e0ac      	b.n	800988c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b05      	cmp	r3, #5
 8009736:	d105      	bne.n	8009744 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	220c      	movs	r2, #12
 800973c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800973e:	2303      	movs	r3, #3
 8009740:	73fb      	strb	r3, [r7, #15]
      break;
 8009742:	e0a3      	b.n	800988c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d103      	bne.n	8009752 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2205      	movs	r2, #5
 800974e:	761a      	strb	r2, [r3, #24]
      break;
 8009750:	e09c      	b.n	800988c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b04      	cmp	r3, #4
 8009756:	f040 8099 	bne.w	800988c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	220b      	movs	r2, #11
 800975e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009760:	2302      	movs	r3, #2
 8009762:	73fb      	strb	r3, [r7, #15]
      break;
 8009764:	e092      	b.n	800988c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	791b      	ldrb	r3, [r3, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8d5 	bl	800991e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800977a:	b29a      	uxth	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2208      	movs	r2, #8
 8009784:	761a      	strb	r2, [r3, #24]

      break;
 8009786:	e086      	b.n	8009896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	791b      	ldrb	r3, [r3, #4]
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fc12 	bl	8009fb8 <USBH_LL_GetURBState>
 8009794:	4603      	mov	r3, r0
 8009796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d105      	bne.n	80097aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	220d      	movs	r2, #13
 80097a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097a8:	e072      	b.n	8009890 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80097aa:	7bbb      	ldrb	r3, [r7, #14]
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d103      	bne.n	80097b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	220b      	movs	r2, #11
 80097b4:	761a      	strb	r2, [r3, #24]
      break;
 80097b6:	e06b      	b.n	8009890 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80097b8:	7bbb      	ldrb	r3, [r7, #14]
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d168      	bne.n	8009890 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80097be:	2303      	movs	r3, #3
 80097c0:	73fb      	strb	r3, [r7, #15]
      break;
 80097c2:	e065      	b.n	8009890 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	795b      	ldrb	r3, [r3, #5]
 80097c8:	2201      	movs	r2, #1
 80097ca:	9200      	str	r2, [sp, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	2100      	movs	r1, #0
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f87f 	bl	80098d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80097dc:	b29a      	uxth	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	220a      	movs	r2, #10
 80097e6:	761a      	strb	r2, [r3, #24]
      break;
 80097e8:	e055      	b.n	8009896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	795b      	ldrb	r3, [r3, #5]
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fbe1 	bl	8009fb8 <USBH_LL_GetURBState>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d105      	bne.n	800980c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	220d      	movs	r2, #13
 8009808:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800980a:	e043      	b.n	8009894 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d103      	bne.n	800981a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2209      	movs	r2, #9
 8009816:	761a      	strb	r2, [r3, #24]
      break;
 8009818:	e03c      	b.n	8009894 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	2b04      	cmp	r3, #4
 800981e:	d139      	bne.n	8009894 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	220b      	movs	r2, #11
 8009824:	761a      	strb	r2, [r3, #24]
      break;
 8009826:	e035      	b.n	8009894 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7e5b      	ldrb	r3, [r3, #25]
 800982c:	3301      	adds	r3, #1
 800982e:	b2da      	uxtb	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	765a      	strb	r2, [r3, #25]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7e5b      	ldrb	r3, [r3, #25]
 8009838:	2b02      	cmp	r3, #2
 800983a:	d806      	bhi.n	800984a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009848:	e025      	b.n	8009896 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009850:	2106      	movs	r1, #6
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	795b      	ldrb	r3, [r3, #5]
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f90c 	bl	8009a80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	791b      	ldrb	r3, [r3, #4]
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f906 	bl	8009a80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800987a:	2302      	movs	r3, #2
 800987c:	73fb      	strb	r3, [r7, #15]
      break;
 800987e:	e00a      	b.n	8009896 <USBH_HandleControl+0x2de>

    default:
      break;
 8009880:	bf00      	nop
 8009882:	e008      	b.n	8009896 <USBH_HandleControl+0x2de>
      break;
 8009884:	bf00      	nop
 8009886:	e006      	b.n	8009896 <USBH_HandleControl+0x2de>
      break;
 8009888:	bf00      	nop
 800988a:	e004      	b.n	8009896 <USBH_HandleControl+0x2de>
      break;
 800988c:	bf00      	nop
 800988e:	e002      	b.n	8009896 <USBH_HandleControl+0x2de>
      break;
 8009890:	bf00      	nop
 8009892:	e000      	b.n	8009896 <USBH_HandleControl+0x2de>
      break;
 8009894:	bf00      	nop
  }

  return status;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af04      	add	r7, sp, #16
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	4613      	mov	r3, r2
 80098ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098ae:	79f9      	ldrb	r1, [r7, #7]
 80098b0:	2300      	movs	r3, #0
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	2308      	movs	r3, #8
 80098b6:	9302      	str	r3, [sp, #8]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	2300      	movs	r3, #0
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	2200      	movs	r2, #0
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 fb46 	bl	8009f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4611      	mov	r1, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	460b      	mov	r3, r1
 80098e4:	80fb      	strh	r3, [r7, #6]
 80098e6:	4613      	mov	r3, r2
 80098e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098f8:	7979      	ldrb	r1, [r7, #5]
 80098fa:	7e3b      	ldrb	r3, [r7, #24]
 80098fc:	9303      	str	r3, [sp, #12]
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	9302      	str	r3, [sp, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	2301      	movs	r3, #1
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	2300      	movs	r3, #0
 800990c:	2200      	movs	r2, #0
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 fb21 	bl	8009f56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800991e:	b580      	push	{r7, lr}
 8009920:	b088      	sub	sp, #32
 8009922:	af04      	add	r7, sp, #16
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	4611      	mov	r1, r2
 800992a:	461a      	mov	r2, r3
 800992c:	460b      	mov	r3, r1
 800992e:	80fb      	strh	r3, [r7, #6]
 8009930:	4613      	mov	r3, r2
 8009932:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009934:	7979      	ldrb	r1, [r7, #5]
 8009936:	2300      	movs	r3, #0
 8009938:	9303      	str	r3, [sp, #12]
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	9302      	str	r3, [sp, #8]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	2301      	movs	r3, #1
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	2300      	movs	r3, #0
 8009948:	2201      	movs	r2, #1
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 fb03 	bl	8009f56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009950:	2300      	movs	r3, #0

}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b088      	sub	sp, #32
 800995e:	af04      	add	r7, sp, #16
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	4611      	mov	r1, r2
 8009966:	461a      	mov	r2, r3
 8009968:	460b      	mov	r3, r1
 800996a:	80fb      	strh	r3, [r7, #6]
 800996c:	4613      	mov	r3, r2
 800996e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800997e:	7979      	ldrb	r1, [r7, #5]
 8009980:	7e3b      	ldrb	r3, [r7, #24]
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	88fb      	ldrh	r3, [r7, #6]
 8009986:	9302      	str	r3, [sp, #8]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	9301      	str	r3, [sp, #4]
 800998c:	2301      	movs	r3, #1
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2302      	movs	r3, #2
 8009992:	2200      	movs	r2, #0
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fade 	bl	8009f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af04      	add	r7, sp, #16
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	4611      	mov	r1, r2
 80099b0:	461a      	mov	r2, r3
 80099b2:	460b      	mov	r3, r1
 80099b4:	80fb      	strh	r3, [r7, #6]
 80099b6:	4613      	mov	r3, r2
 80099b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099ba:	7979      	ldrb	r1, [r7, #5]
 80099bc:	2300      	movs	r3, #0
 80099be:	9303      	str	r3, [sp, #12]
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	9302      	str	r3, [sp, #8]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	9301      	str	r3, [sp, #4]
 80099c8:	2301      	movs	r3, #1
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	2302      	movs	r3, #2
 80099ce:	2201      	movs	r2, #1
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 fac0 	bl	8009f56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	461a      	mov	r2, r3
 80099ee:	4603      	mov	r3, r0
 80099f0:	70fb      	strb	r3, [r7, #3]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70bb      	strb	r3, [r7, #2]
 80099f6:	4613      	mov	r3, r2
 80099f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80099fa:	7878      	ldrb	r0, [r7, #1]
 80099fc:	78ba      	ldrb	r2, [r7, #2]
 80099fe:	78f9      	ldrb	r1, [r7, #3]
 8009a00:	8b3b      	ldrh	r3, [r7, #24]
 8009a02:	9302      	str	r3, [sp, #8]
 8009a04:	7d3b      	ldrb	r3, [r7, #20]
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	7c3b      	ldrb	r3, [r7, #16]
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa53 	bl	8009eba <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	460b      	mov	r3, r1
 8009a28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa72 	bl	8009f18 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f836 	bl	8009abc <USBH_GetFreePipe>
 8009a50:	4603      	mov	r3, r0
 8009a52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a54:	89fb      	ldrh	r3, [r7, #14]
 8009a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d00a      	beq.n	8009a74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009a5e:	78fa      	ldrb	r2, [r7, #3]
 8009a60:	89fb      	ldrh	r3, [r7, #14]
 8009a62:	f003 030f 	and.w	r3, r3, #15
 8009a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	33e0      	adds	r3, #224	; 0xe0
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a74:	89fb      	ldrh	r3, [r7, #14]
 8009a76:	b2db      	uxtb	r3, r3
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3710      	adds	r7, #16
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009a8c:	78fb      	ldrb	r3, [r7, #3]
 8009a8e:	2b0f      	cmp	r3, #15
 8009a90:	d80d      	bhi.n	8009aae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	33e0      	adds	r3, #224	; 0xe0
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	33e0      	adds	r3, #224	; 0xe0
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
 8009acc:	e00f      	b.n	8009aee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	33e0      	adds	r3, #224	; 0xe0
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	e007      	b.n	8009af8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	3301      	adds	r3, #1
 8009aec:	73fb      	strb	r3, [r7, #15]
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2b0f      	cmp	r3, #15
 8009af2:	d9ec      	bls.n	8009ace <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	490e      	ldr	r1, [pc, #56]	; (8009b44 <MX_USB_HOST_Init+0x40>)
 8009b0c:	480e      	ldr	r0, [pc, #56]	; (8009b48 <MX_USB_HOST_Init+0x44>)
 8009b0e:	f7fe fba7 	bl	8008260 <USBH_Init>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b18:	f7f8 f816 	bl	8001b48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b1c:	490b      	ldr	r1, [pc, #44]	; (8009b4c <MX_USB_HOST_Init+0x48>)
 8009b1e:	480a      	ldr	r0, [pc, #40]	; (8009b48 <MX_USB_HOST_Init+0x44>)
 8009b20:	f7fe fc2c 	bl	800837c <USBH_RegisterClass>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b2a:	f7f8 f80d 	bl	8001b48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b2e:	4806      	ldr	r0, [pc, #24]	; (8009b48 <MX_USB_HOST_Init+0x44>)
 8009b30:	f7fe fcb0 	bl	8008494 <USBH_Start>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b3a:	f7f8 f805 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b3e:	bf00      	nop
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	200001ec 	.word	0x200001ec
 8009b4c:	2000000c 	.word	0x2000000c

08009b50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009b54:	4802      	ldr	r0, [pc, #8]	; (8009b60 <MX_USB_HOST_Process+0x10>)
 8009b56:	f7fe fcad 	bl	80084b4 <USBH_Process>
}
 8009b5a:	bf00      	nop
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	200001ec 	.word	0x200001ec

08009b64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d819      	bhi.n	8009bac <USBH_UserProcess+0x48>
 8009b78:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <USBH_UserProcess+0x1c>)
 8009b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7e:	bf00      	nop
 8009b80:	08009bad 	.word	0x08009bad
 8009b84:	08009b9d 	.word	0x08009b9d
 8009b88:	08009bad 	.word	0x08009bad
 8009b8c:	08009ba5 	.word	0x08009ba5
 8009b90:	08009b95 	.word	0x08009b95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009b94:	4b09      	ldr	r3, [pc, #36]	; (8009bbc <USBH_UserProcess+0x58>)
 8009b96:	2203      	movs	r2, #3
 8009b98:	701a      	strb	r2, [r3, #0]
  break;
 8009b9a:	e008      	b.n	8009bae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009b9c:	4b07      	ldr	r3, [pc, #28]	; (8009bbc <USBH_UserProcess+0x58>)
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	701a      	strb	r2, [r3, #0]
  break;
 8009ba2:	e004      	b.n	8009bae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ba4:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <USBH_UserProcess+0x58>)
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	701a      	strb	r2, [r3, #0]
  break;
 8009baa:	e000      	b.n	8009bae <USBH_UserProcess+0x4a>

  default:
  break;
 8009bac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009bae:	bf00      	nop
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	200005c4 	.word	0x200005c4

08009bc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	; 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	605a      	str	r2, [r3, #4]
 8009bd2:	609a      	str	r2, [r3, #8]
 8009bd4:	60da      	str	r2, [r3, #12]
 8009bd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009be0:	d147      	bne.n	8009c72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009be2:	2300      	movs	r3, #0
 8009be4:	613b      	str	r3, [r7, #16]
 8009be6:	4b25      	ldr	r3, [pc, #148]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	4a24      	ldr	r2, [pc, #144]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009bec:	f043 0301 	orr.w	r3, r3, #1
 8009bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8009bf2:	4b22      	ldr	r3, [pc, #136]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	613b      	str	r3, [r7, #16]
 8009bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c04:	2300      	movs	r3, #0
 8009c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009c0c:	f107 0314 	add.w	r3, r7, #20
 8009c10:	4619      	mov	r1, r3
 8009c12:	481b      	ldr	r0, [pc, #108]	; (8009c80 <HAL_HCD_MspInit+0xc0>)
 8009c14:	f7f8 fb8c 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c18:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c1e:	2302      	movs	r3, #2
 8009c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c26:	2300      	movs	r3, #0
 8009c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c2a:	230a      	movs	r3, #10
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c2e:	f107 0314 	add.w	r3, r7, #20
 8009c32:	4619      	mov	r1, r3
 8009c34:	4812      	ldr	r0, [pc, #72]	; (8009c80 <HAL_HCD_MspInit+0xc0>)
 8009c36:	f7f8 fb7b 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c3a:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c3e:	4a0f      	ldr	r2, [pc, #60]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c44:	6353      	str	r3, [r2, #52]	; 0x34
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4e:	4a0b      	ldr	r2, [pc, #44]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c54:	6453      	str	r3, [r2, #68]	; 0x44
 8009c56:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <HAL_HCD_MspInit+0xbc>)
 8009c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c62:	2200      	movs	r2, #0
 8009c64:	2100      	movs	r1, #0
 8009c66:	2043      	movs	r0, #67	; 0x43
 8009c68:	f7f8 fb2b 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c6c:	2043      	movs	r0, #67	; 0x43
 8009c6e:	f7f8 fb44 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c72:	bf00      	nop
 8009c74:	3728      	adds	r7, #40	; 0x28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	40023800 	.word	0x40023800
 8009c80:	40020000 	.word	0x40020000

08009c84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe ffed 	bl	8008c72 <USBH_LL_IncTimer>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff f825 	bl	8008cfe <USBH_LL_Connect>
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7ff f82e 	bl	8008d2c <USBH_LL_Disconnect>
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe ffdf 	bl	8008cc6 <USBH_LL_PortEnabled>
}
 8009d08:	bf00      	nop
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe ffdf 	bl	8008ce2 <USBH_LL_PortDisabled>
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d12a      	bne.n	8009d94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009d3e:	4a18      	ldr	r2, [pc, #96]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a15      	ldr	r2, [pc, #84]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d4a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d4e:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009d56:	4b12      	ldr	r3, [pc, #72]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d58:	2208      	movs	r2, #8
 8009d5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d5c:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d62:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d6e:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d74:	480a      	ldr	r0, [pc, #40]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d76:	f7f8 fc90 	bl	800269a <HAL_HCD_Init>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009d80:	f7f7 fee2 	bl	8001b48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d84:	4806      	ldr	r0, [pc, #24]	; (8009da0 <USBH_LL_Init+0x74>)
 8009d86:	f7f9 f874 	bl	8002e72 <HAL_HCD_GetCurrentFrame>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7fe ff60 	bl	8008c54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	200005c8 	.word	0x200005c8

08009da4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f8 ffe3 	bl	8002d86 <HAL_HCD_Start>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f95c 	bl	800a084 <USBH_Get_USB_Status>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7f8 ffeb 	bl	8002dcc <HAL_HCD_Stop>
 8009df6:	4603      	mov	r3, r0
 8009df8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 f941 	bl	800a084 <USBH_Get_USB_Status>
 8009e02:	4603      	mov	r3, r0
 8009e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7f9 f833 	bl	8002e8e <HAL_HCD_GetCurrentSpeed>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d00c      	beq.n	8009e48 <USBH_LL_GetSpeed+0x38>
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d80d      	bhi.n	8009e4e <USBH_LL_GetSpeed+0x3e>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d002      	beq.n	8009e3c <USBH_LL_GetSpeed+0x2c>
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d003      	beq.n	8009e42 <USBH_LL_GetSpeed+0x32>
 8009e3a:	e008      	b.n	8009e4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e40:	e008      	b.n	8009e54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009e42:	2301      	movs	r3, #1
 8009e44:	73fb      	strb	r3, [r7, #15]
    break;
 8009e46:	e005      	b.n	8009e54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e4c:	e002      	b.n	8009e54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	73fb      	strb	r3, [r7, #15]
    break;
 8009e52:	bf00      	nop
  }
  return  speed;
 8009e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7f8 ffc6 	bl	8002e06 <HAL_HCD_ResetPort>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 f8ff 	bl	800a084 <USBH_Get_USB_Status>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ea6:	78fa      	ldrb	r2, [r7, #3]
 8009ea8:	4611      	mov	r1, r2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7f8 ffcd 	bl	8002e4a <HAL_HCD_HC_GetXferCount>
 8009eb0:	4603      	mov	r3, r0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009eba:	b590      	push	{r4, r7, lr}
 8009ebc:	b089      	sub	sp, #36	; 0x24
 8009ebe:	af04      	add	r7, sp, #16
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	4603      	mov	r3, r0
 8009eca:	70fb      	strb	r3, [r7, #3]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70bb      	strb	r3, [r7, #2]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009ee2:	787c      	ldrb	r4, [r7, #1]
 8009ee4:	78ba      	ldrb	r2, [r7, #2]
 8009ee6:	78f9      	ldrb	r1, [r7, #3]
 8009ee8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009eea:	9302      	str	r3, [sp, #8]
 8009eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4623      	mov	r3, r4
 8009efa:	f7f8 fc30 	bl	800275e <HAL_HCD_HC_Init>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 f8bd 	bl	800a084 <USBH_Get_USB_Status>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd90      	pop	{r4, r7, pc}

08009f18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f32:	78fa      	ldrb	r2, [r7, #3]
 8009f34:	4611      	mov	r1, r2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7f8 fca0 	bl	800287c <HAL_HCD_HC_Halt>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 f89e 	bl	800a084 <USBH_Get_USB_Status>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009f56:	b590      	push	{r4, r7, lr}
 8009f58:	b089      	sub	sp, #36	; 0x24
 8009f5a:	af04      	add	r7, sp, #16
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	4608      	mov	r0, r1
 8009f60:	4611      	mov	r1, r2
 8009f62:	461a      	mov	r2, r3
 8009f64:	4603      	mov	r3, r0
 8009f66:	70fb      	strb	r3, [r7, #3]
 8009f68:	460b      	mov	r3, r1
 8009f6a:	70bb      	strb	r3, [r7, #2]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f74:	2300      	movs	r3, #0
 8009f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009f7e:	787c      	ldrb	r4, [r7, #1]
 8009f80:	78ba      	ldrb	r2, [r7, #2]
 8009f82:	78f9      	ldrb	r1, [r7, #3]
 8009f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f88:	9303      	str	r3, [sp, #12]
 8009f8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	4623      	mov	r3, r4
 8009f9a:	f7f8 fc93 	bl	80028c4 <HAL_HCD_HC_SubmitRequest>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f86d 	bl	800a084 <USBH_Get_USB_Status>
 8009faa:	4603      	mov	r3, r0
 8009fac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd90      	pop	{r4, r7, pc}

08009fb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fca:	78fa      	ldrb	r2, [r7, #3]
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7f8 ff27 	bl	8002e22 <HAL_HCD_HC_GetURBState>
 8009fd4:	4603      	mov	r3, r0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d103      	bne.n	8009ffc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 f870 	bl	800a0dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009ffc:	20c8      	movs	r0, #200	; 0xc8
 8009ffe:	f7f8 f861 	bl	80020c4 <HAL_Delay>
  return USBH_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
 800a018:	4613      	mov	r3, r2
 800a01a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a022:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a024:	78fb      	ldrb	r3, [r7, #3]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	212c      	movs	r1, #44	; 0x2c
 800a02a:	fb01 f303 	mul.w	r3, r1, r3
 800a02e:	4413      	add	r3, r2
 800a030:	333b      	adds	r3, #59	; 0x3b
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	212c      	movs	r1, #44	; 0x2c
 800a03e:	fb01 f303 	mul.w	r3, r1, r3
 800a042:	4413      	add	r3, r2
 800a044:	3354      	adds	r3, #84	; 0x54
 800a046:	78ba      	ldrb	r2, [r7, #2]
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	e008      	b.n	800a05e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a04c:	78fb      	ldrb	r3, [r7, #3]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	212c      	movs	r1, #44	; 0x2c
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	4413      	add	r3, r2
 800a058:	3355      	adds	r3, #85	; 0x55
 800a05a:	78ba      	ldrb	r2, [r7, #2]
 800a05c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7f8 f825 	bl	80020c4 <HAL_Delay>
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a084:	b480      	push	{r7}
 800a086:	b085      	sub	sp, #20
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a092:	79fb      	ldrb	r3, [r7, #7]
 800a094:	2b03      	cmp	r3, #3
 800a096:	d817      	bhi.n	800a0c8 <USBH_Get_USB_Status+0x44>
 800a098:	a201      	add	r2, pc, #4	; (adr r2, 800a0a0 <USBH_Get_USB_Status+0x1c>)
 800a09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09e:	bf00      	nop
 800a0a0:	0800a0b1 	.word	0x0800a0b1
 800a0a4:	0800a0b7 	.word	0x0800a0b7
 800a0a8:	0800a0bd 	.word	0x0800a0bd
 800a0ac:	0800a0c3 	.word	0x0800a0c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b4:	e00b      	b.n	800a0ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ba:	e008      	b.n	800a0ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c0:	e005      	b.n	800a0ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0c6:	e002      	b.n	800a0ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a0cc:	bf00      	nop
  }
  return usb_status;
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]
 800a0f4:	e001      	b.n	800a0fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	2101      	movs	r1, #1
 800a100:	4803      	ldr	r0, [pc, #12]	; (800a110 <MX_DriverVbusFS+0x34>)
 800a102:	f7f8 fab1 	bl	8002668 <HAL_GPIO_WritePin>
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40020800 	.word	0x40020800

0800a114 <__errno>:
 800a114:	4b01      	ldr	r3, [pc, #4]	; (800a11c <__errno+0x8>)
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	2000002c 	.word	0x2000002c

0800a120 <__libc_init_array>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	4d0d      	ldr	r5, [pc, #52]	; (800a158 <__libc_init_array+0x38>)
 800a124:	4c0d      	ldr	r4, [pc, #52]	; (800a15c <__libc_init_array+0x3c>)
 800a126:	1b64      	subs	r4, r4, r5
 800a128:	10a4      	asrs	r4, r4, #2
 800a12a:	2600      	movs	r6, #0
 800a12c:	42a6      	cmp	r6, r4
 800a12e:	d109      	bne.n	800a144 <__libc_init_array+0x24>
 800a130:	4d0b      	ldr	r5, [pc, #44]	; (800a160 <__libc_init_array+0x40>)
 800a132:	4c0c      	ldr	r4, [pc, #48]	; (800a164 <__libc_init_array+0x44>)
 800a134:	f000 fc9e 	bl	800aa74 <_init>
 800a138:	1b64      	subs	r4, r4, r5
 800a13a:	10a4      	asrs	r4, r4, #2
 800a13c:	2600      	movs	r6, #0
 800a13e:	42a6      	cmp	r6, r4
 800a140:	d105      	bne.n	800a14e <__libc_init_array+0x2e>
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	f855 3b04 	ldr.w	r3, [r5], #4
 800a148:	4798      	blx	r3
 800a14a:	3601      	adds	r6, #1
 800a14c:	e7ee      	b.n	800a12c <__libc_init_array+0xc>
 800a14e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a152:	4798      	blx	r3
 800a154:	3601      	adds	r6, #1
 800a156:	e7f2      	b.n	800a13e <__libc_init_array+0x1e>
 800a158:	0800abb8 	.word	0x0800abb8
 800a15c:	0800abb8 	.word	0x0800abb8
 800a160:	0800abb8 	.word	0x0800abb8
 800a164:	0800abbc 	.word	0x0800abbc

0800a168 <malloc>:
 800a168:	4b02      	ldr	r3, [pc, #8]	; (800a174 <malloc+0xc>)
 800a16a:	4601      	mov	r1, r0
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	f000 b87f 	b.w	800a270 <_malloc_r>
 800a172:	bf00      	nop
 800a174:	2000002c 	.word	0x2000002c

0800a178 <free>:
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <free+0xc>)
 800a17a:	4601      	mov	r1, r0
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f000 b80b 	b.w	800a198 <_free_r>
 800a182:	bf00      	nop
 800a184:	2000002c 	.word	0x2000002c

0800a188 <memset>:
 800a188:	4402      	add	r2, r0
 800a18a:	4603      	mov	r3, r0
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d100      	bne.n	800a192 <memset+0xa>
 800a190:	4770      	bx	lr
 800a192:	f803 1b01 	strb.w	r1, [r3], #1
 800a196:	e7f9      	b.n	800a18c <memset+0x4>

0800a198 <_free_r>:
 800a198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a19a:	2900      	cmp	r1, #0
 800a19c:	d044      	beq.n	800a228 <_free_r+0x90>
 800a19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a2:	9001      	str	r0, [sp, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f1a1 0404 	sub.w	r4, r1, #4
 800a1aa:	bfb8      	it	lt
 800a1ac:	18e4      	addlt	r4, r4, r3
 800a1ae:	f000 f903 	bl	800a3b8 <__malloc_lock>
 800a1b2:	4a1e      	ldr	r2, [pc, #120]	; (800a22c <_free_r+0x94>)
 800a1b4:	9801      	ldr	r0, [sp, #4]
 800a1b6:	6813      	ldr	r3, [r2, #0]
 800a1b8:	b933      	cbnz	r3, 800a1c8 <_free_r+0x30>
 800a1ba:	6063      	str	r3, [r4, #4]
 800a1bc:	6014      	str	r4, [r2, #0]
 800a1be:	b003      	add	sp, #12
 800a1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1c4:	f000 b8fe 	b.w	800a3c4 <__malloc_unlock>
 800a1c8:	42a3      	cmp	r3, r4
 800a1ca:	d908      	bls.n	800a1de <_free_r+0x46>
 800a1cc:	6825      	ldr	r5, [r4, #0]
 800a1ce:	1961      	adds	r1, r4, r5
 800a1d0:	428b      	cmp	r3, r1
 800a1d2:	bf01      	itttt	eq
 800a1d4:	6819      	ldreq	r1, [r3, #0]
 800a1d6:	685b      	ldreq	r3, [r3, #4]
 800a1d8:	1949      	addeq	r1, r1, r5
 800a1da:	6021      	streq	r1, [r4, #0]
 800a1dc:	e7ed      	b.n	800a1ba <_free_r+0x22>
 800a1de:	461a      	mov	r2, r3
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	b10b      	cbz	r3, 800a1e8 <_free_r+0x50>
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	d9fa      	bls.n	800a1de <_free_r+0x46>
 800a1e8:	6811      	ldr	r1, [r2, #0]
 800a1ea:	1855      	adds	r5, r2, r1
 800a1ec:	42a5      	cmp	r5, r4
 800a1ee:	d10b      	bne.n	800a208 <_free_r+0x70>
 800a1f0:	6824      	ldr	r4, [r4, #0]
 800a1f2:	4421      	add	r1, r4
 800a1f4:	1854      	adds	r4, r2, r1
 800a1f6:	42a3      	cmp	r3, r4
 800a1f8:	6011      	str	r1, [r2, #0]
 800a1fa:	d1e0      	bne.n	800a1be <_free_r+0x26>
 800a1fc:	681c      	ldr	r4, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	6053      	str	r3, [r2, #4]
 800a202:	4421      	add	r1, r4
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	e7da      	b.n	800a1be <_free_r+0x26>
 800a208:	d902      	bls.n	800a210 <_free_r+0x78>
 800a20a:	230c      	movs	r3, #12
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	e7d6      	b.n	800a1be <_free_r+0x26>
 800a210:	6825      	ldr	r5, [r4, #0]
 800a212:	1961      	adds	r1, r4, r5
 800a214:	428b      	cmp	r3, r1
 800a216:	bf04      	itt	eq
 800a218:	6819      	ldreq	r1, [r3, #0]
 800a21a:	685b      	ldreq	r3, [r3, #4]
 800a21c:	6063      	str	r3, [r4, #4]
 800a21e:	bf04      	itt	eq
 800a220:	1949      	addeq	r1, r1, r5
 800a222:	6021      	streq	r1, [r4, #0]
 800a224:	6054      	str	r4, [r2, #4]
 800a226:	e7ca      	b.n	800a1be <_free_r+0x26>
 800a228:	b003      	add	sp, #12
 800a22a:	bd30      	pop	{r4, r5, pc}
 800a22c:	200008cc 	.word	0x200008cc

0800a230 <sbrk_aligned>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	4e0e      	ldr	r6, [pc, #56]	; (800a26c <sbrk_aligned+0x3c>)
 800a234:	460c      	mov	r4, r1
 800a236:	6831      	ldr	r1, [r6, #0]
 800a238:	4605      	mov	r5, r0
 800a23a:	b911      	cbnz	r1, 800a242 <sbrk_aligned+0x12>
 800a23c:	f000 f88c 	bl	800a358 <_sbrk_r>
 800a240:	6030      	str	r0, [r6, #0]
 800a242:	4621      	mov	r1, r4
 800a244:	4628      	mov	r0, r5
 800a246:	f000 f887 	bl	800a358 <_sbrk_r>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d00a      	beq.n	800a264 <sbrk_aligned+0x34>
 800a24e:	1cc4      	adds	r4, r0, #3
 800a250:	f024 0403 	bic.w	r4, r4, #3
 800a254:	42a0      	cmp	r0, r4
 800a256:	d007      	beq.n	800a268 <sbrk_aligned+0x38>
 800a258:	1a21      	subs	r1, r4, r0
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 f87c 	bl	800a358 <_sbrk_r>
 800a260:	3001      	adds	r0, #1
 800a262:	d101      	bne.n	800a268 <sbrk_aligned+0x38>
 800a264:	f04f 34ff 	mov.w	r4, #4294967295
 800a268:	4620      	mov	r0, r4
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	200008d0 	.word	0x200008d0

0800a270 <_malloc_r>:
 800a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a274:	1ccd      	adds	r5, r1, #3
 800a276:	f025 0503 	bic.w	r5, r5, #3
 800a27a:	3508      	adds	r5, #8
 800a27c:	2d0c      	cmp	r5, #12
 800a27e:	bf38      	it	cc
 800a280:	250c      	movcc	r5, #12
 800a282:	2d00      	cmp	r5, #0
 800a284:	4607      	mov	r7, r0
 800a286:	db01      	blt.n	800a28c <_malloc_r+0x1c>
 800a288:	42a9      	cmp	r1, r5
 800a28a:	d905      	bls.n	800a298 <_malloc_r+0x28>
 800a28c:	230c      	movs	r3, #12
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	2600      	movs	r6, #0
 800a292:	4630      	mov	r0, r6
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	4e2e      	ldr	r6, [pc, #184]	; (800a354 <_malloc_r+0xe4>)
 800a29a:	f000 f88d 	bl	800a3b8 <__malloc_lock>
 800a29e:	6833      	ldr	r3, [r6, #0]
 800a2a0:	461c      	mov	r4, r3
 800a2a2:	bb34      	cbnz	r4, 800a2f2 <_malloc_r+0x82>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f7ff ffc2 	bl	800a230 <sbrk_aligned>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	d14d      	bne.n	800a34e <_malloc_r+0xde>
 800a2b2:	6834      	ldr	r4, [r6, #0]
 800a2b4:	4626      	mov	r6, r4
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	d140      	bne.n	800a33c <_malloc_r+0xcc>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4638      	mov	r0, r7
 800a2c0:	eb04 0803 	add.w	r8, r4, r3
 800a2c4:	f000 f848 	bl	800a358 <_sbrk_r>
 800a2c8:	4580      	cmp	r8, r0
 800a2ca:	d13a      	bne.n	800a342 <_malloc_r+0xd2>
 800a2cc:	6821      	ldr	r1, [r4, #0]
 800a2ce:	3503      	adds	r5, #3
 800a2d0:	1a6d      	subs	r5, r5, r1
 800a2d2:	f025 0503 	bic.w	r5, r5, #3
 800a2d6:	3508      	adds	r5, #8
 800a2d8:	2d0c      	cmp	r5, #12
 800a2da:	bf38      	it	cc
 800a2dc:	250c      	movcc	r5, #12
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	f7ff ffa5 	bl	800a230 <sbrk_aligned>
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	d02b      	beq.n	800a342 <_malloc_r+0xd2>
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	442b      	add	r3, r5
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	e00e      	b.n	800a310 <_malloc_r+0xa0>
 800a2f2:	6822      	ldr	r2, [r4, #0]
 800a2f4:	1b52      	subs	r2, r2, r5
 800a2f6:	d41e      	bmi.n	800a336 <_malloc_r+0xc6>
 800a2f8:	2a0b      	cmp	r2, #11
 800a2fa:	d916      	bls.n	800a32a <_malloc_r+0xba>
 800a2fc:	1961      	adds	r1, r4, r5
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	6025      	str	r5, [r4, #0]
 800a302:	bf18      	it	ne
 800a304:	6059      	strne	r1, [r3, #4]
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	bf08      	it	eq
 800a30a:	6031      	streq	r1, [r6, #0]
 800a30c:	5162      	str	r2, [r4, r5]
 800a30e:	604b      	str	r3, [r1, #4]
 800a310:	4638      	mov	r0, r7
 800a312:	f104 060b 	add.w	r6, r4, #11
 800a316:	f000 f855 	bl	800a3c4 <__malloc_unlock>
 800a31a:	f026 0607 	bic.w	r6, r6, #7
 800a31e:	1d23      	adds	r3, r4, #4
 800a320:	1af2      	subs	r2, r6, r3
 800a322:	d0b6      	beq.n	800a292 <_malloc_r+0x22>
 800a324:	1b9b      	subs	r3, r3, r6
 800a326:	50a3      	str	r3, [r4, r2]
 800a328:	e7b3      	b.n	800a292 <_malloc_r+0x22>
 800a32a:	6862      	ldr	r2, [r4, #4]
 800a32c:	42a3      	cmp	r3, r4
 800a32e:	bf0c      	ite	eq
 800a330:	6032      	streq	r2, [r6, #0]
 800a332:	605a      	strne	r2, [r3, #4]
 800a334:	e7ec      	b.n	800a310 <_malloc_r+0xa0>
 800a336:	4623      	mov	r3, r4
 800a338:	6864      	ldr	r4, [r4, #4]
 800a33a:	e7b2      	b.n	800a2a2 <_malloc_r+0x32>
 800a33c:	4634      	mov	r4, r6
 800a33e:	6876      	ldr	r6, [r6, #4]
 800a340:	e7b9      	b.n	800a2b6 <_malloc_r+0x46>
 800a342:	230c      	movs	r3, #12
 800a344:	603b      	str	r3, [r7, #0]
 800a346:	4638      	mov	r0, r7
 800a348:	f000 f83c 	bl	800a3c4 <__malloc_unlock>
 800a34c:	e7a1      	b.n	800a292 <_malloc_r+0x22>
 800a34e:	6025      	str	r5, [r4, #0]
 800a350:	e7de      	b.n	800a310 <_malloc_r+0xa0>
 800a352:	bf00      	nop
 800a354:	200008cc 	.word	0x200008cc

0800a358 <_sbrk_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4d06      	ldr	r5, [pc, #24]	; (800a374 <_sbrk_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4604      	mov	r4, r0
 800a360:	4608      	mov	r0, r1
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	f7f7 fdca 	bl	8001efc <_sbrk>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_sbrk_r+0x1a>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_sbrk_r+0x1a>
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	200008d4 	.word	0x200008d4

0800a378 <siprintf>:
 800a378:	b40e      	push	{r1, r2, r3}
 800a37a:	b500      	push	{lr}
 800a37c:	b09c      	sub	sp, #112	; 0x70
 800a37e:	ab1d      	add	r3, sp, #116	; 0x74
 800a380:	9002      	str	r0, [sp, #8]
 800a382:	9006      	str	r0, [sp, #24]
 800a384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a388:	4809      	ldr	r0, [pc, #36]	; (800a3b0 <siprintf+0x38>)
 800a38a:	9107      	str	r1, [sp, #28]
 800a38c:	9104      	str	r1, [sp, #16]
 800a38e:	4909      	ldr	r1, [pc, #36]	; (800a3b4 <siprintf+0x3c>)
 800a390:	f853 2b04 	ldr.w	r2, [r3], #4
 800a394:	9105      	str	r1, [sp, #20]
 800a396:	6800      	ldr	r0, [r0, #0]
 800a398:	9301      	str	r3, [sp, #4]
 800a39a:	a902      	add	r1, sp, #8
 800a39c:	f000 f874 	bl	800a488 <_svfiprintf_r>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
 800a3a6:	b01c      	add	sp, #112	; 0x70
 800a3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3ac:	b003      	add	sp, #12
 800a3ae:	4770      	bx	lr
 800a3b0:	2000002c 	.word	0x2000002c
 800a3b4:	ffff0208 	.word	0xffff0208

0800a3b8 <__malloc_lock>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__malloc_lock+0x8>)
 800a3ba:	f000 baf9 	b.w	800a9b0 <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	200008d8 	.word	0x200008d8

0800a3c4 <__malloc_unlock>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__malloc_unlock+0x8>)
 800a3c6:	f000 baf4 	b.w	800a9b2 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	200008d8 	.word	0x200008d8

0800a3d0 <__ssputs_r>:
 800a3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d4:	688e      	ldr	r6, [r1, #8]
 800a3d6:	429e      	cmp	r6, r3
 800a3d8:	4682      	mov	sl, r0
 800a3da:	460c      	mov	r4, r1
 800a3dc:	4690      	mov	r8, r2
 800a3de:	461f      	mov	r7, r3
 800a3e0:	d838      	bhi.n	800a454 <__ssputs_r+0x84>
 800a3e2:	898a      	ldrh	r2, [r1, #12]
 800a3e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3e8:	d032      	beq.n	800a450 <__ssputs_r+0x80>
 800a3ea:	6825      	ldr	r5, [r4, #0]
 800a3ec:	6909      	ldr	r1, [r1, #16]
 800a3ee:	eba5 0901 	sub.w	r9, r5, r1
 800a3f2:	6965      	ldr	r5, [r4, #20]
 800a3f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	444b      	add	r3, r9
 800a400:	106d      	asrs	r5, r5, #1
 800a402:	429d      	cmp	r5, r3
 800a404:	bf38      	it	cc
 800a406:	461d      	movcc	r5, r3
 800a408:	0553      	lsls	r3, r2, #21
 800a40a:	d531      	bpl.n	800a470 <__ssputs_r+0xa0>
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7ff ff2f 	bl	800a270 <_malloc_r>
 800a412:	4606      	mov	r6, r0
 800a414:	b950      	cbnz	r0, 800a42c <__ssputs_r+0x5c>
 800a416:	230c      	movs	r3, #12
 800a418:	f8ca 3000 	str.w	r3, [sl]
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a422:	81a3      	strh	r3, [r4, #12]
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a42c:	6921      	ldr	r1, [r4, #16]
 800a42e:	464a      	mov	r2, r9
 800a430:	f000 fac0 	bl	800a9b4 <memcpy>
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a43e:	81a3      	strh	r3, [r4, #12]
 800a440:	6126      	str	r6, [r4, #16]
 800a442:	6165      	str	r5, [r4, #20]
 800a444:	444e      	add	r6, r9
 800a446:	eba5 0509 	sub.w	r5, r5, r9
 800a44a:	6026      	str	r6, [r4, #0]
 800a44c:	60a5      	str	r5, [r4, #8]
 800a44e:	463e      	mov	r6, r7
 800a450:	42be      	cmp	r6, r7
 800a452:	d900      	bls.n	800a456 <__ssputs_r+0x86>
 800a454:	463e      	mov	r6, r7
 800a456:	6820      	ldr	r0, [r4, #0]
 800a458:	4632      	mov	r2, r6
 800a45a:	4641      	mov	r1, r8
 800a45c:	f000 fab8 	bl	800a9d0 <memmove>
 800a460:	68a3      	ldr	r3, [r4, #8]
 800a462:	1b9b      	subs	r3, r3, r6
 800a464:	60a3      	str	r3, [r4, #8]
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	4433      	add	r3, r6
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	2000      	movs	r0, #0
 800a46e:	e7db      	b.n	800a428 <__ssputs_r+0x58>
 800a470:	462a      	mov	r2, r5
 800a472:	f000 fac7 	bl	800aa04 <_realloc_r>
 800a476:	4606      	mov	r6, r0
 800a478:	2800      	cmp	r0, #0
 800a47a:	d1e1      	bne.n	800a440 <__ssputs_r+0x70>
 800a47c:	6921      	ldr	r1, [r4, #16]
 800a47e:	4650      	mov	r0, sl
 800a480:	f7ff fe8a 	bl	800a198 <_free_r>
 800a484:	e7c7      	b.n	800a416 <__ssputs_r+0x46>
	...

0800a488 <_svfiprintf_r>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	4698      	mov	r8, r3
 800a48e:	898b      	ldrh	r3, [r1, #12]
 800a490:	061b      	lsls	r3, r3, #24
 800a492:	b09d      	sub	sp, #116	; 0x74
 800a494:	4607      	mov	r7, r0
 800a496:	460d      	mov	r5, r1
 800a498:	4614      	mov	r4, r2
 800a49a:	d50e      	bpl.n	800a4ba <_svfiprintf_r+0x32>
 800a49c:	690b      	ldr	r3, [r1, #16]
 800a49e:	b963      	cbnz	r3, 800a4ba <_svfiprintf_r+0x32>
 800a4a0:	2140      	movs	r1, #64	; 0x40
 800a4a2:	f7ff fee5 	bl	800a270 <_malloc_r>
 800a4a6:	6028      	str	r0, [r5, #0]
 800a4a8:	6128      	str	r0, [r5, #16]
 800a4aa:	b920      	cbnz	r0, 800a4b6 <_svfiprintf_r+0x2e>
 800a4ac:	230c      	movs	r3, #12
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	e0d1      	b.n	800a65a <_svfiprintf_r+0x1d2>
 800a4b6:	2340      	movs	r3, #64	; 0x40
 800a4b8:	616b      	str	r3, [r5, #20]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4be:	2320      	movs	r3, #32
 800a4c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4c8:	2330      	movs	r3, #48	; 0x30
 800a4ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a674 <_svfiprintf_r+0x1ec>
 800a4ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4d2:	f04f 0901 	mov.w	r9, #1
 800a4d6:	4623      	mov	r3, r4
 800a4d8:	469a      	mov	sl, r3
 800a4da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4de:	b10a      	cbz	r2, 800a4e4 <_svfiprintf_r+0x5c>
 800a4e0:	2a25      	cmp	r2, #37	; 0x25
 800a4e2:	d1f9      	bne.n	800a4d8 <_svfiprintf_r+0x50>
 800a4e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4e8:	d00b      	beq.n	800a502 <_svfiprintf_r+0x7a>
 800a4ea:	465b      	mov	r3, fp
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	f7ff ff6d 	bl	800a3d0 <__ssputs_r>
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f000 80aa 	beq.w	800a650 <_svfiprintf_r+0x1c8>
 800a4fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4fe:	445a      	add	r2, fp
 800a500:	9209      	str	r2, [sp, #36]	; 0x24
 800a502:	f89a 3000 	ldrb.w	r3, [sl]
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 80a2 	beq.w	800a650 <_svfiprintf_r+0x1c8>
 800a50c:	2300      	movs	r3, #0
 800a50e:	f04f 32ff 	mov.w	r2, #4294967295
 800a512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a516:	f10a 0a01 	add.w	sl, sl, #1
 800a51a:	9304      	str	r3, [sp, #16]
 800a51c:	9307      	str	r3, [sp, #28]
 800a51e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a522:	931a      	str	r3, [sp, #104]	; 0x68
 800a524:	4654      	mov	r4, sl
 800a526:	2205      	movs	r2, #5
 800a528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a52c:	4851      	ldr	r0, [pc, #324]	; (800a674 <_svfiprintf_r+0x1ec>)
 800a52e:	f7f5 fe57 	bl	80001e0 <memchr>
 800a532:	9a04      	ldr	r2, [sp, #16]
 800a534:	b9d8      	cbnz	r0, 800a56e <_svfiprintf_r+0xe6>
 800a536:	06d0      	lsls	r0, r2, #27
 800a538:	bf44      	itt	mi
 800a53a:	2320      	movmi	r3, #32
 800a53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a540:	0711      	lsls	r1, r2, #28
 800a542:	bf44      	itt	mi
 800a544:	232b      	movmi	r3, #43	; 0x2b
 800a546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a54a:	f89a 3000 	ldrb.w	r3, [sl]
 800a54e:	2b2a      	cmp	r3, #42	; 0x2a
 800a550:	d015      	beq.n	800a57e <_svfiprintf_r+0xf6>
 800a552:	9a07      	ldr	r2, [sp, #28]
 800a554:	4654      	mov	r4, sl
 800a556:	2000      	movs	r0, #0
 800a558:	f04f 0c0a 	mov.w	ip, #10
 800a55c:	4621      	mov	r1, r4
 800a55e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a562:	3b30      	subs	r3, #48	; 0x30
 800a564:	2b09      	cmp	r3, #9
 800a566:	d94e      	bls.n	800a606 <_svfiprintf_r+0x17e>
 800a568:	b1b0      	cbz	r0, 800a598 <_svfiprintf_r+0x110>
 800a56a:	9207      	str	r2, [sp, #28]
 800a56c:	e014      	b.n	800a598 <_svfiprintf_r+0x110>
 800a56e:	eba0 0308 	sub.w	r3, r0, r8
 800a572:	fa09 f303 	lsl.w	r3, r9, r3
 800a576:	4313      	orrs	r3, r2
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	46a2      	mov	sl, r4
 800a57c:	e7d2      	b.n	800a524 <_svfiprintf_r+0x9c>
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	1d19      	adds	r1, r3, #4
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	9103      	str	r1, [sp, #12]
 800a586:	2b00      	cmp	r3, #0
 800a588:	bfbb      	ittet	lt
 800a58a:	425b      	neglt	r3, r3
 800a58c:	f042 0202 	orrlt.w	r2, r2, #2
 800a590:	9307      	strge	r3, [sp, #28]
 800a592:	9307      	strlt	r3, [sp, #28]
 800a594:	bfb8      	it	lt
 800a596:	9204      	strlt	r2, [sp, #16]
 800a598:	7823      	ldrb	r3, [r4, #0]
 800a59a:	2b2e      	cmp	r3, #46	; 0x2e
 800a59c:	d10c      	bne.n	800a5b8 <_svfiprintf_r+0x130>
 800a59e:	7863      	ldrb	r3, [r4, #1]
 800a5a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a2:	d135      	bne.n	800a610 <_svfiprintf_r+0x188>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	9203      	str	r2, [sp, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bfb8      	it	lt
 800a5b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5b4:	3402      	adds	r4, #2
 800a5b6:	9305      	str	r3, [sp, #20]
 800a5b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a684 <_svfiprintf_r+0x1fc>
 800a5bc:	7821      	ldrb	r1, [r4, #0]
 800a5be:	2203      	movs	r2, #3
 800a5c0:	4650      	mov	r0, sl
 800a5c2:	f7f5 fe0d 	bl	80001e0 <memchr>
 800a5c6:	b140      	cbz	r0, 800a5da <_svfiprintf_r+0x152>
 800a5c8:	2340      	movs	r3, #64	; 0x40
 800a5ca:	eba0 000a 	sub.w	r0, r0, sl
 800a5ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a5d2:	9b04      	ldr	r3, [sp, #16]
 800a5d4:	4303      	orrs	r3, r0
 800a5d6:	3401      	adds	r4, #1
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5de:	4826      	ldr	r0, [pc, #152]	; (800a678 <_svfiprintf_r+0x1f0>)
 800a5e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5e4:	2206      	movs	r2, #6
 800a5e6:	f7f5 fdfb 	bl	80001e0 <memchr>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d038      	beq.n	800a660 <_svfiprintf_r+0x1d8>
 800a5ee:	4b23      	ldr	r3, [pc, #140]	; (800a67c <_svfiprintf_r+0x1f4>)
 800a5f0:	bb1b      	cbnz	r3, 800a63a <_svfiprintf_r+0x1b2>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	3307      	adds	r3, #7
 800a5f6:	f023 0307 	bic.w	r3, r3, #7
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a600:	4433      	add	r3, r6
 800a602:	9309      	str	r3, [sp, #36]	; 0x24
 800a604:	e767      	b.n	800a4d6 <_svfiprintf_r+0x4e>
 800a606:	fb0c 3202 	mla	r2, ip, r2, r3
 800a60a:	460c      	mov	r4, r1
 800a60c:	2001      	movs	r0, #1
 800a60e:	e7a5      	b.n	800a55c <_svfiprintf_r+0xd4>
 800a610:	2300      	movs	r3, #0
 800a612:	3401      	adds	r4, #1
 800a614:	9305      	str	r3, [sp, #20]
 800a616:	4619      	mov	r1, r3
 800a618:	f04f 0c0a 	mov.w	ip, #10
 800a61c:	4620      	mov	r0, r4
 800a61e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a622:	3a30      	subs	r2, #48	; 0x30
 800a624:	2a09      	cmp	r2, #9
 800a626:	d903      	bls.n	800a630 <_svfiprintf_r+0x1a8>
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0c5      	beq.n	800a5b8 <_svfiprintf_r+0x130>
 800a62c:	9105      	str	r1, [sp, #20]
 800a62e:	e7c3      	b.n	800a5b8 <_svfiprintf_r+0x130>
 800a630:	fb0c 2101 	mla	r1, ip, r1, r2
 800a634:	4604      	mov	r4, r0
 800a636:	2301      	movs	r3, #1
 800a638:	e7f0      	b.n	800a61c <_svfiprintf_r+0x194>
 800a63a:	ab03      	add	r3, sp, #12
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	462a      	mov	r2, r5
 800a640:	4b0f      	ldr	r3, [pc, #60]	; (800a680 <_svfiprintf_r+0x1f8>)
 800a642:	a904      	add	r1, sp, #16
 800a644:	4638      	mov	r0, r7
 800a646:	f3af 8000 	nop.w
 800a64a:	1c42      	adds	r2, r0, #1
 800a64c:	4606      	mov	r6, r0
 800a64e:	d1d6      	bne.n	800a5fe <_svfiprintf_r+0x176>
 800a650:	89ab      	ldrh	r3, [r5, #12]
 800a652:	065b      	lsls	r3, r3, #25
 800a654:	f53f af2c 	bmi.w	800a4b0 <_svfiprintf_r+0x28>
 800a658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a65a:	b01d      	add	sp, #116	; 0x74
 800a65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	462a      	mov	r2, r5
 800a666:	4b06      	ldr	r3, [pc, #24]	; (800a680 <_svfiprintf_r+0x1f8>)
 800a668:	a904      	add	r1, sp, #16
 800a66a:	4638      	mov	r0, r7
 800a66c:	f000 f87a 	bl	800a764 <_printf_i>
 800a670:	e7eb      	b.n	800a64a <_svfiprintf_r+0x1c2>
 800a672:	bf00      	nop
 800a674:	0800ab7c 	.word	0x0800ab7c
 800a678:	0800ab86 	.word	0x0800ab86
 800a67c:	00000000 	.word	0x00000000
 800a680:	0800a3d1 	.word	0x0800a3d1
 800a684:	0800ab82 	.word	0x0800ab82

0800a688 <_printf_common>:
 800a688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a68c:	4616      	mov	r6, r2
 800a68e:	4699      	mov	r9, r3
 800a690:	688a      	ldr	r2, [r1, #8]
 800a692:	690b      	ldr	r3, [r1, #16]
 800a694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a698:	4293      	cmp	r3, r2
 800a69a:	bfb8      	it	lt
 800a69c:	4613      	movlt	r3, r2
 800a69e:	6033      	str	r3, [r6, #0]
 800a6a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6a4:	4607      	mov	r7, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b10a      	cbz	r2, 800a6ae <_printf_common+0x26>
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	6033      	str	r3, [r6, #0]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	0699      	lsls	r1, r3, #26
 800a6b2:	bf42      	ittt	mi
 800a6b4:	6833      	ldrmi	r3, [r6, #0]
 800a6b6:	3302      	addmi	r3, #2
 800a6b8:	6033      	strmi	r3, [r6, #0]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	f015 0506 	ands.w	r5, r5, #6
 800a6c0:	d106      	bne.n	800a6d0 <_printf_common+0x48>
 800a6c2:	f104 0a19 	add.w	sl, r4, #25
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	6832      	ldr	r2, [r6, #0]
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	42ab      	cmp	r3, r5
 800a6ce:	dc26      	bgt.n	800a71e <_printf_common+0x96>
 800a6d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6d4:	1e13      	subs	r3, r2, #0
 800a6d6:	6822      	ldr	r2, [r4, #0]
 800a6d8:	bf18      	it	ne
 800a6da:	2301      	movne	r3, #1
 800a6dc:	0692      	lsls	r2, r2, #26
 800a6de:	d42b      	bmi.n	800a738 <_printf_common+0xb0>
 800a6e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	47c0      	blx	r8
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d01e      	beq.n	800a72c <_printf_common+0xa4>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	68e5      	ldr	r5, [r4, #12]
 800a6f2:	6832      	ldr	r2, [r6, #0]
 800a6f4:	f003 0306 	and.w	r3, r3, #6
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	bf08      	it	eq
 800a6fc:	1aad      	subeq	r5, r5, r2
 800a6fe:	68a3      	ldr	r3, [r4, #8]
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	bf0c      	ite	eq
 800a704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a708:	2500      	movne	r5, #0
 800a70a:	4293      	cmp	r3, r2
 800a70c:	bfc4      	itt	gt
 800a70e:	1a9b      	subgt	r3, r3, r2
 800a710:	18ed      	addgt	r5, r5, r3
 800a712:	2600      	movs	r6, #0
 800a714:	341a      	adds	r4, #26
 800a716:	42b5      	cmp	r5, r6
 800a718:	d11a      	bne.n	800a750 <_printf_common+0xc8>
 800a71a:	2000      	movs	r0, #0
 800a71c:	e008      	b.n	800a730 <_printf_common+0xa8>
 800a71e:	2301      	movs	r3, #1
 800a720:	4652      	mov	r2, sl
 800a722:	4649      	mov	r1, r9
 800a724:	4638      	mov	r0, r7
 800a726:	47c0      	blx	r8
 800a728:	3001      	adds	r0, #1
 800a72a:	d103      	bne.n	800a734 <_printf_common+0xac>
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	3501      	adds	r5, #1
 800a736:	e7c6      	b.n	800a6c6 <_printf_common+0x3e>
 800a738:	18e1      	adds	r1, r4, r3
 800a73a:	1c5a      	adds	r2, r3, #1
 800a73c:	2030      	movs	r0, #48	; 0x30
 800a73e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a742:	4422      	add	r2, r4
 800a744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a74c:	3302      	adds	r3, #2
 800a74e:	e7c7      	b.n	800a6e0 <_printf_common+0x58>
 800a750:	2301      	movs	r3, #1
 800a752:	4622      	mov	r2, r4
 800a754:	4649      	mov	r1, r9
 800a756:	4638      	mov	r0, r7
 800a758:	47c0      	blx	r8
 800a75a:	3001      	adds	r0, #1
 800a75c:	d0e6      	beq.n	800a72c <_printf_common+0xa4>
 800a75e:	3601      	adds	r6, #1
 800a760:	e7d9      	b.n	800a716 <_printf_common+0x8e>
	...

0800a764 <_printf_i>:
 800a764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	7e0f      	ldrb	r7, [r1, #24]
 800a76a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a76c:	2f78      	cmp	r7, #120	; 0x78
 800a76e:	4691      	mov	r9, r2
 800a770:	4680      	mov	r8, r0
 800a772:	460c      	mov	r4, r1
 800a774:	469a      	mov	sl, r3
 800a776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a77a:	d807      	bhi.n	800a78c <_printf_i+0x28>
 800a77c:	2f62      	cmp	r7, #98	; 0x62
 800a77e:	d80a      	bhi.n	800a796 <_printf_i+0x32>
 800a780:	2f00      	cmp	r7, #0
 800a782:	f000 80d8 	beq.w	800a936 <_printf_i+0x1d2>
 800a786:	2f58      	cmp	r7, #88	; 0x58
 800a788:	f000 80a3 	beq.w	800a8d2 <_printf_i+0x16e>
 800a78c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a794:	e03a      	b.n	800a80c <_printf_i+0xa8>
 800a796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a79a:	2b15      	cmp	r3, #21
 800a79c:	d8f6      	bhi.n	800a78c <_printf_i+0x28>
 800a79e:	a101      	add	r1, pc, #4	; (adr r1, 800a7a4 <_printf_i+0x40>)
 800a7a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a78d 	.word	0x0800a78d
 800a7b0:	0800a78d 	.word	0x0800a78d
 800a7b4:	0800a78d 	.word	0x0800a78d
 800a7b8:	0800a78d 	.word	0x0800a78d
 800a7bc:	0800a811 	.word	0x0800a811
 800a7c0:	0800a78d 	.word	0x0800a78d
 800a7c4:	0800a78d 	.word	0x0800a78d
 800a7c8:	0800a78d 	.word	0x0800a78d
 800a7cc:	0800a78d 	.word	0x0800a78d
 800a7d0:	0800a91d 	.word	0x0800a91d
 800a7d4:	0800a841 	.word	0x0800a841
 800a7d8:	0800a8ff 	.word	0x0800a8ff
 800a7dc:	0800a78d 	.word	0x0800a78d
 800a7e0:	0800a78d 	.word	0x0800a78d
 800a7e4:	0800a93f 	.word	0x0800a93f
 800a7e8:	0800a78d 	.word	0x0800a78d
 800a7ec:	0800a841 	.word	0x0800a841
 800a7f0:	0800a78d 	.word	0x0800a78d
 800a7f4:	0800a78d 	.word	0x0800a78d
 800a7f8:	0800a907 	.word	0x0800a907
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	602a      	str	r2, [r5, #0]
 800a804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a80c:	2301      	movs	r3, #1
 800a80e:	e0a3      	b.n	800a958 <_printf_i+0x1f4>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	6829      	ldr	r1, [r5, #0]
 800a814:	0606      	lsls	r6, r0, #24
 800a816:	f101 0304 	add.w	r3, r1, #4
 800a81a:	d50a      	bpl.n	800a832 <_printf_i+0xce>
 800a81c:	680e      	ldr	r6, [r1, #0]
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	2e00      	cmp	r6, #0
 800a822:	da03      	bge.n	800a82c <_printf_i+0xc8>
 800a824:	232d      	movs	r3, #45	; 0x2d
 800a826:	4276      	negs	r6, r6
 800a828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a82c:	485e      	ldr	r0, [pc, #376]	; (800a9a8 <_printf_i+0x244>)
 800a82e:	230a      	movs	r3, #10
 800a830:	e019      	b.n	800a866 <_printf_i+0x102>
 800a832:	680e      	ldr	r6, [r1, #0]
 800a834:	602b      	str	r3, [r5, #0]
 800a836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a83a:	bf18      	it	ne
 800a83c:	b236      	sxthne	r6, r6
 800a83e:	e7ef      	b.n	800a820 <_printf_i+0xbc>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	6820      	ldr	r0, [r4, #0]
 800a844:	1d19      	adds	r1, r3, #4
 800a846:	6029      	str	r1, [r5, #0]
 800a848:	0601      	lsls	r1, r0, #24
 800a84a:	d501      	bpl.n	800a850 <_printf_i+0xec>
 800a84c:	681e      	ldr	r6, [r3, #0]
 800a84e:	e002      	b.n	800a856 <_printf_i+0xf2>
 800a850:	0646      	lsls	r6, r0, #25
 800a852:	d5fb      	bpl.n	800a84c <_printf_i+0xe8>
 800a854:	881e      	ldrh	r6, [r3, #0]
 800a856:	4854      	ldr	r0, [pc, #336]	; (800a9a8 <_printf_i+0x244>)
 800a858:	2f6f      	cmp	r7, #111	; 0x6f
 800a85a:	bf0c      	ite	eq
 800a85c:	2308      	moveq	r3, #8
 800a85e:	230a      	movne	r3, #10
 800a860:	2100      	movs	r1, #0
 800a862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a866:	6865      	ldr	r5, [r4, #4]
 800a868:	60a5      	str	r5, [r4, #8]
 800a86a:	2d00      	cmp	r5, #0
 800a86c:	bfa2      	ittt	ge
 800a86e:	6821      	ldrge	r1, [r4, #0]
 800a870:	f021 0104 	bicge.w	r1, r1, #4
 800a874:	6021      	strge	r1, [r4, #0]
 800a876:	b90e      	cbnz	r6, 800a87c <_printf_i+0x118>
 800a878:	2d00      	cmp	r5, #0
 800a87a:	d04d      	beq.n	800a918 <_printf_i+0x1b4>
 800a87c:	4615      	mov	r5, r2
 800a87e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a882:	fb03 6711 	mls	r7, r3, r1, r6
 800a886:	5dc7      	ldrb	r7, [r0, r7]
 800a888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a88c:	4637      	mov	r7, r6
 800a88e:	42bb      	cmp	r3, r7
 800a890:	460e      	mov	r6, r1
 800a892:	d9f4      	bls.n	800a87e <_printf_i+0x11a>
 800a894:	2b08      	cmp	r3, #8
 800a896:	d10b      	bne.n	800a8b0 <_printf_i+0x14c>
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	07de      	lsls	r6, r3, #31
 800a89c:	d508      	bpl.n	800a8b0 <_printf_i+0x14c>
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	6861      	ldr	r1, [r4, #4]
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	bfde      	ittt	le
 800a8a6:	2330      	movle	r3, #48	; 0x30
 800a8a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8b0:	1b52      	subs	r2, r2, r5
 800a8b2:	6122      	str	r2, [r4, #16]
 800a8b4:	f8cd a000 	str.w	sl, [sp]
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	aa03      	add	r2, sp, #12
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7ff fee2 	bl	800a688 <_printf_common>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d14c      	bne.n	800a962 <_printf_i+0x1fe>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	b004      	add	sp, #16
 800a8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d2:	4835      	ldr	r0, [pc, #212]	; (800a9a8 <_printf_i+0x244>)
 800a8d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8d8:	6829      	ldr	r1, [r5, #0]
 800a8da:	6823      	ldr	r3, [r4, #0]
 800a8dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8e0:	6029      	str	r1, [r5, #0]
 800a8e2:	061d      	lsls	r5, r3, #24
 800a8e4:	d514      	bpl.n	800a910 <_printf_i+0x1ac>
 800a8e6:	07df      	lsls	r7, r3, #31
 800a8e8:	bf44      	itt	mi
 800a8ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ee:	6023      	strmi	r3, [r4, #0]
 800a8f0:	b91e      	cbnz	r6, 800a8fa <_printf_i+0x196>
 800a8f2:	6823      	ldr	r3, [r4, #0]
 800a8f4:	f023 0320 	bic.w	r3, r3, #32
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	2310      	movs	r3, #16
 800a8fc:	e7b0      	b.n	800a860 <_printf_i+0xfc>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	f043 0320 	orr.w	r3, r3, #32
 800a904:	6023      	str	r3, [r4, #0]
 800a906:	2378      	movs	r3, #120	; 0x78
 800a908:	4828      	ldr	r0, [pc, #160]	; (800a9ac <_printf_i+0x248>)
 800a90a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a90e:	e7e3      	b.n	800a8d8 <_printf_i+0x174>
 800a910:	0659      	lsls	r1, r3, #25
 800a912:	bf48      	it	mi
 800a914:	b2b6      	uxthmi	r6, r6
 800a916:	e7e6      	b.n	800a8e6 <_printf_i+0x182>
 800a918:	4615      	mov	r5, r2
 800a91a:	e7bb      	b.n	800a894 <_printf_i+0x130>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	6826      	ldr	r6, [r4, #0]
 800a920:	6961      	ldr	r1, [r4, #20]
 800a922:	1d18      	adds	r0, r3, #4
 800a924:	6028      	str	r0, [r5, #0]
 800a926:	0635      	lsls	r5, r6, #24
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	d501      	bpl.n	800a930 <_printf_i+0x1cc>
 800a92c:	6019      	str	r1, [r3, #0]
 800a92e:	e002      	b.n	800a936 <_printf_i+0x1d2>
 800a930:	0670      	lsls	r0, r6, #25
 800a932:	d5fb      	bpl.n	800a92c <_printf_i+0x1c8>
 800a934:	8019      	strh	r1, [r3, #0]
 800a936:	2300      	movs	r3, #0
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	4615      	mov	r5, r2
 800a93c:	e7ba      	b.n	800a8b4 <_printf_i+0x150>
 800a93e:	682b      	ldr	r3, [r5, #0]
 800a940:	1d1a      	adds	r2, r3, #4
 800a942:	602a      	str	r2, [r5, #0]
 800a944:	681d      	ldr	r5, [r3, #0]
 800a946:	6862      	ldr	r2, [r4, #4]
 800a948:	2100      	movs	r1, #0
 800a94a:	4628      	mov	r0, r5
 800a94c:	f7f5 fc48 	bl	80001e0 <memchr>
 800a950:	b108      	cbz	r0, 800a956 <_printf_i+0x1f2>
 800a952:	1b40      	subs	r0, r0, r5
 800a954:	6060      	str	r0, [r4, #4]
 800a956:	6863      	ldr	r3, [r4, #4]
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	2300      	movs	r3, #0
 800a95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a960:	e7a8      	b.n	800a8b4 <_printf_i+0x150>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	462a      	mov	r2, r5
 800a966:	4649      	mov	r1, r9
 800a968:	4640      	mov	r0, r8
 800a96a:	47d0      	blx	sl
 800a96c:	3001      	adds	r0, #1
 800a96e:	d0ab      	beq.n	800a8c8 <_printf_i+0x164>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	079b      	lsls	r3, r3, #30
 800a974:	d413      	bmi.n	800a99e <_printf_i+0x23a>
 800a976:	68e0      	ldr	r0, [r4, #12]
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	4298      	cmp	r0, r3
 800a97c:	bfb8      	it	lt
 800a97e:	4618      	movlt	r0, r3
 800a980:	e7a4      	b.n	800a8cc <_printf_i+0x168>
 800a982:	2301      	movs	r3, #1
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d09b      	beq.n	800a8c8 <_printf_i+0x164>
 800a990:	3501      	adds	r5, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	9903      	ldr	r1, [sp, #12]
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	42ab      	cmp	r3, r5
 800a99a:	dcf2      	bgt.n	800a982 <_printf_i+0x21e>
 800a99c:	e7eb      	b.n	800a976 <_printf_i+0x212>
 800a99e:	2500      	movs	r5, #0
 800a9a0:	f104 0619 	add.w	r6, r4, #25
 800a9a4:	e7f5      	b.n	800a992 <_printf_i+0x22e>
 800a9a6:	bf00      	nop
 800a9a8:	0800ab8d 	.word	0x0800ab8d
 800a9ac:	0800ab9e 	.word	0x0800ab9e

0800a9b0 <__retarget_lock_acquire_recursive>:
 800a9b0:	4770      	bx	lr

0800a9b2 <__retarget_lock_release_recursive>:
 800a9b2:	4770      	bx	lr

0800a9b4 <memcpy>:
 800a9b4:	440a      	add	r2, r1
 800a9b6:	4291      	cmp	r1, r2
 800a9b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9bc:	d100      	bne.n	800a9c0 <memcpy+0xc>
 800a9be:	4770      	bx	lr
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	d1f9      	bne.n	800a9c2 <memcpy+0xe>
 800a9ce:	bd10      	pop	{r4, pc}

0800a9d0 <memmove>:
 800a9d0:	4288      	cmp	r0, r1
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	eb01 0402 	add.w	r4, r1, r2
 800a9d8:	d902      	bls.n	800a9e0 <memmove+0x10>
 800a9da:	4284      	cmp	r4, r0
 800a9dc:	4623      	mov	r3, r4
 800a9de:	d807      	bhi.n	800a9f0 <memmove+0x20>
 800a9e0:	1e43      	subs	r3, r0, #1
 800a9e2:	42a1      	cmp	r1, r4
 800a9e4:	d008      	beq.n	800a9f8 <memmove+0x28>
 800a9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ee:	e7f8      	b.n	800a9e2 <memmove+0x12>
 800a9f0:	4402      	add	r2, r0
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	428a      	cmp	r2, r1
 800a9f6:	d100      	bne.n	800a9fa <memmove+0x2a>
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa02:	e7f7      	b.n	800a9f4 <memmove+0x24>

0800aa04 <_realloc_r>:
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	b921      	cbnz	r1, 800aa1a <_realloc_r+0x16>
 800aa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	4611      	mov	r1, r2
 800aa16:	f7ff bc2b 	b.w	800a270 <_malloc_r>
 800aa1a:	b92a      	cbnz	r2, 800aa28 <_realloc_r+0x24>
 800aa1c:	f7ff fbbc 	bl	800a198 <_free_r>
 800aa20:	4625      	mov	r5, r4
 800aa22:	4628      	mov	r0, r5
 800aa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa28:	f000 f81b 	bl	800aa62 <_malloc_usable_size_r>
 800aa2c:	4284      	cmp	r4, r0
 800aa2e:	4607      	mov	r7, r0
 800aa30:	d802      	bhi.n	800aa38 <_realloc_r+0x34>
 800aa32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa36:	d812      	bhi.n	800aa5e <_realloc_r+0x5a>
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff fc18 	bl	800a270 <_malloc_r>
 800aa40:	4605      	mov	r5, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d0ed      	beq.n	800aa22 <_realloc_r+0x1e>
 800aa46:	42bc      	cmp	r4, r7
 800aa48:	4622      	mov	r2, r4
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	bf28      	it	cs
 800aa4e:	463a      	movcs	r2, r7
 800aa50:	f7ff ffb0 	bl	800a9b4 <memcpy>
 800aa54:	4631      	mov	r1, r6
 800aa56:	4640      	mov	r0, r8
 800aa58:	f7ff fb9e 	bl	800a198 <_free_r>
 800aa5c:	e7e1      	b.n	800aa22 <_realloc_r+0x1e>
 800aa5e:	4635      	mov	r5, r6
 800aa60:	e7df      	b.n	800aa22 <_realloc_r+0x1e>

0800aa62 <_malloc_usable_size_r>:
 800aa62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa66:	1f18      	subs	r0, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bfbc      	itt	lt
 800aa6c:	580b      	ldrlt	r3, [r1, r0]
 800aa6e:	18c0      	addlt	r0, r0, r3
 800aa70:	4770      	bx	lr
	...

0800aa74 <_init>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr

0800aa80 <_fini>:
 800aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa82:	bf00      	nop
 800aa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa86:	bc08      	pop	{r3}
 800aa88:	469e      	mov	lr, r3
 800aa8a:	4770      	bx	lr
