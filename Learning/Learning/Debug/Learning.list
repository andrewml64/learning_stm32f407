
Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa9c  0800aa9c  0001aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa4  0800aaa4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa4  0800aaa4  0001aaa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aaa8  0800aaa8  0001aaa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800aaac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000804  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000894  20000894  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014da9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032e9  00000000  00000000  00034e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00038158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f60  00000000  00000000  00039208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eed  00000000  00000000  0003a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b2d  00000000  00000000  0005e055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbc9c  00000000  00000000  00073b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f81e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c64  00000000  00000000  0013f870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a948 	.word	0x0800a948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a948 	.word	0x0800a948

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b9aa 	b.w	8000dd8 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f83c 	bl	8000b08 <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2lz>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	460d      	mov	r5, r1
 8000aa6:	f000 f9f9 	bl	8000e9c <__aeabi_dcmplt>
 8000aaa:	b928      	cbnz	r0, 8000ab8 <__aeabi_d2lz+0x1c>
 8000aac:	4620      	mov	r0, r4
 8000aae:	4629      	mov	r1, r5
 8000ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab4:	f000 b80a 	b.w	8000acc <__aeabi_d2ulz>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000abe:	f000 f805 	bl	8000acc <__aeabi_d2ulz>
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
 8000aca:	bf00      	nop

08000acc <__aeabi_d2ulz>:
 8000acc:	b5d0      	push	{r4, r6, r7, lr}
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__aeabi_d2ulz+0x34>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4606      	mov	r6, r0
 8000ad4:	460f      	mov	r7, r1
 8000ad6:	f7ff fd8f 	bl	80005f8 <__aeabi_dmul>
 8000ada:	f000 fa07 	bl	8000eec <__aeabi_d2uiz>
 8000ade:	4604      	mov	r4, r0
 8000ae0:	f7ff fd10 	bl	8000504 <__aeabi_ui2d>
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <__aeabi_d2ulz+0x38>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f7ff fd86 	bl	80005f8 <__aeabi_dmul>
 8000aec:	4602      	mov	r2, r0
 8000aee:	460b      	mov	r3, r1
 8000af0:	4630      	mov	r0, r6
 8000af2:	4639      	mov	r1, r7
 8000af4:	f7ff fbc8 	bl	8000288 <__aeabi_dsub>
 8000af8:	f000 f9f8 	bl	8000eec <__aeabi_d2uiz>
 8000afc:	4621      	mov	r1, r4
 8000afe:	bdd0      	pop	{r4, r6, r7, pc}
 8000b00:	3df00000 	.word	0x3df00000
 8000b04:	41f00000 	.word	0x41f00000

08000b08 <__udivmoddi4>:
 8000b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b0c:	9d08      	ldr	r5, [sp, #32]
 8000b0e:	4604      	mov	r4, r0
 8000b10:	468e      	mov	lr, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d14d      	bne.n	8000bb2 <__udivmoddi4+0xaa>
 8000b16:	428a      	cmp	r2, r1
 8000b18:	4694      	mov	ip, r2
 8000b1a:	d969      	bls.n	8000bf0 <__udivmoddi4+0xe8>
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	b152      	cbz	r2, 8000b38 <__udivmoddi4+0x30>
 8000b22:	fa01 f302 	lsl.w	r3, r1, r2
 8000b26:	f1c2 0120 	rsb	r1, r2, #32
 8000b2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b32:	ea41 0e03 	orr.w	lr, r1, r3
 8000b36:	4094      	lsls	r4, r2
 8000b38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b3c:	0c21      	lsrs	r1, r4, #16
 8000b3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b42:	fa1f f78c 	uxth.w	r7, ip
 8000b46:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b4e:	fb06 f107 	mul.w	r1, r6, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x64>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b5e:	f080 811f 	bcs.w	8000da0 <__udivmoddi4+0x298>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 811c 	bls.w	8000da0 <__udivmoddi4+0x298>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 f707 	mul.w	r7, r0, r7
 8000b80:	42a7      	cmp	r7, r4
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x92>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8c:	f080 810a 	bcs.w	8000da4 <__udivmoddi4+0x29c>
 8000b90:	42a7      	cmp	r7, r4
 8000b92:	f240 8107 	bls.w	8000da4 <__udivmoddi4+0x29c>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9e:	1be4      	subs	r4, r4, r7
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa4>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xc2>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80ef 	beq.w	8000d9a <__udivmoddi4+0x292>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x160>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd4>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80f9 	bhi.w	8000dce <__udivmoddi4+0x2c6>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	469e      	mov	lr, r3
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa4>
 8000bea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa4>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xec>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 8092 	bne.w	8000d22 <__udivmoddi4+0x21a>
 8000bfe:	eba1 010c 	sub.w	r1, r1, ip
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	2601      	movs	r6, #1
 8000c0c:	0c20      	lsrs	r0, r4, #16
 8000c0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c12:	fb07 1113 	mls	r1, r7, r3, r1
 8000c16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1a:	fb0e f003 	mul.w	r0, lr, r3
 8000c1e:	4288      	cmp	r0, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x12c>
 8000c22:	eb1c 0101 	adds.w	r1, ip, r1
 8000c26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x12a>
 8000c2c:	4288      	cmp	r0, r1
 8000c2e:	f200 80cb 	bhi.w	8000dc8 <__udivmoddi4+0x2c0>
 8000c32:	4643      	mov	r3, r8
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c44:	fb0e fe00 	mul.w	lr, lr, r0
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x156>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	d202      	bcs.n	8000c5c <__udivmoddi4+0x154>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	f200 80bb 	bhi.w	8000dd2 <__udivmoddi4+0x2ca>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c66:	e79c      	b.n	8000ba2 <__udivmoddi4+0x9a>
 8000c68:	f1c6 0720 	rsb	r7, r6, #32
 8000c6c:	40b3      	lsls	r3, r6
 8000c6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c76:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	431c      	orrs	r4, r3
 8000c80:	40f9      	lsrs	r1, r7
 8000c82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c86:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c8e:	0c20      	lsrs	r0, r4, #16
 8000c90:	fa1f fe8c 	uxth.w	lr, ip
 8000c94:	fb09 1118 	mls	r1, r9, r8, r1
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x1b8>
 8000ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb0:	f080 8088 	bcs.w	8000dc4 <__udivmoddi4+0x2bc>
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	f240 8085 	bls.w	8000dc4 <__udivmoddi4+0x2bc>
 8000cba:	f1a8 0802 	sub.w	r8, r8, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ccc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd4:	458e      	cmp	lr, r1
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1e2>
 8000cd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cdc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce0:	d26c      	bcs.n	8000dbc <__udivmoddi4+0x2b4>
 8000ce2:	458e      	cmp	lr, r1
 8000ce4:	d96a      	bls.n	8000dbc <__udivmoddi4+0x2b4>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4461      	add	r1, ip
 8000cea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cee:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf2:	eba1 010e 	sub.w	r1, r1, lr
 8000cf6:	42a1      	cmp	r1, r4
 8000cf8:	46c8      	mov	r8, r9
 8000cfa:	46a6      	mov	lr, r4
 8000cfc:	d356      	bcc.n	8000dac <__udivmoddi4+0x2a4>
 8000cfe:	d053      	beq.n	8000da8 <__udivmoddi4+0x2a0>
 8000d00:	b15d      	cbz	r5, 8000d1a <__udivmoddi4+0x212>
 8000d02:	ebb3 0208 	subs.w	r2, r3, r8
 8000d06:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d12:	40f1      	lsrs	r1, r6
 8000d14:	431f      	orrs	r7, r3
 8000d16:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	40d8      	lsrs	r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d30:	4091      	lsls	r1, r2
 8000d32:	4301      	orrs	r1, r0
 8000d34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d40:	fb07 3610 	mls	r6, r7, r0, r3
 8000d44:	0c0b      	lsrs	r3, r1, #16
 8000d46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	fa04 f402 	lsl.w	r4, r4, r2
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x260>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5e:	d22f      	bcs.n	8000dc0 <__udivmoddi4+0x2b8>
 8000d60:	429e      	cmp	r6, r3
 8000d62:	d92d      	bls.n	8000dc0 <__udivmoddi4+0x2b8>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	b289      	uxth	r1, r1
 8000d6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d70:	fb07 3316 	mls	r3, r7, r6, r3
 8000d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d78:	fb06 f30e 	mul.w	r3, r6, lr
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x28a>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d88:	d216      	bcs.n	8000db8 <__udivmoddi4+0x2b0>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d914      	bls.n	8000db8 <__udivmoddi4+0x2b0>
 8000d8e:	3e02      	subs	r6, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	1ac9      	subs	r1, r1, r3
 8000d94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d98:	e738      	b.n	8000c0c <__udivmoddi4+0x104>
 8000d9a:	462e      	mov	r6, r5
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	e705      	b.n	8000bac <__udivmoddi4+0xa4>
 8000da0:	4606      	mov	r6, r0
 8000da2:	e6e3      	b.n	8000b6c <__udivmoddi4+0x64>
 8000da4:	4618      	mov	r0, r3
 8000da6:	e6f8      	b.n	8000b9a <__udivmoddi4+0x92>
 8000da8:	454b      	cmp	r3, r9
 8000daa:	d2a9      	bcs.n	8000d00 <__udivmoddi4+0x1f8>
 8000dac:	ebb9 0802 	subs.w	r8, r9, r2
 8000db0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db4:	3801      	subs	r0, #1
 8000db6:	e7a3      	b.n	8000d00 <__udivmoddi4+0x1f8>
 8000db8:	4646      	mov	r6, r8
 8000dba:	e7ea      	b.n	8000d92 <__udivmoddi4+0x28a>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	e794      	b.n	8000cea <__udivmoddi4+0x1e2>
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	e7d1      	b.n	8000d68 <__udivmoddi4+0x260>
 8000dc4:	46d0      	mov	r8, sl
 8000dc6:	e77b      	b.n	8000cc0 <__udivmoddi4+0x1b8>
 8000dc8:	3b02      	subs	r3, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	e732      	b.n	8000c34 <__udivmoddi4+0x12c>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e709      	b.n	8000be6 <__udivmoddi4+0xde>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e742      	b.n	8000c5e <__udivmoddi4+0x156>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <__gedf2>:
 8000ddc:	f04f 3cff 	mov.w	ip, #4294967295
 8000de0:	e006      	b.n	8000df0 <__cmpdf2+0x4>
 8000de2:	bf00      	nop

08000de4 <__ledf2>:
 8000de4:	f04f 0c01 	mov.w	ip, #1
 8000de8:	e002      	b.n	8000df0 <__cmpdf2+0x4>
 8000dea:	bf00      	nop

08000dec <__cmpdf2>:
 8000dec:	f04f 0c01 	mov.w	ip, #1
 8000df0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000df4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e00:	bf18      	it	ne
 8000e02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e06:	d01b      	beq.n	8000e40 <__cmpdf2+0x54>
 8000e08:	b001      	add	sp, #4
 8000e0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e0e:	bf0c      	ite	eq
 8000e10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e14:	ea91 0f03 	teqne	r1, r3
 8000e18:	bf02      	ittt	eq
 8000e1a:	ea90 0f02 	teqeq	r0, r2
 8000e1e:	2000      	moveq	r0, #0
 8000e20:	4770      	bxeq	lr
 8000e22:	f110 0f00 	cmn.w	r0, #0
 8000e26:	ea91 0f03 	teq	r1, r3
 8000e2a:	bf58      	it	pl
 8000e2c:	4299      	cmppl	r1, r3
 8000e2e:	bf08      	it	eq
 8000e30:	4290      	cmpeq	r0, r2
 8000e32:	bf2c      	ite	cs
 8000e34:	17d8      	asrcs	r0, r3, #31
 8000e36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e3a:	f040 0001 	orr.w	r0, r0, #1
 8000e3e:	4770      	bx	lr
 8000e40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e48:	d102      	bne.n	8000e50 <__cmpdf2+0x64>
 8000e4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e4e:	d107      	bne.n	8000e60 <__cmpdf2+0x74>
 8000e50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e58:	d1d6      	bne.n	8000e08 <__cmpdf2+0x1c>
 8000e5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e5e:	d0d3      	beq.n	8000e08 <__cmpdf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cdrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4662      	mov	r2, ip
 8000e6e:	468c      	mov	ip, r1
 8000e70:	4619      	mov	r1, r3
 8000e72:	4663      	mov	r3, ip
 8000e74:	e000      	b.n	8000e78 <__aeabi_cdcmpeq>
 8000e76:	bf00      	nop

08000e78 <__aeabi_cdcmpeq>:
 8000e78:	b501      	push	{r0, lr}
 8000e7a:	f7ff ffb7 	bl	8000dec <__cmpdf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd01      	pop	{r0, pc}

08000e88 <__aeabi_dcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cdcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_dcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cdcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_dcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cdcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_dcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffce 	bl	8000e68 <__aeabi_cdrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_dcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc4 	bl	8000e68 <__aeabi_cdrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	b097      	sub	sp, #92	; 0x5c
 8000f32:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t buf[16];
	uint16_t C1 = 1, C2 = 1, C3 = 1, C4 = 1, C5 = 1, C6 = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8000f52:	2301      	movs	r3, #1
 8000f54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	int accel_x = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t pressure = 0, temp = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f60:	2300      	movs	r3, #0
 8000f62:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t dT = 0, TEMP, P;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
	int64_t OFF = 0, SENS = 0;
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f80:	f001 f858 	bl	8002034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f84:	f000 fc6e 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f88:	f000 fd66 	bl	8001a58 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f8c:	f000 fcd4 	bl	8001938 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f90:	f000 fd00 	bl	8001994 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f94:	f008 fd20 	bl	80099d8 <MX_USB_HOST_Init>
  MX_USART2_Init();
 8000f98:	f000 fd32 	bl	8001a00 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	48aa      	ldr	r0, [pc, #680]	; (800124c <main+0x320>)
 8000fa2:	f001 fb8b 	bl	80026bc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f001 f8b6 	bl	8002118 <HAL_Delay>

	// Send reset command to baro sensor on initialization
	buf[0] = BARO_RESET;
 8000fac:	231e      	movs	r3, #30
 8000fae:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8000fb0:	23ee      	movs	r3, #238	; 0xee
 8000fb2:	b299      	uxth	r1, r3
 8000fb4:	1d3a      	adds	r2, r7, #4
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	48a4      	ldr	r0, [pc, #656]	; (8001250 <main+0x324>)
 8000fc0:	f003 f8e4 	bl	800418c <HAL_I2C_Master_Transmit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <main+0xb0>
		strcpy((char*)buf, "Error TX_1\r\n");
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4aa0      	ldr	r2, [pc, #640]	; (8001254 <main+0x328>)
 8000fd2:	461e      	mov	r6, r3
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	c607      	stmia	r6!, {r0, r1, r2}
 8000fda:	7033      	strb	r3, [r6, #0]
	}
	HAL_Delay(50);
 8000fdc:	2032      	movs	r0, #50	; 0x32
 8000fde:	f001 f89b 	bl	8002118 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C1;
 8000fe2:	22a0      	movs	r2, #160	; 0xa0
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8000fec:	23ee      	movs	r3, #238	; 0xee
 8000fee:	b299      	uxth	r1, r3
 8000ff0:	1d3a      	adds	r2, r7, #4
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4895      	ldr	r0, [pc, #596]	; (8001250 <main+0x324>)
 8000ffc:	f003 f8c6 	bl	800418c <HAL_I2C_Master_Transmit>
 8001000:	4603      	mov	r3, r0
 8001002:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <main+0xee>
		strcpy((char*)buf, "Error TX_1a\r\n");
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	4a92      	ldr	r2, [pc, #584]	; (8001258 <main+0x32c>)
 800100e:	461e      	mov	r6, r3
 8001010:	4613      	mov	r3, r2
 8001012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001014:	c607      	stmia	r6!, {r0, r1, r2}
 8001016:	8033      	strh	r3, [r6, #0]
 8001018:	e020      	b.n	800105c <main+0x130>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800101a:	23ee      	movs	r3, #238	; 0xee
 800101c:	b299      	uxth	r1, r3
 800101e:	1d3a      	adds	r2, r7, #4
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	4889      	ldr	r0, [pc, #548]	; (8001250 <main+0x324>)
 800102a:	f003 f9ad 	bl	8004388 <HAL_I2C_Master_Receive>
 800102e:	4603      	mov	r3, r0
 8001030:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001032:	7ffb      	ldrb	r3, [r7, #31]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <main+0x11e>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4a88      	ldr	r2, [pc, #544]	; (800125c <main+0x330>)
 800103c:	ca07      	ldmia	r2, {r0, r1, r2}
 800103e:	c303      	stmia	r3!, {r0, r1}
 8001040:	801a      	strh	r2, [r3, #0]
 8001042:	3302      	adds	r3, #2
 8001044:	0c12      	lsrs	r2, r2, #16
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e008      	b.n	800105c <main+0x130>
		  } else {
			  C1 = ((buf[0] << 8) | buf[1]);
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  }
	}
	HAL_Delay(50);
 800105c:	2032      	movs	r0, #50	; 0x32
 800105e:	f001 f85b 	bl	8002118 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C2;
 8001062:	22a0      	movs	r2, #160	; 0xa0
 8001064:	2304      	movs	r3, #4
 8001066:	4313      	orrs	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800106c:	23ee      	movs	r3, #238	; 0xee
 800106e:	b299      	uxth	r1, r3
 8001070:	1d3a      	adds	r2, r7, #4
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	4875      	ldr	r0, [pc, #468]	; (8001250 <main+0x324>)
 800107c:	f003 f886 	bl	800418c <HAL_I2C_Master_Transmit>
 8001080:	4603      	mov	r3, r0
 8001082:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001084:	7ffb      	ldrb	r3, [r7, #31]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <main+0x16e>
		strcpy((char*)buf, "Error TX_1b\r\n");
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4a74      	ldr	r2, [pc, #464]	; (8001260 <main+0x334>)
 800108e:	461e      	mov	r6, r3
 8001090:	4613      	mov	r3, r2
 8001092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001094:	c607      	stmia	r6!, {r0, r1, r2}
 8001096:	8033      	strh	r3, [r6, #0]
 8001098:	e020      	b.n	80010dc <main+0x1b0>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800109a:	23ee      	movs	r3, #238	; 0xee
 800109c:	b299      	uxth	r1, r3
 800109e:	1d3a      	adds	r2, r7, #4
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	4869      	ldr	r0, [pc, #420]	; (8001250 <main+0x324>)
 80010aa:	f003 f96d 	bl	8004388 <HAL_I2C_Master_Receive>
 80010ae:	4603      	mov	r3, r0
 80010b0:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <main+0x19e>
			  strcpy((char*)buf, "Error Rx\r\n");
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4a68      	ldr	r2, [pc, #416]	; (800125c <main+0x330>)
 80010bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010be:	c303      	stmia	r3!, {r0, r1}
 80010c0:	801a      	strh	r2, [r3, #0]
 80010c2:	3302      	adds	r3, #2
 80010c4:	0c12      	lsrs	r2, r2, #16
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e008      	b.n	80010dc <main+0x1b0>
		  } else {
			  C2 = ((buf[0] << 8) | buf[1]);
 80010ca:	793b      	ldrb	r3, [r7, #4]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	797b      	ldrb	r3, [r7, #5]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		  }
	}
	HAL_Delay(50);
 80010dc:	2032      	movs	r0, #50	; 0x32
 80010de:	f001 f81b 	bl	8002118 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C3;
 80010e2:	22a0      	movs	r2, #160	; 0xa0
 80010e4:	2306      	movs	r3, #6
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80010ec:	23ee      	movs	r3, #238	; 0xee
 80010ee:	b299      	uxth	r1, r3
 80010f0:	1d3a      	adds	r2, r7, #4
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	4855      	ldr	r0, [pc, #340]	; (8001250 <main+0x324>)
 80010fc:	f003 f846 	bl	800418c <HAL_I2C_Master_Transmit>
 8001100:	4603      	mov	r3, r0
 8001102:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d007      	beq.n	800111a <main+0x1ee>
		strcpy((char*)buf, "Error TX_1c\r\n");
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4a55      	ldr	r2, [pc, #340]	; (8001264 <main+0x338>)
 800110e:	461e      	mov	r6, r3
 8001110:	4613      	mov	r3, r2
 8001112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001114:	c607      	stmia	r6!, {r0, r1, r2}
 8001116:	8033      	strh	r3, [r6, #0]
 8001118:	e020      	b.n	800115c <main+0x230>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800111a:	23ee      	movs	r3, #238	; 0xee
 800111c:	b299      	uxth	r1, r3
 800111e:	1d3a      	adds	r2, r7, #4
 8001120:	f04f 33ff 	mov.w	r3, #4294967295
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2302      	movs	r3, #2
 8001128:	4849      	ldr	r0, [pc, #292]	; (8001250 <main+0x324>)
 800112a:	f003 f92d 	bl	8004388 <HAL_I2C_Master_Receive>
 800112e:	4603      	mov	r3, r0
 8001130:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d008      	beq.n	800114a <main+0x21e>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4a48      	ldr	r2, [pc, #288]	; (800125c <main+0x330>)
 800113c:	ca07      	ldmia	r2, {r0, r1, r2}
 800113e:	c303      	stmia	r3!, {r0, r1}
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	3302      	adds	r3, #2
 8001144:	0c12      	lsrs	r2, r2, #16
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e008      	b.n	800115c <main+0x230>
		  } else {
			  C3 = ((buf[0] << 8) | buf[1]);
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	797b      	ldrb	r3, [r7, #5]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		  }
	}
	HAL_Delay(50);
 800115c:	2032      	movs	r0, #50	; 0x32
 800115e:	f000 ffdb 	bl	8002118 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C4;
 8001162:	22a0      	movs	r2, #160	; 0xa0
 8001164:	2308      	movs	r3, #8
 8001166:	4313      	orrs	r3, r2
 8001168:	b2db      	uxtb	r3, r3
 800116a:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800116c:	23ee      	movs	r3, #238	; 0xee
 800116e:	b299      	uxth	r1, r3
 8001170:	1d3a      	adds	r2, r7, #4
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	4835      	ldr	r0, [pc, #212]	; (8001250 <main+0x324>)
 800117c:	f003 f806 	bl	800418c <HAL_I2C_Master_Transmit>
 8001180:	4603      	mov	r3, r0
 8001182:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <main+0x26e>
		strcpy((char*)buf, "Error TX_1d\r\n");
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4a36      	ldr	r2, [pc, #216]	; (8001268 <main+0x33c>)
 800118e:	461e      	mov	r6, r3
 8001190:	4613      	mov	r3, r2
 8001192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001194:	c607      	stmia	r6!, {r0, r1, r2}
 8001196:	8033      	strh	r3, [r6, #0]
 8001198:	e020      	b.n	80011dc <main+0x2b0>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800119a:	23ee      	movs	r3, #238	; 0xee
 800119c:	b299      	uxth	r1, r3
 800119e:	1d3a      	adds	r2, r7, #4
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2302      	movs	r3, #2
 80011a8:	4829      	ldr	r0, [pc, #164]	; (8001250 <main+0x324>)
 80011aa:	f003 f8ed 	bl	8004388 <HAL_I2C_Master_Receive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <main+0x29e>
			  strcpy((char*)buf, "Error Rx\r\n");
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	4a28      	ldr	r2, [pc, #160]	; (800125c <main+0x330>)
 80011bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011be:	c303      	stmia	r3!, {r0, r1}
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	3302      	adds	r3, #2
 80011c4:	0c12      	lsrs	r2, r2, #16
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	e008      	b.n	80011dc <main+0x2b0>
		  } else {
			  C4 = ((buf[0] << 8) | buf[1]);
 80011ca:	793b      	ldrb	r3, [r7, #4]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	797b      	ldrb	r3, [r7, #5]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		  }
	}
	HAL_Delay(50);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f000 ff9b 	bl	8002118 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C5;
 80011e2:	22a0      	movs	r2, #160	; 0xa0
 80011e4:	230a      	movs	r3, #10
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80011ec:	23ee      	movs	r3, #238	; 0xee
 80011ee:	b299      	uxth	r1, r3
 80011f0:	1d3a      	adds	r2, r7, #4
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	4815      	ldr	r0, [pc, #84]	; (8001250 <main+0x324>)
 80011fc:	f002 ffc6 	bl	800418c <HAL_I2C_Master_Transmit>
 8001200:	4603      	mov	r3, r0
 8001202:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <main+0x2ee>
		strcpy((char*)buf, "Error TX_1e\r\n");
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <main+0x340>)
 800120e:	461e      	mov	r6, r3
 8001210:	4613      	mov	r3, r2
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	c607      	stmia	r6!, {r0, r1, r2}
 8001216:	8033      	strh	r3, [r6, #0]
 8001218:	e033      	b.n	8001282 <main+0x356>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800121a:	23ee      	movs	r3, #238	; 0xee
 800121c:	b299      	uxth	r1, r3
 800121e:	1d3a      	adds	r2, r7, #4
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2302      	movs	r3, #2
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <main+0x324>)
 800122a:	f003 f8ad 	bl	8004388 <HAL_I2C_Master_Receive>
 800122e:	4603      	mov	r3, r0
 8001230:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d01b      	beq.n	8001270 <main+0x344>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <main+0x330>)
 800123c:	ca07      	ldmia	r2, {r0, r1, r2}
 800123e:	c303      	stmia	r3!, {r0, r1}
 8001240:	801a      	strh	r2, [r3, #0]
 8001242:	3302      	adds	r3, #2
 8001244:	0c12      	lsrs	r2, r2, #16
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e01b      	b.n	8001282 <main+0x356>
 800124a:	bf00      	nop
 800124c:	40020000 	.word	0x40020000
 8001250:	200000ac 	.word	0x200000ac
 8001254:	0800a960 	.word	0x0800a960
 8001258:	0800a970 	.word	0x0800a970
 800125c:	0800a980 	.word	0x0800a980
 8001260:	0800a98c 	.word	0x0800a98c
 8001264:	0800a99c 	.word	0x0800a99c
 8001268:	0800a9ac 	.word	0x0800a9ac
 800126c:	0800a9bc 	.word	0x0800a9bc
		  } else {
			  C5 = ((buf[0] << 8) | buf[1]);
 8001270:	793b      	ldrb	r3, [r7, #4]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21b      	sxth	r3, r3
 800127e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  }
	}
	HAL_Delay(50);
 8001282:	2032      	movs	r0, #50	; 0x32
 8001284:	f000 ff48 	bl	8002118 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C6;
 8001288:	22a0      	movs	r2, #160	; 0xa0
 800128a:	230c      	movs	r3, #12
 800128c:	4313      	orrs	r3, r2
 800128e:	b2db      	uxtb	r3, r3
 8001290:	713b      	strb	r3, [r7, #4]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001292:	23ee      	movs	r3, #238	; 0xee
 8001294:	b299      	uxth	r1, r3
 8001296:	1d3a      	adds	r2, r7, #4
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	4869      	ldr	r0, [pc, #420]	; (8001448 <main+0x51c>)
 80012a2:	f002 ff73 	bl	800418c <HAL_I2C_Master_Transmit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	77fb      	strb	r3, [r7, #31]
	if (ret != HAL_OK){
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <main+0x394>
		strcpy((char*)buf, "Error TX_1f\r\n");
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	4a66      	ldr	r2, [pc, #408]	; (800144c <main+0x520>)
 80012b4:	461e      	mov	r6, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ba:	c607      	stmia	r6!, {r0, r1, r2}
 80012bc:	8033      	strh	r3, [r6, #0]
 80012be:	e020      	b.n	8001302 <main+0x3d6>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 80012c0:	23ee      	movs	r3, #238	; 0xee
 80012c2:	b299      	uxth	r1, r3
 80012c4:	1d3a      	adds	r2, r7, #4
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2302      	movs	r3, #2
 80012ce:	485e      	ldr	r0, [pc, #376]	; (8001448 <main+0x51c>)
 80012d0:	f003 f85a 	bl	8004388 <HAL_I2C_Master_Receive>
 80012d4:	4603      	mov	r3, r0
 80012d6:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <main+0x3c4>
			  strcpy((char*)buf, "Error Rx\r\n");
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4a5b      	ldr	r2, [pc, #364]	; (8001450 <main+0x524>)
 80012e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012e4:	c303      	stmia	r3!, {r0, r1}
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	3302      	adds	r3, #2
 80012ea:	0c12      	lsrs	r2, r2, #16
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e008      	b.n	8001302 <main+0x3d6>
		  } else {
			  C6 = ((buf[0] << 8) | buf[1]);
 80012f0:	793b      	ldrb	r3, [r7, #4]
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		  }
	}
	HAL_Delay(50);
 8001302:	2032      	movs	r0, #50	; 0x32
 8001304:	f000 ff08 	bl	8002118 <HAL_Delay>
  while (1)
  {

	  // Convert to reading pressure values

	  buf[0] = BARO_CONVERT_PRESSURE;
 8001308:	2348      	movs	r3, #72	; 0x48
 800130a:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800130c:	23ee      	movs	r3, #238	; 0xee
 800130e:	b299      	uxth	r1, r3
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	484b      	ldr	r0, [pc, #300]	; (8001448 <main+0x51c>)
 800131c:	f002 ff36 	bl	800418c <HAL_I2C_Master_Transmit>
 8001320:	4603      	mov	r3, r0
 8001322:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d006      	beq.n	8001338 <main+0x40c>
		  strcpy((char*)buf, "Error TX_2\r\n");
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <main+0x528>)
 800132e:	461e      	mov	r6, r3
 8001330:	4613      	mov	r3, r2
 8001332:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001334:	c607      	stmia	r6!, {r0, r1, r2}
 8001336:	7033      	strb	r3, [r6, #0]
	  }

	  HAL_Delay(15);
 8001338:	200f      	movs	r0, #15
 800133a:	f000 feed 	bl	8002118 <HAL_Delay>

	  // Read Pressure value

	  buf[0] = ADC_BARO_READ_ADDR;
 800133e:	2300      	movs	r3, #0
 8001340:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001342:	23ee      	movs	r3, #238	; 0xee
 8001344:	b299      	uxth	r1, r3
 8001346:	1d3a      	adds	r2, r7, #4
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	483d      	ldr	r0, [pc, #244]	; (8001448 <main+0x51c>)
 8001352:	f002 ff1b 	bl	800418c <HAL_I2C_Master_Transmit>
 8001356:	4603      	mov	r3, r0
 8001358:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <main+0x444>
		  strcpy((char*)buf, "Error TX_3\r\n");
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4a3d      	ldr	r2, [pc, #244]	; (8001458 <main+0x52c>)
 8001364:	461e      	mov	r6, r3
 8001366:	4613      	mov	r3, r2
 8001368:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136a:	c607      	stmia	r6!, {r0, r1, r2}
 800136c:	7033      	strb	r3, [r6, #0]
 800136e:	e01f      	b.n	80013b0 <main+0x484>
	  } else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 8001370:	23ee      	movs	r3, #238	; 0xee
 8001372:	b299      	uxth	r1, r3
 8001374:	1d3a      	adds	r2, r7, #4
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2303      	movs	r3, #3
 800137e:	4832      	ldr	r0, [pc, #200]	; (8001448 <main+0x51c>)
 8001380:	f003 f802 	bl	8004388 <HAL_I2C_Master_Receive>
 8001384:	4603      	mov	r3, r0
 8001386:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <main+0x474>
			  strcpy((char*)buf, "Error Rx\r\n");
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <main+0x524>)
 8001392:	ca07      	ldmia	r2, {r0, r1, r2}
 8001394:	c303      	stmia	r3!, {r0, r1}
 8001396:	801a      	strh	r2, [r3, #0]
 8001398:	3302      	adds	r3, #2
 800139a:	0c12      	lsrs	r2, r2, #16
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e007      	b.n	80013b0 <main+0x484>
		  } else {
			  pressure = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	041a      	lsls	r2, r3, #16
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	4313      	orrs	r3, r2
 80013aa:	79ba      	ldrb	r2, [r7, #6]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }
	  }

	  //Convert to reading temperature value

	  buf[0] = BARO_CONVERT_TEMP;
 80013b0:	2358      	movs	r3, #88	; 0x58
 80013b2:	713b      	strb	r3, [r7, #4]
	 	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80013b4:	23ee      	movs	r3, #238	; 0xee
 80013b6:	b299      	uxth	r1, r3
 80013b8:	1d3a      	adds	r2, r7, #4
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <main+0x51c>)
 80013c4:	f002 fee2 	bl	800418c <HAL_I2C_Master_Transmit>
 80013c8:	4603      	mov	r3, r0
 80013ca:	77fb      	strb	r3, [r7, #31]
	 	  if (ret != HAL_OK){
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <main+0x4b4>
	 		  strcpy((char*)buf, "Error TX_2\r\n");
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4a1f      	ldr	r2, [pc, #124]	; (8001454 <main+0x528>)
 80013d6:	461e      	mov	r6, r3
 80013d8:	4613      	mov	r3, r2
 80013da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013dc:	c607      	stmia	r6!, {r0, r1, r2}
 80013de:	7033      	strb	r3, [r6, #0]
	 	  }

	  HAL_Delay(15);
 80013e0:	200f      	movs	r0, #15
 80013e2:	f000 fe99 	bl	8002118 <HAL_Delay>

	  // Read temperature value

	  buf[0] = ADC_BARO_READ_ADDR;
 80013e6:	2300      	movs	r3, #0
 80013e8:	713b      	strb	r3, [r7, #4]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80013ea:	23ee      	movs	r3, #238	; 0xee
 80013ec:	b299      	uxth	r1, r3
 80013ee:	1d3a      	adds	r2, r7, #4
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <main+0x51c>)
 80013fa:	f002 fec7 	bl	800418c <HAL_I2C_Master_Transmit>
 80013fe:	4603      	mov	r3, r0
 8001400:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <main+0x4ec>
		  strcpy((char*)buf, "Error TX_3\r\n");
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <main+0x52c>)
 800140c:	461e      	mov	r6, r3
 800140e:	4613      	mov	r3, r2
 8001410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001412:	c607      	stmia	r6!, {r0, r1, r2}
 8001414:	7033      	strb	r3, [r6, #0]
 8001416:	e029      	b.n	800146c <main+0x540>
	  } else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 8001418:	23ee      	movs	r3, #238	; 0xee
 800141a:	b299      	uxth	r1, r3
 800141c:	1d3a      	adds	r2, r7, #4
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2303      	movs	r3, #3
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <main+0x51c>)
 8001428:	f002 ffae 	bl	8004388 <HAL_I2C_Master_Receive>
 800142c:	4603      	mov	r3, r0
 800142e:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001430:	7ffb      	ldrb	r3, [r7, #31]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d012      	beq.n	800145c <main+0x530>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <main+0x524>)
 800143a:	ca07      	ldmia	r2, {r0, r1, r2}
 800143c:	c303      	stmia	r3!, {r0, r1}
 800143e:	801a      	strh	r2, [r3, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	0c12      	lsrs	r2, r2, #16
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e011      	b.n	800146c <main+0x540>
 8001448:	200000ac 	.word	0x200000ac
 800144c:	0800a9cc 	.word	0x0800a9cc
 8001450:	0800a980 	.word	0x0800a980
 8001454:	0800a9dc 	.word	0x0800a9dc
 8001458:	0800a9ec 	.word	0x0800a9ec
		  } else {
			  temp = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	4313      	orrs	r3, r2
 8001466:	79ba      	ldrb	r2, [r7, #6]
 8001468:	4313      	orrs	r3, r2
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
		  }
	  }

	  dT = temp - C5*pow(2,8);
 800146c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800146e:	f7ff f849 	bl	8000504 <__aeabi_ui2d>
 8001472:	4682      	mov	sl, r0
 8001474:	468b      	mov	fp, r1
 8001476:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f852 	bl	8000524 <__aeabi_i2d>
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4bc6      	ldr	r3, [pc, #792]	; (80017a0 <main+0x874>)
 8001486:	f7ff f8b7 	bl	80005f8 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4650      	mov	r0, sl
 8001490:	4659      	mov	r1, fp
 8001492:	f7fe fef9 	bl	8000288 <__aeabi_dsub>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fabd 	bl	8000a1c <__aeabi_d2iz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
	  TEMP = 2000 + dT*C6/pow(2,23);
 80014a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80014aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f837 	bl	8000524 <__aeabi_i2d>
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	4bba      	ldr	r3, [pc, #744]	; (80017a4 <main+0x878>)
 80014bc:	f7ff f9c6 	bl	800084c <__aeabi_ddiv>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	4bb6      	ldr	r3, [pc, #728]	; (80017a8 <main+0x87c>)
 80014ce:	f7fe fedd 	bl	800028c <__adddf3>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fa9f 	bl	8000a1c <__aeabi_d2iz>
 80014de:	4603      	mov	r3, r0
 80014e0:	61bb      	str	r3, [r7, #24]
	  strcpy((char*)buf, "Temperature: ");
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4ab1      	ldr	r2, [pc, #708]	; (80017ac <main+0x880>)
 80014e6:	461e      	mov	r6, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014ec:	c607      	stmia	r6!, {r0, r1, r2}
 80014ee:	8033      	strh	r3, [r6, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe fe6c 	bl	80001d0 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	1d39      	adds	r1, r7, #4
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	48ab      	ldr	r0, [pc, #684]	; (80017b0 <main+0x884>)
 8001504:	f004 ff15 	bl	8006332 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i.%02u C\r\n", (int)TEMP/100, (unsigned int)TEMP%100);
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	4aaa      	ldr	r2, [pc, #680]	; (80017b4 <main+0x888>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1152      	asrs	r2, r2, #5
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad1      	subs	r1, r2, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4ba6      	ldr	r3, [pc, #664]	; (80017b4 <main+0x888>)
 800151a:	fba3 0302 	umull	r0, r3, r3, r2
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2064      	movs	r0, #100	; 0x64
 8001522:	fb00 f303 	mul.w	r3, r0, r3
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	1d38      	adds	r0, r7, #4
 800152a:	460a      	mov	r2, r1
 800152c:	49a2      	ldr	r1, [pc, #648]	; (80017b8 <main+0x88c>)
 800152e:	f008 fe8d 	bl	800a24c <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe4b 	bl	80001d0 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	1d39      	adds	r1, r7, #4
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	489a      	ldr	r0, [pc, #616]	; (80017b0 <main+0x884>)
 8001546:	f004 fef4 	bl	8006332 <HAL_USART_Transmit>

	  OFF = C2*pow(2,16) + (C4*dT)/pow(2,7);
 800154a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ffe8 	bl	8000524 <__aeabi_i2d>
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b98      	ldr	r3, [pc, #608]	; (80017bc <main+0x890>)
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4692      	mov	sl, r2
 8001564:	469b      	mov	fp, r3
 8001566:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800156a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156c:	fb02 f303 	mul.w	r3, r2, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffd7 	bl	8000524 <__aeabi_i2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b91      	ldr	r3, [pc, #580]	; (80017c0 <main+0x894>)
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4650      	mov	r0, sl
 8001586:	4659      	mov	r1, fp
 8001588:	f7fe fe80 	bl	800028c <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fa82 	bl	8000a9c <__aeabi_d2lz>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  SENS = C1*pow(2,15) + (C3*dT)/pow(2,8);
 80015a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffbd 	bl	8000524 <__aeabi_i2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <main+0x898>)
 80015b0:	f7ff f822 	bl	80005f8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4692      	mov	sl, r2
 80015ba:	469b      	mov	fp, r3
 80015bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffac 	bl	8000524 <__aeabi_i2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <main+0x874>)
 80015d2:	f7ff f93b 	bl	800084c <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4650      	mov	r0, sl
 80015dc:	4659      	mov	r1, fp
 80015de:	f7fe fe55 	bl	800028c <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fa57 	bl	8000a9c <__aeabi_d2lz>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  P = (pressure*SENS/pow(2,21) - OFF)/pow(2,15);
 80015f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f8:	2200      	movs	r2, #0
 80015fa:	4698      	mov	r8, r3
 80015fc:	4691      	mov	r9, r2
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	fb09 f203 	mul.w	r2, r9, r3
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	fb08 f303 	mul.w	r3, r8, r3
 800160a:	4413      	add	r3, r2
 800160c:	6a3a      	ldr	r2, [r7, #32]
 800160e:	fba2 4508 	umull	r4, r5, r2, r8
 8001612:	442b      	add	r3, r5
 8001614:	461d      	mov	r5, r3
 8001616:	4620      	mov	r0, r4
 8001618:	4629      	mov	r1, r5
 800161a:	f7fe ffbf 	bl	800059c <__aeabi_l2d>
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b69      	ldr	r3, [pc, #420]	; (80017c8 <main+0x89c>)
 8001624:	f7ff f912 	bl	800084c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4692      	mov	sl, r2
 800162e:	469b      	mov	fp, r3
 8001630:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001634:	f7fe ffb2 	bl	800059c <__aeabi_l2d>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4650      	mov	r0, sl
 800163e:	4659      	mov	r1, fp
 8001640:	f7fe fe22 	bl	8000288 <__aeabi_dsub>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <main+0x898>)
 8001652:	f7ff f8fb 	bl	800084c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff f9dd 	bl	8000a1c <__aeabi_d2iz>
 8001662:	4603      	mov	r3, r0
 8001664:	617b      	str	r3, [r7, #20]

	  strcpy((char*)buf, "Pressure: ");
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4a58      	ldr	r2, [pc, #352]	; (80017cc <main+0x8a0>)
 800166a:	ca07      	ldmia	r2, {r0, r1, r2}
 800166c:	c303      	stmia	r3!, {r0, r1}
 800166e:	801a      	strh	r2, [r3, #0]
 8001670:	3302      	adds	r3, #2
 8001672:	0c12      	lsrs	r2, r2, #16
 8001674:	701a      	strb	r2, [r3, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe fda9 	bl	80001d0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	b29a      	uxth	r2, r3
 8001682:	1d39      	adds	r1, r7, #4
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	4849      	ldr	r0, [pc, #292]	; (80017b0 <main+0x884>)
 800168a:	f004 fe52 	bl	8006332 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i.%02u Pa\r\n", (int)P/100, (unsigned int)P % 100 );
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <main+0x888>)
 8001692:	fb82 1203 	smull	r1, r2, r2, r3
 8001696:	1152      	asrs	r2, r2, #5
 8001698:	17db      	asrs	r3, r3, #31
 800169a:	1ad1      	subs	r1, r2, r3
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <main+0x888>)
 80016a0:	fba3 0302 	umull	r0, r3, r3, r2
 80016a4:	095b      	lsrs	r3, r3, #5
 80016a6:	2064      	movs	r0, #100	; 0x64
 80016a8:	fb00 f303 	mul.w	r3, r0, r3
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	1d38      	adds	r0, r7, #4
 80016b0:	460a      	mov	r2, r1
 80016b2:	4947      	ldr	r1, [pc, #284]	; (80017d0 <main+0x8a4>)
 80016b4:	f008 fdca 	bl	800a24c <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe fd88 	bl	80001d0 <strlen>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	1d39      	adds	r1, r7, #4
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	4839      	ldr	r0, [pc, #228]	; (80017b0 <main+0x884>)
 80016cc:	f004 fe31 	bl	8006332 <HAL_USART_Transmit>

	  HAL_Delay(500);
 80016d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d4:	f000 fd20 	bl	8002118 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2110      	movs	r1, #16
 80016dc:	483d      	ldr	r0, [pc, #244]	; (80017d4 <main+0x8a8>)
 80016de:	f000 ffed 	bl	80026bc <HAL_GPIO_WritePin>
	  ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&ACCEL_XOUT_H, 1, 100);
 80016e2:	2364      	movs	r3, #100	; 0x64
 80016e4:	2201      	movs	r2, #1
 80016e6:	493c      	ldr	r1, [pc, #240]	; (80017d8 <main+0x8ac>)
 80016e8:	483c      	ldr	r0, [pc, #240]	; (80017dc <main+0x8b0>)
 80016ea:	f004 f8c2 	bl	8005872 <HAL_SPI_Transmit>
 80016ee:	4603      	mov	r3, r0
 80016f0:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <main+0x7dc>
		  strcpy((char*)buf, "Error TX_3\r\n");
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4a39      	ldr	r2, [pc, #228]	; (80017e0 <main+0x8b4>)
 80016fc:	461e      	mov	r6, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001702:	c607      	stmia	r6!, {r0, r1, r2}
 8001704:	7033      	strb	r3, [r6, #0]
 8001706:	e016      	b.n	8001736 <main+0x80a>
	  } else{
		  ret = HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8001708:	4639      	mov	r1, r7
 800170a:	2364      	movs	r3, #100	; 0x64
 800170c:	2201      	movs	r2, #1
 800170e:	4833      	ldr	r0, [pc, #204]	; (80017dc <main+0x8b0>)
 8001710:	f004 f9eb 	bl	8005aea <HAL_SPI_Receive>
 8001714:	4603      	mov	r3, r0
 8001716:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001718:	7ffb      	ldrb	r3, [r7, #31]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <main+0x804>
			  strcpy((char*)buf, "Error Rx\r\n");
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <main+0x8b8>)
 8001722:	ca07      	ldmia	r2, {r0, r1, r2}
 8001724:	c303      	stmia	r3!, {r0, r1}
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	3302      	adds	r3, #2
 800172a:	0c12      	lsrs	r2, r2, #16
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e002      	b.n	8001736 <main+0x80a>
		  } else {
			  accel_x = (spi_buf[0]<<8);
 8001730:	783b      	ldrb	r3, [r7, #0]
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
		  }
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2110      	movs	r1, #16
 800173a:	4826      	ldr	r0, [pc, #152]	; (80017d4 <main+0x8a8>)
 800173c:	f000 ffbe 	bl	80026bc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001740:	200a      	movs	r0, #10
 8001742:	f000 fce9 	bl	8002118 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2110      	movs	r1, #16
 800174a:	4822      	ldr	r0, [pc, #136]	; (80017d4 <main+0x8a8>)
 800174c:	f000 ffb6 	bl	80026bc <HAL_GPIO_WritePin>
	  ret = HAL_SPI_Transmit(&hspi1, (uint8_t *)&ACCEL_XOUT_L, 1, 100);
 8001750:	2364      	movs	r3, #100	; 0x64
 8001752:	2201      	movs	r2, #1
 8001754:	4924      	ldr	r1, [pc, #144]	; (80017e8 <main+0x8bc>)
 8001756:	4821      	ldr	r0, [pc, #132]	; (80017dc <main+0x8b0>)
 8001758:	f004 f88b 	bl	8005872 <HAL_SPI_Transmit>
 800175c:	4603      	mov	r3, r0
 800175e:	77fb      	strb	r3, [r7, #31]
	  if (ret != HAL_OK){
 8001760:	7ffb      	ldrb	r3, [r7, #31]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <main+0x84a>
		  strcpy((char*)buf, "Error TX_3\r\n");
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <main+0x8b4>)
 800176a:	461e      	mov	r6, r3
 800176c:	4613      	mov	r3, r2
 800176e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001770:	c607      	stmia	r6!, {r0, r1, r2}
 8001772:	7033      	strb	r3, [r6, #0]
 8001774:	e03f      	b.n	80017f6 <main+0x8ca>
	  } else{
		  ret = HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8001776:	4639      	mov	r1, r7
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	2201      	movs	r2, #1
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <main+0x8b0>)
 800177e:	f004 f9b4 	bl	8005aea <HAL_SPI_Receive>
 8001782:	4603      	mov	r3, r0
 8001784:	77fb      	strb	r3, [r7, #31]
		  if (ret != HAL_OK){
 8001786:	7ffb      	ldrb	r3, [r7, #31]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02f      	beq.n	80017ec <main+0x8c0>
			  strcpy((char*)buf, "Error Rx\r\n");
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <main+0x8b8>)
 8001790:	ca07      	ldmia	r2, {r0, r1, r2}
 8001792:	c303      	stmia	r3!, {r0, r1}
 8001794:	801a      	strh	r2, [r3, #0]
 8001796:	3302      	adds	r3, #2
 8001798:	0c12      	lsrs	r2, r2, #16
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	e02b      	b.n	80017f6 <main+0x8ca>
 800179e:	bf00      	nop
 80017a0:	40700000 	.word	0x40700000
 80017a4:	41600000 	.word	0x41600000
 80017a8:	409f4000 	.word	0x409f4000
 80017ac:	0800a9fc 	.word	0x0800a9fc
 80017b0:	20000158 	.word	0x20000158
 80017b4:	51eb851f 	.word	0x51eb851f
 80017b8:	0800aa0c 	.word	0x0800aa0c
 80017bc:	40f00000 	.word	0x40f00000
 80017c0:	40600000 	.word	0x40600000
 80017c4:	40e00000 	.word	0x40e00000
 80017c8:	41400000 	.word	0x41400000
 80017cc:	0800aa18 	.word	0x0800aa18
 80017d0:	0800aa24 	.word	0x0800aa24
 80017d4:	40020000 	.word	0x40020000
 80017d8:	0800aa4c 	.word	0x0800aa4c
 80017dc:	20000100 	.word	0x20000100
 80017e0:	0800a9ec 	.word	0x0800a9ec
 80017e4:	0800a980 	.word	0x0800a980
 80017e8:	0800aa4d 	.word	0x0800aa4d
		  } else {
			  accel_x |= spi_buf[0];
 80017ec:	783b      	ldrb	r3, [r7, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f2:	4313      	orrs	r3, r2
 80017f4:	643b      	str	r3, [r7, #64]	; 0x40
		  }
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2110      	movs	r1, #16
 80017fa:	4816      	ldr	r0, [pc, #88]	; (8001854 <main+0x928>)
 80017fc:	f000 ff5e 	bl	80026bc <HAL_GPIO_WritePin>

	  strcpy((char*)buf, "Accel X: ");
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <main+0x92c>)
 8001804:	ca07      	ldmia	r2, {r0, r1, r2}
 8001806:	c303      	stmia	r3!, {r0, r1}
 8001808:	801a      	strh	r2, [r3, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fcdf 	bl	80001d0 <strlen>
 8001812:	4603      	mov	r3, r0
 8001814:	b29a      	uxth	r2, r3
 8001816:	1d39      	adds	r1, r7, #4
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <main+0x930>)
 800181e:	f004 fd88 	bl	8006332 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i\r\n", (int)accel_x);
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001826:	490e      	ldr	r1, [pc, #56]	; (8001860 <main+0x934>)
 8001828:	4618      	mov	r0, r3
 800182a:	f008 fd0f 	bl	800a24c <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fccd 	bl	80001d0 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	b29a      	uxth	r2, r3
 800183a:	1d39      	adds	r1, r7, #4
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	4806      	ldr	r0, [pc, #24]	; (800185c <main+0x930>)
 8001842:	f004 fd76 	bl	8006332 <HAL_USART_Transmit>

	  HAL_Delay(500);
 8001846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800184a:	f000 fc65 	bl	8002118 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800184e:	f008 f8e9 	bl	8009a24 <MX_USB_HOST_Process>
	  buf[0] = BARO_CONVERT_PRESSURE;
 8001852:	e559      	b.n	8001308 <main+0x3dc>
 8001854:	40020000 	.word	0x40020000
 8001858:	0800aa34 	.word	0x0800aa34
 800185c:	20000158 	.word	0x20000158
 8001860:	0800aa40 	.word	0x0800aa40

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	; 0x50
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f008 fbf2 	bl	800a05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <SystemClock_Config+0xcc>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <SystemClock_Config+0xcc>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <SystemClock_Config+0xcc>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <SystemClock_Config+0xd0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <SystemClock_Config+0xd0>)
 80018ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <SystemClock_Config+0xd0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018d4:	2308      	movs	r3, #8
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018de:	2302      	movs	r3, #2
 80018e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018e2:	2307      	movs	r3, #7
 80018e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e6:	f107 0320 	add.w	r3, r7, #32
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 faa0 	bl	8004e30 <HAL_RCC_OscConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018f6:	f000 f9d1 	bl	8001c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fa:	230f      	movs	r3, #15
 80018fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001906:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800190a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2105      	movs	r1, #5
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fd01 	bl	8005320 <HAL_RCC_ClockConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001924:	f000 f9ba 	bl	8001c9c <Error_Handler>
  }
}
 8001928:	bf00      	nop
 800192a:	3750      	adds	r7, #80	; 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_I2C1_Init+0x50>)
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <MX_I2C1_Init+0x54>)
 8001940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_I2C1_Init+0x50>)
 8001944:	4a12      	ldr	r2, [pc, #72]	; (8001990 <MX_I2C1_Init+0x58>)
 8001946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <MX_I2C1_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_I2C1_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_I2C1_Init+0x50>)
 8001956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800195a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_I2C1_Init+0x50>)
 8001976:	f002 fac5 	bl	8003f04 <HAL_I2C_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001980:	f000 f98c 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200000ac 	.word	0x200000ac
 800198c:	40005400 	.word	0x40005400
 8001990:	000186a0 	.word	0x000186a0

08001994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_SPI1_Init+0x64>)
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <MX_SPI1_Init+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019c8:	2230      	movs	r2, #48	; 0x30
 80019ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019e0:	220a      	movs	r2, #10
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_SPI1_Init+0x64>)
 80019e6:	f003 febb 	bl	8005760 <HAL_SPI_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019f0:	f000 f954 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000100 	.word	0x20000100
 80019fc:	40013000 	.word	0x40013000

08001a00 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_USART2_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_USART2_Init+0x50>)
 8001a3e:	f004 fc37 	bl	80062b0 <HAL_USART_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 f928 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000158 	.word	0x20000158
 8001a54:	40004400 	.word	0x40004400

08001a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
 8001a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
 8001a72:	4b84      	ldr	r3, [pc, #528]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a83      	ldr	r2, [pc, #524]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b81      	ldr	r3, [pc, #516]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a7c      	ldr	r2, [pc, #496]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b7a      	ldr	r3, [pc, #488]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b76      	ldr	r3, [pc, #472]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b73      	ldr	r3, [pc, #460]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a6e      	ldr	r2, [pc, #440]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b6c      	ldr	r3, [pc, #432]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b68      	ldr	r3, [pc, #416]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a67      	ldr	r2, [pc, #412]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b65      	ldr	r3, [pc, #404]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b5e      	ldr	r3, [pc, #376]	; (8001c84 <MX_GPIO_Init+0x22c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2108      	movs	r1, #8
 8001b1a:	485b      	ldr	r0, [pc, #364]	; (8001c88 <MX_GPIO_Init+0x230>)
 8001b1c:	f000 fdce 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2101      	movs	r1, #1
 8001b24:	4859      	ldr	r0, [pc, #356]	; (8001c8c <MX_GPIO_Init+0x234>)
 8001b26:	f000 fdc9 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2110      	movs	r1, #16
 8001b2e:	4858      	ldr	r0, [pc, #352]	; (8001c90 <MX_GPIO_Init+0x238>)
 8001b30:	f000 fdc4 	bl	80026bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b34:	2200      	movs	r2, #0
 8001b36:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b3a:	4856      	ldr	r0, [pc, #344]	; (8001c94 <MX_GPIO_Init+0x23c>)
 8001b3c:	f000 fdbe 	bl	80026bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b40:	2308      	movs	r3, #8
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	484c      	ldr	r0, [pc, #304]	; (8001c88 <MX_GPIO_Init+0x230>)
 8001b58:	f000 fc14 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4846      	ldr	r0, [pc, #280]	; (8001c8c <MX_GPIO_Init+0x234>)
 8001b74:	f000 fc06 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	483e      	ldr	r0, [pc, #248]	; (8001c8c <MX_GPIO_Init+0x234>)
 8001b94:	f000 fbf6 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4838      	ldr	r0, [pc, #224]	; (8001c90 <MX_GPIO_Init+0x238>)
 8001bae:	f000 fbe9 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001bb2:	2310      	movs	r3, #16
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 031c 	add.w	r3, r7, #28
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4831      	ldr	r0, [pc, #196]	; (8001c90 <MX_GPIO_Init+0x238>)
 8001bca:	f000 fbdb 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	4619      	mov	r1, r3
 8001be0:	482d      	ldr	r0, [pc, #180]	; (8001c98 <MX_GPIO_Init+0x240>)
 8001be2:	f000 fbcf 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bf8:	2305      	movs	r3, #5
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	4825      	ldr	r0, [pc, #148]	; (8001c98 <MX_GPIO_Init+0x240>)
 8001c04:	f000 fbbe 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c08:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001c0c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481c      	ldr	r0, [pc, #112]	; (8001c94 <MX_GPIO_Init+0x23c>)
 8001c22:	f000 fbaf 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c26:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c38:	2306      	movs	r3, #6
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4812      	ldr	r0, [pc, #72]	; (8001c8c <MX_GPIO_Init+0x234>)
 8001c44:	f000 fb9e 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <MX_GPIO_Init+0x23c>)
 8001c5c:	f000 fb92 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <MX_GPIO_Init+0x230>)
 8001c76:	f000 fb85 	bl	8002384 <HAL_GPIO_Init>

}
 8001c7a:	bf00      	nop
 8001c7c:	3730      	adds	r7, #48	; 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40020400 	.word	0x40020400

08001c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca0:	b672      	cpsid	i
}
 8001ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <Error_Handler+0x8>
	...

08001ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x4c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ce6:	2007      	movs	r0, #7
 8001ce8:	f000 fb0a 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_I2C_MspInit+0x84>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a17      	ldr	r2, [pc, #92]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d36:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <HAL_I2C_MspInit+0x8c>)
 8001d54:	f000 fb16 	bl	8002384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_I2C_MspInit+0x88>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	; 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020400 	.word	0x40020400

08001d88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_SPI_MspInit+0x84>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12b      	bne.n	8001e02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_SPI_MspInit+0x88>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_SPI_MspInit+0x88>)
 8001db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_SPI_MspInit+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001de2:	23e0      	movs	r3, #224	; 0xe0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df2:	2305      	movs	r3, #5
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <HAL_SPI_MspInit+0x8c>)
 8001dfe:	f000 fac1 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40013000 	.word	0x40013000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000

08001e18 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_USART_MspInit+0xc0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d149      	bne.n	8001ece <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a26      	ldr	r2, [pc, #152]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_USART_MspInit+0xc4>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <HAL_USART_MspInit+0xc8>)
 8001eaa:	f000 fa6b 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <HAL_USART_MspInit+0xcc>)
 8001eca:	f000 fa5b 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020c00 	.word	0x40020c00

08001ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eec:	e7fe      	b.n	8001eec <NMI_Handler+0x4>

08001eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef2:	e7fe      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <MemManage_Handler+0x4>

08001efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f34:	f000 f8d0 	bl	80020d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <OTG_FS_IRQHandler+0x10>)
 8001f42:	f000 fe3f 	bl	8002bc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000580 	.word	0x20000580

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	; (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f008 f832 	bl	8009fe8 <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20020000 	.word	0x20020000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	2000019c 	.word	0x2000019c
 8001fb8:	20000898 	.word	0x20000898

08001fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <SystemInit+0x20>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <SystemInit+0x20>)
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fe4:	480d      	ldr	r0, [pc, #52]	; (800201c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fe6:	490e      	ldr	r1, [pc, #56]	; (8002020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fe8:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ffc:	4c0b      	ldr	r4, [pc, #44]	; (800202c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800200a:	f7ff ffd7 	bl	8001fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200e:	f007 fff1 	bl	8009ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002012:	f7fe ff8b 	bl	8000f2c <main>
  bx  lr    
 8002016:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002020:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002024:	0800aaac 	.word	0x0800aaac
  ldr r2, =_sbss
 8002028:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800202c:	20000894 	.word	0x20000894

08002030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002030:	e7fe      	b.n	8002030 <ADC_IRQHandler>
	...

08002034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_Init+0x40>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <HAL_Init+0x40>)
 800204a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_Init+0x40>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f000 f94f 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f808 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002068:	f7ff fe1e 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023c00 	.word	0x40023c00

08002078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_InitTick+0x54>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_InitTick+0x58>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800208e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f000 f967 	bl	800236a <HAL_SYSTICK_Config>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e00e      	b.n	80020c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b0f      	cmp	r3, #15
 80020aa:	d80a      	bhi.n	80020c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ac:	2200      	movs	r2, #0
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295
 80020b4:	f000 f92f 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_InitTick+0x5c>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000008 	.word	0x20000008
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	; (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000008 	.word	0x20000008
 80020fc:	200001a0 	.word	0x200001a0

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200001a0 	.word	0x200001a0

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0b      	blt.n	80021ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <__NVIC_EnableIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff29 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff3e 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff31 	bl	80021c4 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e16b      	b.n	8002678 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	f040 815a 	bne.w	8002672 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d005      	beq.n	80023d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d130      	bne.n	8002438 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800240c:	2201      	movs	r2, #1
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0201 	and.w	r2, r3, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b03      	cmp	r3, #3
 8002442:	d017      	beq.n	8002474 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d123      	bne.n	80024c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80b4 	beq.w	8002672 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b60      	ldr	r3, [pc, #384]	; (8002690 <HAL_GPIO_Init+0x30c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	4a5f      	ldr	r2, [pc, #380]	; (8002690 <HAL_GPIO_Init+0x30c>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6453      	str	r3, [r2, #68]	; 0x44
 800251a:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <HAL_GPIO_Init+0x30c>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002526:	4a5b      	ldr	r2, [pc, #364]	; (8002694 <HAL_GPIO_Init+0x310>)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	220f      	movs	r2, #15
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a52      	ldr	r2, [pc, #328]	; (8002698 <HAL_GPIO_Init+0x314>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02b      	beq.n	80025aa <HAL_GPIO_Init+0x226>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a51      	ldr	r2, [pc, #324]	; (800269c <HAL_GPIO_Init+0x318>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x222>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a50      	ldr	r2, [pc, #320]	; (80026a0 <HAL_GPIO_Init+0x31c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x21e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4f      	ldr	r2, [pc, #316]	; (80026a4 <HAL_GPIO_Init+0x320>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x21a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <HAL_GPIO_Init+0x324>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x216>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4d      	ldr	r2, [pc, #308]	; (80026ac <HAL_GPIO_Init+0x328>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x212>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <HAL_GPIO_Init+0x32c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x20e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <HAL_GPIO_Init+0x330>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x20a>
 800258a:	2307      	movs	r3, #7
 800258c:	e00e      	b.n	80025ac <HAL_GPIO_Init+0x228>
 800258e:	2308      	movs	r3, #8
 8002590:	e00c      	b.n	80025ac <HAL_GPIO_Init+0x228>
 8002592:	2306      	movs	r3, #6
 8002594:	e00a      	b.n	80025ac <HAL_GPIO_Init+0x228>
 8002596:	2305      	movs	r3, #5
 8002598:	e008      	b.n	80025ac <HAL_GPIO_Init+0x228>
 800259a:	2304      	movs	r3, #4
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x228>
 800259e:	2303      	movs	r3, #3
 80025a0:	e004      	b.n	80025ac <HAL_GPIO_Init+0x228>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_Init+0x228>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_Init+0x228>
 80025aa:	2300      	movs	r3, #0
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f002 0203 	and.w	r2, r2, #3
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	4093      	lsls	r3, r2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025bc:	4935      	ldr	r1, [pc, #212]	; (8002694 <HAL_GPIO_Init+0x310>)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_GPIO_Init+0x334>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ee:	4a32      	ldr	r2, [pc, #200]	; (80026b8 <HAL_GPIO_Init+0x334>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_GPIO_Init+0x334>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <HAL_GPIO_Init+0x334>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <HAL_GPIO_Init+0x334>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_GPIO_Init+0x334>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_GPIO_Init+0x334>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_GPIO_Init+0x334>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b0f      	cmp	r3, #15
 800267c:	f67f ae90 	bls.w	80023a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002680:	bf00      	nop
 8002682:	bf00      	nop
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40021c00 	.word	0x40021c00
 80026b8:	40013c00 	.word	0x40013c00

080026bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d8:	e003      	b.n	80026e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	041a      	lsls	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	619a      	str	r2, [r3, #24]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f0:	b08f      	sub	sp, #60	; 0x3c
 80026f2:	af0a      	add	r7, sp, #40	; 0x28
 80026f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e054      	b.n	80027aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f007 f9ba 	bl	8009a94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2203      	movs	r2, #3
 8002724:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 f9e8 	bl	8006b14 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	687e      	ldr	r6, [r7, #4]
 800274c:	466d      	mov	r5, sp
 800274e:	f106 0410 	add.w	r4, r6, #16
 8002752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800275e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002762:	1d33      	adds	r3, r6, #4
 8002764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002766:	6838      	ldr	r0, [r7, #0]
 8002768:	f004 f962 	bl	8006a30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f004 f9df 	bl	8006b36 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	687e      	ldr	r6, [r7, #4]
 8002780:	466d      	mov	r5, sp
 8002782:	f106 0410 	add.w	r4, r6, #16
 8002786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002792:	e885 0003 	stmia.w	r5, {r0, r1}
 8002796:	1d33      	adds	r3, r6, #4
 8002798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	f004 fb68 	bl	8006e70 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80027b2:	b590      	push	{r4, r7, lr}
 80027b4:	b089      	sub	sp, #36	; 0x24
 80027b6:	af04      	add	r7, sp, #16
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	4608      	mov	r0, r1
 80027bc:	4611      	mov	r1, r2
 80027be:	461a      	mov	r2, r3
 80027c0:	4603      	mov	r3, r0
 80027c2:	70fb      	strb	r3, [r7, #3]
 80027c4:	460b      	mov	r3, r1
 80027c6:	70bb      	strb	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_HCD_HC_Init+0x28>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e076      	b.n	80028c8 <HAL_HCD_HC_Init+0x116>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	333d      	adds	r3, #61	; 0x3d
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3338      	adds	r3, #56	; 0x38
 8002802:	787a      	ldrb	r2, [r7, #1]
 8002804:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3340      	adds	r3, #64	; 0x40
 8002814:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002816:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3339      	adds	r3, #57	; 0x39
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	333f      	adds	r3, #63	; 0x3f
 8002838:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800283c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	78ba      	ldrb	r2, [r7, #2]
 8002842:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002846:	b2d0      	uxtb	r0, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	333a      	adds	r3, #58	; 0x3a
 8002854:	4602      	mov	r2, r0
 8002856:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002858:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800285c:	2b00      	cmp	r3, #0
 800285e:	da09      	bge.n	8002874 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	333b      	adds	r3, #59	; 0x3b
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e008      	b.n	8002886 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	333b      	adds	r3, #59	; 0x3b
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	333c      	adds	r3, #60	; 0x3c
 8002894:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002898:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	787c      	ldrb	r4, [r7, #1]
 80028a0:	78ba      	ldrb	r2, [r7, #2]
 80028a2:	78f9      	ldrb	r1, [r7, #3]
 80028a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4623      	mov	r3, r4
 80028b6:	f004 fc61 	bl	800717c <USB_HC_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_HCD_HC_Halt+0x1e>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e00f      	b.n	800290e <HAL_HCD_HC_Halt+0x3e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 feb1 	bl	8007666 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	70fb      	strb	r3, [r7, #3]
 800292a:	460b      	mov	r3, r1
 800292c:	70bb      	strb	r3, [r7, #2]
 800292e:	4613      	mov	r3, r2
 8002930:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	333b      	adds	r3, #59	; 0x3b
 8002940:	78ba      	ldrb	r2, [r7, #2]
 8002942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	4413      	add	r3, r2
 8002950:	333f      	adds	r3, #63	; 0x3f
 8002952:	787a      	ldrb	r2, [r7, #1]
 8002954:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002956:	7c3b      	ldrb	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d112      	bne.n	8002982 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	212c      	movs	r1, #44	; 0x2c
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3342      	adds	r3, #66	; 0x42
 800296a:	2203      	movs	r2, #3
 800296c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	212c      	movs	r1, #44	; 0x2c
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	333d      	adds	r3, #61	; 0x3d
 800297c:	7f3a      	ldrb	r2, [r7, #28]
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e008      	b.n	8002994 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3342      	adds	r3, #66	; 0x42
 8002990:	2202      	movs	r2, #2
 8002992:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b03      	cmp	r3, #3
 8002998:	f200 80c6 	bhi.w	8002b28 <HAL_HCD_HC_SubmitRequest+0x210>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	08002b15 	.word	0x08002b15
 80029ac:	08002a19 	.word	0x08002a19
 80029b0:	08002a97 	.word	0x08002a97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80029b4:	7c3b      	ldrb	r3, [r7, #16]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f040 80b8 	bne.w	8002b2c <HAL_HCD_HC_SubmitRequest+0x214>
 80029bc:	78bb      	ldrb	r3, [r7, #2]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 80b4 	bne.w	8002b2c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80029c4:	8b3b      	ldrh	r3, [r7, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3355      	adds	r3, #85	; 0x55
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3355      	adds	r3, #85	; 0x55
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3342      	adds	r3, #66	; 0x42
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a02:	e093      	b.n	8002b2c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3342      	adds	r3, #66	; 0x42
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
      break;
 8002a16:	e089      	b.n	8002b2c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a18:	78bb      	ldrb	r3, [r7, #2]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11d      	bne.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	3355      	adds	r3, #85	; 0x55
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	212c      	movs	r1, #44	; 0x2c
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3342      	adds	r3, #66	; 0x42
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002a44:	e073      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3342      	adds	r3, #66	; 0x42
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
      break;
 8002a58:	e069      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3354      	adds	r3, #84	; 0x54
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	3342      	adds	r3, #66	; 0x42
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
      break;
 8002a80:	e055      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3342      	adds	r3, #66	; 0x42
 8002a90:	2202      	movs	r2, #2
 8002a92:	701a      	strb	r2, [r3, #0]
      break;
 8002a94:	e04b      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002a96:	78bb      	ldrb	r3, [r7, #2]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11d      	bne.n	8002ad8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3355      	adds	r3, #85	; 0x55
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	212c      	movs	r1, #44	; 0x2c
 8002ab6:	fb01 f303 	mul.w	r3, r1, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	3342      	adds	r3, #66	; 0x42
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ac2:	e034      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3342      	adds	r3, #66	; 0x42
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	701a      	strb	r2, [r3, #0]
      break;
 8002ad6:	e02a      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3354      	adds	r3, #84	; 0x54
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3342      	adds	r3, #66	; 0x42
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
      break;
 8002afe:	e016      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3342      	adds	r3, #66	; 0x42
 8002b0e:	2202      	movs	r2, #2
 8002b10:	701a      	strb	r2, [r3, #0]
      break;
 8002b12:	e00c      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3342      	adds	r3, #66	; 0x42
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002b28:	bf00      	nop
 8002b2a:	e000      	b.n	8002b2e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002b2c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3344      	adds	r3, #68	; 0x44
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	8b3a      	ldrh	r2, [r7, #24]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	202c      	movs	r0, #44	; 0x2c
 8002b48:	fb00 f303 	mul.w	r3, r0, r3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	334c      	adds	r3, #76	; 0x4c
 8002b50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002b52:	78fb      	ldrb	r3, [r7, #3]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	212c      	movs	r1, #44	; 0x2c
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3360      	adds	r3, #96	; 0x60
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3350      	adds	r3, #80	; 0x50
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3339      	adds	r3, #57	; 0x39
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3361      	adds	r3, #97	; 0x61
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	222c      	movs	r2, #44	; 0x2c
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	3338      	adds	r3, #56	; 0x38
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	18d1      	adds	r1, r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f004 fc04 	bl	80073c0 <USB_HC_StartXfer>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop

08002bc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 f905 	bl	8006dea <USB_GetMode>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	f040 80f6 	bne.w	8002dd4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 f8e9 	bl	8006dc4 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80ec 	beq.w	8002dd2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 f8e0 	bl	8006dc4 <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c0e:	d104      	bne.n	8002c1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 f8d0 	bl	8006dc4 <USB_ReadInterrupts>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2e:	d104      	bne.n	8002c3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f8c0 	bl	8006dc4 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c4e:	d104      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 f8b0 	bl	8006dc4 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d103      	bne.n	8002c76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2202      	movs	r2, #2
 8002c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 f8a2 	bl	8006dc4 <USB_ReadInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c8a:	d11c      	bne.n	8002cc6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002c94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ca6:	2110      	movs	r1, #16
 8002ca8:	6938      	ldr	r0, [r7, #16]
 8002caa:	f003 ff91 	bl	8006bd0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002cae:	6938      	ldr	r0, [r7, #16]
 8002cb0:	f003 ffc2 	bl	8006c38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 f998 	bl	8006ff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f006 ff65 	bl	8009b90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 f87a 	bl	8006dc4 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cda:	d102      	bne.n	8002ce2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 f89e 	bl	8003e1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 f86c 	bl	8006dc4 <USB_ReadInterrupts>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d106      	bne.n	8002d04 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f006 ff2e 	bl	8009b58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 f85b 	bl	8006dc4 <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b10      	cmp	r3, #16
 8002d16:	d101      	bne.n	8002d1c <HAL_HCD_IRQHandler+0x158>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_HCD_IRQHandler+0x15a>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0210 	bic.w	r2, r2, #16
 8002d30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 ffa1 	bl	8003c7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0210 	orr.w	r2, r2, #16
 8002d46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 f839 	bl	8006dc4 <USB_ReadInterrupts>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d5c:	d13a      	bne.n	8002dd4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 fc6e 	bl	8007644 <USB_HC_ReadInterrupt>
 8002d68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e025      	b.n	8002dbc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d9a:	d106      	bne.n	8002daa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8ab 	bl	8002efe <HCD_HC_IN_IRQHandler>
 8002da8:	e005      	b.n	8002db6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	4619      	mov	r1, r3
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fbf9 	bl	80035a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3d4      	bcc.n	8002d70 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dce:	615a      	str	r2, [r3, #20]
 8002dd0:	e000      	b.n	8002dd4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002dd2:	bf00      	nop
    }
  }
}
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_HCD_Start+0x16>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e013      	b.n	8002e18 <HAL_HCD_Start+0x3e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 f95a 	bl	80070b8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fe72 	bl	8006af2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_HCD_Stop+0x16>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e00d      	b.n	8002e52 <HAL_HCD_Stop+0x32>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f004 fd48 	bl	80078d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f8fc 	bl	8007064 <USB_ResetPort>
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3360      	adds	r3, #96	; 0x60
 8002e90:	781b      	ldrb	r3, [r3, #0]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3350      	adds	r3, #80	; 0x50
 8002eb8:	681b      	ldr	r3, [r3, #0]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f004 f940 	bl	8007158 <USB_GetCurrentFrame>
 8002ed8:	4603      	mov	r3, r0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f004 f91b 	bl	800712a <USB_GetHostSpeed>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d11a      	bne.n	8002f64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3361      	adds	r3, #97	; 0x61
 8002f4e:	2206      	movs	r2, #6
 8002f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fb82 	bl	8007666 <USB_HC_Halt>
 8002f62:	e0af      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7a:	d11b      	bne.n	8002fb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3361      	adds	r3, #97	; 0x61
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f004 fb5a 	bl	8007666 <USB_HC_Halt>
 8002fb2:	e087      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d109      	bne.n	8002fde <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2320      	movs	r3, #32
 8002fda:	6093      	str	r3, [r2, #8]
 8002fdc:	e072      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d11a      	bne.n	800302a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	2308      	movs	r3, #8
 8003004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3361      	adds	r3, #97	; 0x61
 8003014:	2205      	movs	r2, #5
 8003016:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f004 fb1f 	bl	8007666 <USB_HC_Halt>
 8003028:	e04c      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4413      	add	r3, r2
 8003032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003040:	d11b      	bne.n	800307a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4413      	add	r3, r2
 800304a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304e:	461a      	mov	r2, r3
 8003050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3361      	adds	r3, #97	; 0x61
 8003064:	2208      	movs	r2, #8
 8003066:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f004 faf7 	bl	8007666 <USB_HC_Halt>
 8003078:	e024      	b.n	80030c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b80      	cmp	r3, #128	; 0x80
 800308e:	d119      	bne.n	80030c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	3361      	adds	r3, #97	; 0x61
 80030b0:	2206      	movs	r2, #6
 80030b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 fad1 	bl	8007666 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030da:	d112      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fabd 	bl	8007666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003100:	e24e      	b.n	80035a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	f040 80df 	bne.w	80032d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d019      	beq.n	8003156 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3348      	adds	r3, #72	; 0x48
 8003130:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0159      	lsls	r1, r3, #5
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	440b      	add	r3, r1
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003144:	1ad2      	subs	r2, r2, r3
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	202c      	movs	r0, #44	; 0x2c
 800314c:	fb00 f303 	mul.w	r3, r0, r3
 8003150:	440b      	add	r3, r1
 8003152:	3350      	adds	r3, #80	; 0x50
 8003154:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3361      	adds	r3, #97	; 0x61
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	335c      	adds	r3, #92	; 0x5c
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	461a      	mov	r2, r3
 8003188:	2301      	movs	r3, #1
 800318a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	333f      	adds	r3, #63	; 0x3f
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	333f      	adds	r3, #63	; 0x3f
 80031ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d111      	bne.n	80031d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 fa51 	bl	8007666 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2310      	movs	r3, #16
 80031d4:	6093      	str	r3, [r2, #8]
 80031d6:	e03a      	b.n	800324e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	212c      	movs	r1, #44	; 0x2c
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	333f      	adds	r3, #63	; 0x3f
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d009      	beq.n	8003200 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	333f      	adds	r3, #63	; 0x3f
 80031fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d126      	bne.n	800324e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	0151      	lsls	r1, r2, #5
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	440a      	add	r2, r1
 8003216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800321a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800321e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	b2d9      	uxtb	r1, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	202c      	movs	r0, #44	; 0x2c
 800323c:	fb00 f303 	mul.w	r3, r0, r3
 8003240:	4413      	add	r3, r2
 8003242:	3360      	adds	r3, #96	; 0x60
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f006 fcaf 	bl	8009bac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d12b      	bne.n	80032ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3348      	adds	r3, #72	; 0x48
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	202c      	movs	r0, #44	; 0x2c
 800326c:	fb00 f202 	mul.w	r2, r0, r2
 8003270:	440a      	add	r2, r1
 8003272:	3240      	adds	r2, #64	; 0x40
 8003274:	8812      	ldrh	r2, [r2, #0]
 8003276:	fbb3 f3f2 	udiv	r3, r3, r2
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 818e 	beq.w	80035a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3354      	adds	r3, #84	; 0x54
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2d8      	uxtb	r0, r3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3354      	adds	r3, #84	; 0x54
 80032a8:	4602      	mov	r2, r0
 80032aa:	701a      	strb	r2, [r3, #0]
}
 80032ac:	e178      	b.n	80035a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3354      	adds	r3, #84	; 0x54
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	f083 0301 	eor.w	r3, r3, #1
 80032c2:	b2d8      	uxtb	r0, r3
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	3354      	adds	r3, #84	; 0x54
 80032d2:	4602      	mov	r2, r0
 80032d4:	701a      	strb	r2, [r3, #0]
}
 80032d6:	e163      	b.n	80035a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	f040 80f6 	bne.w	80034dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3361      	adds	r3, #97	; 0x61
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d109      	bne.n	8003318 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3360      	adds	r3, #96	; 0x60
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e0c9      	b.n	80034ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3361      	adds	r3, #97	; 0x61
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d109      	bne.n	8003340 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	212c      	movs	r1, #44	; 0x2c
 8003332:	fb01 f303 	mul.w	r3, r1, r3
 8003336:	4413      	add	r3, r2
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	2205      	movs	r2, #5
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e0b5      	b.n	80034ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3361      	adds	r3, #97	; 0x61
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d009      	beq.n	8003368 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003364:	2b08      	cmp	r3, #8
 8003366:	d150      	bne.n	800340a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	335c      	adds	r3, #92	; 0x5c
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	202c      	movs	r0, #44	; 0x2c
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	440b      	add	r3, r1
 8003386:	335c      	adds	r3, #92	; 0x5c
 8003388:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	335c      	adds	r3, #92	; 0x5c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d912      	bls.n	80033c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	2204      	movs	r2, #4
 80033c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033c2:	e073      	b.n	80034ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	3360      	adds	r3, #96	; 0x60
 80033d2:	2202      	movs	r2, #2
 80033d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003408:	e050      	b.n	80034ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3361      	adds	r3, #97	; 0x61
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d122      	bne.n	8003464 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	3360      	adds	r3, #96	; 0x60
 800342c:	2202      	movs	r2, #2
 800342e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003446:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800344e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e023      	b.n	80034ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b07      	cmp	r3, #7
 8003476:	d119      	bne.n	80034ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	335c      	adds	r3, #92	; 0x5c
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	202c      	movs	r0, #44	; 0x2c
 8003490:	fb00 f303 	mul.w	r3, r0, r3
 8003494:	440b      	add	r3, r1
 8003496:	335c      	adds	r3, #92	; 0x5c
 8003498:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3360      	adds	r3, #96	; 0x60
 80034a8:	2204      	movs	r2, #4
 80034aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	2302      	movs	r3, #2
 80034bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	b2d9      	uxtb	r1, r3
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	202c      	movs	r0, #44	; 0x2c
 80034c8:	fb00 f303 	mul.w	r3, r0, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3360      	adds	r3, #96	; 0x60
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f006 fb69 	bl	8009bac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80034da:	e061      	b.n	80035a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b10      	cmp	r3, #16
 80034f0:	d156      	bne.n	80035a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	333f      	adds	r3, #63	; 0x3f
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d111      	bne.n	800352a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f004 f89f 	bl	8007666 <USB_HC_Halt>
 8003528:	e031      	b.n	800358e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	333f      	adds	r3, #63	; 0x3f
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	333f      	adds	r3, #63	; 0x3f
 800354c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800354e:	2b02      	cmp	r3, #2
 8003550:	d11d      	bne.n	800358e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	212c      	movs	r1, #44	; 0x2c
 8003558:	fb01 f303 	mul.w	r3, r1, r3
 800355c:	4413      	add	r3, r2
 800355e:	335c      	adds	r3, #92	; 0x5c
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d110      	bne.n	800358e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	212c      	movs	r1, #44	; 0x2c
 8003572:	fb01 f303 	mul.w	r3, r1, r3
 8003576:	4413      	add	r3, r2
 8003578:	3361      	adds	r3, #97	; 0x61
 800357a:	2203      	movs	r2, #3
 800357c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f004 f86c 	bl	8007666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	461a      	mov	r2, r3
 800359c:	2310      	movs	r3, #16
 800359e:	6093      	str	r3, [r2, #8]
}
 80035a0:	bf00      	nop
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d11a      	bne.n	800360e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	2304      	movs	r3, #4
 80035e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3361      	adds	r3, #97	; 0x61
 80035f8:	2206      	movs	r2, #6
 80035fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f004 f82d 	bl	8007666 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800360c:	e331      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d12e      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	461a      	mov	r2, r3
 8003632:	2320      	movs	r3, #32
 8003634:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	333d      	adds	r3, #61	; 0x3d
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b01      	cmp	r3, #1
 8003648:	f040 8313 	bne.w	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	333d      	adds	r3, #61	; 0x3d
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3360      	adds	r3, #96	; 0x60
 800366c:	2202      	movs	r2, #2
 800366e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f003 fff3 	bl	8007666 <USB_HC_Halt>
}
 8003680:	e2f7      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4413      	add	r3, r2
 800368a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003698:	d112      	bne.n	80036c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 ffd4 	bl	8007666 <USB_HC_Halt>
}
 80036be:	e2d8      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d140      	bne.n	8003758 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	335c      	adds	r3, #92	; 0x5c
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d111      	bne.n	8003722 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	333d      	adds	r3, #61	; 0x3d
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	4413      	add	r3, r2
 8003718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371c:	461a      	mov	r2, r3
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	2301      	movs	r3, #1
 8003732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f003 ff88 	bl	8007666 <USB_HC_Halt>
}
 8003756:	e28c      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d12c      	bne.n	80037c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3361      	adds	r3, #97	; 0x61
 800377c:	2204      	movs	r2, #4
 800377e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	333d      	adds	r3, #61	; 0x3d
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	335c      	adds	r3, #92	; 0x5c
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 ff59 	bl	8007666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	6093      	str	r3, [r2, #8]
}
 80037c6:	e254      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d11a      	bne.n	8003814 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	2308      	movs	r3, #8
 80037ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	212c      	movs	r1, #44	; 0x2c
 80037f6:	fb01 f303 	mul.w	r3, r1, r3
 80037fa:	4413      	add	r3, r2
 80037fc:	3361      	adds	r3, #97	; 0x61
 80037fe:	2205      	movs	r2, #5
 8003800:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f003 ff2a 	bl	8007666 <USB_HC_Halt>
}
 8003812:	e22e      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b10      	cmp	r3, #16
 8003828:	d140      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	212c      	movs	r1, #44	; 0x2c
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	4413      	add	r3, r2
 8003836:	335c      	adds	r3, #92	; 0x5c
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3361      	adds	r3, #97	; 0x61
 800384a:	2203      	movs	r2, #3
 800384c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	333d      	adds	r3, #61	; 0x3d
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d112      	bne.n	8003888 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	333c      	adds	r3, #60	; 0x3c
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	212c      	movs	r1, #44	; 0x2c
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	4413      	add	r3, r2
 8003882:	333d      	adds	r3, #61	; 0x3d
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fee7 	bl	8007666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	461a      	mov	r2, r3
 80038a6:	2310      	movs	r3, #16
 80038a8:	6093      	str	r3, [r2, #8]
}
 80038aa:	e1e2      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d164      	bne.n	800398c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d111      	bne.n	80038ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3361      	adds	r3, #97	; 0x61
 80038d8:	2206      	movs	r2, #6
 80038da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	4611      	mov	r1, r2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 febd 	bl	8007666 <USB_HC_Halt>
 80038ec:	e044      	b.n	8003978 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	335c      	adds	r3, #92	; 0x5c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	202c      	movs	r0, #44	; 0x2c
 8003906:	fb00 f303 	mul.w	r3, r0, r3
 800390a:	440b      	add	r3, r1
 800390c:	335c      	adds	r3, #92	; 0x5c
 800390e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	335c      	adds	r3, #92	; 0x5c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d920      	bls.n	8003966 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	335c      	adds	r3, #92	; 0x5c
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	3360      	adds	r3, #96	; 0x60
 8003944:	2204      	movs	r2, #4
 8003946:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	b2d9      	uxtb	r1, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	202c      	movs	r0, #44	; 0x2c
 8003952:	fb00 f303 	mul.w	r3, r0, r3
 8003956:	4413      	add	r3, r2
 8003958:	3360      	adds	r3, #96	; 0x60
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f006 f924 	bl	8009bac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003964:	e008      	b.n	8003978 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3360      	adds	r3, #96	; 0x60
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	461a      	mov	r2, r3
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	6093      	str	r3, [r2, #8]
}
 800398a:	e172      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d11b      	bne.n	80039dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3361      	adds	r3, #97	; 0x61
 80039b2:	2208      	movs	r2, #8
 80039b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fe50 	bl	8007666 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d8:	6093      	str	r3, [r2, #8]
}
 80039da:	e14a      	b.n	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	f040 813f 	bne.w	8003c72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3361      	adds	r3, #97	; 0x61
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d17d      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3360      	adds	r3, #96	; 0x60
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	212c      	movs	r1, #44	; 0x2c
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	333f      	adds	r3, #63	; 0x3f
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d00a      	beq.n	8003a44 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	333f      	adds	r3, #63	; 0x3f
 8003a3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	f040 8100 	bne.w	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d113      	bne.n	8003a74 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3355      	adds	r3, #85	; 0x55
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	f083 0301 	eor.w	r3, r3, #1
 8003a60:	b2d8      	uxtb	r0, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	212c      	movs	r1, #44	; 0x2c
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3355      	adds	r3, #85	; 0x55
 8003a70:	4602      	mov	r2, r0
 8003a72:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	f040 80e3 	bne.w	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	334c      	adds	r3, #76	; 0x4c
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80d8 	beq.w	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	334c      	adds	r3, #76	; 0x4c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	202c      	movs	r0, #44	; 0x2c
 8003aaa:	fb00 f202 	mul.w	r2, r0, r2
 8003aae:	440a      	add	r2, r1
 8003ab0:	3240      	adds	r2, #64	; 0x40
 8003ab2:	8812      	ldrh	r2, [r2, #0]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	202c      	movs	r0, #44	; 0x2c
 8003abe:	fb00 f202 	mul.w	r2, r0, r2
 8003ac2:	440a      	add	r2, r1
 8003ac4:	3240      	adds	r2, #64	; 0x40
 8003ac6:	8812      	ldrh	r2, [r2, #0]
 8003ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80b5 	beq.w	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3355      	adds	r3, #85	; 0x55
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2d8      	uxtb	r0, r3
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	212c      	movs	r1, #44	; 0x2c
 8003af6:	fb01 f303 	mul.w	r3, r1, r3
 8003afa:	4413      	add	r3, r2
 8003afc:	3355      	adds	r3, #85	; 0x55
 8003afe:	4602      	mov	r2, r0
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	e09f      	b.n	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d109      	bne.n	8003b2c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2202      	movs	r2, #2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e08b      	b.n	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3361      	adds	r3, #97	; 0x61
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d109      	bne.n	8003b54 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3360      	adds	r3, #96	; 0x60
 8003b4e:	2202      	movs	r2, #2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	e077      	b.n	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3361      	adds	r3, #97	; 0x61
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d109      	bne.n	8003b7c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	3360      	adds	r3, #96	; 0x60
 8003b76:	2205      	movs	r2, #5
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e063      	b.n	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	3361      	adds	r3, #97	; 0x61
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b06      	cmp	r3, #6
 8003b8e:	d009      	beq.n	8003ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	212c      	movs	r1, #44	; 0x2c
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3361      	adds	r3, #97	; 0x61
 8003b9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d14f      	bne.n	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	335c      	adds	r3, #92	; 0x5c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	202c      	movs	r0, #44	; 0x2c
 8003bbc:	fb00 f303 	mul.w	r3, r0, r3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	335c      	adds	r3, #92	; 0x5c
 8003bc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	335c      	adds	r3, #92	; 0x5c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d912      	bls.n	8003c00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	335c      	adds	r3, #92	; 0x5c
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3360      	adds	r3, #96	; 0x60
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e021      	b.n	8003c44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3360      	adds	r3, #96	; 0x60
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	461a      	mov	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	2302      	movs	r3, #2
 8003c54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	b2d9      	uxtb	r1, r3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	202c      	movs	r0, #44	; 0x2c
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3360      	adds	r3, #96	; 0x60
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f005 ff9d 	bl	8009bac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c72:	bf00      	nop
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b08a      	sub	sp, #40	; 0x28
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	0c5b      	lsrs	r3, r3, #17
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	091b      	lsrs	r3, r3, #4
 8003caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d004      	beq.n	8003cc0 <HCD_RXQLVL_IRQHandler+0x46>
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	f000 80a9 	beq.w	8003e10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003cbe:	e0aa      	b.n	8003e16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a6 	beq.w	8003e14 <HCD_RXQLVL_IRQHandler+0x19a>
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	212c      	movs	r1, #44	; 0x2c
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3344      	adds	r3, #68	; 0x44
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 809b 	beq.w	8003e14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	212c      	movs	r1, #44	; 0x2c
 8003ce4:	fb01 f303 	mul.w	r3, r1, r3
 8003ce8:	4413      	add	r3, r2
 8003cea:	3350      	adds	r3, #80	; 0x50
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	441a      	add	r2, r3
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	202c      	movs	r0, #44	; 0x2c
 8003cf8:	fb00 f303 	mul.w	r3, r0, r3
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334c      	adds	r3, #76	; 0x4c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d87a      	bhi.n	8003dfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3344      	adds	r3, #68	; 0x44
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	b292      	uxth	r2, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f002 fff8 	bl	8006d14 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3344      	adds	r3, #68	; 0x44
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	441a      	add	r2, r3
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	202c      	movs	r0, #44	; 0x2c
 8003d3e:	fb00 f303 	mul.w	r3, r0, r3
 8003d42:	440b      	add	r3, r1
 8003d44:	3344      	adds	r3, #68	; 0x44
 8003d46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3350      	adds	r3, #80	; 0x50
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	202c      	movs	r0, #44	; 0x2c
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	440b      	add	r3, r1
 8003d68:	3350      	adds	r3, #80	; 0x50
 8003d6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	0cdb      	lsrs	r3, r3, #19
 8003d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3340      	adds	r3, #64	; 0x40
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d13c      	bne.n	8003e14 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d039      	beq.n	8003e14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003db6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3354      	adds	r3, #84	; 0x54
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	f083 0301 	eor.w	r3, r3, #1
 8003de6:	b2d8      	uxtb	r0, r3
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3354      	adds	r3, #84	; 0x54
 8003df6:	4602      	mov	r2, r0
 8003df8:	701a      	strb	r2, [r3, #0]
      break;
 8003dfa:	e00b      	b.n	8003e14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	212c      	movs	r1, #44	; 0x2c
 8003e02:	fb01 f303 	mul.w	r3, r1, r3
 8003e06:	4413      	add	r3, r2
 8003e08:	3360      	adds	r3, #96	; 0x60
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	701a      	strb	r2, [r3, #0]
      break;
 8003e0e:	e001      	b.n	8003e14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e10:	bf00      	nop
 8003e12:	e000      	b.n	8003e16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003e14:	bf00      	nop
  }
}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	; 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d10b      	bne.n	8003e6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f005 fe87 	bl	8009b74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d132      	bne.n	8003ede <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d126      	bne.n	8003ed8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d113      	bne.n	8003eba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e9c:	d106      	bne.n	8003eac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 f8a3 	bl	8006ff0 <USB_InitFSLSPClkSel>
 8003eaa:	e011      	b.n	8003ed0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 f89c 	bl	8006ff0 <USB_InitFSLSPClkSel>
 8003eb8:	e00a      	b.n	8003ed0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d106      	bne.n	8003ed0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ece:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f005 fe79 	bl	8009bc8 <HAL_HCD_PortEnabled_Callback>
 8003ed6:	e002      	b.n	8003ede <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f005 fe83 	bl	8009be4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d103      	bne.n	8003ef0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f043 0320 	orr.w	r3, r3, #32
 8003eee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e12b      	b.n	800416e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fd fee4 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2224      	movs	r2, #36	; 0x24
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f68:	f001 fbd2 	bl	8005710 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a81      	ldr	r2, [pc, #516]	; (8004178 <HAL_I2C_Init+0x274>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d807      	bhi.n	8003f88 <HAL_I2C_Init+0x84>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a80      	ldr	r2, [pc, #512]	; (800417c <HAL_I2C_Init+0x278>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bf94      	ite	ls
 8003f80:	2301      	movls	r3, #1
 8003f82:	2300      	movhi	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e006      	b.n	8003f96 <HAL_I2C_Init+0x92>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a7d      	ldr	r2, [pc, #500]	; (8004180 <HAL_I2C_Init+0x27c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0e7      	b.n	800416e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a78      	ldr	r2, [pc, #480]	; (8004184 <HAL_I2C_Init+0x280>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	0c9b      	lsrs	r3, r3, #18
 8003fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	; (8004178 <HAL_I2C_Init+0x274>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d802      	bhi.n	8003fd8 <HAL_I2C_Init+0xd4>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	e009      	b.n	8003fec <HAL_I2C_Init+0xe8>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	4a69      	ldr	r2, [pc, #420]	; (8004188 <HAL_I2C_Init+0x284>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	099b      	lsrs	r3, r3, #6
 8003fea:	3301      	adds	r3, #1
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6812      	ldr	r2, [r2, #0]
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ffe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	495c      	ldr	r1, [pc, #368]	; (8004178 <HAL_I2C_Init+0x274>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d819      	bhi.n	8004040 <HAL_I2C_Init+0x13c>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e59      	subs	r1, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	fbb1 f3f3 	udiv	r3, r1, r3
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004020:	400b      	ands	r3, r1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_I2C_Init+0x138>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e59      	subs	r1, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	fbb1 f3f3 	udiv	r3, r1, r3
 8004034:	3301      	adds	r3, #1
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	e051      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800403c:	2304      	movs	r3, #4
 800403e:	e04f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d111      	bne.n	800406c <HAL_I2C_Init+0x168>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	1e58      	subs	r0, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	440b      	add	r3, r1
 8004056:	fbb0 f3f3 	udiv	r3, r0, r3
 800405a:	3301      	adds	r3, #1
 800405c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004060:	2b00      	cmp	r3, #0
 8004062:	bf0c      	ite	eq
 8004064:	2301      	moveq	r3, #1
 8004066:	2300      	movne	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e012      	b.n	8004092 <HAL_I2C_Init+0x18e>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Init+0x196>
 8004096:	2301      	movs	r3, #1
 8004098:	e022      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10e      	bne.n	80040c0 <HAL_I2C_Init+0x1bc>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1e58      	subs	r0, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	440b      	add	r3, r1
 80040b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040b4:	3301      	adds	r3, #1
 80040b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040be:	e00f      	b.n	80040e0 <HAL_I2C_Init+0x1dc>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	0099      	lsls	r1, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	6809      	ldr	r1, [r1, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800410e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6911      	ldr	r1, [r2, #16]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68d2      	ldr	r2, [r2, #12]
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	430b      	orrs	r3, r1
 8004122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	000186a0 	.word	0x000186a0
 800417c:	001e847f 	.word	0x001e847f
 8004180:	003d08ff 	.word	0x003d08ff
 8004184:	431bde83 	.word	0x431bde83
 8004188:	10624dd3 	.word	0x10624dd3

0800418c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	461a      	mov	r2, r3
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
 800419c:	4613      	mov	r3, r2
 800419e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a0:	f7fd ffae 	bl	8002100 <HAL_GetTick>
 80041a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	f040 80e0 	bne.w	8004374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2319      	movs	r3, #25
 80041ba:	2201      	movs	r2, #1
 80041bc:	4970      	ldr	r1, [pc, #448]	; (8004380 <HAL_I2C_Master_Transmit+0x1f4>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 fc58 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
 80041cc:	e0d3      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_I2C_Master_Transmit+0x50>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0cc      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d007      	beq.n	8004202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0201 	orr.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2221      	movs	r2, #33	; 0x21
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2210      	movs	r2, #16
 800421e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a50      	ldr	r2, [pc, #320]	; (8004384 <HAL_I2C_Master_Transmit+0x1f8>)
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004244:	8979      	ldrh	r1, [r7, #10]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fac2 	bl	80047d4 <I2C_MasterRequestWrite>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e08d      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004270:	e066      	b.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	6a39      	ldr	r1, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fcd2 	bl	8004c20 <I2C_WaitOnTXEFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00d      	beq.n	800429e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b04      	cmp	r3, #4
 8004288:	d107      	bne.n	800429a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06b      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d11b      	bne.n	8004314 <HAL_I2C_Master_Transmit+0x188>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d017      	beq.n	8004314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6a39      	ldr	r1, [r7, #32]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fcc2 	bl	8004ca2 <I2C_WaitOnBTFFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2b04      	cmp	r3, #4
 800432a:	d107      	bne.n	800433c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e01a      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d194      	bne.n	8004272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000

08004388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08c      	sub	sp, #48	; 0x30
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7fd feb0 	bl	8002100 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	f040 820b 	bne.w	80047c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2319      	movs	r3, #25
 80043b6:	2201      	movs	r2, #1
 80043b8:	497c      	ldr	r1, [pc, #496]	; (80045ac <HAL_I2C_Master_Receive+0x224>)
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb5a 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
 80043c8:	e1fe      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <HAL_I2C_Master_Receive+0x50>
 80043d4:	2302      	movs	r3, #2
 80043d6:	e1f7      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d007      	beq.n	80043fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800440c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2222      	movs	r2, #34	; 0x22
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2210      	movs	r2, #16
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	893a      	ldrh	r2, [r7, #8]
 800442e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <HAL_I2C_Master_Receive+0x228>)
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004440:	8979      	ldrh	r1, [r7, #10]
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fa46 	bl	80048d8 <I2C_MasterRequestRead>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e1b8      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	d113      	bne.n	8004486 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	e18c      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	2b01      	cmp	r3, #1
 800448c:	d11b      	bne.n	80044c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449e:	2300      	movs	r3, #0
 80044a0:	61fb      	str	r3, [r7, #28]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e16c      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d11b      	bne.n	8004506 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ee:	2300      	movs	r3, #0
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	e14c      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800452c:	e138      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	2b03      	cmp	r3, #3
 8004534:	f200 80f1 	bhi.w	800471a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b01      	cmp	r3, #1
 800453e:	d123      	bne.n	8004588 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fbed 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e139      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004586:	e10b      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	2b02      	cmp	r3, #2
 800458e:	d14e      	bne.n	800462e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	2200      	movs	r2, #0
 8004598:	4906      	ldr	r1, [pc, #24]	; (80045b4 <HAL_I2C_Master_Receive+0x22c>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa6a 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e10e      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
 80045aa:	bf00      	nop
 80045ac:	00100002 	.word	0x00100002
 80045b0:	ffff0000 	.word	0xffff0000
 80045b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004622:	b29b      	uxth	r3, r3
 8004624:	3b01      	subs	r3, #1
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800462c:	e0b8      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	2200      	movs	r2, #0
 8004636:	4966      	ldr	r1, [pc, #408]	; (80047d0 <HAL_I2C_Master_Receive+0x448>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fa1b 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0bf      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	494f      	ldr	r1, [pc, #316]	; (80047d0 <HAL_I2C_Master_Receive+0x448>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f9ed 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e091      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004718:	e042      	b.n	80047a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fb00 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e04c      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d118      	bne.n	80047a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f aec2 	bne.w	800452e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3728      	adds	r7, #40	; 0x28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	00010004 	.word	0x00010004

080047d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	460b      	mov	r3, r1
 80047e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d006      	beq.n	80047fe <I2C_MasterRequestWrite+0x2a>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d003      	beq.n	80047fe <I2C_MasterRequestWrite+0x2a>
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047fc:	d108      	bne.n	8004810 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e00b      	b.n	8004828 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	2b12      	cmp	r3, #18
 8004816:	d107      	bne.n	8004828 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004826:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f91d 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484e:	d103      	bne.n	8004858 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e035      	b.n	80048c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004864:	d108      	bne.n	8004878 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004874:	611a      	str	r2, [r3, #16]
 8004876:	e01b      	b.n	80048b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004878:	897b      	ldrh	r3, [r7, #10]
 800487a:	11db      	asrs	r3, r3, #7
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0306 	and.w	r3, r3, #6
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f063 030f 	orn	r3, r3, #15
 8004888:	b2da      	uxtb	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	490e      	ldr	r1, [pc, #56]	; (80048d0 <I2C_MasterRequestWrite+0xfc>)
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 f943 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e010      	b.n	80048c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4907      	ldr	r1, [pc, #28]	; (80048d4 <I2C_MasterRequestWrite+0x100>)
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f933 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	00010008 	.word	0x00010008
 80048d4:	00010002 	.word	0x00010002

080048d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	460b      	mov	r3, r1
 80048e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d006      	beq.n	8004912 <I2C_MasterRequestRead+0x3a>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d003      	beq.n	8004912 <I2C_MasterRequestRead+0x3a>
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004910:	d108      	bne.n	8004924 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e00b      	b.n	800493c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	2b11      	cmp	r3, #17
 800492a:	d107      	bne.n	800493c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f893 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00d      	beq.n	8004970 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004962:	d103      	bne.n	800496c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e079      	b.n	8004a64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004978:	d108      	bne.n	800498c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	611a      	str	r2, [r3, #16]
 800498a:	e05f      	b.n	8004a4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800498c:	897b      	ldrh	r3, [r7, #10]
 800498e:	11db      	asrs	r3, r3, #7
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f063 030f 	orn	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4930      	ldr	r1, [pc, #192]	; (8004a6c <I2C_MasterRequestRead+0x194>)
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f8b9 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e054      	b.n	8004a64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049ba:	897b      	ldrh	r3, [r7, #10]
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4929      	ldr	r1, [pc, #164]	; (8004a70 <I2C_MasterRequestRead+0x198>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f8a9 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e044      	b.n	8004a64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f831 	bl	8004a74 <I2C_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d103      	bne.n	8004a30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e017      	b.n	8004a64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a34:	897b      	ldrh	r3, [r7, #10]
 8004a36:	11db      	asrs	r3, r3, #7
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f003 0306 	and.w	r3, r3, #6
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f063 030e 	orn	r3, r3, #14
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4907      	ldr	r1, [pc, #28]	; (8004a70 <I2C_MasterRequestRead+0x198>)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f865 	bl	8004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	00010008 	.word	0x00010008
 8004a70:	00010002 	.word	0x00010002

08004a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a84:	e025      	b.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8c:	d021      	beq.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8e:	f7fd fb37 	bl	8002100 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d116      	bne.n	8004ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	f043 0220 	orr.w	r2, r3, #32
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e023      	b.n	8004b1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10d      	bne.n	8004af8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	e00c      	b.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf0c      	ite	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	2300      	movne	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d0b6      	beq.n	8004a86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b30:	e051      	b.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b40:	d123      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f043 0204 	orr.w	r2, r3, #4
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e046      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d021      	beq.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fd fab5 	bl	8002100 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d116      	bne.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e020      	b.n	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10c      	bne.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e00b      	b.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	43da      	mvns	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d18d      	bne.n	8004b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c2c:	e02d      	b.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8ce 	bl	8004dd0 <I2C_IsAcknowledgeFailed>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e02d      	b.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d021      	beq.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7fd fa5b 	bl	8002100 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d116      	bne.n	8004c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e007      	b.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c94:	2b80      	cmp	r3, #128	; 0x80
 8004c96:	d1ca      	bne.n	8004c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cae:	e02d      	b.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f88d 	bl	8004dd0 <I2C_IsAcknowledgeFailed>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e02d      	b.n	8004d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d021      	beq.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc8:	f7fd fa1a 	bl	8002100 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d302      	bcc.n	8004cde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d116      	bne.n	8004d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e007      	b.n	8004d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d1ca      	bne.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d30:	e042      	b.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d119      	bne.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e029      	b.n	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7fd f9c4 	bl	8002100 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d116      	bne.n	8004db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e007      	b.n	8004dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d1b5      	bne.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d11b      	bne.n	8004e20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004df0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e267      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d075      	beq.n	8004f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e4e:	4b88      	ldr	r3, [pc, #544]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d00c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5a:	4b85      	ldr	r3, [pc, #532]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d112      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b82      	ldr	r3, [pc, #520]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e72:	d10b      	bne.n	8004e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e74:	4b7e      	ldr	r3, [pc, #504]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05b      	beq.n	8004f38 <HAL_RCC_OscConfig+0x108>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d157      	bne.n	8004f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e242      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d106      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x74>
 8004e96:	4b76      	ldr	r3, [pc, #472]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a75      	ldr	r2, [pc, #468]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	e01d      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x98>
 8004eae:	4b70      	ldr	r3, [pc, #448]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a6f      	ldr	r2, [pc, #444]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b6d      	ldr	r3, [pc, #436]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6c      	ldr	r2, [pc, #432]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0xb0>
 8004ec8:	4b69      	ldr	r3, [pc, #420]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a68      	ldr	r2, [pc, #416]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b66      	ldr	r3, [pc, #408]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a65      	ldr	r2, [pc, #404]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee8:	f7fd f90a 	bl	8002100 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fd f906 	bl	8002100 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e207      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	4b5b      	ldr	r3, [pc, #364]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xc0>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fd f8f6 	bl	8002100 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fd f8f2 	bl	8002100 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e1f3      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	4b51      	ldr	r3, [pc, #324]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0xe8>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d063      	beq.n	800500e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f46:	4b4a      	ldr	r3, [pc, #296]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 030c 	and.w	r3, r3, #12
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f52:	4b47      	ldr	r3, [pc, #284]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d11c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b44      	ldr	r3, [pc, #272]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d116      	bne.n	8004f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e1c7      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4937      	ldr	r1, [pc, #220]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f96:	e03a      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa0:	4b34      	ldr	r3, [pc, #208]	; (8005074 <HAL_RCC_OscConfig+0x244>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fd f8ab 	bl	8002100 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fae:	f7fd f8a7 	bl	8002100 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e1a8      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc0:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fcc:	4b28      	ldr	r3, [pc, #160]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4925      	ldr	r1, [pc, #148]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]
 8004fe0:	e015      	b.n	800500e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <HAL_RCC_OscConfig+0x244>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fd f88a 	bl	8002100 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff0:	f7fd f886 	bl	8002100 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e187      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005002:	4b1b      	ldr	r3, [pc, #108]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d036      	beq.n	8005088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005022:	4b15      	ldr	r3, [pc, #84]	; (8005078 <HAL_RCC_OscConfig+0x248>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fd f86a 	bl	8002100 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005030:	f7fd f866 	bl	8002100 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e167      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_OscConfig+0x240>)
 8005044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f0      	beq.n	8005030 <HAL_RCC_OscConfig+0x200>
 800504e:	e01b      	b.n	8005088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005050:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_OscConfig+0x248>)
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7fd f853 	bl	8002100 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505c:	e00e      	b.n	800507c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800505e:	f7fd f84f 	bl	8002100 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d907      	bls.n	800507c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e150      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
 8005070:	40023800 	.word	0x40023800
 8005074:	42470000 	.word	0x42470000
 8005078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507c:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ea      	bne.n	800505e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8097 	beq.w	80051c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509a:	4b81      	ldr	r3, [pc, #516]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10f      	bne.n	80050c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6413      	str	r3, [r2, #64]	; 0x40
 80050b6:	4b7a      	ldr	r3, [pc, #488]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	4b77      	ldr	r3, [pc, #476]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d118      	bne.n	8005104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d2:	4b74      	ldr	r3, [pc, #464]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a73      	ldr	r2, [pc, #460]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050de:	f7fd f80f 	bl	8002100 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e6:	f7fd f80b 	bl	8002100 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e10c      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <HAL_RCC_OscConfig+0x474>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x2ea>
 800510c:	4b64      	ldr	r3, [pc, #400]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a63      	ldr	r2, [pc, #396]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
 8005118:	e01c      	b.n	8005154 <HAL_RCC_OscConfig+0x324>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b05      	cmp	r3, #5
 8005120:	d10c      	bne.n	800513c <HAL_RCC_OscConfig+0x30c>
 8005122:	4b5f      	ldr	r3, [pc, #380]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a5e      	ldr	r2, [pc, #376]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005128:	f043 0304 	orr.w	r3, r3, #4
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	4b5c      	ldr	r3, [pc, #368]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a5b      	ldr	r2, [pc, #364]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005134:	f043 0301 	orr.w	r3, r3, #1
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
 800513a:	e00b      	b.n	8005154 <HAL_RCC_OscConfig+0x324>
 800513c:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a57      	ldr	r2, [pc, #348]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	4a54      	ldr	r2, [pc, #336]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800514e:	f023 0304 	bic.w	r3, r3, #4
 8005152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515c:	f7fc ffd0 	bl	8002100 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005162:	e00a      	b.n	800517a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f7fc ffcc 	bl	8002100 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e0cb      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	4b49      	ldr	r3, [pc, #292]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ee      	beq.n	8005164 <HAL_RCC_OscConfig+0x334>
 8005186:	e014      	b.n	80051b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005188:	f7fc ffba 	bl	8002100 <HAL_GetTick>
 800518c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518e:	e00a      	b.n	80051a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005190:	f7fc ffb6 	bl	8002100 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e0b5      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ee      	bne.n	8005190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d105      	bne.n	80051c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b8:	4b39      	ldr	r3, [pc, #228]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	4a38      	ldr	r2, [pc, #224]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 80a1 	beq.w	8005310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ce:	4b34      	ldr	r3, [pc, #208]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d05c      	beq.n	8005294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d141      	bne.n	8005266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x478>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc ff8a 	bl	8002100 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fc ff86 	bl	8002100 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e087      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	4b27      	ldr	r3, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	085b      	lsrs	r3, r3, #1
 8005226:	3b01      	subs	r3, #1
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	061b      	lsls	r3, r3, #24
 8005232:	491b      	ldr	r1, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCC_OscConfig+0x478>)
 800523a:	2201      	movs	r2, #1
 800523c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523e:	f7fc ff5f 	bl	8002100 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005246:	f7fc ff5b 	bl	8002100 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e05c      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x416>
 8005264:	e054      	b.n	8005310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCC_OscConfig+0x478>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526c:	f7fc ff48 	bl	8002100 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005274:	f7fc ff44 	bl	8002100 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e045      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCC_OscConfig+0x470>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x444>
 8005292:	e03d      	b.n	8005310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d107      	bne.n	80052ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e038      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <HAL_RCC_OscConfig+0x4ec>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d028      	beq.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d121      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d11a      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d111      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	3b01      	subs	r3, #1
 80052f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0cc      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d90c      	bls.n	800535c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b65      	ldr	r3, [pc, #404]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b63      	ldr	r3, [pc, #396]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0b8      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d020      	beq.n	80053aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a58      	ldr	r2, [pc, #352]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800537e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	494d      	ldr	r1, [pc, #308]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d044      	beq.n	8005440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053be:	4b47      	ldr	r3, [pc, #284]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d119      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e07f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d003      	beq.n	80053de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d107      	bne.n	80053ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053de:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e06f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	4b3b      	ldr	r3, [pc, #236]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e067      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f023 0203 	bic.w	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4934      	ldr	r1, [pc, #208]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005410:	f7fc fe76 	bl	8002100 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7fc fe72 	bl	8002100 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e04f      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 020c 	and.w	r2, r3, #12
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	429a      	cmp	r2, r3
 800543e:	d1eb      	bne.n	8005418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005440:	4b25      	ldr	r3, [pc, #148]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d20c      	bcs.n	8005468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544e:	4b22      	ldr	r3, [pc, #136]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	4b20      	ldr	r3, [pc, #128]	; (80054d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d001      	beq.n	8005468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e032      	b.n	80054ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4916      	ldr	r1, [pc, #88]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005492:	4b12      	ldr	r3, [pc, #72]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	490e      	ldr	r1, [pc, #56]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054a6:	f000 f821 	bl	80054ec <HAL_RCC_GetSysClockFreq>
 80054aa:	4602      	mov	r2, r0
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	490a      	ldr	r1, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x1c0>)
 80054b8:	5ccb      	ldrb	r3, [r1, r3]
 80054ba:	fa22 f303 	lsr.w	r3, r2, r3
 80054be:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc fdd6 	bl	8002078 <HAL_InitTick>

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023c00 	.word	0x40023c00
 80054dc:	40023800 	.word	0x40023800
 80054e0:	0800aa50 	.word	0x0800aa50
 80054e4:	20000000 	.word	0x20000000
 80054e8:	20000004 	.word	0x20000004

080054ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f0:	b094      	sub	sp, #80	; 0x50
 80054f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	647b      	str	r3, [r7, #68]	; 0x44
 80054f8:	2300      	movs	r3, #0
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fc:	2300      	movs	r3, #0
 80054fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005504:	4b79      	ldr	r3, [pc, #484]	; (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 030c 	and.w	r3, r3, #12
 800550c:	2b08      	cmp	r3, #8
 800550e:	d00d      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x40>
 8005510:	2b08      	cmp	r3, #8
 8005512:	f200 80e1 	bhi.w	80056d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x34>
 800551a:	2b04      	cmp	r3, #4
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x3a>
 800551e:	e0db      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005520:	4b73      	ldr	r3, [pc, #460]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005522:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005524:	e0db      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005526:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800552a:	e0d8      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800552c:	4b6f      	ldr	r3, [pc, #444]	; (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005536:	4b6d      	ldr	r3, [pc, #436]	; (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d063      	beq.n	800560a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005542:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	2200      	movs	r2, #0
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
 800554c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005554:	633b      	str	r3, [r7, #48]	; 0x30
 8005556:	2300      	movs	r3, #0
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
 800555a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800555e:	4622      	mov	r2, r4
 8005560:	462b      	mov	r3, r5
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f04f 0100 	mov.w	r1, #0
 800556a:	0159      	lsls	r1, r3, #5
 800556c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005570:	0150      	lsls	r0, r2, #5
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4621      	mov	r1, r4
 8005578:	1a51      	subs	r1, r2, r1
 800557a:	6139      	str	r1, [r7, #16]
 800557c:	4629      	mov	r1, r5
 800557e:	eb63 0301 	sbc.w	r3, r3, r1
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005590:	4659      	mov	r1, fp
 8005592:	018b      	lsls	r3, r1, #6
 8005594:	4651      	mov	r1, sl
 8005596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800559a:	4651      	mov	r1, sl
 800559c:	018a      	lsls	r2, r1, #6
 800559e:	4651      	mov	r1, sl
 80055a0:	ebb2 0801 	subs.w	r8, r2, r1
 80055a4:	4659      	mov	r1, fp
 80055a6:	eb63 0901 	sbc.w	r9, r3, r1
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	f04f 0300 	mov.w	r3, #0
 80055b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055be:	4690      	mov	r8, r2
 80055c0:	4699      	mov	r9, r3
 80055c2:	4623      	mov	r3, r4
 80055c4:	eb18 0303 	adds.w	r3, r8, r3
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	462b      	mov	r3, r5
 80055cc:	eb49 0303 	adc.w	r3, r9, r3
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055de:	4629      	mov	r1, r5
 80055e0:	024b      	lsls	r3, r1, #9
 80055e2:	4621      	mov	r1, r4
 80055e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055e8:	4621      	mov	r1, r4
 80055ea:	024a      	lsls	r2, r1, #9
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f2:	2200      	movs	r2, #0
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055fc:	f7fb fa36 	bl	8000a6c <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005608:	e058      	b.n	80056bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560a:	4b38      	ldr	r3, [pc, #224]	; (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	099b      	lsrs	r3, r3, #6
 8005610:	2200      	movs	r2, #0
 8005612:	4618      	mov	r0, r3
 8005614:	4611      	mov	r1, r2
 8005616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	2300      	movs	r3, #0
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
 8005620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	f04f 0000 	mov.w	r0, #0
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	0159      	lsls	r1, r3, #5
 8005632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005636:	0150      	lsls	r0, r2, #5
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4641      	mov	r1, r8
 800563e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb63 0b01 	sbc.w	fp, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800565c:	ebb2 040a 	subs.w	r4, r2, sl
 8005660:	eb63 050b 	sbc.w	r5, r3, fp
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	00eb      	lsls	r3, r5, #3
 800566e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005672:	00e2      	lsls	r2, r4, #3
 8005674:	4614      	mov	r4, r2
 8005676:	461d      	mov	r5, r3
 8005678:	4643      	mov	r3, r8
 800567a:	18e3      	adds	r3, r4, r3
 800567c:	603b      	str	r3, [r7, #0]
 800567e:	464b      	mov	r3, r9
 8005680:	eb45 0303 	adc.w	r3, r5, r3
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005692:	4629      	mov	r1, r5
 8005694:	028b      	lsls	r3, r1, #10
 8005696:	4621      	mov	r1, r4
 8005698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800569c:	4621      	mov	r1, r4
 800569e:	028a      	lsls	r2, r1, #10
 80056a0:	4610      	mov	r0, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a6:	2200      	movs	r2, #0
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	61fa      	str	r2, [r7, #28]
 80056ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b0:	f7fb f9dc 	bl	8000a6c <__aeabi_uldivmod>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4613      	mov	r3, r2
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_RCC_GetSysClockFreq+0x200>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	3301      	adds	r3, #1
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80056cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056d6:	e002      	b.n	80056de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d8:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3750      	adds	r7, #80	; 0x50
 80056e4:	46bd      	mov	sp, r7
 80056e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800
 80056f0:	00f42400 	.word	0x00f42400
 80056f4:	007a1200 	.word	0x007a1200

080056f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <HAL_RCC_GetHCLKFreq+0x14>)
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000000 	.word	0x20000000

08005710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005714:	f7ff fff0 	bl	80056f8 <HAL_RCC_GetHCLKFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	0a9b      	lsrs	r3, r3, #10
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	4903      	ldr	r1, [pc, #12]	; (8005734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40023800 	.word	0x40023800
 8005734:	0800aa60 	.word	0x0800aa60

08005738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800573c:	f7ff ffdc 	bl	80056f8 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0b5b      	lsrs	r3, r3, #13
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4903      	ldr	r1, [pc, #12]	; (800575c <HAL_RCC_GetPCLK2Freq+0x24>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	0800aa60 	.word	0x0800aa60

08005760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e07b      	b.n	800586a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005782:	d009      	beq.n	8005798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	61da      	str	r2, [r3, #28]
 800578a:	e005      	b.n	8005798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7fc fae8 	bl	8001d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581c:	ea42 0103 	orr.w	r1, r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	f003 0104 	and.w	r1, r3, #4
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	f003 0210 	and.w	r2, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69da      	ldr	r2, [r3, #28]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b088      	sub	sp, #32
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_SPI_Transmit+0x22>
 8005890:	2302      	movs	r3, #2
 8005892:	e126      	b.n	8005ae2 <HAL_SPI_Transmit+0x270>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800589c:	f7fc fc30 	bl	8002100 <HAL_GetTick>
 80058a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
 80058b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058b6:	e10b      	b.n	8005ad0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Transmit+0x52>
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058c8:	e102      	b.n	8005ad0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2203      	movs	r2, #3
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	d10f      	bne.n	8005932 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005920:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005930:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d007      	beq.n	8005950 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005958:	d14b      	bne.n	80059f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_SPI_Transmit+0xf6>
 8005962:	8afb      	ldrh	r3, [r7, #22]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d13e      	bne.n	80059e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	881a      	ldrh	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800598c:	e02b      	b.n	80059e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d112      	bne.n	80059c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	86da      	strh	r2, [r3, #54]	; 0x36
 80059c0:	e011      	b.n	80059e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059c2:	f7fc fb9d 	bl	8002100 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d803      	bhi.n	80059da <HAL_SPI_Transmit+0x168>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d8:	d102      	bne.n	80059e0 <HAL_SPI_Transmit+0x16e>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80059e4:	e074      	b.n	8005ad0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ce      	bne.n	800598e <HAL_SPI_Transmit+0x11c>
 80059f0:	e04c      	b.n	8005a8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <HAL_SPI_Transmit+0x18e>
 80059fa:	8afb      	ldrh	r3, [r7, #22]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d140      	bne.n	8005a82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	7812      	ldrb	r2, [r2, #0]
 8005a0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a26:	e02c      	b.n	8005a82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d113      	bne.n	8005a5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a5c:	e011      	b.n	8005a82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5e:	f7fc fb4f 	bl	8002100 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d803      	bhi.n	8005a76 <HAL_SPI_Transmit+0x204>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d102      	bne.n	8005a7c <HAL_SPI_Transmit+0x20a>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a80:	e026      	b.n	8005ad0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1cd      	bne.n	8005a28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fbcb 	bl	800622c <SPI_EndRxTxTransaction>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e000      	b.n	8005ad0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ace:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3720      	adds	r7, #32
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b088      	sub	sp, #32
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d112      	bne.n	8005b2e <HAL_SPI_Receive+0x44>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10e      	bne.n	8005b2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2204      	movs	r2, #4
 8005b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b18:	88fa      	ldrh	r2, [r7, #6]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f000 f8f1 	bl	8005d0c <HAL_SPI_TransmitReceive>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	e0ea      	b.n	8005d04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_SPI_Receive+0x52>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e0e3      	b.n	8005d04 <HAL_SPI_Receive+0x21a>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b44:	f7fc fadc 	bl	8002100 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
 8005b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b5a:	e0ca      	b.n	8005cf2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Receive+0x7e>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b6c:	e0c1      	b.n	8005cf2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2204      	movs	r2, #4
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb4:	d10f      	bne.n	8005bd6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d007      	beq.n	8005bf4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d162      	bne.n	8005cc2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bfc:	e02e      	b.n	8005c5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d115      	bne.n	8005c38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f103 020c 	add.w	r2, r3, #12
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c36:	e011      	b.n	8005c5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c38:	f7fc fa62 	bl	8002100 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d803      	bhi.n	8005c50 <HAL_SPI_Receive+0x166>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_Receive+0x16c>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005c5a:	e04a      	b.n	8005cf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1cb      	bne.n	8005bfe <HAL_SPI_Receive+0x114>
 8005c66:	e031      	b.n	8005ccc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d113      	bne.n	8005c9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	b292      	uxth	r2, r2
 8005c82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	1c9a      	adds	r2, r3, #2
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c9c:	e011      	b.n	8005cc2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c9e:	f7fc fa2f 	bl	8002100 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d803      	bhi.n	8005cb6 <HAL_SPI_Receive+0x1cc>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_Receive+0x1d2>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cc0:	e017      	b.n	8005cf2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1cd      	bne.n	8005c68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fa45 	bl	8006160 <SPI_EndRxTransaction>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
 8005cee:	e000      	b.n	8005cf2 <HAL_SPI_Receive+0x208>
  }

error :
 8005cf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08c      	sub	sp, #48	; 0x30
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_SPI_TransmitReceive+0x26>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e18a      	b.n	8006048 <HAL_SPI_TransmitReceive+0x33c>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d3a:	f7fc f9e1 	bl	8002100 <HAL_GetTick>
 8005d3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d50:	887b      	ldrh	r3, [r7, #2]
 8005d52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d00f      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x70>
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d62:	d107      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d103      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x68>
 8005d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d003      	beq.n	8005d7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d74:	2302      	movs	r3, #2
 8005d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d7a:	e15b      	b.n	8006034 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x82>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x82>
 8005d88:	887b      	ldrh	r3, [r7, #2]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d94:	e14e      	b.n	8006034 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d003      	beq.n	8005daa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2205      	movs	r2, #5
 8005da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	887a      	ldrh	r2, [r7, #2]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	887a      	ldrh	r2, [r7, #2]
 8005dd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b40      	cmp	r3, #64	; 0x40
 8005dec:	d007      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e06:	d178      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_SPI_TransmitReceive+0x10a>
 8005e10:	8b7b      	ldrh	r3, [r7, #26]
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d166      	bne.n	8005ee4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	881a      	ldrh	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	1c9a      	adds	r2, r3, #2
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3a:	e053      	b.n	8005ee4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d11b      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x176>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d016      	beq.n	8005e82 <HAL_SPI_TransmitReceive+0x176>
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d113      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	881a      	ldrh	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d119      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x1b8>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ec4:	f7fc f91c 	bl	8002100 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d807      	bhi.n	8005ee4 <HAL_SPI_TransmitReceive+0x1d8>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d003      	beq.n	8005ee4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ee2:	e0a7      	b.n	8006034 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1a6      	bne.n	8005e3c <HAL_SPI_TransmitReceive+0x130>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1a1      	bne.n	8005e3c <HAL_SPI_TransmitReceive+0x130>
 8005ef8:	e07c      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x1fc>
 8005f02:	8b7b      	ldrh	r3, [r7, #26]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d16b      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	7812      	ldrb	r2, [r2, #0]
 8005f14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f2e:	e057      	b.n	8005fe0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d11c      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x26c>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d017      	beq.n	8005f78 <HAL_SPI_TransmitReceive+0x26c>
 8005f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d114      	bne.n	8005f78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d119      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x2ae>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d014      	beq.n	8005fba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fba:	f7fc f8a1 	bl	8002100 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_TransmitReceive+0x2c6>
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x2cc>
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d103      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005fde:	e029      	b.n	8006034 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1a2      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x224>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d19d      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f917 	bl	800622c <SPI_EndRxTxTransaction>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006010:	e010      	b.n	8006034 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	e000      	b.n	8006034 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006044:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006048:	4618      	mov	r0, r3
 800604a:	3730      	adds	r7, #48	; 0x30
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006060:	f7fc f84e 	bl	8002100 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	4413      	add	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006070:	f7fc f846 	bl	8002100 <HAL_GetTick>
 8006074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006076:	4b39      	ldr	r3, [pc, #228]	; (800615c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	015b      	lsls	r3, r3, #5
 800607c:	0d1b      	lsrs	r3, r3, #20
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	fb02 f303 	mul.w	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006086:	e054      	b.n	8006132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d050      	beq.n	8006132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006090:	f7fc f836 	bl	8002100 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	429a      	cmp	r2, r3
 800609e:	d902      	bls.n	80060a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d13d      	bne.n	8006122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060be:	d111      	bne.n	80060e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c8:	d004      	beq.n	80060d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d2:	d107      	bne.n	80060e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ec:	d10f      	bne.n	800610e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800610c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e017      	b.n	8006152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3b01      	subs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4013      	ands	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	429a      	cmp	r2, r3
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	461a      	mov	r2, r3
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	429a      	cmp	r2, r3
 800614e:	d19b      	bne.n	8006088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3720      	adds	r7, #32
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20000000 	.word	0x20000000

08006160 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006174:	d111      	bne.n	800619a <SPI_EndRxTransaction+0x3a>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617e:	d004      	beq.n	800618a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006188:	d107      	bne.n	800619a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006198:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d12a      	bne.n	80061fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ac:	d012      	beq.n	80061d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ff49 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d02d      	beq.n	8006220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	f043 0220 	orr.w	r2, r3, #32
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e026      	b.n	8006222 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	2101      	movs	r1, #1
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff ff36 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01a      	beq.n	8006220 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e013      	b.n	8006222 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	2101      	movs	r1, #1
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff23 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e000      	b.n	8006222 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af02      	add	r7, sp, #8
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <SPI_EndRxTxTransaction+0x7c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <SPI_EndRxTxTransaction+0x80>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	0d5b      	lsrs	r3, r3, #21
 8006244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006248:	fb02 f303 	mul.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006256:	d112      	bne.n	800627e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2200      	movs	r2, #0
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff fef4 	bl	8006050 <SPI_WaitFlagStateUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d016      	beq.n	800629c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e00f      	b.n	800629e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00a      	beq.n	800629a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	3b01      	subs	r3, #1
 8006288:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d0f2      	beq.n	800627e <SPI_EndRxTxTransaction+0x52>
 8006298:	e000      	b.n	800629c <SPI_EndRxTxTransaction+0x70>
        break;
 800629a:	bf00      	nop
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000000 	.word	0x20000000
 80062ac:	165e9f81 	.word	0x165e9f81

080062b0 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e033      	b.n	800632a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7fb fd9e 	bl	8001e18 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f90b 	bl	8006500 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006308:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68da      	ldr	r2, [r3, #12]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006318:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b08a      	sub	sp, #40	; 0x28
 8006336:	af02      	add	r7, sp, #8
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	d17c      	bne.n	8006448 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_USART_Transmit+0x28>
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e075      	b.n	800644a <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_USART_Transmit+0x3a>
 8006368:	2302      	movs	r3, #2
 800636a:	e06e      	b.n	800644a <HAL_USART_Transmit+0x118>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2212      	movs	r2, #18
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006382:	f7fb febd 	bl	8002100 <HAL_GetTick>
 8006386:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	d108      	bne.n	80063b0 <HAL_USART_Transmit+0x7e>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	e003      	b.n	80063b8 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80063b8:	e02a      	b.n	8006410 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2200      	movs	r2, #0
 80063c2:	2180      	movs	r1, #128	; 0x80
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 f844 	bl	8006452 <USART_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e03a      	b.n	800644a <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063e8:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	3302      	adds	r3, #2
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	e007      	b.n	8006402 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	3301      	adds	r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1cf      	bne.n	80063ba <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2200      	movs	r2, #0
 8006422:	2140      	movs	r1, #64	; 0x40
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f814 	bl	8006452 <USART_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e00a      	b.n	800644a <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006444:	2300      	movs	r3, #0
 8006446:	e000      	b.n	800644a <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8006448:	2302      	movs	r3, #2
  }
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	603b      	str	r3, [r7, #0]
 800645e:	4613      	mov	r3, r2
 8006460:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006462:	e038      	b.n	80064d6 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646a:	d034      	beq.n	80064d6 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <USART_WaitOnFlagUntilTimeout+0x30>
 8006472:	f7fb fe45 	bl	8002100 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	429a      	cmp	r2, r3
 8006480:	d229      	bcs.n	80064d6 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006490:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68da      	ldr	r2, [r3, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0220 	bic.w	r2, r2, #32
 80064a0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064b0:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e00f      	b.n	80064f6 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0b7      	beq.n	8006464 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006504:	b0c6      	sub	sp, #280	; 0x118
 8006506:	af00      	add	r7, sp, #0
 8006508:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 800650c:	2300      	movs	r3, #0
 800650e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68d9      	ldr	r1, [r3, #12]
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	f021 030c 	bic.w	r3, r1, #12
 8006524:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8006526:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006536:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800653a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800653e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006542:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006548:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800654a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800654c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	431a      	orrs	r2, r3
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006558:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800655a:	431a      	orrs	r2, r3
 800655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006560:	4313      	orrs	r3, r2
 8006562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006566:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800656a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006574:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8006576:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006586:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800658a:	f023 030c 	bic.w	r3, r3, #12
 800658e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	431a      	orrs	r2, r3
 80065a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 80065b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c0:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 80065c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6959      	ldr	r1, [r3, #20]
 80065ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 80065d4:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80065d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b8b      	ldr	r3, [pc, #556]	; (800680c <USART_SetConfig+0x30c>)
 80065de:	429a      	cmp	r2, r3
 80065e0:	d006      	beq.n	80065f0 <USART_SetConfig+0xf0>
 80065e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b89      	ldr	r3, [pc, #548]	; (8006810 <USART_SetConfig+0x310>)
 80065ea:	429a      	cmp	r2, r3
 80065ec:	f040 8114 	bne.w	8006818 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7ff f8a2 	bl	8005738 <HAL_RCC_GetPCLK2Freq>
 80065f4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80065f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006602:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006606:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	1891      	adds	r1, r2, r2
 8006610:	6739      	str	r1, [r7, #112]	; 0x70
 8006612:	415b      	adcs	r3, r3
 8006614:	677b      	str	r3, [r7, #116]	; 0x74
 8006616:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800661a:	4621      	mov	r1, r4
 800661c:	eb12 0801 	adds.w	r8, r2, r1
 8006620:	4629      	mov	r1, r5
 8006622:	eb43 0901 	adc.w	r9, r3, r1
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800663a:	4690      	mov	r8, r2
 800663c:	4699      	mov	r9, r3
 800663e:	4623      	mov	r3, r4
 8006640:	eb18 0303 	adds.w	r3, r8, r3
 8006644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006648:	462b      	mov	r3, r5
 800664a:	eb49 0303 	adc.w	r3, r9, r3
 800664e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800665e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006662:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006666:	460b      	mov	r3, r1
 8006668:	18db      	adds	r3, r3, r3
 800666a:	66bb      	str	r3, [r7, #104]	; 0x68
 800666c:	4613      	mov	r3, r2
 800666e:	eb42 0303 	adc.w	r3, r2, r3
 8006672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006674:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006678:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800667c:	f7fa f9f6 	bl	8000a6c <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4b63      	ldr	r3, [pc, #396]	; (8006814 <USART_SetConfig+0x314>)
 8006686:	fba3 2302 	umull	r2, r3, r3, r2
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	011c      	lsls	r4, r3, #4
 800668e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006692:	2200      	movs	r2, #0
 8006694:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006698:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800669c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	1891      	adds	r1, r2, r2
 80066a6:	6639      	str	r1, [r7, #96]	; 0x60
 80066a8:	415b      	adcs	r3, r3
 80066aa:	667b      	str	r3, [r7, #100]	; 0x64
 80066ac:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80066b0:	4641      	mov	r1, r8
 80066b2:	1851      	adds	r1, r2, r1
 80066b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80066b6:	4649      	mov	r1, r9
 80066b8:	414b      	adcs	r3, r1
 80066ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80066c8:	4659      	mov	r1, fp
 80066ca:	00cb      	lsls	r3, r1, #3
 80066cc:	4651      	mov	r1, sl
 80066ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d2:	4651      	mov	r1, sl
 80066d4:	00ca      	lsls	r2, r1, #3
 80066d6:	4610      	mov	r0, r2
 80066d8:	4619      	mov	r1, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	4642      	mov	r2, r8
 80066de:	189b      	adds	r3, r3, r2
 80066e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066e4:	464b      	mov	r3, r9
 80066e6:	460a      	mov	r2, r1
 80066e8:	eb42 0303 	adc.w	r3, r2, r3
 80066ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006700:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006704:	460b      	mov	r3, r1
 8006706:	18db      	adds	r3, r3, r3
 8006708:	653b      	str	r3, [r7, #80]	; 0x50
 800670a:	4613      	mov	r3, r2
 800670c:	eb42 0303 	adc.w	r3, r2, r3
 8006710:	657b      	str	r3, [r7, #84]	; 0x54
 8006712:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006716:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800671a:	f7fa f9a7 	bl	8000a6c <__aeabi_uldivmod>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4611      	mov	r1, r2
 8006724:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <USART_SetConfig+0x314>)
 8006726:	fba3 2301 	umull	r2, r3, r3, r1
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	2264      	movs	r2, #100	; 0x64
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	1acb      	subs	r3, r1, r3
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800673a:	4b36      	ldr	r3, [pc, #216]	; (8006814 <USART_SetConfig+0x314>)
 800673c:	fba3 2302 	umull	r2, r3, r3, r2
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006748:	441c      	add	r4, r3
 800674a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006754:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006758:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	1891      	adds	r1, r2, r2
 8006762:	64b9      	str	r1, [r7, #72]	; 0x48
 8006764:	415b      	adcs	r3, r3
 8006766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800676c:	4641      	mov	r1, r8
 800676e:	1851      	adds	r1, r2, r1
 8006770:	6439      	str	r1, [r7, #64]	; 0x40
 8006772:	4649      	mov	r1, r9
 8006774:	414b      	adcs	r3, r1
 8006776:	647b      	str	r3, [r7, #68]	; 0x44
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8006784:	4659      	mov	r1, fp
 8006786:	00cb      	lsls	r3, r1, #3
 8006788:	4651      	mov	r1, sl
 800678a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678e:	4651      	mov	r1, sl
 8006790:	00ca      	lsls	r2, r1, #3
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	4603      	mov	r3, r0
 8006798:	4642      	mov	r2, r8
 800679a:	189b      	adds	r3, r3, r2
 800679c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067a0:	464b      	mov	r3, r9
 80067a2:	460a      	mov	r2, r1
 80067a4:	eb42 0303 	adc.w	r3, r2, r3
 80067a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c0:	460b      	mov	r3, r1
 80067c2:	18db      	adds	r3, r3, r3
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067c6:	4613      	mov	r3, r2
 80067c8:	eb42 0303 	adc.w	r3, r2, r3
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067d6:	f7fa f949 	bl	8000a6c <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <USART_SetConfig+0x314>)
 80067e0:	fba3 1302 	umull	r1, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	2164      	movs	r1, #100	; 0x64
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	3332      	adds	r3, #50	; 0x32
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <USART_SetConfig+0x314>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 0207 	and.w	r2, r3, #7
 80067fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4422      	add	r2, r4
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	e109      	b.n	8006a1e <USART_SetConfig+0x51e>
 800680a:	bf00      	nop
 800680c:	40011000 	.word	0x40011000
 8006810:	40011400 	.word	0x40011400
 8006814:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fe ff7a 	bl	8005710 <HAL_RCC_GetPCLK1Freq>
 800681c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006820:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006824:	2200      	movs	r2, #0
 8006826:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800682a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800682e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006832:	4642      	mov	r2, r8
 8006834:	464b      	mov	r3, r9
 8006836:	1891      	adds	r1, r2, r2
 8006838:	6339      	str	r1, [r7, #48]	; 0x30
 800683a:	415b      	adcs	r3, r3
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
 800683e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006842:	4641      	mov	r1, r8
 8006844:	1854      	adds	r4, r2, r1
 8006846:	4649      	mov	r1, r9
 8006848:	eb43 0501 	adc.w	r5, r3, r1
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	00eb      	lsls	r3, r5, #3
 8006856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800685a:	00e2      	lsls	r2, r4, #3
 800685c:	4614      	mov	r4, r2
 800685e:	461d      	mov	r5, r3
 8006860:	4643      	mov	r3, r8
 8006862:	18e3      	adds	r3, r4, r3
 8006864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006868:	464b      	mov	r3, r9
 800686a:	eb45 0303 	adc.w	r3, r5, r3
 800686e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800687e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006882:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006886:	460b      	mov	r3, r1
 8006888:	18db      	adds	r3, r3, r3
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
 800688c:	4613      	mov	r3, r2
 800688e:	eb42 0303 	adc.w	r3, r2, r3
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006898:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800689c:	f7fa f8e6 	bl	8000a6c <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b61      	ldr	r3, [pc, #388]	; (8006a2c <USART_SetConfig+0x52c>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011c      	lsls	r4, r3, #4
 80068ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068b8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068bc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	6239      	str	r1, [r7, #32]
 80068c8:	415b      	adcs	r3, r3
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
 80068cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068d0:	4641      	mov	r1, r8
 80068d2:	eb12 0a01 	adds.w	sl, r2, r1
 80068d6:	4649      	mov	r1, r9
 80068d8:	eb43 0b01 	adc.w	fp, r3, r1
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f0:	4692      	mov	sl, r2
 80068f2:	469b      	mov	fp, r3
 80068f4:	4643      	mov	r3, r8
 80068f6:	eb1a 0303 	adds.w	r3, sl, r3
 80068fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068fe:	464b      	mov	r3, r9
 8006900:	eb4b 0303 	adc.w	r3, fp, r3
 8006904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006914:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006918:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800691c:	460b      	mov	r3, r1
 800691e:	18db      	adds	r3, r3, r3
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	4613      	mov	r3, r2
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	61fb      	str	r3, [r7, #28]
 800692a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800692e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006932:	f7fa f89b 	bl	8000a6c <__aeabi_uldivmod>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4611      	mov	r1, r2
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <USART_SetConfig+0x52c>)
 800693e:	fba3 2301 	umull	r2, r3, r3, r1
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2264      	movs	r2, #100	; 0x64
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	1acb      	subs	r3, r1, r3
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006952:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <USART_SetConfig+0x52c>)
 8006954:	fba3 2302 	umull	r2, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006960:	441c      	add	r4, r3
 8006962:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800696c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006970:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	6139      	str	r1, [r7, #16]
 800697c:	415b      	adcs	r3, r3
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069b8:	464b      	mov	r3, r9
 80069ba:	460a      	mov	r2, r1
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80069d4:	460b      	mov	r3, r1
 80069d6:	18db      	adds	r3, r3, r3
 80069d8:	603b      	str	r3, [r7, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	eb42 0303 	adc.w	r3, r2, r3
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069ea:	f7fa f83f 	bl	8000a6c <__aeabi_uldivmod>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4b0e      	ldr	r3, [pc, #56]	; (8006a2c <USART_SetConfig+0x52c>)
 80069f4:	fba3 1302 	umull	r1, r3, r3, r2
 80069f8:	095b      	lsrs	r3, r3, #5
 80069fa:	2164      	movs	r1, #100	; 0x64
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	3332      	adds	r3, #50	; 0x32
 8006a06:	4a09      	ldr	r2, [pc, #36]	; (8006a2c <USART_SetConfig+0x52c>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	f003 0207 	and.w	r2, r3, #7
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4422      	add	r2, r4
 8006a1a:	609a      	str	r2, [r3, #8]
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006a24:	46bd      	mov	sp, r7
 8006a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a2a:	bf00      	nop
 8006a2c:	51eb851f 	.word	0x51eb851f

08006a30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a30:	b084      	sub	sp, #16
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	f107 001c 	add.w	r0, r7, #28
 8006a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d122      	bne.n	8006a8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f9c0 	bl	8006e08 <USB_CoreReset>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
 8006a8c:	e01a      	b.n	8006ac4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f9b4 	bl	8006e08 <USB_CoreReset>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
 8006ab6:	e005      	b.n	8006ac4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d10b      	bne.n	8006ae2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f043 0206 	orr.w	r2, r3, #6
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aee:	b004      	add	sp, #16
 8006af0:	4770      	bx	lr

08006af2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f043 0201 	orr.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 0201 	bic.w	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d115      	bne.n	8006b84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b64:	2001      	movs	r0, #1
 8006b66:	f7fb fad7 	bl	8002118 <HAL_Delay>
      ms++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f93a 	bl	8006dea <USB_GetMode>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d01e      	beq.n	8006bba <USB_SetCurrentMode+0x84>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b31      	cmp	r3, #49	; 0x31
 8006b80:	d9f0      	bls.n	8006b64 <USB_SetCurrentMode+0x2e>
 8006b82:	e01a      	b.n	8006bba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d115      	bne.n	8006bb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b96:	2001      	movs	r0, #1
 8006b98:	f7fb fabe 	bl	8002118 <HAL_Delay>
      ms++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f921 	bl	8006dea <USB_GetMode>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <USB_SetCurrentMode+0x84>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b31      	cmp	r3, #49	; 0x31
 8006bb2:	d9f0      	bls.n	8006b96 <USB_SetCurrentMode+0x60>
 8006bb4:	e001      	b.n	8006bba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e005      	b.n	8006bc6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b32      	cmp	r3, #50	; 0x32
 8006bbe:	d101      	bne.n	8006bc4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e000      	b.n	8006bc6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <USB_FlushTxFifo+0x64>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d901      	bls.n	8006bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e01b      	b.n	8006c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	daf2      	bge.n	8006bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	019b      	lsls	r3, r3, #6
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <USB_FlushTxFifo+0x64>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e006      	b.n	8006c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d0f0      	beq.n	8006c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	00030d40 	.word	0x00030d40

08006c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <USB_FlushRxFifo+0x5c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e018      	b.n	8006c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	daf2      	bge.n	8006c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2210      	movs	r2, #16
 8006c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <USB_FlushRxFifo+0x5c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e006      	b.n	8006c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d0f0      	beq.n	8006c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	00030d40 	.word	0x00030d40

08006c98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	; 0x24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	71fb      	strb	r3, [r7, #7]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d123      	bne.n	8006d06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cbe:	88bb      	ldrh	r3, [r7, #4]
 8006cc0:	3303      	adds	r3, #3
 8006cc2:	089b      	lsrs	r3, r3, #2
 8006cc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e018      	b.n	8006cfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	031a      	lsls	r2, r3, #12
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd8:	461a      	mov	r2, r3
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3e2      	bcc.n	8006ccc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3724      	adds	r7, #36	; 0x24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b08b      	sub	sp, #44	; 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d2a:	88fb      	ldrh	r3, [r7, #6]
 8006d2c:	089b      	lsrs	r3, r3, #2
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	e014      	b.n	8006d6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	3301      	adds	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	3301      	adds	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	3301      	adds	r3, #1
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	6a3a      	ldr	r2, [r7, #32]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d3e6      	bcc.n	8006d40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01e      	beq.n	8006db6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d82:	461a      	mov	r2, r3
 8006d84:	f107 0310 	add.w	r3, r7, #16
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	3301      	adds	r3, #1
 8006da2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	3301      	adds	r3, #1
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006daa:	8bfb      	ldrh	r3, [r7, #30]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006db0:	8bfb      	ldrh	r3, [r7, #30]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1ea      	bne.n	8006d8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	372c      	adds	r7, #44	; 0x2c
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0301 	and.w	r3, r3, #1
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <USB_CoreReset+0x64>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e01b      	b.n	8006e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	daf2      	bge.n	8006e14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f043 0201 	orr.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <USB_CoreReset+0x64>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e006      	b.n	8006e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d0f0      	beq.n	8006e3e <USB_CoreReset+0x36>

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	00030d40 	.word	0x00030d40

08006e70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e70:	b084      	sub	sp, #16
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b086      	sub	sp, #24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e90:	461a      	mov	r2, r3
 8006e92:	2300      	movs	r3, #0
 8006e94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d018      	beq.n	8006ef8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d10a      	bne.n	8006ee2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006eda:	f043 0304 	orr.w	r3, r3, #4
 8006ede:	6013      	str	r3, [r2, #0]
 8006ee0:	e014      	b.n	8006f0c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ef0:	f023 0304 	bic.w	r3, r3, #4
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e009      	b.n	8006f0c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f06:	f023 0304 	bic.w	r3, r3, #4
 8006f0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f0c:	2110      	movs	r1, #16
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff fe5e 	bl	8006bd0 <USB_FlushTxFifo>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fe8a 	bl	8006c38 <USB_FlushRxFifo>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e015      	b.n	8006f60 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 33ff 	mov.w	r3, #4294967295
 8006f46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f54:	461a      	mov	r2, r3
 8006f56:	2300      	movs	r3, #0
 8006f58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d3e5      	bcc.n	8006f34 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a13      	ldr	r2, [pc, #76]	; (8006fdc <USB_HostInit+0x16c>)
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <USB_HostInit+0x170>)
 8006f94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006f98:	e009      	b.n	8006fae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2280      	movs	r2, #128	; 0x80
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a10      	ldr	r2, [pc, #64]	; (8006fe4 <USB_HostInit+0x174>)
 8006fa4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a0f      	ldr	r2, [pc, #60]	; (8006fe8 <USB_HostInit+0x178>)
 8006faa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	f043 0210 	orr.w	r2, r3, #16
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699a      	ldr	r2, [r3, #24]
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <USB_HostInit+0x17c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd8:	b004      	add	sp, #16
 8006fda:	4770      	bx	lr
 8006fdc:	01000200 	.word	0x01000200
 8006fe0:	00e00300 	.word	0x00e00300
 8006fe4:	00600080 	.word	0x00600080
 8006fe8:	004000e0 	.word	0x004000e0
 8006fec:	a3200008 	.word	0xa3200008

08006ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007038:	461a      	mov	r2, r3
 800703a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800703e:	6053      	str	r3, [r2, #4]
 8007040:	e009      	b.n	8007056 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d106      	bne.n	8007056 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704e:	461a      	mov	r2, r3
 8007050:	f241 7370 	movw	r3, #6000	; 0x1770
 8007054:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007084:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800708e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007092:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007094:	2064      	movs	r0, #100	; 0x64
 8007096:	f7fb f83f 	bl	8002118 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070a8:	200a      	movs	r0, #10
 80070aa:	f7fb f835 	bl	8002118 <HAL_Delay>

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <USB_DriveVbus+0x44>
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d106      	bne.n	80070fc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070fa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	d109      	bne.n	800711c <USB_DriveVbus+0x64>
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800711a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	0c5b      	lsrs	r3, r3, #17
 8007148:	f003 0303 	and.w	r3, r3, #3
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	b29b      	uxth	r3, r3
}
 800716e:	4618      	mov	r0, r3
 8007170:	3714      	adds	r7, #20
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr
	...

0800717c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4603      	mov	r3, r0
 800718c:	70fb      	strb	r3, [r7, #3]
 800718e:	460b      	mov	r3, r1
 8007190:	70bb      	strb	r3, [r7, #2]
 8007192:	4613      	mov	r3, r2
 8007194:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071aa:	461a      	mov	r2, r3
 80071ac:	f04f 33ff 	mov.w	r3, #4294967295
 80071b0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d87e      	bhi.n	80072b8 <USB_HC_Init+0x13c>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <USB_HC_Init+0x44>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071d1 	.word	0x080071d1
 80071c4:	0800727b 	.word	0x0800727b
 80071c8:	080071d1 	.word	0x080071d1
 80071cc:	0800723d 	.word	0x0800723d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071dc:	461a      	mov	r2, r3
 80071de:	f240 439d 	movw	r3, #1181	; 0x49d
 80071e2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80071e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da10      	bge.n	800720e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	78fa      	ldrb	r2, [r7, #3]
 80071fc:	0151      	lsls	r1, r2, #5
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	440a      	add	r2, r1
 8007202:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800720c:	e057      	b.n	80072be <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007216:	2b00      	cmp	r3, #0
 8007218:	d051      	beq.n	80072be <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	4413      	add	r3, r2
 8007222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	78fa      	ldrb	r2, [r7, #3]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	440a      	add	r2, r1
 8007230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007234:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007238:	60d3      	str	r3, [r2, #12]
      break;
 800723a:	e040      	b.n	80072be <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	461a      	mov	r2, r3
 800724a:	f240 639d 	movw	r3, #1693	; 0x69d
 800724e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007250:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007254:	2b00      	cmp	r3, #0
 8007256:	da34      	bge.n	80072c2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	4413      	add	r3, r2
 8007260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	440a      	add	r2, r1
 800726e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007276:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007278:	e023      	b.n	80072c2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	461a      	mov	r2, r3
 8007288:	f240 2325 	movw	r3, #549	; 0x225
 800728c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800728e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007292:	2b00      	cmp	r3, #0
 8007294:	da17      	bge.n	80072c6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4413      	add	r3, r2
 800729e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	78fa      	ldrb	r2, [r7, #3]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072b6:	e006      	b.n	80072c6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	77fb      	strb	r3, [r7, #31]
      break;
 80072bc:	e004      	b.n	80072c8 <USB_HC_Init+0x14c>
      break;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <USB_HC_Init+0x14c>
      break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <USB_HC_Init+0x14c>
      break;
 80072c6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80072c8:	78fb      	ldrb	r3, [r7, #3]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	0151      	lsls	r1, r2, #5
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	440a      	add	r2, r1
 80072de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e2:	f043 0302 	orr.w	r3, r3, #2
 80072e6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ee:	699a      	ldr	r2, [r3, #24]
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	f003 030f 	and.w	r3, r3, #15
 80072f6:	2101      	movs	r1, #1
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	6939      	ldr	r1, [r7, #16]
 80072fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007302:	4313      	orrs	r3, r2
 8007304:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007312:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da03      	bge.n	8007322 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800731a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e001      	b.n	8007326 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007322:	2300      	movs	r3, #0
 8007324:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff feff 	bl	800712a <USB_GetHostSpeed>
 800732c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800732e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007332:	2b02      	cmp	r3, #2
 8007334:	d106      	bne.n	8007344 <USB_HC_Init+0x1c8>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b02      	cmp	r3, #2
 800733a:	d003      	beq.n	8007344 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800733c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	e001      	b.n	8007348 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007348:	787b      	ldrb	r3, [r7, #1]
 800734a:	059b      	lsls	r3, r3, #22
 800734c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007350:	78bb      	ldrb	r3, [r7, #2]
 8007352:	02db      	lsls	r3, r3, #11
 8007354:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007358:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800735a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800735e:	049b      	lsls	r3, r3, #18
 8007360:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007364:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007366:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007368:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800736c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	0159      	lsls	r1, r3, #5
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	440b      	add	r3, r1
 800737a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007384:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800738a:	2b03      	cmp	r3, #3
 800738c:	d003      	beq.n	8007396 <USB_HC_Init+0x21a>
 800738e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d10f      	bne.n	80073b6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073b4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80073d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073dc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d02d      	beq.n	8007446 <USB_HC_StartXfer+0x86>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	791b      	ldrb	r3, [r3, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d129      	bne.n	8007446 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d117      	bne.n	8007428 <USB_HC_StartXfer+0x68>
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	79db      	ldrb	r3, [r3, #7]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <USB_HC_StartXfer+0x48>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	79db      	ldrb	r3, [r3, #7]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d10f      	bne.n	8007428 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	4413      	add	r3, r2
 8007410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	6a3a      	ldr	r2, [r7, #32]
 800741c:	440a      	add	r2, r1
 800741e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007426:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10b      	bne.n	8007446 <USB_HC_StartXfer+0x86>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	795b      	ldrb	r3, [r3, #5]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d107      	bne.n	8007446 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	4619      	mov	r1, r3
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fa0f 	bl	8007860 <USB_DoPing>
      return HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	e0f8      	b.n	8007638 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	8912      	ldrh	r2, [r2, #8]
 8007456:	4413      	add	r3, r2
 8007458:	3b01      	subs	r3, #1
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	8912      	ldrh	r2, [r2, #8]
 800745e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007462:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007464:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007466:	8b7b      	ldrh	r3, [r7, #26]
 8007468:	429a      	cmp	r2, r3
 800746a:	d90b      	bls.n	8007484 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800746c:	8b7b      	ldrh	r3, [r7, #26]
 800746e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	8912      	ldrh	r2, [r2, #8]
 8007476:	fb03 f202 	mul.w	r2, r3, r2
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	611a      	str	r2, [r3, #16]
 800747e:	e001      	b.n	8007484 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007480:	2301      	movs	r3, #1
 8007482:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	78db      	ldrb	r3, [r3, #3]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800748c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	8912      	ldrh	r2, [r2, #8]
 8007492:	fb03 f202 	mul.w	r2, r3, r2
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	611a      	str	r2, [r3, #16]
 800749a:	e003      	b.n	80074a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074ae:	04d9      	lsls	r1, r3, #19
 80074b0:	4b63      	ldr	r3, [pc, #396]	; (8007640 <USB_HC_StartXfer+0x280>)
 80074b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	7a9b      	ldrb	r3, [r3, #10]
 80074ba:	075b      	lsls	r3, r3, #29
 80074bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074c0:	69f9      	ldr	r1, [r7, #28]
 80074c2:	0148      	lsls	r0, r1, #5
 80074c4:	6a39      	ldr	r1, [r7, #32]
 80074c6:	4401      	add	r1, r0
 80074c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	68d9      	ldr	r1, [r3, #12]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e6:	460a      	mov	r2, r1
 80074e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf0c      	ite	eq
 80074fa:	2301      	moveq	r3, #1
 80074fc:	2300      	movne	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	4413      	add	r3, r2
 800750a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	440a      	add	r2, r1
 8007518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800751c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007520:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	7e7b      	ldrb	r3, [r7, #25]
 8007532:	075b      	lsls	r3, r3, #29
 8007534:	69f9      	ldr	r1, [r7, #28]
 8007536:	0148      	lsls	r0, r1, #5
 8007538:	6a39      	ldr	r1, [r7, #32]
 800753a:	4401      	add	r1, r0
 800753c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007540:	4313      	orrs	r3, r2
 8007542:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	4413      	add	r3, r2
 800754c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800755a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	78db      	ldrb	r3, [r3, #3]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	e003      	b.n	8007576 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007574:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800757c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	4413      	add	r3, r2
 8007586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758a:	461a      	mov	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e04e      	b.n	8007638 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	78db      	ldrb	r3, [r3, #3]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d149      	bne.n	8007636 <USB_HC_StartXfer+0x276>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d045      	beq.n	8007636 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	79db      	ldrb	r3, [r3, #7]
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d830      	bhi.n	8007614 <USB_HC_StartXfer+0x254>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <USB_HC_StartXfer+0x1f8>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	080075c9 	.word	0x080075c9
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	080075c9 	.word	0x080075c9
 80075c4:	080075ed 	.word	0x080075ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	3303      	adds	r3, #3
 80075ce:	089b      	lsrs	r3, r3, #2
 80075d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80075d2:	8afa      	ldrh	r2, [r7, #22]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	b29b      	uxth	r3, r3
 80075da:	429a      	cmp	r2, r3
 80075dc:	d91c      	bls.n	8007618 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	f043 0220 	orr.w	r2, r3, #32
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80075ea:	e015      	b.n	8007618 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	3303      	adds	r3, #3
 80075f2:	089b      	lsrs	r3, r3, #2
 80075f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80075f6:	8afa      	ldrh	r2, [r7, #22]
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	b29b      	uxth	r3, r3
 8007602:	429a      	cmp	r2, r3
 8007604:	d90a      	bls.n	800761c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	619a      	str	r2, [r3, #24]
        }
        break;
 8007612:	e003      	b.n	800761c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007614:	bf00      	nop
 8007616:	e002      	b.n	800761e <USB_HC_StartXfer+0x25e>
        break;
 8007618:	bf00      	nop
 800761a:	e000      	b.n	800761e <USB_HC_StartXfer+0x25e>
        break;
 800761c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68d9      	ldr	r1, [r3, #12]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	785a      	ldrb	r2, [r3, #1]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	b29b      	uxth	r3, r3
 800762c:	2000      	movs	r0, #0
 800762e:	9000      	str	r0, [sp, #0]
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fb31 	bl	8006c98 <USB_WritePacket>
  }

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3728      	adds	r7, #40	; 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	1ff80000 	.word	0x1ff80000

08007644 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	b29b      	uxth	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007666:	b480      	push	{r7}
 8007668:	b089      	sub	sp, #36	; 0x24
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	0c9b      	lsrs	r3, r3, #18
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	0fdb      	lsrs	r3, r3, #31
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0320 	and.w	r3, r3, #32
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d104      	bne.n	80076c0 <USB_HC_Halt+0x5a>
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	e0c8      	b.n	8007852 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <USB_HC_Halt+0x66>
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d163      	bne.n	8007794 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 80ab 	bne.w	8007850 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d133      	bne.n	800776e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	440a      	add	r2, r1
 800771c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007720:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007724:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	0151      	lsls	r1, r2, #5
 8007738:	69fa      	ldr	r2, [r7, #28]
 800773a:	440a      	add	r2, r1
 800773c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007744:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3301      	adds	r3, #1
 800774a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007752:	d81d      	bhi.n	8007790 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800776a:	d0ec      	beq.n	8007746 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800776c:	e070      	b.n	8007850 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	4413      	add	r3, r2
 8007776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	0151      	lsls	r1, r2, #5
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	440a      	add	r2, r1
 8007784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800778c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800778e:	e05f      	b.n	8007850 <USB_HC_Halt+0x1ea>
            break;
 8007790:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007792:	e05d      	b.n	8007850 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	0151      	lsls	r1, r2, #5
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	440a      	add	r2, r1
 80077aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d133      	bne.n	800782c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007802:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007810:	d81d      	bhi.n	800784e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007828:	d0ec      	beq.n	8007804 <USB_HC_Halt+0x19e>
 800782a:	e011      	b.n	8007850 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	4413      	add	r3, r2
 8007834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	69fa      	ldr	r2, [r7, #28]
 8007840:	440a      	add	r2, r1
 8007842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	e000      	b.n	8007850 <USB_HC_Halt+0x1ea>
          break;
 800784e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3724      	adds	r7, #36	; 0x24
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007874:	2301      	movs	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	04da      	lsls	r2, r3, #19
 800787c:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <USB_DoPing+0x74>)
 800787e:	4013      	ands	r3, r2
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	440a      	add	r2, r1
 8007888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800788c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007890:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	4413      	add	r3, r2
 800789a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078be:	461a      	mov	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	1ff80000 	.word	0x1ff80000

080078d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff f911 	bl	8006b14 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078f2:	2110      	movs	r1, #16
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f7ff f96b 	bl	8006bd0 <USB_FlushTxFifo>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff f997 	bl	8006c38 <USB_FlushRxFifo>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007914:	2300      	movs	r3, #0
 8007916:	61bb      	str	r3, [r7, #24]
 8007918:	e01f      	b.n	800795a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007930:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007938:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007940:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	4413      	add	r3, r2
 800794a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794e:	461a      	mov	r2, r3
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	3301      	adds	r3, #1
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b0f      	cmp	r3, #15
 800795e:	d9dc      	bls.n	800791a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	e034      	b.n	80079d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800797c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007984:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800798c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799a:	461a      	mov	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079ac:	d80c      	bhi.n	80079c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079c4:	d0ec      	beq.n	80079a0 <USB_StopHost+0xc8>
 80079c6:	e000      	b.n	80079ca <USB_StopHost+0xf2>
        break;
 80079c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	3301      	adds	r3, #1
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	2b0f      	cmp	r3, #15
 80079d4:	d9c7      	bls.n	8007966 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079dc:	461a      	mov	r2, r3
 80079de:	f04f 33ff 	mov.w	r3, #4294967295
 80079e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff f880 	bl	8006af2 <USB_EnableGlobalInt>

  return ret;
 80079f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80079fc:	b590      	push	{r4, r7, lr}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af04      	add	r7, sp, #16
 8007a02:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007a04:	2301      	movs	r3, #1
 8007a06:	2202      	movs	r2, #2
 8007a08:	2102      	movs	r1, #2
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fc66 	bl	80082dc <USBH_FindInterface>
 8007a10:	4603      	mov	r3, r0
 8007a12:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	2bff      	cmp	r3, #255	; 0xff
 8007a18:	d002      	beq.n	8007a20 <USBH_CDC_InterfaceInit+0x24>
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d901      	bls.n	8007a24 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a20:	2302      	movs	r3, #2
 8007a22:	e13d      	b.n	8007ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	4619      	mov	r1, r3
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fc3b 	bl	80082a4 <USBH_SelectInterface>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e131      	b.n	8007ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007a42:	2050      	movs	r0, #80	; 0x50
 8007a44:	f002 fafa 	bl	800a03c <malloc>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007a5c:	2302      	movs	r3, #2
 8007a5e:	e11f      	b.n	8007ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007a60:	2250      	movs	r2, #80	; 0x50
 8007a62:	2100      	movs	r1, #0
 8007a64:	68b8      	ldr	r0, [r7, #8]
 8007a66:	f002 faf9 	bl	800a05c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	211a      	movs	r1, #26
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	4413      	add	r3, r2
 8007a76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b25b      	sxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da15      	bge.n	8007aae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	211a      	movs	r1, #26
 8007a88:	fb01 f303 	mul.w	r3, r1, r3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	211a      	movs	r1, #26
 8007a9e:	fb01 f303 	mul.w	r3, r1, r3
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007aa8:	881a      	ldrh	r2, [r3, #0]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 ff2c 	bl	8009912 <USBH_AllocPipe>
 8007aba:	4603      	mov	r3, r0
 8007abc:	461a      	mov	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	7819      	ldrb	r1, [r3, #0]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	7858      	ldrb	r0, [r3, #1]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	8952      	ldrh	r2, [r2, #10]
 8007ada:	9202      	str	r2, [sp, #8]
 8007adc:	2203      	movs	r2, #3
 8007ade:	9201      	str	r2, [sp, #4]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fee4 	bl	80098b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2200      	movs	r2, #0
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 f9f3 	bl	8009ee0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007afa:	2300      	movs	r3, #0
 8007afc:	2200      	movs	r2, #0
 8007afe:	210a      	movs	r1, #10
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fbeb 	bl	80082dc <USBH_FindInterface>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
 8007b0c:	2bff      	cmp	r3, #255	; 0xff
 8007b0e:	d002      	beq.n	8007b16 <USBH_CDC_InterfaceInit+0x11a>
 8007b10:	7bfb      	ldrb	r3, [r7, #15]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d901      	bls.n	8007b1a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b16:	2302      	movs	r3, #2
 8007b18:	e0c2      	b.n	8007ca0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	211a      	movs	r1, #26
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	4413      	add	r3, r2
 8007b26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da16      	bge.n	8007b60 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	211a      	movs	r1, #26
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	211a      	movs	r1, #26
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007b58:	881a      	ldrh	r2, [r3, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	835a      	strh	r2, [r3, #26]
 8007b5e:	e015      	b.n	8007b8c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	211a      	movs	r1, #26
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	211a      	movs	r1, #26
 8007b7c:	fb01 f303 	mul.w	r3, r1, r3
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007b86:	881a      	ldrh	r2, [r3, #0]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	211a      	movs	r1, #26
 8007b92:	fb01 f303 	mul.w	r3, r1, r3
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b25b      	sxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	da16      	bge.n	8007bd2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	211a      	movs	r1, #26
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	4413      	add	r3, r2
 8007bb0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007bb4:	781a      	ldrb	r2, [r3, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	211a      	movs	r1, #26
 8007bc0:	fb01 f303 	mul.w	r3, r1, r3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007bca:	881a      	ldrh	r2, [r3, #0]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	835a      	strh	r2, [r3, #26]
 8007bd0:	e015      	b.n	8007bfe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	211a      	movs	r1, #26
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
 8007bdc:	4413      	add	r3, r2
 8007bde:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	211a      	movs	r1, #26
 8007bee:	fb01 f303 	mul.w	r3, r1, r3
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007bf8:	881a      	ldrh	r2, [r3, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	7b9b      	ldrb	r3, [r3, #14]
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fe84 	bl	8009912 <USBH_AllocPipe>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	7bdb      	ldrb	r3, [r3, #15]
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 fe7a 	bl	8009912 <USBH_AllocPipe>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	461a      	mov	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	7b59      	ldrb	r1, [r3, #13]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	7b98      	ldrb	r0, [r3, #14]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	8b12      	ldrh	r2, [r2, #24]
 8007c3e:	9202      	str	r2, [sp, #8]
 8007c40:	2202      	movs	r2, #2
 8007c42:	9201      	str	r2, [sp, #4]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	4623      	mov	r3, r4
 8007c48:	4602      	mov	r2, r0
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fe32 	bl	80098b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	7b19      	ldrb	r1, [r3, #12]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	7bd8      	ldrb	r0, [r3, #15]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	8b52      	ldrh	r2, [r2, #26]
 8007c68:	9202      	str	r2, [sp, #8]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	9201      	str	r2, [sp, #4]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	4623      	mov	r3, r4
 8007c72:	4602      	mov	r2, r0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 fe1d 	bl	80098b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	7b5b      	ldrb	r3, [r3, #13]
 8007c86:	2200      	movs	r2, #0
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f002 f928 	bl	8009ee0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	7b1b      	ldrb	r3, [r3, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f002 f921 	bl	8009ee0 <USBH_LL_SetToggle>

  return USBH_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}

08007ca8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00e      	beq.n	8007ce0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fe12 	bl	80098f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fe3d 	bl	8009954 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	7b1b      	ldrb	r3, [r3, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00e      	beq.n	8007d06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	7b1b      	ldrb	r3, [r3, #12]
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 fdff 	bl	80098f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	7b1b      	ldrb	r3, [r3, #12]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 fe2a 	bl	8009954 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	7b5b      	ldrb	r3, [r3, #13]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00e      	beq.n	8007d2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	7b5b      	ldrb	r3, [r3, #13]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f001 fdec 	bl	80098f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	7b5b      	ldrb	r3, [r3, #13]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f001 fe17 	bl	8009954 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f002 f983 	bl	800a04c <free>
    phost->pActiveClass->pData = 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3340      	adds	r3, #64	; 0x40
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8b1 	bl	8007eda <GetLineCoding>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d88:	2102      	movs	r1, #2
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d877      	bhi.n	8007eac <USBH_CDC_Process+0x114>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <USBH_CDC_Process+0x2c>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007ddf 	.word	0x08007ddf
 8007dcc:	08007e0f 	.word	0x08007e0f
 8007dd0:	08007e83 	.word	0x08007e83
 8007dd4:	08007e91 	.word	0x08007e91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
      break;
 8007ddc:	e06d      	b.n	8007eba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f897 	bl	8007f18 <SetLineCoding>
 8007dea:	4603      	mov	r3, r0
 8007dec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d104      	bne.n	8007dfe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007dfc:	e058      	b.n	8007eb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d055      	beq.n	8007eb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2204      	movs	r2, #4
 8007e08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007e0c:	e050      	b.n	8007eb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	3340      	adds	r3, #64	; 0x40
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f860 	bl	8007eda <GetLineCoding>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d126      	bne.n	8007e72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e36:	791b      	ldrb	r3, [r3, #4]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d13b      	bne.n	8007eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d133      	bne.n	8007eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d12b      	bne.n	8007eb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d124      	bne.n	8007eb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f958 	bl	8008120 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e70:	e020      	b.n	8007eb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007e72:	7bbb      	ldrb	r3, [r7, #14]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d01d      	beq.n	8007eb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007e80:	e018      	b.n	8007eb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f867 	bl	8007f56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f8da 	bl	8008042 <CDC_ProcessReception>
      break;
 8007e8e:	e014      	b.n	8007eba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007e90:	2100      	movs	r1, #0
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 ffef 	bl	8008e76 <USBH_ClrFeature>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10a      	bne.n	8007eb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007eaa:	e005      	b.n	8007eb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8007eac:	bf00      	nop
 8007eae:	e004      	b.n	8007eba <USBH_CDC_Process+0x122>
      break;
 8007eb0:	bf00      	nop
 8007eb2:	e002      	b.n	8007eba <USBH_CDC_Process+0x122>
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e000      	b.n	8007eba <USBH_CDC_Process+0x122>
      break;
 8007eb8:	bf00      	nop

  }

  return status;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	22a1      	movs	r2, #161	; 0xa1
 8007ee8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2221      	movs	r2, #33	; 0x21
 8007eee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2207      	movs	r2, #7
 8007f00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2207      	movs	r2, #7
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fa81 	bl	8009410 <USBH_CtlReq>
 8007f0e:	4603      	mov	r3, r0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2221      	movs	r2, #33	; 0x21
 8007f26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2207      	movs	r2, #7
 8007f3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2207      	movs	r2, #7
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fa62 	bl	8009410 <USBH_CtlReq>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af02      	add	r7, sp, #8
 8007f5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d002      	beq.n	8007f7c <CDC_ProcessTransmission+0x26>
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d023      	beq.n	8007fc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007f7a:	e05e      	b.n	800803a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	8b12      	ldrh	r2, [r2, #24]
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d90b      	bls.n	8007fa0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	69d9      	ldr	r1, [r3, #28]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8b1a      	ldrh	r2, [r3, #24]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	7b5b      	ldrb	r3, [r3, #13]
 8007f94:	2001      	movs	r0, #1
 8007f96:	9000      	str	r0, [sp, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fc48 	bl	800982e <USBH_BulkSendData>
 8007f9e:	e00b      	b.n	8007fb8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	7b5b      	ldrb	r3, [r3, #13]
 8007fae:	2001      	movs	r0, #1
 8007fb0:	9000      	str	r0, [sp, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fc3b 	bl	800982e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007fc0:	e03b      	b.n	800803a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	7b5b      	ldrb	r3, [r3, #13]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 ff5f 	bl	8009e8c <USBH_LL_GetURBState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007fd2:	7afb      	ldrb	r3, [r7, #11]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d128      	bne.n	800802a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	8b12      	ldrh	r2, [r2, #24]
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d90e      	bls.n	8008002 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	8b12      	ldrh	r2, [r2, #24]
 8007fec:	1a9a      	subs	r2, r3, r2
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	8b12      	ldrh	r2, [r2, #24]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	61da      	str	r2, [r3, #28]
 8008000:	e002      	b.n	8008008 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	d004      	beq.n	800801a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008018:	e00e      	b.n	8008038 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f868 	bl	80080f8 <USBH_CDC_TransmitCallback>
      break;
 8008028:	e006      	b.n	8008038 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800802a:	7afb      	ldrb	r3, [r7, #11]
 800802c:	2b02      	cmp	r3, #2
 800802e:	d103      	bne.n	8008038 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008038:	bf00      	nop
  }
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b086      	sub	sp, #24
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008054:	2300      	movs	r3, #0
 8008056:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800805e:	2b03      	cmp	r3, #3
 8008060:	d002      	beq.n	8008068 <CDC_ProcessReception+0x26>
 8008062:	2b04      	cmp	r3, #4
 8008064:	d00e      	beq.n	8008084 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008066:	e043      	b.n	80080f0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	6a19      	ldr	r1, [r3, #32]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	8b5a      	ldrh	r2, [r3, #26]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	7b1b      	ldrb	r3, [r3, #12]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 fbff 	bl	8009878 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2204      	movs	r2, #4
 800807e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008082:	e035      	b.n	80080f0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	7b1b      	ldrb	r3, [r3, #12]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fefe 	bl	8009e8c <USBH_LL_GetURBState>
 8008090:	4603      	mov	r3, r0
 8008092:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008094:	7cfb      	ldrb	r3, [r7, #19]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d129      	bne.n	80080ee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	7b1b      	ldrb	r3, [r3, #12]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 fe61 	bl	8009d68 <USBH_LL_GetLastXferSize>
 80080a6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d016      	beq.n	80080e0 <CDC_ProcessReception+0x9e>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	8b5b      	ldrh	r3, [r3, #26]
 80080b6:	461a      	mov	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d910      	bls.n	80080e0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	6a1a      	ldr	r2, [r3, #32]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	441a      	add	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2203      	movs	r2, #3
 80080da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80080de:	e006      	b.n	80080ee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f80f 	bl	800810c <USBH_CDC_ReceiveCallback>
      break;
 80080ee:	bf00      	nop
  }
}
 80080f0:	bf00      	nop
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008148:	2302      	movs	r3, #2
 800814a:	e029      	b.n	80081a0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	79fa      	ldrb	r2, [r7, #7]
 8008150:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f81f 	bl	80081a8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f001 fd31 	bl	8009c00 <USBH_LL_Init>

  return USBH_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e009      	b.n	80081ce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	33e0      	adds	r3, #224	; 0xe0
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	2200      	movs	r2, #0
 80081c6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b0f      	cmp	r3, #15
 80081d2:	d9f2      	bls.n	80081ba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e009      	b.n	80081ee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4413      	add	r3, r2
 80081e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081e4:	2200      	movs	r2, #0
 80081e6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081f4:	d3f1      	bcc.n	80081da <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2240      	movs	r2, #64	; 0x40
 800821a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d016      	beq.n	8008292 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10e      	bne.n	800828c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008274:	1c59      	adds	r1, r3, #1
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	33de      	adds	r3, #222	; 0xde
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
 800828a:	e004      	b.n	8008296 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800828c:	2302      	movs	r3, #2
 800828e:	73fb      	strb	r3, [r7, #15]
 8008290:	e001      	b.n	8008296 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d204      	bcs.n	80082ca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	78fa      	ldrb	r2, [r7, #3]
 80082c4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80082c8:	e001      	b.n	80082ce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80082ca:	2302      	movs	r3, #2
 80082cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	70fb      	strb	r3, [r7, #3]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70bb      	strb	r3, [r7, #2]
 80082f2:	4613      	mov	r3, r2
 80082f4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008304:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008306:	e025      	b.n	8008354 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	221a      	movs	r2, #26
 800830c:	fb02 f303 	mul.w	r3, r2, r3
 8008310:	3308      	adds	r3, #8
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	3302      	adds	r3, #2
 8008318:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	795b      	ldrb	r3, [r3, #5]
 800831e:	78fa      	ldrb	r2, [r7, #3]
 8008320:	429a      	cmp	r2, r3
 8008322:	d002      	beq.n	800832a <USBH_FindInterface+0x4e>
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2bff      	cmp	r3, #255	; 0xff
 8008328:	d111      	bne.n	800834e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800832e:	78ba      	ldrb	r2, [r7, #2]
 8008330:	429a      	cmp	r2, r3
 8008332:	d002      	beq.n	800833a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008334:	78bb      	ldrb	r3, [r7, #2]
 8008336:	2bff      	cmp	r3, #255	; 0xff
 8008338:	d109      	bne.n	800834e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800833e:	787a      	ldrb	r2, [r7, #1]
 8008340:	429a      	cmp	r2, r3
 8008342:	d002      	beq.n	800834a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008344:	787b      	ldrb	r3, [r7, #1]
 8008346:	2bff      	cmp	r3, #255	; 0xff
 8008348:	d101      	bne.n	800834e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	e006      	b.n	800835c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	3301      	adds	r3, #1
 8008352:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d9d6      	bls.n	8008308 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800835a:	23ff      	movs	r3, #255	; 0xff
}
 800835c:	4618      	mov	r0, r3
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fc81 	bl	8009c78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008376:	2101      	movs	r1, #1
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fd9a 	bl	8009eb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af04      	add	r7, sp, #16
 800838e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008390:	2302      	movs	r3, #2
 8008392:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d102      	bne.n	80083aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2203      	movs	r2, #3
 80083a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b0b      	cmp	r3, #11
 80083b2:	f200 81be 	bhi.w	8008732 <USBH_Process+0x3aa>
 80083b6:	a201      	add	r2, pc, #4	; (adr r2, 80083bc <USBH_Process+0x34>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	080083ed 	.word	0x080083ed
 80083c0:	0800841f 	.word	0x0800841f
 80083c4:	08008487 	.word	0x08008487
 80083c8:	080086cd 	.word	0x080086cd
 80083cc:	08008733 	.word	0x08008733
 80083d0:	0800852b 	.word	0x0800852b
 80083d4:	08008673 	.word	0x08008673
 80083d8:	08008561 	.word	0x08008561
 80083dc:	08008581 	.word	0x08008581
 80083e0:	080085a1 	.word	0x080085a1
 80083e4:	080085e5 	.word	0x080085e5
 80083e8:	080086b5 	.word	0x080086b5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 819e 	beq.w	8008736 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008400:	20c8      	movs	r0, #200	; 0xc8
 8008402:	f001 fd9d 	bl	8009f40 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f001 fc93 	bl	8009d32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800841c:	e18b      	b.n	8008736 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008424:	2b01      	cmp	r3, #1
 8008426:	d107      	bne.n	8008438 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008436:	e18d      	b.n	8008754 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800843e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008442:	d914      	bls.n	800846e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800844a:	3301      	adds	r3, #1
 800844c:	b2da      	uxtb	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800845a:	2b03      	cmp	r3, #3
 800845c:	d903      	bls.n	8008466 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	220d      	movs	r2, #13
 8008462:	701a      	strb	r2, [r3, #0]
      break;
 8008464:	e176      	b.n	8008754 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	701a      	strb	r2, [r3, #0]
      break;
 800846c:	e172      	b.n	8008754 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008474:	f103 020a 	add.w	r2, r3, #10
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800847e:	200a      	movs	r0, #10
 8008480:	f001 fd5e 	bl	8009f40 <USBH_Delay>
      break;
 8008484:	e166      	b.n	8008754 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008496:	2104      	movs	r1, #4
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800849c:	2064      	movs	r0, #100	; 0x64
 800849e:	f001 fd4f 	bl	8009f40 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fc1e 	bl	8009ce4 <USBH_LL_GetSpeed>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2205      	movs	r2, #5
 80084b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80084b8:	2100      	movs	r1, #0
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f001 fa29 	bl	8009912 <USBH_AllocPipe>
 80084c0:	4603      	mov	r3, r0
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80084c8:	2180      	movs	r1, #128	; 0x80
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 fa21 	bl	8009912 <USBH_AllocPipe>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7919      	ldrb	r1, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80084ec:	b292      	uxth	r2, r2
 80084ee:	9202      	str	r2, [sp, #8]
 80084f0:	2200      	movs	r2, #0
 80084f2:	9201      	str	r2, [sp, #4]
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4603      	mov	r3, r0
 80084f8:	2280      	movs	r2, #128	; 0x80
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 f9da 	bl	80098b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7959      	ldrb	r1, [r3, #5]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008514:	b292      	uxth	r2, r2
 8008516:	9202      	str	r2, [sp, #8]
 8008518:	2200      	movs	r2, #0
 800851a:	9201      	str	r2, [sp, #4]
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4603      	mov	r3, r0
 8008520:	2200      	movs	r2, #0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 f9c6 	bl	80098b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008528:	e114      	b.n	8008754 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f918 	bl	8008760 <USBH_HandleEnum>
 8008530:	4603      	mov	r3, r0
 8008532:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 80fe 	bne.w	800873a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800854c:	2b01      	cmp	r3, #1
 800854e:	d103      	bne.n	8008558 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2208      	movs	r2, #8
 8008554:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008556:	e0f0      	b.n	800873a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2207      	movs	r2, #7
 800855c:	701a      	strb	r2, [r3, #0]
      break;
 800855e:	e0ec      	b.n	800873a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80e9 	beq.w	800873e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008572:	2101      	movs	r1, #1
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2208      	movs	r2, #8
 800857c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800857e:	e0de      	b.n	800873e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008586:	b29b      	uxth	r3, r3
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fc2c 	bl	8008de8 <USBH_SetCfg>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 80d5 	bne.w	8008742 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2209      	movs	r2, #9
 800859c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800859e:	e0d0      	b.n	8008742 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d016      	beq.n	80085dc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80085ae:	2101      	movs	r1, #1
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fc3c 	bl	8008e2e <USBH_SetFeature>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220a      	movs	r2, #10
 80085c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085c8:	e0bd      	b.n	8008746 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	f040 80b9 	bne.w	8008746 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	220a      	movs	r2, #10
 80085d8:	701a      	strb	r2, [r3, #0]
      break;
 80085da:	e0b4      	b.n	8008746 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	220a      	movs	r2, #10
 80085e0:	701a      	strb	r2, [r3, #0]
      break;
 80085e2:	e0b0      	b.n	8008746 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 80ad 	beq.w	800874a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
 80085fc:	e016      	b.n	800862c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80085fe:	7bfa      	ldrb	r2, [r7, #15]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	32de      	adds	r2, #222	; 0xde
 8008604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008608:	791a      	ldrb	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008610:	429a      	cmp	r2, r3
 8008612:	d108      	bne.n	8008626 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	32de      	adds	r2, #222	; 0xde
 800861a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008624:	e005      	b.n	8008632 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	3301      	adds	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d0e5      	beq.n	80085fe <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d016      	beq.n	800866a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d109      	bne.n	8008662 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2206      	movs	r2, #6
 8008652:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800865a:	2103      	movs	r1, #3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008660:	e073      	b.n	800874a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220d      	movs	r2, #13
 8008666:	701a      	strb	r2, [r3, #0]
      break;
 8008668:	e06f      	b.n	800874a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	220d      	movs	r2, #13
 800866e:	701a      	strb	r2, [r3, #0]
      break;
 8008670:	e06b      	b.n	800874a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d017      	beq.n	80086ac <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4798      	blx	r3
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d103      	bne.n	800869c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	220b      	movs	r2, #11
 8008698:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800869a:	e058      	b.n	800874e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d154      	bne.n	800874e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	220d      	movs	r2, #13
 80086a8:	701a      	strb	r2, [r3, #0]
      break;
 80086aa:	e050      	b.n	800874e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	220d      	movs	r2, #13
 80086b0:	701a      	strb	r2, [r3, #0]
      break;
 80086b2:	e04c      	b.n	800874e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d049      	beq.n	8008752 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
      }
      break;
 80086ca:	e042      	b.n	8008752 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fd67 	bl	80081a8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d009      	beq.n	80086f8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008708:	2105      	movs	r1, #5
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b01      	cmp	r3, #1
 8008718:	d107      	bne.n	800872a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7ff fe20 	bl	8008368 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008728:	e014      	b.n	8008754 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 faa4 	bl	8009c78 <USBH_LL_Start>
      break;
 8008730:	e010      	b.n	8008754 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008732:	bf00      	nop
 8008734:	e00e      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 8008736:	bf00      	nop
 8008738:	e00c      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 800873a:	bf00      	nop
 800873c:	e00a      	b.n	8008754 <USBH_Process+0x3cc>
    break;
 800873e:	bf00      	nop
 8008740:	e008      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 8008742:	bf00      	nop
 8008744:	e006      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 8008746:	bf00      	nop
 8008748:	e004      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 800874a:	bf00      	nop
 800874c:	e002      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <USBH_Process+0x3cc>
      break;
 8008752:	bf00      	nop
  }
  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop

08008760 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af04      	add	r7, sp, #16
 8008766:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008768:	2301      	movs	r3, #1
 800876a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800876c:	2301      	movs	r3, #1
 800876e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	785b      	ldrb	r3, [r3, #1]
 8008774:	2b07      	cmp	r3, #7
 8008776:	f200 81c1 	bhi.w	8008afc <USBH_HandleEnum+0x39c>
 800877a:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <USBH_HandleEnum+0x20>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	080087a1 	.word	0x080087a1
 8008784:	0800885f 	.word	0x0800885f
 8008788:	080088c9 	.word	0x080088c9
 800878c:	08008957 	.word	0x08008957
 8008790:	080089c1 	.word	0x080089c1
 8008794:	08008a31 	.word	0x08008a31
 8008798:	08008a77 	.word	0x08008a77
 800879c:	08008abd 	.word	0x08008abd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80087a0:	2108      	movs	r1, #8
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fa50 	bl	8008c48 <USBH_Get_DevDesc>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d130      	bne.n	8008814 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7919      	ldrb	r1, [r3, #4]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80087d6:	b292      	uxth	r2, r2
 80087d8:	9202      	str	r2, [sp, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	9201      	str	r2, [sp, #4]
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4603      	mov	r3, r0
 80087e2:	2280      	movs	r2, #128	; 0x80
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 f865 	bl	80098b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7959      	ldrb	r1, [r3, #5]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087fe:	b292      	uxth	r2, r2
 8008800:	9202      	str	r2, [sp, #8]
 8008802:	2200      	movs	r2, #0
 8008804:	9201      	str	r2, [sp, #4]
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	4603      	mov	r3, r0
 800880a:	2200      	movs	r2, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f001 f851 	bl	80098b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008812:	e175      	b.n	8008b00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	2b03      	cmp	r3, #3
 8008818:	f040 8172 	bne.w	8008b00 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008822:	3301      	adds	r3, #1
 8008824:	b2da      	uxtb	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008832:	2b03      	cmp	r3, #3
 8008834:	d903      	bls.n	800883e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	220d      	movs	r2, #13
 800883a:	701a      	strb	r2, [r3, #0]
      break;
 800883c:	e160      	b.n	8008b00 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	795b      	ldrb	r3, [r3, #5]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f001 f885 	bl	8009954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	791b      	ldrb	r3, [r3, #4]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f87f 	bl	8009954 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
      break;
 800885c:	e150      	b.n	8008b00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800885e:	2112      	movs	r1, #18
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f9f1 	bl	8008c48 <USBH_Get_DevDesc>
 8008866:	4603      	mov	r3, r0
 8008868:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800886a:	7bbb      	ldrb	r3, [r7, #14]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d103      	bne.n	8008878 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008876:	e145      	b.n	8008b04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b03      	cmp	r3, #3
 800887c:	f040 8142 	bne.w	8008b04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008886:	3301      	adds	r3, #1
 8008888:	b2da      	uxtb	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008896:	2b03      	cmp	r3, #3
 8008898:	d903      	bls.n	80088a2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	220d      	movs	r2, #13
 800889e:	701a      	strb	r2, [r3, #0]
      break;
 80088a0:	e130      	b.n	8008b04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	795b      	ldrb	r3, [r3, #5]
 80088a6:	4619      	mov	r1, r3
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 f853 	bl	8009954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	791b      	ldrb	r3, [r3, #4]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f001 f84d 	bl	8009954 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
      break;
 80088c6:	e11d      	b.n	8008b04 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80088c8:	2101      	movs	r1, #1
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa68 	bl	8008da0 <USBH_SetAddress>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088d4:	7bbb      	ldrb	r3, [r7, #14]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d132      	bne.n	8008940 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80088da:	2002      	movs	r0, #2
 80088dc:	f001 fb30 	bl	8009f40 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2203      	movs	r2, #3
 80088ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7919      	ldrb	r1, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008902:	b292      	uxth	r2, r2
 8008904:	9202      	str	r2, [sp, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	9201      	str	r2, [sp, #4]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	4603      	mov	r3, r0
 800890e:	2280      	movs	r2, #128	; 0x80
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 ffcf 	bl	80098b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7959      	ldrb	r1, [r3, #5]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800892a:	b292      	uxth	r2, r2
 800892c:	9202      	str	r2, [sp, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	9201      	str	r2, [sp, #4]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	4603      	mov	r3, r0
 8008936:	2200      	movs	r2, #0
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 ffbb 	bl	80098b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800893e:	e0e3      	b.n	8008b08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b03      	cmp	r3, #3
 8008944:	f040 80e0 	bne.w	8008b08 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	220d      	movs	r2, #13
 800894c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	705a      	strb	r2, [r3, #1]
      break;
 8008954:	e0d8      	b.n	8008b08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008956:	2109      	movs	r1, #9
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f99d 	bl	8008c98 <USBH_Get_CfgDesc>
 800895e:	4603      	mov	r3, r0
 8008960:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d103      	bne.n	8008970 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2204      	movs	r2, #4
 800896c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800896e:	e0cd      	b.n	8008b0c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b03      	cmp	r3, #3
 8008974:	f040 80ca 	bne.w	8008b0c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800897e:	3301      	adds	r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800898e:	2b03      	cmp	r3, #3
 8008990:	d903      	bls.n	800899a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	220d      	movs	r2, #13
 8008996:	701a      	strb	r2, [r3, #0]
      break;
 8008998:	e0b8      	b.n	8008b0c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	795b      	ldrb	r3, [r3, #5]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 ffd7 	bl	8009954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	791b      	ldrb	r3, [r3, #4]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 ffd1 	bl	8009954 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	701a      	strb	r2, [r3, #0]
      break;
 80089be:	e0a5      	b.n	8008b0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f965 	bl	8008c98 <USBH_Get_CfgDesc>
 80089ce:	4603      	mov	r3, r0
 80089d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d103      	bne.n	80089e0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2205      	movs	r2, #5
 80089dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089de:	e097      	b.n	8008b10 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	f040 8094 	bne.w	8008b10 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089ee:	3301      	adds	r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d903      	bls.n	8008a0a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	220d      	movs	r2, #13
 8008a06:	701a      	strb	r2, [r3, #0]
      break;
 8008a08:	e082      	b.n	8008b10 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	795b      	ldrb	r3, [r3, #5]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 ff9f 	bl	8009954 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	791b      	ldrb	r3, [r3, #4]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 ff99 	bl	8009954 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
      break;
 8008a2e:	e06f      	b.n	8008b10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d019      	beq.n	8008a6e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008a46:	23ff      	movs	r3, #255	; 0xff
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f949 	bl	8008ce0 <USBH_Get_StringDesc>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d103      	bne.n	8008a60 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2206      	movs	r2, #6
 8008a5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a5e:	e059      	b.n	8008b14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d156      	bne.n	8008b14 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2206      	movs	r2, #6
 8008a6a:	705a      	strb	r2, [r3, #1]
      break;
 8008a6c:	e052      	b.n	8008b14 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2206      	movs	r2, #6
 8008a72:	705a      	strb	r2, [r3, #1]
      break;
 8008a74:	e04e      	b.n	8008b14 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d019      	beq.n	8008ab4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008a8c:	23ff      	movs	r3, #255	; 0xff
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f926 	bl	8008ce0 <USBH_Get_StringDesc>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008aa4:	e038      	b.n	8008b18 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d135      	bne.n	8008b18 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2207      	movs	r2, #7
 8008ab0:	705a      	strb	r2, [r3, #1]
      break;
 8008ab2:	e031      	b.n	8008b18 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2207      	movs	r2, #7
 8008ab8:	705a      	strb	r2, [r3, #1]
      break;
 8008aba:	e02d      	b.n	8008b18 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d017      	beq.n	8008af6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ad2:	23ff      	movs	r3, #255	; 0xff
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 f903 	bl	8008ce0 <USBH_Get_StringDesc>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ade:	7bbb      	ldrb	r3, [r7, #14]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d102      	bne.n	8008aea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ae8:	e018      	b.n	8008b1c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d115      	bne.n	8008b1c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73fb      	strb	r3, [r7, #15]
      break;
 8008af4:	e012      	b.n	8008b1c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	73fb      	strb	r3, [r7, #15]
      break;
 8008afa:	e00f      	b.n	8008b1c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008afc:	bf00      	nop
 8008afe:	e00e      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b00:	bf00      	nop
 8008b02:	e00c      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b04:	bf00      	nop
 8008b06:	e00a      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e008      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e006      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b10:	bf00      	nop
 8008b12:	e004      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b14:	bf00      	nop
 8008b16:	e002      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b18:	bf00      	nop
 8008b1a:	e000      	b.n	8008b1e <USBH_HandleEnum+0x3be>
      break;
 8008b1c:	bf00      	nop
  }
  return Status;
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f804 	bl	8008b6a <USBH_HandleSof>
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b0b      	cmp	r3, #11
 8008b7a:	d10a      	bne.n	8008b92 <USBH_HandleSof+0x28>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
  }
}
 8008b92:	bf00      	nop
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008baa:	bf00      	nop
}
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008bc6:	bf00      	nop
}
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b083      	sub	sp, #12
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f844 	bl	8009cae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	791b      	ldrb	r3, [r3, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fe91 	bl	8009954 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	795b      	ldrb	r3, [r3, #5]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fe8b 	bl	8009954 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4613      	mov	r3, r2
 8008c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c66:	2100      	movs	r1, #0
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f864 	bl	8008d36 <USBH_GetDescriptor>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10a      	bne.n	8008c8e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c84:	78fa      	ldrb	r2, [r7, #3]
 8008c86:	b292      	uxth	r2, r2
 8008c88:	4619      	mov	r1, r3
 8008c8a:	f000 f918 	bl	8008ebe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af02      	add	r7, sp, #8
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	331c      	adds	r3, #28
 8008ca8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008caa:	887b      	ldrh	r3, [r7, #2]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f83d 	bl	8008d36 <USBH_GetDescriptor>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d107      	bne.n	8008cd6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008cc6:	887b      	ldrh	r3, [r7, #2]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f987 	bl	8008fe0 <USBH_ParseCfgDesc>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	607a      	str	r2, [r7, #4]
 8008cea:	461a      	mov	r2, r3
 8008cec:	460b      	mov	r3, r1
 8008cee:	72fb      	strb	r3, [r7, #11]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008cf4:	7afb      	ldrb	r3, [r7, #11]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008cfc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008d04:	893b      	ldrh	r3, [r7, #8]
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f812 	bl	8008d36 <USBH_GetDescriptor>
 8008d12:	4603      	mov	r3, r0
 8008d14:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d107      	bne.n	8008d2c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d22:	893a      	ldrh	r2, [r7, #8]
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fb24 	bl	8009374 <USBH_ParseStringDesc>
  }

  return status;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	607b      	str	r3, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	72fb      	strb	r3, [r7, #11]
 8008d44:	4613      	mov	r3, r2
 8008d46:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	789b      	ldrb	r3, [r3, #2]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d11c      	bne.n	8008d8a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2206      	movs	r2, #6
 8008d60:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	893a      	ldrh	r2, [r7, #8]
 8008d66:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008d68:	893b      	ldrh	r3, [r7, #8]
 8008d6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d72:	d104      	bne.n	8008d7e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f240 4209 	movw	r2, #1033	; 0x409
 8008d7a:	829a      	strh	r2, [r3, #20]
 8008d7c:	e002      	b.n	8008d84 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8b3a      	ldrh	r2, [r7, #24]
 8008d88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008d8a:	8b3b      	ldrh	r3, [r7, #24]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fb3d 	bl	8009410 <USBH_CtlReq>
 8008d96:	4603      	mov	r3, r0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	789b      	ldrb	r3, [r3, #2]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d10f      	bne.n	8008dd4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2205      	movs	r2, #5
 8008dbe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb19 	bl	8009410 <USBH_CtlReq>
 8008dde:	4603      	mov	r3, r0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	789b      	ldrb	r3, [r3, #2]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d10e      	bne.n	8008e1a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2209      	movs	r2, #9
 8008e06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	887a      	ldrh	r2, [r7, #2]
 8008e0c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 faf6 	bl	8009410 <USBH_CtlReq>
 8008e24:	4603      	mov	r3, r0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	460b      	mov	r3, r1
 8008e38:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	789b      	ldrb	r3, [r3, #2]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10f      	bne.n	8008e62 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e62:	2200      	movs	r2, #0
 8008e64:	2100      	movs	r1, #0
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fad2 	bl	8009410 <USBH_CtlReq>
 8008e6c:	4603      	mov	r3, r0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	789b      	ldrb	r3, [r3, #2]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d10f      	bne.n	8008eaa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008e9c:	78fb      	ldrb	r3, [r7, #3]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 faae 	bl	8009410 <USBH_CtlReq>
 8008eb4:	4603      	mov	r3, r0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b085      	sub	sp, #20
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	785a      	ldrb	r2, [r3, #1]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	3302      	adds	r3, #2
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	3303      	adds	r3, #3
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	791a      	ldrb	r2, [r3, #4]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	795a      	ldrb	r2, [r3, #5]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	799a      	ldrb	r2, [r3, #6]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	79da      	ldrb	r2, [r3, #7]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	79db      	ldrb	r3, [r3, #7]
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	dc11      	bgt.n	8008f44 <USBH_ParseDevDesc+0x86>
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	db16      	blt.n	8008f52 <USBH_ParseDevDesc+0x94>
 8008f24:	3b08      	subs	r3, #8
 8008f26:	2201      	movs	r2, #1
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bf14      	ite	ne
 8008f38:	2301      	movne	r3, #1
 8008f3a:	2300      	moveq	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d102      	bne.n	8008f48 <USBH_ParseDevDesc+0x8a>
 8008f42:	e006      	b.n	8008f52 <USBH_ParseDevDesc+0x94>
 8008f44:	2b40      	cmp	r3, #64	; 0x40
 8008f46:	d104      	bne.n	8008f52 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	79da      	ldrb	r2, [r3, #7]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	71da      	strb	r2, [r3, #7]
      break;
 8008f50:	e003      	b.n	8008f5a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2240      	movs	r2, #64	; 0x40
 8008f56:	71da      	strb	r2, [r3, #7]
      break;
 8008f58:	bf00      	nop
  }

  if (length > 8U)
 8008f5a:	88fb      	ldrh	r3, [r7, #6]
 8008f5c:	2b08      	cmp	r3, #8
 8008f5e:	d939      	bls.n	8008fd4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	3308      	adds	r3, #8
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	3309      	adds	r3, #9
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	021b      	lsls	r3, r3, #8
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	330a      	adds	r3, #10
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	330b      	adds	r3, #11
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	330d      	adds	r3, #13
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	4313      	orrs	r3, r2
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	7b9a      	ldrb	r2, [r3, #14]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	7bda      	ldrb	r2, [r3, #15]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	7c1a      	ldrb	r2, [r3, #16]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	7c5a      	ldrb	r2, [r3, #17]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	745a      	strb	r2, [r3, #17]
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08c      	sub	sp, #48	; 0x30
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ff4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009000:	2300      	movs	r3, #0
 8009002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	785a      	ldrb	r2, [r3, #1]
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	3302      	adds	r3, #2
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	b29a      	uxth	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	3303      	adds	r3, #3
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	b29b      	uxth	r3, r3
 8009034:	4313      	orrs	r3, r2
 8009036:	b29b      	uxth	r3, r3
 8009038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800903c:	bf28      	it	cs
 800903e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009042:	b29a      	uxth	r2, r3
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	791a      	ldrb	r2, [r3, #4]
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	795a      	ldrb	r2, [r3, #5]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	799a      	ldrb	r2, [r3, #6]
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	79da      	ldrb	r2, [r3, #7]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	7a1a      	ldrb	r2, [r3, #8]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b09      	cmp	r3, #9
 8009076:	d002      	beq.n	800907e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	2209      	movs	r2, #9
 800907c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	2b09      	cmp	r3, #9
 8009082:	f240 809d 	bls.w	80091c0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009086:	2309      	movs	r3, #9
 8009088:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800908e:	e081      	b.n	8009194 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009090:	f107 0316 	add.w	r3, r7, #22
 8009094:	4619      	mov	r1, r3
 8009096:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009098:	f000 f99f 	bl	80093da <USBH_GetNextDesc>
 800909c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	785b      	ldrb	r3, [r3, #1]
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d176      	bne.n	8009194 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	2b09      	cmp	r3, #9
 80090ac:	d002      	beq.n	80090b4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	2209      	movs	r2, #9
 80090b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80090b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090b8:	221a      	movs	r2, #26
 80090ba:	fb02 f303 	mul.w	r3, r2, r3
 80090be:	3308      	adds	r3, #8
 80090c0:	6a3a      	ldr	r2, [r7, #32]
 80090c2:	4413      	add	r3, r2
 80090c4:	3302      	adds	r3, #2
 80090c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80090c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ca:	69f8      	ldr	r0, [r7, #28]
 80090cc:	f000 f87e 	bl	80091cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090da:	e043      	b.n	8009164 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80090dc:	f107 0316 	add.w	r3, r7, #22
 80090e0:	4619      	mov	r1, r3
 80090e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090e4:	f000 f979 	bl	80093da <USBH_GetNextDesc>
 80090e8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	785b      	ldrb	r3, [r3, #1]
 80090ee:	2b05      	cmp	r3, #5
 80090f0:	d138      	bne.n	8009164 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	795b      	ldrb	r3, [r3, #5]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d10f      	bne.n	800911a <USBH_ParseCfgDesc+0x13a>
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	799b      	ldrb	r3, [r3, #6]
 80090fe:	2b02      	cmp	r3, #2
 8009100:	d10b      	bne.n	800911a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	79db      	ldrb	r3, [r3, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10f      	bne.n	800912a <USBH_ParseCfgDesc+0x14a>
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b09      	cmp	r3, #9
 8009110:	d00b      	beq.n	800912a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009114:	2209      	movs	r2, #9
 8009116:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009118:	e007      	b.n	800912a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b07      	cmp	r3, #7
 8009120:	d004      	beq.n	800912c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	2207      	movs	r2, #7
 8009126:	701a      	strb	r2, [r3, #0]
 8009128:	e000      	b.n	800912c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800912a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009130:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009134:	3201      	adds	r2, #1
 8009136:	00d2      	lsls	r2, r2, #3
 8009138:	211a      	movs	r1, #26
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	4413      	add	r3, r2
 8009140:	3308      	adds	r3, #8
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	4413      	add	r3, r2
 8009146:	3304      	adds	r3, #4
 8009148:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800914a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800914c:	69b9      	ldr	r1, [r7, #24]
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f86b 	bl	800922a <USBH_ParseEPDesc>
 8009154:	4603      	mov	r3, r0
 8009156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800915a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800915e:	3301      	adds	r3, #1
 8009160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800916c:	429a      	cmp	r2, r3
 800916e:	d204      	bcs.n	800917a <USBH_ParseCfgDesc+0x19a>
 8009170:	6a3b      	ldr	r3, [r7, #32]
 8009172:	885a      	ldrh	r2, [r3, #2]
 8009174:	8afb      	ldrh	r3, [r7, #22]
 8009176:	429a      	cmp	r2, r3
 8009178:	d8b0      	bhi.n	80090dc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	791b      	ldrb	r3, [r3, #4]
 800917e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009182:	429a      	cmp	r2, r3
 8009184:	d201      	bcs.n	800918a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009186:	2303      	movs	r3, #3
 8009188:	e01c      	b.n	80091c4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800918a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800918e:	3301      	adds	r3, #1
 8009190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009198:	2b01      	cmp	r3, #1
 800919a:	d805      	bhi.n	80091a8 <USBH_ParseCfgDesc+0x1c8>
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	885a      	ldrh	r2, [r3, #2]
 80091a0:	8afb      	ldrh	r3, [r7, #22]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	f63f af74 	bhi.w	8009090 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80091a8:	6a3b      	ldr	r3, [r7, #32]
 80091aa:	791b      	ldrb	r3, [r3, #4]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	bf28      	it	cs
 80091b0:	2302      	movcs	r3, #2
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d201      	bcs.n	80091c0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80091bc:	2303      	movs	r3, #3
 80091be:	e001      	b.n	80091c4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80091c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3730      	adds	r7, #48	; 0x30
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	785a      	ldrb	r2, [r3, #1]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	789a      	ldrb	r2, [r3, #2]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	78da      	ldrb	r2, [r3, #3]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	791a      	ldrb	r2, [r3, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	795a      	ldrb	r2, [r3, #5]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	799a      	ldrb	r2, [r3, #6]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	79da      	ldrb	r2, [r3, #7]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	7a1a      	ldrb	r2, [r3, #8]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	721a      	strb	r2, [r3, #8]
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800922a:	b480      	push	{r7}
 800922c:	b087      	sub	sp, #28
 800922e:	af00      	add	r7, sp, #0
 8009230:	60f8      	str	r0, [r7, #12]
 8009232:	60b9      	str	r1, [r7, #8]
 8009234:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	785a      	ldrb	r2, [r3, #1]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	789a      	ldrb	r2, [r3, #2]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	78da      	ldrb	r2, [r3, #3]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3304      	adds	r3, #4
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	3305      	adds	r3, #5
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	b29b      	uxth	r3, r3
 800926e:	4313      	orrs	r3, r2
 8009270:	b29a      	uxth	r2, r3
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	799a      	ldrb	r2, [r3, #6]
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	889b      	ldrh	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009286:	2303      	movs	r3, #3
 8009288:	75fb      	strb	r3, [r7, #23]
 800928a:	e033      	b.n	80092f4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	889b      	ldrh	r3, [r3, #4]
 8009290:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009294:	f023 0307 	bic.w	r3, r3, #7
 8009298:	b29a      	uxth	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	889b      	ldrh	r3, [r3, #4]
 80092a2:	b21a      	sxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	b299      	uxth	r1, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3305      	adds	r3, #5
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	430b      	orrs	r3, r1
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d110      	bne.n	80092e6 <USBH_ParseEPDesc+0xbc>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3304      	adds	r3, #4
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	b299      	uxth	r1, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3305      	adds	r3, #5
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	021b      	lsls	r3, r3, #8
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	430b      	orrs	r3, r1
 80092da:	b29b      	uxth	r3, r3
 80092dc:	b21b      	sxth	r3, r3
 80092de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092e2:	b21b      	sxth	r3, r3
 80092e4:	e001      	b.n	80092ea <USBH_ParseEPDesc+0xc0>
 80092e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092ea:	4313      	orrs	r3, r2
 80092ec:	b21b      	sxth	r3, r3
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d116      	bne.n	800932c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	78db      	ldrb	r3, [r3, #3]
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	2b01      	cmp	r3, #1
 8009308:	d005      	beq.n	8009316 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	78db      	ldrb	r3, [r3, #3]
 800930e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009312:	2b03      	cmp	r3, #3
 8009314:	d127      	bne.n	8009366 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	799b      	ldrb	r3, [r3, #6]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <USBH_ParseEPDesc+0xfc>
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	799b      	ldrb	r3, [r3, #6]
 8009322:	2b10      	cmp	r3, #16
 8009324:	d91f      	bls.n	8009366 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009326:	2303      	movs	r3, #3
 8009328:	75fb      	strb	r3, [r7, #23]
 800932a:	e01c      	b.n	8009366 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	78db      	ldrb	r3, [r3, #3]
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d10a      	bne.n	800934e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	799b      	ldrb	r3, [r3, #6]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d003      	beq.n	8009348 <USBH_ParseEPDesc+0x11e>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	799b      	ldrb	r3, [r3, #6]
 8009344:	2b10      	cmp	r3, #16
 8009346:	d90e      	bls.n	8009366 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009348:	2303      	movs	r3, #3
 800934a:	75fb      	strb	r3, [r7, #23]
 800934c:	e00b      	b.n	8009366 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	78db      	ldrb	r3, [r3, #3]
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	2b03      	cmp	r3, #3
 8009358:	d105      	bne.n	8009366 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	799b      	ldrb	r3, [r3, #6]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009362:	2303      	movs	r3, #3
 8009364:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009366:	7dfb      	ldrb	r3, [r7, #23]
}
 8009368:	4618      	mov	r0, r3
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3301      	adds	r3, #1
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b03      	cmp	r3, #3
 800938a:	d120      	bne.n	80093ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	1e9a      	subs	r2, r3, #2
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	4293      	cmp	r3, r2
 8009396:	bf28      	it	cs
 8009398:	4613      	movcs	r3, r2
 800939a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3302      	adds	r3, #2
 80093a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80093a2:	2300      	movs	r3, #0
 80093a4:	82fb      	strh	r3, [r7, #22]
 80093a6:	e00b      	b.n	80093c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80093a8:	8afb      	ldrh	r3, [r7, #22]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4413      	add	r3, r2
 80093ae:	781a      	ldrb	r2, [r3, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	3301      	adds	r3, #1
 80093b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80093ba:	8afb      	ldrh	r3, [r7, #22]
 80093bc:	3302      	adds	r3, #2
 80093be:	82fb      	strh	r3, [r7, #22]
 80093c0:	8afa      	ldrh	r2, [r7, #22]
 80093c2:	8abb      	ldrh	r3, [r7, #20]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d3ef      	bcc.n	80093a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	2200      	movs	r2, #0
 80093cc:	701a      	strb	r2, [r3, #0]
  }
}
 80093ce:	bf00      	nop
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80093da:	b480      	push	{r7}
 80093dc:	b085      	sub	sp, #20
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	881a      	ldrh	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	4413      	add	r3, r2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4413      	add	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009402:	68fb      	ldr	r3, [r7, #12]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800941e:	2301      	movs	r3, #1
 8009420:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	789b      	ldrb	r3, [r3, #2]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d002      	beq.n	8009430 <USBH_CtlReq+0x20>
 800942a:	2b02      	cmp	r3, #2
 800942c:	d00f      	beq.n	800944e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800942e:	e027      	b.n	8009480 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	88fa      	ldrh	r2, [r7, #6]
 800943a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2202      	movs	r2, #2
 8009446:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009448:	2301      	movs	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
      break;
 800944c:	e018      	b.n	8009480 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f81c 	bl	800948c <USBH_HandleControl>
 8009454:	4603      	mov	r3, r0
 8009456:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d002      	beq.n	8009464 <USBH_CtlReq+0x54>
 800945e:	7dfb      	ldrb	r3, [r7, #23]
 8009460:	2b03      	cmp	r3, #3
 8009462:	d106      	bne.n	8009472 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2201      	movs	r2, #1
 8009468:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	761a      	strb	r2, [r3, #24]
      break;
 8009470:	e005      	b.n	800947e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d102      	bne.n	800947e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	709a      	strb	r2, [r3, #2]
      break;
 800947e:	bf00      	nop
  }
  return status;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af02      	add	r7, sp, #8
 8009492:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009498:	2300      	movs	r3, #0
 800949a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	7e1b      	ldrb	r3, [r3, #24]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	2b0a      	cmp	r3, #10
 80094a4:	f200 8156 	bhi.w	8009754 <USBH_HandleControl+0x2c8>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <USBH_HandleControl+0x24>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	080094f7 	.word	0x080094f7
 80094b8:	08009561 	.word	0x08009561
 80094bc:	08009587 	.word	0x08009587
 80094c0:	080095bf 	.word	0x080095bf
 80094c4:	080095e9 	.word	0x080095e9
 80094c8:	0800963b 	.word	0x0800963b
 80094cc:	0800965d 	.word	0x0800965d
 80094d0:	08009699 	.word	0x08009699
 80094d4:	080096bf 	.word	0x080096bf
 80094d8:	080096fd 	.word	0x080096fd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f103 0110 	add.w	r1, r3, #16
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	795b      	ldrb	r3, [r3, #5]
 80094e6:	461a      	mov	r2, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f943 	bl	8009774 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2202      	movs	r2, #2
 80094f2:	761a      	strb	r2, [r3, #24]
      break;
 80094f4:	e139      	b.n	800976a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	795b      	ldrb	r3, [r3, #5]
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fcc5 	bl	8009e8c <USBH_LL_GetURBState>
 8009502:	4603      	mov	r3, r0
 8009504:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d11e      	bne.n	800954a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	7c1b      	ldrb	r3, [r3, #16]
 8009510:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009514:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	8adb      	ldrh	r3, [r3, #22]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800951e:	7b7b      	ldrb	r3, [r7, #13]
 8009520:	2b80      	cmp	r3, #128	; 0x80
 8009522:	d103      	bne.n	800952c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2203      	movs	r2, #3
 8009528:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800952a:	e115      	b.n	8009758 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2205      	movs	r2, #5
 8009530:	761a      	strb	r2, [r3, #24]
      break;
 8009532:	e111      	b.n	8009758 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009534:	7b7b      	ldrb	r3, [r7, #13]
 8009536:	2b80      	cmp	r3, #128	; 0x80
 8009538:	d103      	bne.n	8009542 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2209      	movs	r2, #9
 800953e:	761a      	strb	r2, [r3, #24]
      break;
 8009540:	e10a      	b.n	8009758 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2207      	movs	r2, #7
 8009546:	761a      	strb	r2, [r3, #24]
      break;
 8009548:	e106      	b.n	8009758 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	2b04      	cmp	r3, #4
 800954e:	d003      	beq.n	8009558 <USBH_HandleControl+0xcc>
 8009550:	7bbb      	ldrb	r3, [r7, #14]
 8009552:	2b02      	cmp	r3, #2
 8009554:	f040 8100 	bne.w	8009758 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	220b      	movs	r2, #11
 800955c:	761a      	strb	r2, [r3, #24]
      break;
 800955e:	e0fb      	b.n	8009758 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6899      	ldr	r1, [r3, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	899a      	ldrh	r2, [r3, #12]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	791b      	ldrb	r3, [r3, #4]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f93a 	bl	80097f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2204      	movs	r2, #4
 8009582:	761a      	strb	r2, [r3, #24]
      break;
 8009584:	e0f1      	b.n	800976a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	791b      	ldrb	r3, [r3, #4]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fc7d 	bl	8009e8c <USBH_LL_GetURBState>
 8009592:	4603      	mov	r3, r0
 8009594:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d102      	bne.n	80095a2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2209      	movs	r2, #9
 80095a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b05      	cmp	r3, #5
 80095a6:	d102      	bne.n	80095ae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80095a8:	2303      	movs	r3, #3
 80095aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095ac:	e0d6      	b.n	800975c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	f040 80d3 	bne.w	800975c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	220b      	movs	r2, #11
 80095ba:	761a      	strb	r2, [r3, #24]
      break;
 80095bc:	e0ce      	b.n	800975c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6899      	ldr	r1, [r3, #8]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	899a      	ldrh	r2, [r3, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	795b      	ldrb	r3, [r3, #5]
 80095ca:	2001      	movs	r0, #1
 80095cc:	9000      	str	r0, [sp, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f8ea 	bl	80097a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2206      	movs	r2, #6
 80095e4:	761a      	strb	r2, [r3, #24]
      break;
 80095e6:	e0c0      	b.n	800976a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	795b      	ldrb	r3, [r3, #5]
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fc4c 	bl	8009e8c <USBH_LL_GetURBState>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d103      	bne.n	8009606 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2207      	movs	r2, #7
 8009602:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009604:	e0ac      	b.n	8009760 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b05      	cmp	r3, #5
 800960a:	d105      	bne.n	8009618 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	220c      	movs	r2, #12
 8009610:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009612:	2303      	movs	r3, #3
 8009614:	73fb      	strb	r3, [r7, #15]
      break;
 8009616:	e0a3      	b.n	8009760 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2b02      	cmp	r3, #2
 800961c:	d103      	bne.n	8009626 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2205      	movs	r2, #5
 8009622:	761a      	strb	r2, [r3, #24]
      break;
 8009624:	e09c      	b.n	8009760 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	2b04      	cmp	r3, #4
 800962a:	f040 8099 	bne.w	8009760 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	220b      	movs	r2, #11
 8009632:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009634:	2302      	movs	r3, #2
 8009636:	73fb      	strb	r3, [r7, #15]
      break;
 8009638:	e092      	b.n	8009760 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	791b      	ldrb	r3, [r3, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	2100      	movs	r1, #0
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f8d5 	bl	80097f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2208      	movs	r2, #8
 8009658:	761a      	strb	r2, [r3, #24]

      break;
 800965a:	e086      	b.n	800976a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	791b      	ldrb	r3, [r3, #4]
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fc12 	bl	8009e8c <USBH_LL_GetURBState>
 8009668:	4603      	mov	r3, r0
 800966a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d105      	bne.n	800967e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	220d      	movs	r2, #13
 8009676:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800967c:	e072      	b.n	8009764 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b04      	cmp	r3, #4
 8009682:	d103      	bne.n	800968c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	220b      	movs	r2, #11
 8009688:	761a      	strb	r2, [r3, #24]
      break;
 800968a:	e06b      	b.n	8009764 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b05      	cmp	r3, #5
 8009690:	d168      	bne.n	8009764 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009692:	2303      	movs	r3, #3
 8009694:	73fb      	strb	r3, [r7, #15]
      break;
 8009696:	e065      	b.n	8009764 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	795b      	ldrb	r3, [r3, #5]
 800969c:	2201      	movs	r2, #1
 800969e:	9200      	str	r2, [sp, #0]
 80096a0:	2200      	movs	r2, #0
 80096a2:	2100      	movs	r1, #0
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f87f 	bl	80097a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	220a      	movs	r2, #10
 80096ba:	761a      	strb	r2, [r3, #24]
      break;
 80096bc:	e055      	b.n	800976a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	795b      	ldrb	r3, [r3, #5]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fbe1 	bl	8009e8c <USBH_LL_GetURBState>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80096ce:	7bbb      	ldrb	r3, [r7, #14]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d105      	bne.n	80096e0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	220d      	movs	r2, #13
 80096dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096de:	e043      	b.n	8009768 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d103      	bne.n	80096ee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2209      	movs	r2, #9
 80096ea:	761a      	strb	r2, [r3, #24]
      break;
 80096ec:	e03c      	b.n	8009768 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d139      	bne.n	8009768 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	220b      	movs	r2, #11
 80096f8:	761a      	strb	r2, [r3, #24]
      break;
 80096fa:	e035      	b.n	8009768 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7e5b      	ldrb	r3, [r3, #25]
 8009700:	3301      	adds	r3, #1
 8009702:	b2da      	uxtb	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	765a      	strb	r2, [r3, #25]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	7e5b      	ldrb	r3, [r3, #25]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d806      	bhi.n	800971e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800971c:	e025      	b.n	800976a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009724:	2106      	movs	r1, #6
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	795b      	ldrb	r3, [r3, #5]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f90c 	bl	8009954 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	791b      	ldrb	r3, [r3, #4]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f906 	bl	8009954 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800974e:	2302      	movs	r3, #2
 8009750:	73fb      	strb	r3, [r7, #15]
      break;
 8009752:	e00a      	b.n	800976a <USBH_HandleControl+0x2de>

    default:
      break;
 8009754:	bf00      	nop
 8009756:	e008      	b.n	800976a <USBH_HandleControl+0x2de>
      break;
 8009758:	bf00      	nop
 800975a:	e006      	b.n	800976a <USBH_HandleControl+0x2de>
      break;
 800975c:	bf00      	nop
 800975e:	e004      	b.n	800976a <USBH_HandleControl+0x2de>
      break;
 8009760:	bf00      	nop
 8009762:	e002      	b.n	800976a <USBH_HandleControl+0x2de>
      break;
 8009764:	bf00      	nop
 8009766:	e000      	b.n	800976a <USBH_HandleControl+0x2de>
      break;
 8009768:	bf00      	nop
  }

  return status;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af04      	add	r7, sp, #16
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009782:	79f9      	ldrb	r1, [r7, #7]
 8009784:	2300      	movs	r3, #0
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	2308      	movs	r3, #8
 800978a:	9302      	str	r3, [sp, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	2300      	movs	r3, #0
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	2300      	movs	r3, #0
 8009796:	2200      	movs	r2, #0
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f000 fb46 	bl	8009e2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b088      	sub	sp, #32
 80097ac:	af04      	add	r7, sp, #16
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4611      	mov	r1, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	460b      	mov	r3, r1
 80097b8:	80fb      	strh	r3, [r7, #6]
 80097ba:	4613      	mov	r3, r2
 80097bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80097cc:	7979      	ldrb	r1, [r7, #5]
 80097ce:	7e3b      	ldrb	r3, [r7, #24]
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	88fb      	ldrh	r3, [r7, #6]
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	9301      	str	r3, [sp, #4]
 80097da:	2301      	movs	r3, #1
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	2300      	movs	r3, #0
 80097e0:	2200      	movs	r2, #0
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f000 fb21 	bl	8009e2a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b088      	sub	sp, #32
 80097f6:	af04      	add	r7, sp, #16
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	4611      	mov	r1, r2
 80097fe:	461a      	mov	r2, r3
 8009800:	460b      	mov	r3, r1
 8009802:	80fb      	strh	r3, [r7, #6]
 8009804:	4613      	mov	r3, r2
 8009806:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009808:	7979      	ldrb	r1, [r7, #5]
 800980a:	2300      	movs	r3, #0
 800980c:	9303      	str	r3, [sp, #12]
 800980e:	88fb      	ldrh	r3, [r7, #6]
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	2301      	movs	r3, #1
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	2201      	movs	r2, #1
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f000 fb03 	bl	8009e2a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009824:	2300      	movs	r3, #0

}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b088      	sub	sp, #32
 8009832:	af04      	add	r7, sp, #16
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	4611      	mov	r1, r2
 800983a:	461a      	mov	r2, r3
 800983c:	460b      	mov	r3, r1
 800983e:	80fb      	strh	r3, [r7, #6]
 8009840:	4613      	mov	r3, r2
 8009842:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009852:	7979      	ldrb	r1, [r7, #5]
 8009854:	7e3b      	ldrb	r3, [r7, #24]
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	2301      	movs	r3, #1
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2302      	movs	r3, #2
 8009866:	2200      	movs	r2, #0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fade 	bl	8009e2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af04      	add	r7, sp, #16
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	460b      	mov	r3, r1
 8009888:	80fb      	strh	r3, [r7, #6]
 800988a:	4613      	mov	r3, r2
 800988c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800988e:	7979      	ldrb	r1, [r7, #5]
 8009890:	2300      	movs	r3, #0
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	88fb      	ldrh	r3, [r7, #6]
 8009896:	9302      	str	r3, [sp, #8]
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	2301      	movs	r3, #1
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2302      	movs	r3, #2
 80098a2:	2201      	movs	r2, #1
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f000 fac0 	bl	8009e2a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af04      	add	r7, sp, #16
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	4608      	mov	r0, r1
 80098be:	4611      	mov	r1, r2
 80098c0:	461a      	mov	r2, r3
 80098c2:	4603      	mov	r3, r0
 80098c4:	70fb      	strb	r3, [r7, #3]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70bb      	strb	r3, [r7, #2]
 80098ca:	4613      	mov	r3, r2
 80098cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80098ce:	7878      	ldrb	r0, [r7, #1]
 80098d0:	78ba      	ldrb	r2, [r7, #2]
 80098d2:	78f9      	ldrb	r1, [r7, #3]
 80098d4:	8b3b      	ldrh	r3, [r7, #24]
 80098d6:	9302      	str	r3, [sp, #8]
 80098d8:	7d3b      	ldrb	r3, [r7, #20]
 80098da:	9301      	str	r3, [sp, #4]
 80098dc:	7c3b      	ldrb	r3, [r7, #16]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	4603      	mov	r3, r0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa53 	bl	8009d8e <USBH_LL_OpenPipe>

  return USBH_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	4619      	mov	r1, r3
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fa72 	bl	8009dec <USBH_LL_ClosePipe>

  return USBH_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f836 	bl	8009990 <USBH_GetFreePipe>
 8009924:	4603      	mov	r3, r0
 8009926:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009928:	89fb      	ldrh	r3, [r7, #14]
 800992a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800992e:	4293      	cmp	r3, r2
 8009930:	d00a      	beq.n	8009948 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009932:	78fa      	ldrb	r2, [r7, #3]
 8009934:	89fb      	ldrh	r3, [r7, #14]
 8009936:	f003 030f 	and.w	r3, r3, #15
 800993a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800993e:	6879      	ldr	r1, [r7, #4]
 8009940:	33e0      	adds	r3, #224	; 0xe0
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009948:	89fb      	ldrh	r3, [r7, #14]
 800994a:	b2db      	uxtb	r3, r3
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	2b0f      	cmp	r3, #15
 8009964:	d80d      	bhi.n	8009982 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009966:	78fb      	ldrb	r3, [r7, #3]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	33e0      	adds	r3, #224	; 0xe0
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009978:	6879      	ldr	r1, [r7, #4]
 800997a:	33e0      	adds	r3, #224	; 0xe0
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	440b      	add	r3, r1
 8009980:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009998:	2300      	movs	r3, #0
 800999a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]
 80099a0:	e00f      	b.n	80099c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	33e0      	adds	r3, #224	; 0xe0
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	e007      	b.n	80099cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	3301      	adds	r3, #1
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b0f      	cmp	r3, #15
 80099c6:	d9ec      	bls.n	80099a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80099c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80099dc:	2201      	movs	r2, #1
 80099de:	490e      	ldr	r1, [pc, #56]	; (8009a18 <MX_USB_HOST_Init+0x40>)
 80099e0:	480e      	ldr	r0, [pc, #56]	; (8009a1c <MX_USB_HOST_Init+0x44>)
 80099e2:	f7fe fba7 	bl	8008134 <USBH_Init>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80099ec:	f7f8 f956 	bl	8001c9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80099f0:	490b      	ldr	r1, [pc, #44]	; (8009a20 <MX_USB_HOST_Init+0x48>)
 80099f2:	480a      	ldr	r0, [pc, #40]	; (8009a1c <MX_USB_HOST_Init+0x44>)
 80099f4:	f7fe fc2c 	bl	8008250 <USBH_RegisterClass>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80099fe:	f7f8 f94d 	bl	8001c9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009a02:	4806      	ldr	r0, [pc, #24]	; (8009a1c <MX_USB_HOST_Init+0x44>)
 8009a04:	f7fe fcb0 	bl	8008368 <USBH_Start>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009a0e:	f7f8 f945 	bl	8001c9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08009a39 	.word	0x08009a39
 8009a1c:	200001a4 	.word	0x200001a4
 8009a20:	2000000c 	.word	0x2000000c

08009a24 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009a28:	4802      	ldr	r0, [pc, #8]	; (8009a34 <MX_USB_HOST_Process+0x10>)
 8009a2a:	f7fe fcad 	bl	8008388 <USBH_Process>
}
 8009a2e:	bf00      	nop
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200001a4 	.word	0x200001a4

08009a38 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009a44:	78fb      	ldrb	r3, [r7, #3]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	2b04      	cmp	r3, #4
 8009a4a:	d819      	bhi.n	8009a80 <USBH_UserProcess+0x48>
 8009a4c:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <USBH_UserProcess+0x1c>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a81 	.word	0x08009a81
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a81 	.word	0x08009a81
 8009a60:	08009a79 	.word	0x08009a79
 8009a64:	08009a69 	.word	0x08009a69
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <USBH_UserProcess+0x58>)
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	701a      	strb	r2, [r3, #0]
  break;
 8009a6e:	e008      	b.n	8009a82 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <USBH_UserProcess+0x58>)
 8009a72:	2202      	movs	r2, #2
 8009a74:	701a      	strb	r2, [r3, #0]
  break;
 8009a76:	e004      	b.n	8009a82 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009a78:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <USBH_UserProcess+0x58>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	701a      	strb	r2, [r3, #0]
  break;
 8009a7e:	e000      	b.n	8009a82 <USBH_UserProcess+0x4a>

  default:
  break;
 8009a80:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009a82:	bf00      	nop
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	2000057c 	.word	0x2000057c

08009a94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08a      	sub	sp, #40	; 0x28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a9c:	f107 0314 	add.w	r3, r7, #20
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	609a      	str	r2, [r3, #8]
 8009aa8:	60da      	str	r2, [r3, #12]
 8009aaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ab4:	d147      	bne.n	8009b46 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	4b25      	ldr	r3, [pc, #148]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009ac0:	f043 0301 	orr.w	r3, r3, #1
 8009ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ac6:	4b22      	ldr	r3, [pc, #136]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	f003 0301 	and.w	r3, r3, #1
 8009ace:	613b      	str	r3, [r7, #16]
 8009ad0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009adc:	2300      	movs	r3, #0
 8009ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ae0:	f107 0314 	add.w	r3, r7, #20
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	481b      	ldr	r0, [pc, #108]	; (8009b54 <HAL_HCD_MspInit+0xc0>)
 8009ae8:	f7f8 fc4c 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009aec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af2:	2302      	movs	r3, #2
 8009af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009afa:	2300      	movs	r3, #0
 8009afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009afe:	230a      	movs	r3, #10
 8009b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	4619      	mov	r1, r3
 8009b08:	4812      	ldr	r0, [pc, #72]	; (8009b54 <HAL_HCD_MspInit+0xc0>)
 8009b0a:	f7f8 fc3b 	bl	8002384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b0e:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b12:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b18:	6353      	str	r3, [r2, #52]	; 0x34
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b22:	4a0b      	ldr	r2, [pc, #44]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b28:	6453      	str	r3, [r2, #68]	; 0x44
 8009b2a:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <HAL_HCD_MspInit+0xbc>)
 8009b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	2043      	movs	r0, #67	; 0x43
 8009b3c:	f7f8 fbeb 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b40:	2043      	movs	r0, #67	; 0x43
 8009b42:	f7f8 fc04 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b46:	bf00      	nop
 8009b48:	3728      	adds	r7, #40	; 0x28
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40023800 	.word	0x40023800
 8009b54:	40020000 	.word	0x40020000

08009b58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe ffed 	bl	8008b46 <USBH_LL_IncTimer>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff f825 	bl	8008bd2 <USBH_LL_Connect>
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff f82e 	bl	8008c00 <USBH_LL_Disconnect>
}
 8009ba4:	bf00      	nop
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	70fb      	strb	r3, [r7, #3]
 8009bb8:	4613      	mov	r3, r2
 8009bba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe ffdf 	bl	8008b9a <USBH_LL_PortEnabled>
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe ffdf 	bl	8008bb6 <USBH_LL_PortDisabled>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d12a      	bne.n	8009c68 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009c12:	4a18      	ldr	r2, [pc, #96]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a15      	ldr	r2, [pc, #84]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c22:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009c2a:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c2c:	2208      	movs	r2, #8
 8009c2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009c30:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c36:	4b0f      	ldr	r3, [pc, #60]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009c3c:	4b0d      	ldr	r3, [pc, #52]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c3e:	2202      	movs	r2, #2
 8009c40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c42:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009c48:	480a      	ldr	r0, [pc, #40]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c4a:	f7f8 fd50 	bl	80026ee <HAL_HCD_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009c54:	f7f8 f822 	bl	8001c9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009c58:	4806      	ldr	r0, [pc, #24]	; (8009c74 <USBH_LL_Init+0x74>)
 8009c5a:	f7f9 f934 	bl	8002ec6 <HAL_HCD_GetCurrentFrame>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7fe ff60 	bl	8008b28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000580 	.word	0x20000580

08009c78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f9 f8a3 	bl	8002dda <HAL_HCD_Start>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f95c 	bl	8009f58 <USBH_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7f9 f8ab 	bl	8002e20 <HAL_HCD_Stop>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cce:	7bfb      	ldrb	r3, [r7, #15]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 f941 	bl	8009f58 <USBH_Get_USB_Status>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009cec:	2301      	movs	r3, #1
 8009cee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f9 f8f3 	bl	8002ee2 <HAL_HCD_GetCurrentSpeed>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d00c      	beq.n	8009d1c <USBH_LL_GetSpeed+0x38>
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d80d      	bhi.n	8009d22 <USBH_LL_GetSpeed+0x3e>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <USBH_LL_GetSpeed+0x2c>
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d003      	beq.n	8009d16 <USBH_LL_GetSpeed+0x32>
 8009d0e:	e008      	b.n	8009d22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009d10:	2300      	movs	r3, #0
 8009d12:	73fb      	strb	r3, [r7, #15]
    break;
 8009d14:	e008      	b.n	8009d28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009d16:	2301      	movs	r3, #1
 8009d18:	73fb      	strb	r3, [r7, #15]
    break;
 8009d1a:	e005      	b.n	8009d28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d20:	e002      	b.n	8009d28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009d22:	2301      	movs	r3, #1
 8009d24:	73fb      	strb	r3, [r7, #15]
    break;
 8009d26:	bf00      	nop
  }
  return  speed;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7f9 f886 	bl	8002e5a <HAL_HCD_ResetPort>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 f8ff 	bl	8009f58 <USBH_Get_USB_Status>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f9 f88d 	bl	8002e9e <HAL_HCD_HC_GetXferCount>
 8009d84:	4603      	mov	r3, r0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009d8e:	b590      	push	{r4, r7, lr}
 8009d90:	b089      	sub	sp, #36	; 0x24
 8009d92:	af04      	add	r7, sp, #16
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	4608      	mov	r0, r1
 8009d98:	4611      	mov	r1, r2
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	70fb      	strb	r3, [r7, #3]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70bb      	strb	r3, [r7, #2]
 8009da4:	4613      	mov	r3, r2
 8009da6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009db6:	787c      	ldrb	r4, [r7, #1]
 8009db8:	78ba      	ldrb	r2, [r7, #2]
 8009dba:	78f9      	ldrb	r1, [r7, #3]
 8009dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009dbe:	9302      	str	r3, [sp, #8]
 8009dc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	4623      	mov	r3, r4
 8009dce:	f7f8 fcf0 	bl	80027b2 <HAL_HCD_HC_Init>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 f8bd 	bl	8009f58 <USBH_Get_USB_Status>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd90      	pop	{r4, r7, pc}

08009dec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7f8 fd60 	bl	80028d0 <HAL_HCD_HC_Halt>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 f89e 	bl	8009f58 <USBH_Get_USB_Status>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009e2a:	b590      	push	{r4, r7, lr}
 8009e2c:	b089      	sub	sp, #36	; 0x24
 8009e2e:	af04      	add	r7, sp, #16
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	4608      	mov	r0, r1
 8009e34:	4611      	mov	r1, r2
 8009e36:	461a      	mov	r2, r3
 8009e38:	4603      	mov	r3, r0
 8009e3a:	70fb      	strb	r3, [r7, #3]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	70bb      	strb	r3, [r7, #2]
 8009e40:	4613      	mov	r3, r2
 8009e42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e52:	787c      	ldrb	r4, [r7, #1]
 8009e54:	78ba      	ldrb	r2, [r7, #2]
 8009e56:	78f9      	ldrb	r1, [r7, #3]
 8009e58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e5c:	9303      	str	r3, [sp, #12]
 8009e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e60:	9302      	str	r3, [sp, #8]
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	4623      	mov	r3, r4
 8009e6e:	f7f8 fd53 	bl	8002918 <HAL_HCD_HC_SubmitRequest>
 8009e72:	4603      	mov	r3, r0
 8009e74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f86d 	bl	8009f58 <USBH_Get_USB_Status>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd90      	pop	{r4, r7, pc}

08009e8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e9e:	78fa      	ldrb	r2, [r7, #3]
 8009ea0:	4611      	mov	r1, r2
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7f8 ffe7 	bl	8002e76 <HAL_HCD_HC_GetURBState>
 8009ea8:	4603      	mov	r3, r0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d103      	bne.n	8009ed0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 f870 	bl	8009fb0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009ed0:	20c8      	movs	r0, #200	; 0xc8
 8009ed2:	f7f8 f921 	bl	8002118 <HAL_Delay>
  return USBH_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
 8009eec:	4613      	mov	r3, r2
 8009eee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ef6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	212c      	movs	r1, #44	; 0x2c
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	333b      	adds	r3, #59	; 0x3b
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d009      	beq.n	8009f20 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009f0c:	78fb      	ldrb	r3, [r7, #3]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	212c      	movs	r1, #44	; 0x2c
 8009f12:	fb01 f303 	mul.w	r3, r1, r3
 8009f16:	4413      	add	r3, r2
 8009f18:	3354      	adds	r3, #84	; 0x54
 8009f1a:	78ba      	ldrb	r2, [r7, #2]
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	e008      	b.n	8009f32 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009f20:	78fb      	ldrb	r3, [r7, #3]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	212c      	movs	r1, #44	; 0x2c
 8009f26:	fb01 f303 	mul.w	r3, r1, r3
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3355      	adds	r3, #85	; 0x55
 8009f2e:	78ba      	ldrb	r2, [r7, #2]
 8009f30:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7f8 f8e5 	bl	8002118 <HAL_Delay>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
	...

08009f58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f66:	79fb      	ldrb	r3, [r7, #7]
 8009f68:	2b03      	cmp	r3, #3
 8009f6a:	d817      	bhi.n	8009f9c <USBH_Get_USB_Status+0x44>
 8009f6c:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <USBH_Get_USB_Status+0x1c>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	08009f85 	.word	0x08009f85
 8009f78:	08009f8b 	.word	0x08009f8b
 8009f7c:	08009f91 	.word	0x08009f91
 8009f80:	08009f97 	.word	0x08009f97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
    break;
 8009f88:	e00b      	b.n	8009fa2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f8e:	e008      	b.n	8009fa2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009f90:	2301      	movs	r3, #1
 8009f92:	73fb      	strb	r3, [r7, #15]
    break;
 8009f94:	e005      	b.n	8009fa2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009f96:	2302      	movs	r3, #2
 8009f98:	73fb      	strb	r3, [r7, #15]
    break;
 8009f9a:	e002      	b.n	8009fa2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa0:	bf00      	nop
  }
  return usb_status;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009fbe:	79fb      	ldrb	r3, [r7, #7]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
 8009fc8:	e001      	b.n	8009fce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	4803      	ldr	r0, [pc, #12]	; (8009fe4 <MX_DriverVbusFS+0x34>)
 8009fd6:	f7f8 fb71 	bl	80026bc <HAL_GPIO_WritePin>
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	40020800 	.word	0x40020800

08009fe8 <__errno>:
 8009fe8:	4b01      	ldr	r3, [pc, #4]	; (8009ff0 <__errno+0x8>)
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	2000002c 	.word	0x2000002c

08009ff4 <__libc_init_array>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	4d0d      	ldr	r5, [pc, #52]	; (800a02c <__libc_init_array+0x38>)
 8009ff8:	4c0d      	ldr	r4, [pc, #52]	; (800a030 <__libc_init_array+0x3c>)
 8009ffa:	1b64      	subs	r4, r4, r5
 8009ffc:	10a4      	asrs	r4, r4, #2
 8009ffe:	2600      	movs	r6, #0
 800a000:	42a6      	cmp	r6, r4
 800a002:	d109      	bne.n	800a018 <__libc_init_array+0x24>
 800a004:	4d0b      	ldr	r5, [pc, #44]	; (800a034 <__libc_init_array+0x40>)
 800a006:	4c0c      	ldr	r4, [pc, #48]	; (800a038 <__libc_init_array+0x44>)
 800a008:	f000 fc9e 	bl	800a948 <_init>
 800a00c:	1b64      	subs	r4, r4, r5
 800a00e:	10a4      	asrs	r4, r4, #2
 800a010:	2600      	movs	r6, #0
 800a012:	42a6      	cmp	r6, r4
 800a014:	d105      	bne.n	800a022 <__libc_init_array+0x2e>
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	f855 3b04 	ldr.w	r3, [r5], #4
 800a01c:	4798      	blx	r3
 800a01e:	3601      	adds	r6, #1
 800a020:	e7ee      	b.n	800a000 <__libc_init_array+0xc>
 800a022:	f855 3b04 	ldr.w	r3, [r5], #4
 800a026:	4798      	blx	r3
 800a028:	3601      	adds	r6, #1
 800a02a:	e7f2      	b.n	800a012 <__libc_init_array+0x1e>
 800a02c:	0800aaa4 	.word	0x0800aaa4
 800a030:	0800aaa4 	.word	0x0800aaa4
 800a034:	0800aaa4 	.word	0x0800aaa4
 800a038:	0800aaa8 	.word	0x0800aaa8

0800a03c <malloc>:
 800a03c:	4b02      	ldr	r3, [pc, #8]	; (800a048 <malloc+0xc>)
 800a03e:	4601      	mov	r1, r0
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	f000 b87f 	b.w	800a144 <_malloc_r>
 800a046:	bf00      	nop
 800a048:	2000002c 	.word	0x2000002c

0800a04c <free>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <free+0xc>)
 800a04e:	4601      	mov	r1, r0
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f000 b80b 	b.w	800a06c <_free_r>
 800a056:	bf00      	nop
 800a058:	2000002c 	.word	0x2000002c

0800a05c <memset>:
 800a05c:	4402      	add	r2, r0
 800a05e:	4603      	mov	r3, r0
 800a060:	4293      	cmp	r3, r2
 800a062:	d100      	bne.n	800a066 <memset+0xa>
 800a064:	4770      	bx	lr
 800a066:	f803 1b01 	strb.w	r1, [r3], #1
 800a06a:	e7f9      	b.n	800a060 <memset+0x4>

0800a06c <_free_r>:
 800a06c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a06e:	2900      	cmp	r1, #0
 800a070:	d044      	beq.n	800a0fc <_free_r+0x90>
 800a072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a076:	9001      	str	r0, [sp, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f1a1 0404 	sub.w	r4, r1, #4
 800a07e:	bfb8      	it	lt
 800a080:	18e4      	addlt	r4, r4, r3
 800a082:	f000 f903 	bl	800a28c <__malloc_lock>
 800a086:	4a1e      	ldr	r2, [pc, #120]	; (800a100 <_free_r+0x94>)
 800a088:	9801      	ldr	r0, [sp, #4]
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	b933      	cbnz	r3, 800a09c <_free_r+0x30>
 800a08e:	6063      	str	r3, [r4, #4]
 800a090:	6014      	str	r4, [r2, #0]
 800a092:	b003      	add	sp, #12
 800a094:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a098:	f000 b8fe 	b.w	800a298 <__malloc_unlock>
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d908      	bls.n	800a0b2 <_free_r+0x46>
 800a0a0:	6825      	ldr	r5, [r4, #0]
 800a0a2:	1961      	adds	r1, r4, r5
 800a0a4:	428b      	cmp	r3, r1
 800a0a6:	bf01      	itttt	eq
 800a0a8:	6819      	ldreq	r1, [r3, #0]
 800a0aa:	685b      	ldreq	r3, [r3, #4]
 800a0ac:	1949      	addeq	r1, r1, r5
 800a0ae:	6021      	streq	r1, [r4, #0]
 800a0b0:	e7ed      	b.n	800a08e <_free_r+0x22>
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	b10b      	cbz	r3, 800a0bc <_free_r+0x50>
 800a0b8:	42a3      	cmp	r3, r4
 800a0ba:	d9fa      	bls.n	800a0b2 <_free_r+0x46>
 800a0bc:	6811      	ldr	r1, [r2, #0]
 800a0be:	1855      	adds	r5, r2, r1
 800a0c0:	42a5      	cmp	r5, r4
 800a0c2:	d10b      	bne.n	800a0dc <_free_r+0x70>
 800a0c4:	6824      	ldr	r4, [r4, #0]
 800a0c6:	4421      	add	r1, r4
 800a0c8:	1854      	adds	r4, r2, r1
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	6011      	str	r1, [r2, #0]
 800a0ce:	d1e0      	bne.n	800a092 <_free_r+0x26>
 800a0d0:	681c      	ldr	r4, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	6053      	str	r3, [r2, #4]
 800a0d6:	4421      	add	r1, r4
 800a0d8:	6011      	str	r1, [r2, #0]
 800a0da:	e7da      	b.n	800a092 <_free_r+0x26>
 800a0dc:	d902      	bls.n	800a0e4 <_free_r+0x78>
 800a0de:	230c      	movs	r3, #12
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	e7d6      	b.n	800a092 <_free_r+0x26>
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	1961      	adds	r1, r4, r5
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	bf04      	itt	eq
 800a0ec:	6819      	ldreq	r1, [r3, #0]
 800a0ee:	685b      	ldreq	r3, [r3, #4]
 800a0f0:	6063      	str	r3, [r4, #4]
 800a0f2:	bf04      	itt	eq
 800a0f4:	1949      	addeq	r1, r1, r5
 800a0f6:	6021      	streq	r1, [r4, #0]
 800a0f8:	6054      	str	r4, [r2, #4]
 800a0fa:	e7ca      	b.n	800a092 <_free_r+0x26>
 800a0fc:	b003      	add	sp, #12
 800a0fe:	bd30      	pop	{r4, r5, pc}
 800a100:	20000884 	.word	0x20000884

0800a104 <sbrk_aligned>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	4e0e      	ldr	r6, [pc, #56]	; (800a140 <sbrk_aligned+0x3c>)
 800a108:	460c      	mov	r4, r1
 800a10a:	6831      	ldr	r1, [r6, #0]
 800a10c:	4605      	mov	r5, r0
 800a10e:	b911      	cbnz	r1, 800a116 <sbrk_aligned+0x12>
 800a110:	f000 f88c 	bl	800a22c <_sbrk_r>
 800a114:	6030      	str	r0, [r6, #0]
 800a116:	4621      	mov	r1, r4
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 f887 	bl	800a22c <_sbrk_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d00a      	beq.n	800a138 <sbrk_aligned+0x34>
 800a122:	1cc4      	adds	r4, r0, #3
 800a124:	f024 0403 	bic.w	r4, r4, #3
 800a128:	42a0      	cmp	r0, r4
 800a12a:	d007      	beq.n	800a13c <sbrk_aligned+0x38>
 800a12c:	1a21      	subs	r1, r4, r0
 800a12e:	4628      	mov	r0, r5
 800a130:	f000 f87c 	bl	800a22c <_sbrk_r>
 800a134:	3001      	adds	r0, #1
 800a136:	d101      	bne.n	800a13c <sbrk_aligned+0x38>
 800a138:	f04f 34ff 	mov.w	r4, #4294967295
 800a13c:	4620      	mov	r0, r4
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	20000888 	.word	0x20000888

0800a144 <_malloc_r>:
 800a144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a148:	1ccd      	adds	r5, r1, #3
 800a14a:	f025 0503 	bic.w	r5, r5, #3
 800a14e:	3508      	adds	r5, #8
 800a150:	2d0c      	cmp	r5, #12
 800a152:	bf38      	it	cc
 800a154:	250c      	movcc	r5, #12
 800a156:	2d00      	cmp	r5, #0
 800a158:	4607      	mov	r7, r0
 800a15a:	db01      	blt.n	800a160 <_malloc_r+0x1c>
 800a15c:	42a9      	cmp	r1, r5
 800a15e:	d905      	bls.n	800a16c <_malloc_r+0x28>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	2600      	movs	r6, #0
 800a166:	4630      	mov	r0, r6
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	4e2e      	ldr	r6, [pc, #184]	; (800a228 <_malloc_r+0xe4>)
 800a16e:	f000 f88d 	bl	800a28c <__malloc_lock>
 800a172:	6833      	ldr	r3, [r6, #0]
 800a174:	461c      	mov	r4, r3
 800a176:	bb34      	cbnz	r4, 800a1c6 <_malloc_r+0x82>
 800a178:	4629      	mov	r1, r5
 800a17a:	4638      	mov	r0, r7
 800a17c:	f7ff ffc2 	bl	800a104 <sbrk_aligned>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	4604      	mov	r4, r0
 800a184:	d14d      	bne.n	800a222 <_malloc_r+0xde>
 800a186:	6834      	ldr	r4, [r6, #0]
 800a188:	4626      	mov	r6, r4
 800a18a:	2e00      	cmp	r6, #0
 800a18c:	d140      	bne.n	800a210 <_malloc_r+0xcc>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	4631      	mov	r1, r6
 800a192:	4638      	mov	r0, r7
 800a194:	eb04 0803 	add.w	r8, r4, r3
 800a198:	f000 f848 	bl	800a22c <_sbrk_r>
 800a19c:	4580      	cmp	r8, r0
 800a19e:	d13a      	bne.n	800a216 <_malloc_r+0xd2>
 800a1a0:	6821      	ldr	r1, [r4, #0]
 800a1a2:	3503      	adds	r5, #3
 800a1a4:	1a6d      	subs	r5, r5, r1
 800a1a6:	f025 0503 	bic.w	r5, r5, #3
 800a1aa:	3508      	adds	r5, #8
 800a1ac:	2d0c      	cmp	r5, #12
 800a1ae:	bf38      	it	cc
 800a1b0:	250c      	movcc	r5, #12
 800a1b2:	4629      	mov	r1, r5
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff ffa5 	bl	800a104 <sbrk_aligned>
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d02b      	beq.n	800a216 <_malloc_r+0xd2>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	442b      	add	r3, r5
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	e00e      	b.n	800a1e4 <_malloc_r+0xa0>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	1b52      	subs	r2, r2, r5
 800a1ca:	d41e      	bmi.n	800a20a <_malloc_r+0xc6>
 800a1cc:	2a0b      	cmp	r2, #11
 800a1ce:	d916      	bls.n	800a1fe <_malloc_r+0xba>
 800a1d0:	1961      	adds	r1, r4, r5
 800a1d2:	42a3      	cmp	r3, r4
 800a1d4:	6025      	str	r5, [r4, #0]
 800a1d6:	bf18      	it	ne
 800a1d8:	6059      	strne	r1, [r3, #4]
 800a1da:	6863      	ldr	r3, [r4, #4]
 800a1dc:	bf08      	it	eq
 800a1de:	6031      	streq	r1, [r6, #0]
 800a1e0:	5162      	str	r2, [r4, r5]
 800a1e2:	604b      	str	r3, [r1, #4]
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f104 060b 	add.w	r6, r4, #11
 800a1ea:	f000 f855 	bl	800a298 <__malloc_unlock>
 800a1ee:	f026 0607 	bic.w	r6, r6, #7
 800a1f2:	1d23      	adds	r3, r4, #4
 800a1f4:	1af2      	subs	r2, r6, r3
 800a1f6:	d0b6      	beq.n	800a166 <_malloc_r+0x22>
 800a1f8:	1b9b      	subs	r3, r3, r6
 800a1fa:	50a3      	str	r3, [r4, r2]
 800a1fc:	e7b3      	b.n	800a166 <_malloc_r+0x22>
 800a1fe:	6862      	ldr	r2, [r4, #4]
 800a200:	42a3      	cmp	r3, r4
 800a202:	bf0c      	ite	eq
 800a204:	6032      	streq	r2, [r6, #0]
 800a206:	605a      	strne	r2, [r3, #4]
 800a208:	e7ec      	b.n	800a1e4 <_malloc_r+0xa0>
 800a20a:	4623      	mov	r3, r4
 800a20c:	6864      	ldr	r4, [r4, #4]
 800a20e:	e7b2      	b.n	800a176 <_malloc_r+0x32>
 800a210:	4634      	mov	r4, r6
 800a212:	6876      	ldr	r6, [r6, #4]
 800a214:	e7b9      	b.n	800a18a <_malloc_r+0x46>
 800a216:	230c      	movs	r3, #12
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	4638      	mov	r0, r7
 800a21c:	f000 f83c 	bl	800a298 <__malloc_unlock>
 800a220:	e7a1      	b.n	800a166 <_malloc_r+0x22>
 800a222:	6025      	str	r5, [r4, #0]
 800a224:	e7de      	b.n	800a1e4 <_malloc_r+0xa0>
 800a226:	bf00      	nop
 800a228:	20000884 	.word	0x20000884

0800a22c <_sbrk_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	4d06      	ldr	r5, [pc, #24]	; (800a248 <_sbrk_r+0x1c>)
 800a230:	2300      	movs	r3, #0
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	f7f7 fe8a 	bl	8001f50 <_sbrk>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_sbrk_r+0x1a>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_sbrk_r+0x1a>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	2000088c 	.word	0x2000088c

0800a24c <siprintf>:
 800a24c:	b40e      	push	{r1, r2, r3}
 800a24e:	b500      	push	{lr}
 800a250:	b09c      	sub	sp, #112	; 0x70
 800a252:	ab1d      	add	r3, sp, #116	; 0x74
 800a254:	9002      	str	r0, [sp, #8]
 800a256:	9006      	str	r0, [sp, #24]
 800a258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a25c:	4809      	ldr	r0, [pc, #36]	; (800a284 <siprintf+0x38>)
 800a25e:	9107      	str	r1, [sp, #28]
 800a260:	9104      	str	r1, [sp, #16]
 800a262:	4909      	ldr	r1, [pc, #36]	; (800a288 <siprintf+0x3c>)
 800a264:	f853 2b04 	ldr.w	r2, [r3], #4
 800a268:	9105      	str	r1, [sp, #20]
 800a26a:	6800      	ldr	r0, [r0, #0]
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	a902      	add	r1, sp, #8
 800a270:	f000 f874 	bl	800a35c <_svfiprintf_r>
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	b01c      	add	sp, #112	; 0x70
 800a27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a280:	b003      	add	sp, #12
 800a282:	4770      	bx	lr
 800a284:	2000002c 	.word	0x2000002c
 800a288:	ffff0208 	.word	0xffff0208

0800a28c <__malloc_lock>:
 800a28c:	4801      	ldr	r0, [pc, #4]	; (800a294 <__malloc_lock+0x8>)
 800a28e:	f000 baf9 	b.w	800a884 <__retarget_lock_acquire_recursive>
 800a292:	bf00      	nop
 800a294:	20000890 	.word	0x20000890

0800a298 <__malloc_unlock>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__malloc_unlock+0x8>)
 800a29a:	f000 baf4 	b.w	800a886 <__retarget_lock_release_recursive>
 800a29e:	bf00      	nop
 800a2a0:	20000890 	.word	0x20000890

0800a2a4 <__ssputs_r>:
 800a2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	688e      	ldr	r6, [r1, #8]
 800a2aa:	429e      	cmp	r6, r3
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4690      	mov	r8, r2
 800a2b2:	461f      	mov	r7, r3
 800a2b4:	d838      	bhi.n	800a328 <__ssputs_r+0x84>
 800a2b6:	898a      	ldrh	r2, [r1, #12]
 800a2b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2bc:	d032      	beq.n	800a324 <__ssputs_r+0x80>
 800a2be:	6825      	ldr	r5, [r4, #0]
 800a2c0:	6909      	ldr	r1, [r1, #16]
 800a2c2:	eba5 0901 	sub.w	r9, r5, r1
 800a2c6:	6965      	ldr	r5, [r4, #20]
 800a2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	444b      	add	r3, r9
 800a2d4:	106d      	asrs	r5, r5, #1
 800a2d6:	429d      	cmp	r5, r3
 800a2d8:	bf38      	it	cc
 800a2da:	461d      	movcc	r5, r3
 800a2dc:	0553      	lsls	r3, r2, #21
 800a2de:	d531      	bpl.n	800a344 <__ssputs_r+0xa0>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	f7ff ff2f 	bl	800a144 <_malloc_r>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	b950      	cbnz	r0, 800a300 <__ssputs_r+0x5c>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	f8ca 3000 	str.w	r3, [sl]
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	6921      	ldr	r1, [r4, #16]
 800a302:	464a      	mov	r2, r9
 800a304:	f000 fac0 	bl	800a888 <memcpy>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	6126      	str	r6, [r4, #16]
 800a316:	6165      	str	r5, [r4, #20]
 800a318:	444e      	add	r6, r9
 800a31a:	eba5 0509 	sub.w	r5, r5, r9
 800a31e:	6026      	str	r6, [r4, #0]
 800a320:	60a5      	str	r5, [r4, #8]
 800a322:	463e      	mov	r6, r7
 800a324:	42be      	cmp	r6, r7
 800a326:	d900      	bls.n	800a32a <__ssputs_r+0x86>
 800a328:	463e      	mov	r6, r7
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	4632      	mov	r2, r6
 800a32e:	4641      	mov	r1, r8
 800a330:	f000 fab8 	bl	800a8a4 <memmove>
 800a334:	68a3      	ldr	r3, [r4, #8]
 800a336:	1b9b      	subs	r3, r3, r6
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	4433      	add	r3, r6
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	2000      	movs	r0, #0
 800a342:	e7db      	b.n	800a2fc <__ssputs_r+0x58>
 800a344:	462a      	mov	r2, r5
 800a346:	f000 fac7 	bl	800a8d8 <_realloc_r>
 800a34a:	4606      	mov	r6, r0
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d1e1      	bne.n	800a314 <__ssputs_r+0x70>
 800a350:	6921      	ldr	r1, [r4, #16]
 800a352:	4650      	mov	r0, sl
 800a354:	f7ff fe8a 	bl	800a06c <_free_r>
 800a358:	e7c7      	b.n	800a2ea <__ssputs_r+0x46>
	...

0800a35c <_svfiprintf_r>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	4698      	mov	r8, r3
 800a362:	898b      	ldrh	r3, [r1, #12]
 800a364:	061b      	lsls	r3, r3, #24
 800a366:	b09d      	sub	sp, #116	; 0x74
 800a368:	4607      	mov	r7, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	d50e      	bpl.n	800a38e <_svfiprintf_r+0x32>
 800a370:	690b      	ldr	r3, [r1, #16]
 800a372:	b963      	cbnz	r3, 800a38e <_svfiprintf_r+0x32>
 800a374:	2140      	movs	r1, #64	; 0x40
 800a376:	f7ff fee5 	bl	800a144 <_malloc_r>
 800a37a:	6028      	str	r0, [r5, #0]
 800a37c:	6128      	str	r0, [r5, #16]
 800a37e:	b920      	cbnz	r0, 800a38a <_svfiprintf_r+0x2e>
 800a380:	230c      	movs	r3, #12
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	e0d1      	b.n	800a52e <_svfiprintf_r+0x1d2>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	616b      	str	r3, [r5, #20]
 800a38e:	2300      	movs	r3, #0
 800a390:	9309      	str	r3, [sp, #36]	; 0x24
 800a392:	2320      	movs	r3, #32
 800a394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a398:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39c:	2330      	movs	r3, #48	; 0x30
 800a39e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a548 <_svfiprintf_r+0x1ec>
 800a3a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a6:	f04f 0901 	mov.w	r9, #1
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	469a      	mov	sl, r3
 800a3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b2:	b10a      	cbz	r2, 800a3b8 <_svfiprintf_r+0x5c>
 800a3b4:	2a25      	cmp	r2, #37	; 0x25
 800a3b6:	d1f9      	bne.n	800a3ac <_svfiprintf_r+0x50>
 800a3b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3bc:	d00b      	beq.n	800a3d6 <_svfiprintf_r+0x7a>
 800a3be:	465b      	mov	r3, fp
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f7ff ff6d 	bl	800a2a4 <__ssputs_r>
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f000 80aa 	beq.w	800a524 <_svfiprintf_r+0x1c8>
 800a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d2:	445a      	add	r2, fp
 800a3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80a2 	beq.w	800a524 <_svfiprintf_r+0x1c8>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ea:	f10a 0a01 	add.w	sl, sl, #1
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f8:	4654      	mov	r4, sl
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a400:	4851      	ldr	r0, [pc, #324]	; (800a548 <_svfiprintf_r+0x1ec>)
 800a402:	f7f5 feed 	bl	80001e0 <memchr>
 800a406:	9a04      	ldr	r2, [sp, #16]
 800a408:	b9d8      	cbnz	r0, 800a442 <_svfiprintf_r+0xe6>
 800a40a:	06d0      	lsls	r0, r2, #27
 800a40c:	bf44      	itt	mi
 800a40e:	2320      	movmi	r3, #32
 800a410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a414:	0711      	lsls	r1, r2, #28
 800a416:	bf44      	itt	mi
 800a418:	232b      	movmi	r3, #43	; 0x2b
 800a41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41e:	f89a 3000 	ldrb.w	r3, [sl]
 800a422:	2b2a      	cmp	r3, #42	; 0x2a
 800a424:	d015      	beq.n	800a452 <_svfiprintf_r+0xf6>
 800a426:	9a07      	ldr	r2, [sp, #28]
 800a428:	4654      	mov	r4, sl
 800a42a:	2000      	movs	r0, #0
 800a42c:	f04f 0c0a 	mov.w	ip, #10
 800a430:	4621      	mov	r1, r4
 800a432:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a436:	3b30      	subs	r3, #48	; 0x30
 800a438:	2b09      	cmp	r3, #9
 800a43a:	d94e      	bls.n	800a4da <_svfiprintf_r+0x17e>
 800a43c:	b1b0      	cbz	r0, 800a46c <_svfiprintf_r+0x110>
 800a43e:	9207      	str	r2, [sp, #28]
 800a440:	e014      	b.n	800a46c <_svfiprintf_r+0x110>
 800a442:	eba0 0308 	sub.w	r3, r0, r8
 800a446:	fa09 f303 	lsl.w	r3, r9, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	46a2      	mov	sl, r4
 800a450:	e7d2      	b.n	800a3f8 <_svfiprintf_r+0x9c>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	9103      	str	r1, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bfbb      	ittet	lt
 800a45e:	425b      	neglt	r3, r3
 800a460:	f042 0202 	orrlt.w	r2, r2, #2
 800a464:	9307      	strge	r3, [sp, #28]
 800a466:	9307      	strlt	r3, [sp, #28]
 800a468:	bfb8      	it	lt
 800a46a:	9204      	strlt	r2, [sp, #16]
 800a46c:	7823      	ldrb	r3, [r4, #0]
 800a46e:	2b2e      	cmp	r3, #46	; 0x2e
 800a470:	d10c      	bne.n	800a48c <_svfiprintf_r+0x130>
 800a472:	7863      	ldrb	r3, [r4, #1]
 800a474:	2b2a      	cmp	r3, #42	; 0x2a
 800a476:	d135      	bne.n	800a4e4 <_svfiprintf_r+0x188>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	9203      	str	r2, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfb8      	it	lt
 800a484:	f04f 33ff 	movlt.w	r3, #4294967295
 800a488:	3402      	adds	r4, #2
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a558 <_svfiprintf_r+0x1fc>
 800a490:	7821      	ldrb	r1, [r4, #0]
 800a492:	2203      	movs	r2, #3
 800a494:	4650      	mov	r0, sl
 800a496:	f7f5 fea3 	bl	80001e0 <memchr>
 800a49a:	b140      	cbz	r0, 800a4ae <_svfiprintf_r+0x152>
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	eba0 000a 	sub.w	r0, r0, sl
 800a4a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	4303      	orrs	r3, r0
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b2:	4826      	ldr	r0, [pc, #152]	; (800a54c <_svfiprintf_r+0x1f0>)
 800a4b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	f7f5 fe91 	bl	80001e0 <memchr>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d038      	beq.n	800a534 <_svfiprintf_r+0x1d8>
 800a4c2:	4b23      	ldr	r3, [pc, #140]	; (800a550 <_svfiprintf_r+0x1f4>)
 800a4c4:	bb1b      	cbnz	r3, 800a50e <_svfiprintf_r+0x1b2>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	3307      	adds	r3, #7
 800a4ca:	f023 0307 	bic.w	r3, r3, #7
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d4:	4433      	add	r3, r6
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	e767      	b.n	800a3aa <_svfiprintf_r+0x4e>
 800a4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4de:	460c      	mov	r4, r1
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7a5      	b.n	800a430 <_svfiprintf_r+0xd4>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f04f 0c0a 	mov.w	ip, #10
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f6:	3a30      	subs	r2, #48	; 0x30
 800a4f8:	2a09      	cmp	r2, #9
 800a4fa:	d903      	bls.n	800a504 <_svfiprintf_r+0x1a8>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0c5      	beq.n	800a48c <_svfiprintf_r+0x130>
 800a500:	9105      	str	r1, [sp, #20]
 800a502:	e7c3      	b.n	800a48c <_svfiprintf_r+0x130>
 800a504:	fb0c 2101 	mla	r1, ip, r1, r2
 800a508:	4604      	mov	r4, r0
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7f0      	b.n	800a4f0 <_svfiprintf_r+0x194>
 800a50e:	ab03      	add	r3, sp, #12
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	462a      	mov	r2, r5
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a516:	a904      	add	r1, sp, #16
 800a518:	4638      	mov	r0, r7
 800a51a:	f3af 8000 	nop.w
 800a51e:	1c42      	adds	r2, r0, #1
 800a520:	4606      	mov	r6, r0
 800a522:	d1d6      	bne.n	800a4d2 <_svfiprintf_r+0x176>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af2c 	bmi.w	800a384 <_svfiprintf_r+0x28>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	b01d      	add	sp, #116	; 0x74
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	462a      	mov	r2, r5
 800a53a:	4b06      	ldr	r3, [pc, #24]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4638      	mov	r0, r7
 800a540:	f000 f87a 	bl	800a638 <_printf_i>
 800a544:	e7eb      	b.n	800a51e <_svfiprintf_r+0x1c2>
 800a546:	bf00      	nop
 800a548:	0800aa68 	.word	0x0800aa68
 800a54c:	0800aa72 	.word	0x0800aa72
 800a550:	00000000 	.word	0x00000000
 800a554:	0800a2a5 	.word	0x0800a2a5
 800a558:	0800aa6e 	.word	0x0800aa6e

0800a55c <_printf_common>:
 800a55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a560:	4616      	mov	r6, r2
 800a562:	4699      	mov	r9, r3
 800a564:	688a      	ldr	r2, [r1, #8]
 800a566:	690b      	ldr	r3, [r1, #16]
 800a568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a56c:	4293      	cmp	r3, r2
 800a56e:	bfb8      	it	lt
 800a570:	4613      	movlt	r3, r2
 800a572:	6033      	str	r3, [r6, #0]
 800a574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a578:	4607      	mov	r7, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	b10a      	cbz	r2, 800a582 <_printf_common+0x26>
 800a57e:	3301      	adds	r3, #1
 800a580:	6033      	str	r3, [r6, #0]
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	0699      	lsls	r1, r3, #26
 800a586:	bf42      	ittt	mi
 800a588:	6833      	ldrmi	r3, [r6, #0]
 800a58a:	3302      	addmi	r3, #2
 800a58c:	6033      	strmi	r3, [r6, #0]
 800a58e:	6825      	ldr	r5, [r4, #0]
 800a590:	f015 0506 	ands.w	r5, r5, #6
 800a594:	d106      	bne.n	800a5a4 <_printf_common+0x48>
 800a596:	f104 0a19 	add.w	sl, r4, #25
 800a59a:	68e3      	ldr	r3, [r4, #12]
 800a59c:	6832      	ldr	r2, [r6, #0]
 800a59e:	1a9b      	subs	r3, r3, r2
 800a5a0:	42ab      	cmp	r3, r5
 800a5a2:	dc26      	bgt.n	800a5f2 <_printf_common+0x96>
 800a5a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5a8:	1e13      	subs	r3, r2, #0
 800a5aa:	6822      	ldr	r2, [r4, #0]
 800a5ac:	bf18      	it	ne
 800a5ae:	2301      	movne	r3, #1
 800a5b0:	0692      	lsls	r2, r2, #26
 800a5b2:	d42b      	bmi.n	800a60c <_printf_common+0xb0>
 800a5b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	47c0      	blx	r8
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d01e      	beq.n	800a600 <_printf_common+0xa4>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	68e5      	ldr	r5, [r4, #12]
 800a5c6:	6832      	ldr	r2, [r6, #0]
 800a5c8:	f003 0306 	and.w	r3, r3, #6
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	bf08      	it	eq
 800a5d0:	1aad      	subeq	r5, r5, r2
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	6922      	ldr	r2, [r4, #16]
 800a5d6:	bf0c      	ite	eq
 800a5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5dc:	2500      	movne	r5, #0
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	bfc4      	itt	gt
 800a5e2:	1a9b      	subgt	r3, r3, r2
 800a5e4:	18ed      	addgt	r5, r5, r3
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	341a      	adds	r4, #26
 800a5ea:	42b5      	cmp	r5, r6
 800a5ec:	d11a      	bne.n	800a624 <_printf_common+0xc8>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e008      	b.n	800a604 <_printf_common+0xa8>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	4638      	mov	r0, r7
 800a5fa:	47c0      	blx	r8
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d103      	bne.n	800a608 <_printf_common+0xac>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a608:	3501      	adds	r5, #1
 800a60a:	e7c6      	b.n	800a59a <_printf_common+0x3e>
 800a60c:	18e1      	adds	r1, r4, r3
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	2030      	movs	r0, #48	; 0x30
 800a612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a616:	4422      	add	r2, r4
 800a618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a61c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a620:	3302      	adds	r3, #2
 800a622:	e7c7      	b.n	800a5b4 <_printf_common+0x58>
 800a624:	2301      	movs	r3, #1
 800a626:	4622      	mov	r2, r4
 800a628:	4649      	mov	r1, r9
 800a62a:	4638      	mov	r0, r7
 800a62c:	47c0      	blx	r8
 800a62e:	3001      	adds	r0, #1
 800a630:	d0e6      	beq.n	800a600 <_printf_common+0xa4>
 800a632:	3601      	adds	r6, #1
 800a634:	e7d9      	b.n	800a5ea <_printf_common+0x8e>
	...

0800a638 <_printf_i>:
 800a638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a63c:	7e0f      	ldrb	r7, [r1, #24]
 800a63e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a640:	2f78      	cmp	r7, #120	; 0x78
 800a642:	4691      	mov	r9, r2
 800a644:	4680      	mov	r8, r0
 800a646:	460c      	mov	r4, r1
 800a648:	469a      	mov	sl, r3
 800a64a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a64e:	d807      	bhi.n	800a660 <_printf_i+0x28>
 800a650:	2f62      	cmp	r7, #98	; 0x62
 800a652:	d80a      	bhi.n	800a66a <_printf_i+0x32>
 800a654:	2f00      	cmp	r7, #0
 800a656:	f000 80d8 	beq.w	800a80a <_printf_i+0x1d2>
 800a65a:	2f58      	cmp	r7, #88	; 0x58
 800a65c:	f000 80a3 	beq.w	800a7a6 <_printf_i+0x16e>
 800a660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a668:	e03a      	b.n	800a6e0 <_printf_i+0xa8>
 800a66a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a66e:	2b15      	cmp	r3, #21
 800a670:	d8f6      	bhi.n	800a660 <_printf_i+0x28>
 800a672:	a101      	add	r1, pc, #4	; (adr r1, 800a678 <_printf_i+0x40>)
 800a674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a678:	0800a6d1 	.word	0x0800a6d1
 800a67c:	0800a6e5 	.word	0x0800a6e5
 800a680:	0800a661 	.word	0x0800a661
 800a684:	0800a661 	.word	0x0800a661
 800a688:	0800a661 	.word	0x0800a661
 800a68c:	0800a661 	.word	0x0800a661
 800a690:	0800a6e5 	.word	0x0800a6e5
 800a694:	0800a661 	.word	0x0800a661
 800a698:	0800a661 	.word	0x0800a661
 800a69c:	0800a661 	.word	0x0800a661
 800a6a0:	0800a661 	.word	0x0800a661
 800a6a4:	0800a7f1 	.word	0x0800a7f1
 800a6a8:	0800a715 	.word	0x0800a715
 800a6ac:	0800a7d3 	.word	0x0800a7d3
 800a6b0:	0800a661 	.word	0x0800a661
 800a6b4:	0800a661 	.word	0x0800a661
 800a6b8:	0800a813 	.word	0x0800a813
 800a6bc:	0800a661 	.word	0x0800a661
 800a6c0:	0800a715 	.word	0x0800a715
 800a6c4:	0800a661 	.word	0x0800a661
 800a6c8:	0800a661 	.word	0x0800a661
 800a6cc:	0800a7db 	.word	0x0800a7db
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	1d1a      	adds	r2, r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	602a      	str	r2, [r5, #0]
 800a6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0a3      	b.n	800a82c <_printf_i+0x1f4>
 800a6e4:	6820      	ldr	r0, [r4, #0]
 800a6e6:	6829      	ldr	r1, [r5, #0]
 800a6e8:	0606      	lsls	r6, r0, #24
 800a6ea:	f101 0304 	add.w	r3, r1, #4
 800a6ee:	d50a      	bpl.n	800a706 <_printf_i+0xce>
 800a6f0:	680e      	ldr	r6, [r1, #0]
 800a6f2:	602b      	str	r3, [r5, #0]
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	da03      	bge.n	800a700 <_printf_i+0xc8>
 800a6f8:	232d      	movs	r3, #45	; 0x2d
 800a6fa:	4276      	negs	r6, r6
 800a6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a700:	485e      	ldr	r0, [pc, #376]	; (800a87c <_printf_i+0x244>)
 800a702:	230a      	movs	r3, #10
 800a704:	e019      	b.n	800a73a <_printf_i+0x102>
 800a706:	680e      	ldr	r6, [r1, #0]
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a70e:	bf18      	it	ne
 800a710:	b236      	sxthne	r6, r6
 800a712:	e7ef      	b.n	800a6f4 <_printf_i+0xbc>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	6820      	ldr	r0, [r4, #0]
 800a718:	1d19      	adds	r1, r3, #4
 800a71a:	6029      	str	r1, [r5, #0]
 800a71c:	0601      	lsls	r1, r0, #24
 800a71e:	d501      	bpl.n	800a724 <_printf_i+0xec>
 800a720:	681e      	ldr	r6, [r3, #0]
 800a722:	e002      	b.n	800a72a <_printf_i+0xf2>
 800a724:	0646      	lsls	r6, r0, #25
 800a726:	d5fb      	bpl.n	800a720 <_printf_i+0xe8>
 800a728:	881e      	ldrh	r6, [r3, #0]
 800a72a:	4854      	ldr	r0, [pc, #336]	; (800a87c <_printf_i+0x244>)
 800a72c:	2f6f      	cmp	r7, #111	; 0x6f
 800a72e:	bf0c      	ite	eq
 800a730:	2308      	moveq	r3, #8
 800a732:	230a      	movne	r3, #10
 800a734:	2100      	movs	r1, #0
 800a736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a73a:	6865      	ldr	r5, [r4, #4]
 800a73c:	60a5      	str	r5, [r4, #8]
 800a73e:	2d00      	cmp	r5, #0
 800a740:	bfa2      	ittt	ge
 800a742:	6821      	ldrge	r1, [r4, #0]
 800a744:	f021 0104 	bicge.w	r1, r1, #4
 800a748:	6021      	strge	r1, [r4, #0]
 800a74a:	b90e      	cbnz	r6, 800a750 <_printf_i+0x118>
 800a74c:	2d00      	cmp	r5, #0
 800a74e:	d04d      	beq.n	800a7ec <_printf_i+0x1b4>
 800a750:	4615      	mov	r5, r2
 800a752:	fbb6 f1f3 	udiv	r1, r6, r3
 800a756:	fb03 6711 	mls	r7, r3, r1, r6
 800a75a:	5dc7      	ldrb	r7, [r0, r7]
 800a75c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a760:	4637      	mov	r7, r6
 800a762:	42bb      	cmp	r3, r7
 800a764:	460e      	mov	r6, r1
 800a766:	d9f4      	bls.n	800a752 <_printf_i+0x11a>
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d10b      	bne.n	800a784 <_printf_i+0x14c>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	07de      	lsls	r6, r3, #31
 800a770:	d508      	bpl.n	800a784 <_printf_i+0x14c>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	6861      	ldr	r1, [r4, #4]
 800a776:	4299      	cmp	r1, r3
 800a778:	bfde      	ittt	le
 800a77a:	2330      	movle	r3, #48	; 0x30
 800a77c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a780:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a784:	1b52      	subs	r2, r2, r5
 800a786:	6122      	str	r2, [r4, #16]
 800a788:	f8cd a000 	str.w	sl, [sp]
 800a78c:	464b      	mov	r3, r9
 800a78e:	aa03      	add	r2, sp, #12
 800a790:	4621      	mov	r1, r4
 800a792:	4640      	mov	r0, r8
 800a794:	f7ff fee2 	bl	800a55c <_printf_common>
 800a798:	3001      	adds	r0, #1
 800a79a:	d14c      	bne.n	800a836 <_printf_i+0x1fe>
 800a79c:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a0:	b004      	add	sp, #16
 800a7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7a6:	4835      	ldr	r0, [pc, #212]	; (800a87c <_printf_i+0x244>)
 800a7a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7ac:	6829      	ldr	r1, [r5, #0]
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7b4:	6029      	str	r1, [r5, #0]
 800a7b6:	061d      	lsls	r5, r3, #24
 800a7b8:	d514      	bpl.n	800a7e4 <_printf_i+0x1ac>
 800a7ba:	07df      	lsls	r7, r3, #31
 800a7bc:	bf44      	itt	mi
 800a7be:	f043 0320 	orrmi.w	r3, r3, #32
 800a7c2:	6023      	strmi	r3, [r4, #0]
 800a7c4:	b91e      	cbnz	r6, 800a7ce <_printf_i+0x196>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	f023 0320 	bic.w	r3, r3, #32
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	2310      	movs	r3, #16
 800a7d0:	e7b0      	b.n	800a734 <_printf_i+0xfc>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	f043 0320 	orr.w	r3, r3, #32
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	2378      	movs	r3, #120	; 0x78
 800a7dc:	4828      	ldr	r0, [pc, #160]	; (800a880 <_printf_i+0x248>)
 800a7de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7e2:	e7e3      	b.n	800a7ac <_printf_i+0x174>
 800a7e4:	0659      	lsls	r1, r3, #25
 800a7e6:	bf48      	it	mi
 800a7e8:	b2b6      	uxthmi	r6, r6
 800a7ea:	e7e6      	b.n	800a7ba <_printf_i+0x182>
 800a7ec:	4615      	mov	r5, r2
 800a7ee:	e7bb      	b.n	800a768 <_printf_i+0x130>
 800a7f0:	682b      	ldr	r3, [r5, #0]
 800a7f2:	6826      	ldr	r6, [r4, #0]
 800a7f4:	6961      	ldr	r1, [r4, #20]
 800a7f6:	1d18      	adds	r0, r3, #4
 800a7f8:	6028      	str	r0, [r5, #0]
 800a7fa:	0635      	lsls	r5, r6, #24
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	d501      	bpl.n	800a804 <_printf_i+0x1cc>
 800a800:	6019      	str	r1, [r3, #0]
 800a802:	e002      	b.n	800a80a <_printf_i+0x1d2>
 800a804:	0670      	lsls	r0, r6, #25
 800a806:	d5fb      	bpl.n	800a800 <_printf_i+0x1c8>
 800a808:	8019      	strh	r1, [r3, #0]
 800a80a:	2300      	movs	r3, #0
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	4615      	mov	r5, r2
 800a810:	e7ba      	b.n	800a788 <_printf_i+0x150>
 800a812:	682b      	ldr	r3, [r5, #0]
 800a814:	1d1a      	adds	r2, r3, #4
 800a816:	602a      	str	r2, [r5, #0]
 800a818:	681d      	ldr	r5, [r3, #0]
 800a81a:	6862      	ldr	r2, [r4, #4]
 800a81c:	2100      	movs	r1, #0
 800a81e:	4628      	mov	r0, r5
 800a820:	f7f5 fcde 	bl	80001e0 <memchr>
 800a824:	b108      	cbz	r0, 800a82a <_printf_i+0x1f2>
 800a826:	1b40      	subs	r0, r0, r5
 800a828:	6060      	str	r0, [r4, #4]
 800a82a:	6863      	ldr	r3, [r4, #4]
 800a82c:	6123      	str	r3, [r4, #16]
 800a82e:	2300      	movs	r3, #0
 800a830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a834:	e7a8      	b.n	800a788 <_printf_i+0x150>
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	462a      	mov	r2, r5
 800a83a:	4649      	mov	r1, r9
 800a83c:	4640      	mov	r0, r8
 800a83e:	47d0      	blx	sl
 800a840:	3001      	adds	r0, #1
 800a842:	d0ab      	beq.n	800a79c <_printf_i+0x164>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	079b      	lsls	r3, r3, #30
 800a848:	d413      	bmi.n	800a872 <_printf_i+0x23a>
 800a84a:	68e0      	ldr	r0, [r4, #12]
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	4298      	cmp	r0, r3
 800a850:	bfb8      	it	lt
 800a852:	4618      	movlt	r0, r3
 800a854:	e7a4      	b.n	800a7a0 <_printf_i+0x168>
 800a856:	2301      	movs	r3, #1
 800a858:	4632      	mov	r2, r6
 800a85a:	4649      	mov	r1, r9
 800a85c:	4640      	mov	r0, r8
 800a85e:	47d0      	blx	sl
 800a860:	3001      	adds	r0, #1
 800a862:	d09b      	beq.n	800a79c <_printf_i+0x164>
 800a864:	3501      	adds	r5, #1
 800a866:	68e3      	ldr	r3, [r4, #12]
 800a868:	9903      	ldr	r1, [sp, #12]
 800a86a:	1a5b      	subs	r3, r3, r1
 800a86c:	42ab      	cmp	r3, r5
 800a86e:	dcf2      	bgt.n	800a856 <_printf_i+0x21e>
 800a870:	e7eb      	b.n	800a84a <_printf_i+0x212>
 800a872:	2500      	movs	r5, #0
 800a874:	f104 0619 	add.w	r6, r4, #25
 800a878:	e7f5      	b.n	800a866 <_printf_i+0x22e>
 800a87a:	bf00      	nop
 800a87c:	0800aa79 	.word	0x0800aa79
 800a880:	0800aa8a 	.word	0x0800aa8a

0800a884 <__retarget_lock_acquire_recursive>:
 800a884:	4770      	bx	lr

0800a886 <__retarget_lock_release_recursive>:
 800a886:	4770      	bx	lr

0800a888 <memcpy>:
 800a888:	440a      	add	r2, r1
 800a88a:	4291      	cmp	r1, r2
 800a88c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a890:	d100      	bne.n	800a894 <memcpy+0xc>
 800a892:	4770      	bx	lr
 800a894:	b510      	push	{r4, lr}
 800a896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a89e:	4291      	cmp	r1, r2
 800a8a0:	d1f9      	bne.n	800a896 <memcpy+0xe>
 800a8a2:	bd10      	pop	{r4, pc}

0800a8a4 <memmove>:
 800a8a4:	4288      	cmp	r0, r1
 800a8a6:	b510      	push	{r4, lr}
 800a8a8:	eb01 0402 	add.w	r4, r1, r2
 800a8ac:	d902      	bls.n	800a8b4 <memmove+0x10>
 800a8ae:	4284      	cmp	r4, r0
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	d807      	bhi.n	800a8c4 <memmove+0x20>
 800a8b4:	1e43      	subs	r3, r0, #1
 800a8b6:	42a1      	cmp	r1, r4
 800a8b8:	d008      	beq.n	800a8cc <memmove+0x28>
 800a8ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8c2:	e7f8      	b.n	800a8b6 <memmove+0x12>
 800a8c4:	4402      	add	r2, r0
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	428a      	cmp	r2, r1
 800a8ca:	d100      	bne.n	800a8ce <memmove+0x2a>
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8d6:	e7f7      	b.n	800a8c8 <memmove+0x24>

0800a8d8 <_realloc_r>:
 800a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	4680      	mov	r8, r0
 800a8de:	4614      	mov	r4, r2
 800a8e0:	460e      	mov	r6, r1
 800a8e2:	b921      	cbnz	r1, 800a8ee <_realloc_r+0x16>
 800a8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	f7ff bc2b 	b.w	800a144 <_malloc_r>
 800a8ee:	b92a      	cbnz	r2, 800a8fc <_realloc_r+0x24>
 800a8f0:	f7ff fbbc 	bl	800a06c <_free_r>
 800a8f4:	4625      	mov	r5, r4
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fc:	f000 f81b 	bl	800a936 <_malloc_usable_size_r>
 800a900:	4284      	cmp	r4, r0
 800a902:	4607      	mov	r7, r0
 800a904:	d802      	bhi.n	800a90c <_realloc_r+0x34>
 800a906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a90a:	d812      	bhi.n	800a932 <_realloc_r+0x5a>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4640      	mov	r0, r8
 800a910:	f7ff fc18 	bl	800a144 <_malloc_r>
 800a914:	4605      	mov	r5, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	d0ed      	beq.n	800a8f6 <_realloc_r+0x1e>
 800a91a:	42bc      	cmp	r4, r7
 800a91c:	4622      	mov	r2, r4
 800a91e:	4631      	mov	r1, r6
 800a920:	bf28      	it	cs
 800a922:	463a      	movcs	r2, r7
 800a924:	f7ff ffb0 	bl	800a888 <memcpy>
 800a928:	4631      	mov	r1, r6
 800a92a:	4640      	mov	r0, r8
 800a92c:	f7ff fb9e 	bl	800a06c <_free_r>
 800a930:	e7e1      	b.n	800a8f6 <_realloc_r+0x1e>
 800a932:	4635      	mov	r5, r6
 800a934:	e7df      	b.n	800a8f6 <_realloc_r+0x1e>

0800a936 <_malloc_usable_size_r>:
 800a936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a93a:	1f18      	subs	r0, r3, #4
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	bfbc      	itt	lt
 800a940:	580b      	ldrlt	r3, [r1, r0]
 800a942:	18c0      	addlt	r0, r0, r3
 800a944:	4770      	bx	lr
	...

0800a948 <_init>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr

0800a954 <_fini>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	bf00      	nop
 800a958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a95a:	bc08      	pop	{r3}
 800a95c:	469e      	mov	lr, r3
 800a95e:	4770      	bx	lr
