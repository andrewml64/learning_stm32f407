
Learning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a424  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a5b4  0800a5b4  0001a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6e0  0800a6e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6e0  0800a6e0  0001a6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6e8  0800a6e8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6e8  0800a6e8  0001a6e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6ec  0800a6ec  0001a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a6f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000848  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008d8  200008d8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018395  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ee  00000000  00000000  00038455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  0003ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0003cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002445c  00000000  00000000  0003dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001882c  00000000  00000000  00062304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce159  00000000  00000000  0007ab30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148c89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055f4  00000000  00000000  00148cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a59c 	.word	0x0800a59c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a59c 	.word	0x0800a59c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b9aa 	b.w	8000dd8 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f83c 	bl	8000b08 <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2lz>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	460d      	mov	r5, r1
 8000aa6:	f000 f9f9 	bl	8000e9c <__aeabi_dcmplt>
 8000aaa:	b928      	cbnz	r0, 8000ab8 <__aeabi_d2lz+0x1c>
 8000aac:	4620      	mov	r0, r4
 8000aae:	4629      	mov	r1, r5
 8000ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ab4:	f000 b80a 	b.w	8000acc <__aeabi_d2ulz>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000abe:	f000 f805 	bl	8000acc <__aeabi_d2ulz>
 8000ac2:	4240      	negs	r0, r0
 8000ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
 8000aca:	bf00      	nop

08000acc <__aeabi_d2ulz>:
 8000acc:	b5d0      	push	{r4, r6, r7, lr}
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <__aeabi_d2ulz+0x34>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4606      	mov	r6, r0
 8000ad4:	460f      	mov	r7, r1
 8000ad6:	f7ff fd8f 	bl	80005f8 <__aeabi_dmul>
 8000ada:	f000 fa07 	bl	8000eec <__aeabi_d2uiz>
 8000ade:	4604      	mov	r4, r0
 8000ae0:	f7ff fd10 	bl	8000504 <__aeabi_ui2d>
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <__aeabi_d2ulz+0x38>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f7ff fd86 	bl	80005f8 <__aeabi_dmul>
 8000aec:	4602      	mov	r2, r0
 8000aee:	460b      	mov	r3, r1
 8000af0:	4630      	mov	r0, r6
 8000af2:	4639      	mov	r1, r7
 8000af4:	f7ff fbc8 	bl	8000288 <__aeabi_dsub>
 8000af8:	f000 f9f8 	bl	8000eec <__aeabi_d2uiz>
 8000afc:	4621      	mov	r1, r4
 8000afe:	bdd0      	pop	{r4, r6, r7, pc}
 8000b00:	3df00000 	.word	0x3df00000
 8000b04:	41f00000 	.word	0x41f00000

08000b08 <__udivmoddi4>:
 8000b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b0c:	9d08      	ldr	r5, [sp, #32]
 8000b0e:	4604      	mov	r4, r0
 8000b10:	468e      	mov	lr, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d14d      	bne.n	8000bb2 <__udivmoddi4+0xaa>
 8000b16:	428a      	cmp	r2, r1
 8000b18:	4694      	mov	ip, r2
 8000b1a:	d969      	bls.n	8000bf0 <__udivmoddi4+0xe8>
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	b152      	cbz	r2, 8000b38 <__udivmoddi4+0x30>
 8000b22:	fa01 f302 	lsl.w	r3, r1, r2
 8000b26:	f1c2 0120 	rsb	r1, r2, #32
 8000b2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b32:	ea41 0e03 	orr.w	lr, r1, r3
 8000b36:	4094      	lsls	r4, r2
 8000b38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b3c:	0c21      	lsrs	r1, r4, #16
 8000b3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b42:	fa1f f78c 	uxth.w	r7, ip
 8000b46:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b4e:	fb06 f107 	mul.w	r1, r6, r7
 8000b52:	4299      	cmp	r1, r3
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x64>
 8000b56:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b5e:	f080 811f 	bcs.w	8000da0 <__udivmoddi4+0x298>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 811c 	bls.w	8000da0 <__udivmoddi4+0x298>
 8000b68:	3e02      	subs	r6, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3310 	mls	r3, r8, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 f707 	mul.w	r7, r0, r7
 8000b80:	42a7      	cmp	r7, r4
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x92>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8c:	f080 810a 	bcs.w	8000da4 <__udivmoddi4+0x29c>
 8000b90:	42a7      	cmp	r7, r4
 8000b92:	f240 8107 	bls.w	8000da4 <__udivmoddi4+0x29c>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b9e:	1be4      	subs	r4, r4, r7
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	b11d      	cbz	r5, 8000bac <__udivmoddi4+0xa4>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bac:	4631      	mov	r1, r6
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xc2>
 8000bb6:	2d00      	cmp	r5, #0
 8000bb8:	f000 80ef 	beq.w	8000d9a <__udivmoddi4+0x292>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f683 	clz	r6, r3
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d14a      	bne.n	8000c68 <__udivmoddi4+0x160>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd4>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80f9 	bhi.w	8000dce <__udivmoddi4+0x2c6>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	469e      	mov	lr, r3
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa4>
 8000bea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa4>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xec>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 8092 	bne.w	8000d22 <__udivmoddi4+0x21a>
 8000bfe:	eba1 010c 	sub.w	r1, r1, ip
 8000c02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	2601      	movs	r6, #1
 8000c0c:	0c20      	lsrs	r0, r4, #16
 8000c0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c12:	fb07 1113 	mls	r1, r7, r3, r1
 8000c16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1a:	fb0e f003 	mul.w	r0, lr, r3
 8000c1e:	4288      	cmp	r0, r1
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x12c>
 8000c22:	eb1c 0101 	adds.w	r1, ip, r1
 8000c26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x12a>
 8000c2c:	4288      	cmp	r0, r1
 8000c2e:	f200 80cb 	bhi.w	8000dc8 <__udivmoddi4+0x2c0>
 8000c32:	4643      	mov	r3, r8
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c44:	fb0e fe00 	mul.w	lr, lr, r0
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x156>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c54:	d202      	bcs.n	8000c5c <__udivmoddi4+0x154>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	f200 80bb 	bhi.w	8000dd2 <__udivmoddi4+0x2ca>
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c66:	e79c      	b.n	8000ba2 <__udivmoddi4+0x9a>
 8000c68:	f1c6 0720 	rsb	r7, r6, #32
 8000c6c:	40b3      	lsls	r3, r6
 8000c6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c76:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c7e:	431c      	orrs	r4, r3
 8000c80:	40f9      	lsrs	r1, r7
 8000c82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c86:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c8e:	0c20      	lsrs	r0, r4, #16
 8000c90:	fa1f fe8c 	uxth.w	lr, ip
 8000c94:	fb09 1118 	mls	r1, r9, r8, r1
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x1b8>
 8000ca8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb0:	f080 8088 	bcs.w	8000dc4 <__udivmoddi4+0x2bc>
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	f240 8085 	bls.w	8000dc4 <__udivmoddi4+0x2bc>
 8000cba:	f1a8 0802 	sub.w	r8, r8, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ccc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd4:	458e      	cmp	lr, r1
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x1e2>
 8000cd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cdc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce0:	d26c      	bcs.n	8000dbc <__udivmoddi4+0x2b4>
 8000ce2:	458e      	cmp	lr, r1
 8000ce4:	d96a      	bls.n	8000dbc <__udivmoddi4+0x2b4>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	4461      	add	r1, ip
 8000cea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cee:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf2:	eba1 010e 	sub.w	r1, r1, lr
 8000cf6:	42a1      	cmp	r1, r4
 8000cf8:	46c8      	mov	r8, r9
 8000cfa:	46a6      	mov	lr, r4
 8000cfc:	d356      	bcc.n	8000dac <__udivmoddi4+0x2a4>
 8000cfe:	d053      	beq.n	8000da8 <__udivmoddi4+0x2a0>
 8000d00:	b15d      	cbz	r5, 8000d1a <__udivmoddi4+0x212>
 8000d02:	ebb3 0208 	subs.w	r2, r3, r8
 8000d06:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d12:	40f1      	lsrs	r1, r6
 8000d14:	431f      	orrs	r7, r3
 8000d16:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	f1c2 0320 	rsb	r3, r2, #32
 8000d26:	40d8      	lsrs	r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d30:	4091      	lsls	r1, r2
 8000d32:	4301      	orrs	r1, r0
 8000d34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d40:	fb07 3610 	mls	r6, r7, r0, r3
 8000d44:	0c0b      	lsrs	r3, r1, #16
 8000d46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	fa04 f402 	lsl.w	r4, r4, r2
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x260>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5e:	d22f      	bcs.n	8000dc0 <__udivmoddi4+0x2b8>
 8000d60:	429e      	cmp	r6, r3
 8000d62:	d92d      	bls.n	8000dc0 <__udivmoddi4+0x2b8>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	b289      	uxth	r1, r1
 8000d6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d70:	fb07 3316 	mls	r3, r7, r6, r3
 8000d74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d78:	fb06 f30e 	mul.w	r3, r6, lr
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x28a>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d88:	d216      	bcs.n	8000db8 <__udivmoddi4+0x2b0>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d914      	bls.n	8000db8 <__udivmoddi4+0x2b0>
 8000d8e:	3e02      	subs	r6, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	1ac9      	subs	r1, r1, r3
 8000d94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d98:	e738      	b.n	8000c0c <__udivmoddi4+0x104>
 8000d9a:	462e      	mov	r6, r5
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	e705      	b.n	8000bac <__udivmoddi4+0xa4>
 8000da0:	4606      	mov	r6, r0
 8000da2:	e6e3      	b.n	8000b6c <__udivmoddi4+0x64>
 8000da4:	4618      	mov	r0, r3
 8000da6:	e6f8      	b.n	8000b9a <__udivmoddi4+0x92>
 8000da8:	454b      	cmp	r3, r9
 8000daa:	d2a9      	bcs.n	8000d00 <__udivmoddi4+0x1f8>
 8000dac:	ebb9 0802 	subs.w	r8, r9, r2
 8000db0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db4:	3801      	subs	r0, #1
 8000db6:	e7a3      	b.n	8000d00 <__udivmoddi4+0x1f8>
 8000db8:	4646      	mov	r6, r8
 8000dba:	e7ea      	b.n	8000d92 <__udivmoddi4+0x28a>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	e794      	b.n	8000cea <__udivmoddi4+0x1e2>
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	e7d1      	b.n	8000d68 <__udivmoddi4+0x260>
 8000dc4:	46d0      	mov	r8, sl
 8000dc6:	e77b      	b.n	8000cc0 <__udivmoddi4+0x1b8>
 8000dc8:	3b02      	subs	r3, #2
 8000dca:	4461      	add	r1, ip
 8000dcc:	e732      	b.n	8000c34 <__udivmoddi4+0x12c>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e709      	b.n	8000be6 <__udivmoddi4+0xde>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e742      	b.n	8000c5e <__udivmoddi4+0x156>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <__gedf2>:
 8000ddc:	f04f 3cff 	mov.w	ip, #4294967295
 8000de0:	e006      	b.n	8000df0 <__cmpdf2+0x4>
 8000de2:	bf00      	nop

08000de4 <__ledf2>:
 8000de4:	f04f 0c01 	mov.w	ip, #1
 8000de8:	e002      	b.n	8000df0 <__cmpdf2+0x4>
 8000dea:	bf00      	nop

08000dec <__cmpdf2>:
 8000dec:	f04f 0c01 	mov.w	ip, #1
 8000df0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000df4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000df8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e00:	bf18      	it	ne
 8000e02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e06:	d01b      	beq.n	8000e40 <__cmpdf2+0x54>
 8000e08:	b001      	add	sp, #4
 8000e0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e0e:	bf0c      	ite	eq
 8000e10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e14:	ea91 0f03 	teqne	r1, r3
 8000e18:	bf02      	ittt	eq
 8000e1a:	ea90 0f02 	teqeq	r0, r2
 8000e1e:	2000      	moveq	r0, #0
 8000e20:	4770      	bxeq	lr
 8000e22:	f110 0f00 	cmn.w	r0, #0
 8000e26:	ea91 0f03 	teq	r1, r3
 8000e2a:	bf58      	it	pl
 8000e2c:	4299      	cmppl	r1, r3
 8000e2e:	bf08      	it	eq
 8000e30:	4290      	cmpeq	r0, r2
 8000e32:	bf2c      	ite	cs
 8000e34:	17d8      	asrcs	r0, r3, #31
 8000e36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e3a:	f040 0001 	orr.w	r0, r0, #1
 8000e3e:	4770      	bx	lr
 8000e40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e48:	d102      	bne.n	8000e50 <__cmpdf2+0x64>
 8000e4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e4e:	d107      	bne.n	8000e60 <__cmpdf2+0x74>
 8000e50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e58:	d1d6      	bne.n	8000e08 <__cmpdf2+0x1c>
 8000e5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e5e:	d0d3      	beq.n	8000e08 <__cmpdf2+0x1c>
 8000e60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <__aeabi_cdrcmple>:
 8000e68:	4684      	mov	ip, r0
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4662      	mov	r2, ip
 8000e6e:	468c      	mov	ip, r1
 8000e70:	4619      	mov	r1, r3
 8000e72:	4663      	mov	r3, ip
 8000e74:	e000      	b.n	8000e78 <__aeabi_cdcmpeq>
 8000e76:	bf00      	nop

08000e78 <__aeabi_cdcmpeq>:
 8000e78:	b501      	push	{r0, lr}
 8000e7a:	f7ff ffb7 	bl	8000dec <__cmpdf2>
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	bf48      	it	mi
 8000e82:	f110 0f00 	cmnmi.w	r0, #0
 8000e86:	bd01      	pop	{r0, pc}

08000e88 <__aeabi_dcmpeq>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff fff4 	bl	8000e78 <__aeabi_cdcmpeq>
 8000e90:	bf0c      	ite	eq
 8000e92:	2001      	moveq	r0, #1
 8000e94:	2000      	movne	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_dcmplt>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffea 	bl	8000e78 <__aeabi_cdcmpeq>
 8000ea4:	bf34      	ite	cc
 8000ea6:	2001      	movcc	r0, #1
 8000ea8:	2000      	movcs	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_dcmple>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffe0 	bl	8000e78 <__aeabi_cdcmpeq>
 8000eb8:	bf94      	ite	ls
 8000eba:	2001      	movls	r0, #1
 8000ebc:	2000      	movhi	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_dcmpge>:
 8000ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec8:	f7ff ffce 	bl	8000e68 <__aeabi_cdrcmple>
 8000ecc:	bf94      	ite	ls
 8000ece:	2001      	movls	r0, #1
 8000ed0:	2000      	movhi	r0, #0
 8000ed2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_dcmpgt>:
 8000ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000edc:	f7ff ffc4 	bl	8000e68 <__aeabi_cdrcmple>
 8000ee0:	bf34      	ite	cc
 8000ee2:	2001      	movcc	r0, #1
 8000ee4:	2000      	movcs	r0, #0
 8000ee6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f30:	b0ad      	sub	sp, #180	; 0xb4
 8000f32:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret;
	uint8_t buf[16];
	char usart_buf[82];
	uint16_t C1 = 1, C2 = 1, C3 = 1, C4 = 1, C5 = 1, C6 = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8000f40:	2301      	movs	r3, #1
 8000f42:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8000f46:	2301      	movs	r3, #1
 8000f48:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8000f52:	2301      	movs	r3, #1
 8000f54:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	int accel_x = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint32_t pressure = 0, temp = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int32_t dT = 0, TEMP, P;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	int64_t OFF = 0, SENS = 0;
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8000f7c:	f04f 0200 	mov.w	r2, #0
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f001 f8dc 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 fc5e 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 fd80 	bl	8001a94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f94:	f000 fcc4 	bl	8001920 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f98:	f000 fcf0 	bl	800197c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f9c:	f008 fb46 	bl	800962c <MX_USB_HOST_Init>
  MX_USART2_Init();
 8000fa0:	f000 fd22 	bl	80019e8 <MX_USART2_Init>
  MX_USART3_UART_Init();
 8000fa4:	f000 fd4c 	bl	8001a40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2110      	movs	r1, #16
 8000fac:	48b9      	ldr	r0, [pc, #740]	; (8001294 <main+0x368>)
 8000fae:	f001 fc0d 	bl	80027cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fb2:	2064      	movs	r0, #100	; 0x64
 8000fb4:	f001 f938 	bl	8002228 <HAL_Delay>

	// Send reset command to baro sensor on initialization
	buf[0] = BARO_RESET;
 8000fb8:	231e      	movs	r3, #30
 8000fba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8000fbe:	23ee      	movs	r3, #238	; 0xee
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	48b2      	ldr	r0, [pc, #712]	; (8001298 <main+0x36c>)
 8000fd0:	f003 f964 	bl	800429c <HAL_I2C_Master_Transmit>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 8000fda:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <main+0xc6>
		strcpy((char*)buf, "Error TX_1\r\n");
 8000fe2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000fe6:	4aad      	ldr	r2, [pc, #692]	; (800129c <main+0x370>)
 8000fe8:	461e      	mov	r6, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fee:	c607      	stmia	r6!, {r0, r1, r2}
 8000ff0:	7033      	strb	r3, [r6, #0]
	}
	HAL_Delay(50);
 8000ff2:	2032      	movs	r0, #50	; 0x32
 8000ff4:	f001 f918 	bl	8002228 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C1;
 8000ff8:	22a0      	movs	r2, #160	; 0xa0
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001004:	23ee      	movs	r3, #238	; 0xee
 8001006:	b299      	uxth	r1, r3
 8001008:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	48a0      	ldr	r0, [pc, #640]	; (8001298 <main+0x36c>)
 8001016:	f003 f941 	bl	800429c <HAL_I2C_Master_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 8001020:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <main+0x10e>
		strcpy((char*)buf, "Error TX_1a\r\n");
 8001028:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800102c:	4a9c      	ldr	r2, [pc, #624]	; (80012a0 <main+0x374>)
 800102e:	461e      	mov	r6, r3
 8001030:	4613      	mov	r3, r2
 8001032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001034:	c607      	stmia	r6!, {r0, r1, r2}
 8001036:	8033      	strh	r3, [r6, #0]
 8001038:	e026      	b.n	8001088 <main+0x15c>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800103a:	23ee      	movs	r3, #238	; 0xee
 800103c:	b299      	uxth	r1, r3
 800103e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2302      	movs	r3, #2
 800104a:	4893      	ldr	r0, [pc, #588]	; (8001298 <main+0x36c>)
 800104c:	f003 fa24 	bl	8004498 <HAL_I2C_Master_Receive>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 8001056:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800105a:	2b00      	cmp	r3, #0
 800105c:	d009      	beq.n	8001072 <main+0x146>
			  strcpy((char*)buf, "Error Rx\r\n");
 800105e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001062:	4a90      	ldr	r2, [pc, #576]	; (80012a4 <main+0x378>)
 8001064:	ca07      	ldmia	r2, {r0, r1, r2}
 8001066:	c303      	stmia	r3!, {r0, r1}
 8001068:	801a      	strh	r2, [r3, #0]
 800106a:	3302      	adds	r3, #2
 800106c:	0c12      	lsrs	r2, r2, #16
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e00a      	b.n	8001088 <main+0x15c>
		  } else {
			  C1 = ((buf[0] << 8) | buf[1]);
 8001072:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		  }
	}
	HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f001 f8cd 	bl	8002228 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C2;
 800108e:	22a0      	movs	r2, #160	; 0xa0
 8001090:	2304      	movs	r3, #4
 8001092:	4313      	orrs	r3, r2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800109a:	23ee      	movs	r3, #238	; 0xee
 800109c:	b299      	uxth	r1, r3
 800109e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	487b      	ldr	r0, [pc, #492]	; (8001298 <main+0x36c>)
 80010ac:	f003 f8f6 	bl	800429c <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 80010b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <main+0x1a4>
		strcpy((char*)buf, "Error TX_1b\r\n");
 80010be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010c2:	4a79      	ldr	r2, [pc, #484]	; (80012a8 <main+0x37c>)
 80010c4:	461e      	mov	r6, r3
 80010c6:	4613      	mov	r3, r2
 80010c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ca:	c607      	stmia	r6!, {r0, r1, r2}
 80010cc:	8033      	strh	r3, [r6, #0]
 80010ce:	e026      	b.n	800111e <main+0x1f2>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 80010d0:	23ee      	movs	r3, #238	; 0xee
 80010d2:	b299      	uxth	r1, r3
 80010d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2302      	movs	r3, #2
 80010e0:	486d      	ldr	r0, [pc, #436]	; (8001298 <main+0x36c>)
 80010e2:	f003 f9d9 	bl	8004498 <HAL_I2C_Master_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 80010ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d009      	beq.n	8001108 <main+0x1dc>
			  strcpy((char*)buf, "Error Rx\r\n");
 80010f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010f8:	4a6a      	ldr	r2, [pc, #424]	; (80012a4 <main+0x378>)
 80010fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fc:	c303      	stmia	r3!, {r0, r1}
 80010fe:	801a      	strh	r2, [r3, #0]
 8001100:	3302      	adds	r3, #2
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e00a      	b.n	800111e <main+0x1f2>
		  } else {
			  C2 = ((buf[0] << 8) | buf[1]);
 8001108:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001114:	b21b      	sxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b21b      	sxth	r3, r3
 800111a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
		  }
	}
	HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	; 0x32
 8001120:	f001 f882 	bl	8002228 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C3;
 8001124:	22a0      	movs	r2, #160	; 0xa0
 8001126:	2306      	movs	r3, #6
 8001128:	4313      	orrs	r3, r2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001130:	23ee      	movs	r3, #238	; 0xee
 8001132:	b299      	uxth	r1, r3
 8001134:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	4855      	ldr	r0, [pc, #340]	; (8001298 <main+0x36c>)
 8001142:	f003 f8ab 	bl	800429c <HAL_I2C_Master_Transmit>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 800114c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <main+0x23a>
		strcpy((char*)buf, "Error TX_1c\r\n");
 8001154:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001158:	4a54      	ldr	r2, [pc, #336]	; (80012ac <main+0x380>)
 800115a:	461e      	mov	r6, r3
 800115c:	4613      	mov	r3, r2
 800115e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001160:	c607      	stmia	r6!, {r0, r1, r2}
 8001162:	8033      	strh	r3, [r6, #0]
 8001164:	e026      	b.n	80011b4 <main+0x288>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 8001166:	23ee      	movs	r3, #238	; 0xee
 8001168:	b299      	uxth	r1, r3
 800116a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2302      	movs	r3, #2
 8001176:	4848      	ldr	r0, [pc, #288]	; (8001298 <main+0x36c>)
 8001178:	f003 f98e 	bl	8004498 <HAL_I2C_Master_Receive>
 800117c:	4603      	mov	r3, r0
 800117e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 8001182:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <main+0x272>
			  strcpy((char*)buf, "Error Rx\r\n");
 800118a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800118e:	4a45      	ldr	r2, [pc, #276]	; (80012a4 <main+0x378>)
 8001190:	ca07      	ldmia	r2, {r0, r1, r2}
 8001192:	c303      	stmia	r3!, {r0, r1}
 8001194:	801a      	strh	r2, [r3, #0]
 8001196:	3302      	adds	r3, #2
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e00a      	b.n	80011b4 <main+0x288>
		  } else {
			  C3 = ((buf[0] << 8) | buf[1]);
 800119e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		  }
	}
	HAL_Delay(50);
 80011b4:	2032      	movs	r0, #50	; 0x32
 80011b6:	f001 f837 	bl	8002228 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C4;
 80011ba:	22a0      	movs	r2, #160	; 0xa0
 80011bc:	2308      	movs	r3, #8
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80011c6:	23ee      	movs	r3, #238	; 0xee
 80011c8:	b299      	uxth	r1, r3
 80011ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	4830      	ldr	r0, [pc, #192]	; (8001298 <main+0x36c>)
 80011d8:	f003 f860 	bl	800429c <HAL_I2C_Master_Transmit>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 80011e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d008      	beq.n	80011fc <main+0x2d0>
		strcpy((char*)buf, "Error TX_1d\r\n");
 80011ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ee:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <main+0x384>)
 80011f0:	461e      	mov	r6, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011f6:	c607      	stmia	r6!, {r0, r1, r2}
 80011f8:	8033      	strh	r3, [r6, #0]
 80011fa:	e026      	b.n	800124a <main+0x31e>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 80011fc:	23ee      	movs	r3, #238	; 0xee
 80011fe:	b299      	uxth	r1, r3
 8001200:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	4822      	ldr	r0, [pc, #136]	; (8001298 <main+0x36c>)
 800120e:	f003 f943 	bl	8004498 <HAL_I2C_Master_Receive>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 8001218:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <main+0x308>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001220:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <main+0x378>)
 8001226:	ca07      	ldmia	r2, {r0, r1, r2}
 8001228:	c303      	stmia	r3!, {r0, r1}
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	3302      	adds	r3, #2
 800122e:	0c12      	lsrs	r2, r2, #16
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e00a      	b.n	800124a <main+0x31e>
		  } else {
			  C4 = ((buf[0] << 8) | buf[1]);
 8001234:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		  }
	}
	HAL_Delay(50);
 800124a:	2032      	movs	r0, #50	; 0x32
 800124c:	f000 ffec 	bl	8002228 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C5;
 8001250:	22a0      	movs	r2, #160	; 0xa0
 8001252:	230a      	movs	r3, #10
 8001254:	4313      	orrs	r3, r2
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 800125c:	23ee      	movs	r3, #238	; 0xee
 800125e:	b299      	uxth	r1, r3
 8001260:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <main+0x36c>)
 800126e:	f003 f815 	bl	800429c <HAL_I2C_Master_Transmit>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 8001278:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01b      	beq.n	80012b8 <main+0x38c>
		strcpy((char*)buf, "Error TX_1e\r\n");
 8001280:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <main+0x388>)
 8001286:	461e      	mov	r6, r3
 8001288:	4613      	mov	r3, r2
 800128a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128c:	c607      	stmia	r6!, {r0, r1, r2}
 800128e:	8033      	strh	r3, [r6, #0]
 8001290:	e039      	b.n	8001306 <main+0x3da>
 8001292:	bf00      	nop
 8001294:	40020000 	.word	0x40020000
 8001298:	200000ac 	.word	0x200000ac
 800129c:	0800a5b4 	.word	0x0800a5b4
 80012a0:	0800a5c4 	.word	0x0800a5c4
 80012a4:	0800a5d4 	.word	0x0800a5d4
 80012a8:	0800a5e0 	.word	0x0800a5e0
 80012ac:	0800a5f0 	.word	0x0800a5f0
 80012b0:	0800a600 	.word	0x0800a600
 80012b4:	0800a610 	.word	0x0800a610
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 80012b8:	23ee      	movs	r3, #238	; 0xee
 80012ba:	b299      	uxth	r1, r3
 80012bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2302      	movs	r3, #2
 80012c8:	4896      	ldr	r0, [pc, #600]	; (8001524 <main+0x5f8>)
 80012ca:	f003 f8e5 	bl	8004498 <HAL_I2C_Master_Receive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 80012d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <main+0x3c4>
			  strcpy((char*)buf, "Error Rx\r\n");
 80012dc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012e0:	4a91      	ldr	r2, [pc, #580]	; (8001528 <main+0x5fc>)
 80012e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012e4:	c303      	stmia	r3!, {r0, r1}
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	3302      	adds	r3, #2
 80012ea:	0c12      	lsrs	r2, r2, #16
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e00a      	b.n	8001306 <main+0x3da>
		  } else {
			  C5 = ((buf[0] << 8) | buf[1]);
 80012f0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
		  }
	}
	HAL_Delay(50);
 8001306:	2032      	movs	r0, #50	; 0x32
 8001308:	f000 ff8e 	bl	8002228 <HAL_Delay>

	buf[0] = BARO_PROM_ADDR | BARO_C6;
 800130c:	22a0      	movs	r2, #160	; 0xa0
 800130e:	230c      	movs	r3, #12
 8001310:	4313      	orrs	r3, r2
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001318:	23ee      	movs	r3, #238	; 0xee
 800131a:	b299      	uxth	r1, r3
 800131c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	487e      	ldr	r0, [pc, #504]	; (8001524 <main+0x5f8>)
 800132a:	f002 ffb7 	bl	800429c <HAL_I2C_Master_Transmit>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (ret != HAL_OK){
 8001334:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <main+0x422>
		strcpy((char*)buf, "Error TX_1f\r\n");
 800133c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001340:	4a7a      	ldr	r2, [pc, #488]	; (800152c <main+0x600>)
 8001342:	461e      	mov	r6, r3
 8001344:	4613      	mov	r3, r2
 8001346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001348:	c607      	stmia	r6!, {r0, r1, r2}
 800134a:	8033      	strh	r3, [r6, #0]
 800134c:	e026      	b.n	800139c <main+0x470>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800134e:	23ee      	movs	r3, #238	; 0xee
 8001350:	b299      	uxth	r1, r3
 8001352:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	4871      	ldr	r0, [pc, #452]	; (8001524 <main+0x5f8>)
 8001360:	f003 f89a 	bl	8004498 <HAL_I2C_Master_Receive>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 800136a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <main+0x45a>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001372:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <main+0x5fc>)
 8001378:	ca07      	ldmia	r2, {r0, r1, r2}
 800137a:	c303      	stmia	r3!, {r0, r1}
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	3302      	adds	r3, #2
 8001380:	0c12      	lsrs	r2, r2, #16
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e00a      	b.n	800139c <main+0x470>
		  } else {
			  C6 = ((buf[0] << 8) | buf[1]);
 8001386:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21b      	sxth	r3, r3
 8001398:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
		  }
	}
	HAL_Delay(50);
 800139c:	2032      	movs	r0, #50	; 0x32
 800139e:	f000 ff43 	bl	8002228 <HAL_Delay>
  while (1)
  {

	  // Convert to reading pressure values

	  buf[0] = BARO_CONVERT_PRESSURE;
 80013a2:	2348      	movs	r3, #72	; 0x48
 80013a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80013a8:	23ee      	movs	r3, #238	; 0xee
 80013aa:	b299      	uxth	r1, r3
 80013ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	485a      	ldr	r0, [pc, #360]	; (8001524 <main+0x5f8>)
 80013ba:	f002 ff6f 	bl	800429c <HAL_I2C_Master_Transmit>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if (ret != HAL_OK){
 80013c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <main+0x4b0>
		  strcpy((char*)buf, "Error TX_2\r\n");
 80013cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013d0:	4a57      	ldr	r2, [pc, #348]	; (8001530 <main+0x604>)
 80013d2:	461e      	mov	r6, r3
 80013d4:	4613      	mov	r3, r2
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	c607      	stmia	r6!, {r0, r1, r2}
 80013da:	7033      	strb	r3, [r6, #0]
	  }

	  HAL_Delay(15);
 80013dc:	200f      	movs	r0, #15
 80013de:	f000 ff23 	bl	8002228 <HAL_Delay>

	  // Read Pressure value

	  buf[0] = ADC_BARO_READ_ADDR;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80013e8:	23ee      	movs	r3, #238	; 0xee
 80013ea:	b299      	uxth	r1, r3
 80013ec:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	484a      	ldr	r0, [pc, #296]	; (8001524 <main+0x5f8>)
 80013fa:	f002 ff4f 	bl	800429c <HAL_I2C_Master_Transmit>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if (ret != HAL_OK){
 8001404:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <main+0x4f2>
		  strcpy((char*)buf, "Error TX_3\r\n");
 800140c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <main+0x608>)
 8001412:	461e      	mov	r6, r3
 8001414:	4613      	mov	r3, r2
 8001416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001418:	c607      	stmia	r6!, {r0, r1, r2}
 800141a:	7033      	strb	r3, [r6, #0]
 800141c:	e027      	b.n	800146e <main+0x542>
	  } else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 800141e:	23ee      	movs	r3, #238	; 0xee
 8001420:	b299      	uxth	r1, r3
 8001422:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2303      	movs	r3, #3
 800142e:	483d      	ldr	r0, [pc, #244]	; (8001524 <main+0x5f8>)
 8001430:	f003 f832 	bl	8004498 <HAL_I2C_Master_Receive>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 800143a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <main+0x52a>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001442:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001446:	4a38      	ldr	r2, [pc, #224]	; (8001528 <main+0x5fc>)
 8001448:	ca07      	ldmia	r2, {r0, r1, r2}
 800144a:	c303      	stmia	r3!, {r0, r1}
 800144c:	801a      	strh	r2, [r3, #0]
 800144e:	3302      	adds	r3, #2
 8001450:	0c12      	lsrs	r2, r2, #16
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e00b      	b.n	800146e <main+0x542>
		  } else {
			  pressure = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 8001456:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800145a:	041a      	lsls	r2, r3, #16
 800145c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4313      	orrs	r3, r2
 8001464:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001468:	4313      	orrs	r3, r2
 800146a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		  }
	  }

	  //Convert to reading temperature value

	  buf[0] = BARO_CONVERT_TEMP;
 800146e:	2358      	movs	r3, #88	; 0x58
 8001470:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	 	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001474:	23ee      	movs	r3, #238	; 0xee
 8001476:	b299      	uxth	r1, r3
 8001478:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	4827      	ldr	r0, [pc, #156]	; (8001524 <main+0x5f8>)
 8001486:	f002 ff09 	bl	800429c <HAL_I2C_Master_Transmit>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	 	  if (ret != HAL_OK){
 8001490:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <main+0x57c>
	 		  strcpy((char*)buf, "Error TX_2\r\n");
 8001498:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800149c:	4a24      	ldr	r2, [pc, #144]	; (8001530 <main+0x604>)
 800149e:	461e      	mov	r6, r3
 80014a0:	4613      	mov	r3, r2
 80014a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a4:	c607      	stmia	r6!, {r0, r1, r2}
 80014a6:	7033      	strb	r3, [r6, #0]
	 	  }

	  HAL_Delay(15);
 80014a8:	200f      	movs	r0, #15
 80014aa:	f000 febd 	bl	8002228 <HAL_Delay>

	  // Read temperature value

	  buf[0] = ADC_BARO_READ_ADDR;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80014b4:	23ee      	movs	r3, #238	; 0xee
 80014b6:	b299      	uxth	r1, r3
 80014b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <main+0x5f8>)
 80014c6:	f002 fee9 	bl	800429c <HAL_I2C_Master_Transmit>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  if (ret != HAL_OK){
 80014d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d008      	beq.n	80014ea <main+0x5be>
		  strcpy((char*)buf, "Error TX_3\r\n");
 80014d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014dc:	4a15      	ldr	r2, [pc, #84]	; (8001534 <main+0x608>)
 80014de:	461e      	mov	r6, r3
 80014e0:	4613      	mov	r3, r2
 80014e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e4:	c607      	stmia	r6!, {r0, r1, r2}
 80014e6:	7033      	strb	r3, [r6, #0]
 80014e8:	e032      	b.n	8001550 <main+0x624>
	  } else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 80014ea:	23ee      	movs	r3, #238	; 0xee
 80014ec:	b299      	uxth	r1, r3
 80014ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2303      	movs	r3, #3
 80014fa:	480a      	ldr	r0, [pc, #40]	; (8001524 <main+0x5f8>)
 80014fc:	f002 ffcc 	bl	8004498 <HAL_I2C_Master_Receive>
 8001500:	4603      	mov	r3, r0
 8001502:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  if (ret != HAL_OK){
 8001506:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800150a:	2b00      	cmp	r3, #0
 800150c:	d014      	beq.n	8001538 <main+0x60c>
			  strcpy((char*)buf, "Error Rx\r\n");
 800150e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <main+0x5fc>)
 8001514:	ca07      	ldmia	r2, {r0, r1, r2}
 8001516:	c303      	stmia	r3!, {r0, r1}
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	3302      	adds	r3, #2
 800151c:	0c12      	lsrs	r2, r2, #16
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e016      	b.n	8001550 <main+0x624>
 8001522:	bf00      	nop
 8001524:	200000ac 	.word	0x200000ac
 8001528:	0800a5d4 	.word	0x0800a5d4
 800152c:	0800a620 	.word	0x0800a620
 8001530:	0800a630 	.word	0x0800a630
 8001534:	0800a640 	.word	0x0800a640
		  } else {
			  temp = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 8001538:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	4313      	orrs	r3, r2
 8001546:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800154a:	4313      	orrs	r3, r2
 800154c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		  }
	  }

	  sprintf((char*)buf, "%u \r\n", temp);
 8001550:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001554:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001558:	49ae      	ldr	r1, [pc, #696]	; (8001814 <main+0x8e8>)
 800155a:	4618      	mov	r0, r3
 800155c:	f008 fca0 	bl	8009ea0 <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001560:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fe33 	bl	80001d0 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29a      	uxth	r2, r3
 800156e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	48a8      	ldr	r0, [pc, #672]	; (8001818 <main+0x8ec>)
 8001578:	f004 fd05 	bl	8005f86 <HAL_USART_Transmit>

	  dT = temp - C5*pow(2,8);
 800157c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001580:	f7fe ffc0 	bl	8000504 <__aeabi_ui2d>
 8001584:	4682      	mov	sl, r0
 8001586:	468b      	mov	fp, r1
 8001588:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffc9 	bl	8000524 <__aeabi_i2d>
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4ba1      	ldr	r3, [pc, #644]	; (800181c <main+0x8f0>)
 8001598:	f7ff f82e 	bl	80005f8 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4650      	mov	r0, sl
 80015a2:	4659      	mov	r1, fp
 80015a4:	f7fe fe70 	bl	8000288 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fa34 	bl	8000a1c <__aeabi_d2iz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  TEMP = 2000 + dT*C6/pow(2,23);
 80015ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80015be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffac 	bl	8000524 <__aeabi_i2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b93      	ldr	r3, [pc, #588]	; (8001820 <main+0x8f4>)
 80015d2:	f7ff f93b 	bl	800084c <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b90      	ldr	r3, [pc, #576]	; (8001824 <main+0x8f8>)
 80015e4:	f7fe fe52 	bl	800028c <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f7ff fa14 	bl	8000a1c <__aeabi_d2iz>
 80015f4:	4603      	mov	r3, r0
 80015f6:	673b      	str	r3, [r7, #112]	; 0x70
	  strcpy((char*)buf, "Temperature: ");
 80015f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015fc:	4a8a      	ldr	r2, [pc, #552]	; (8001828 <main+0x8fc>)
 80015fe:	461e      	mov	r6, r3
 8001600:	4613      	mov	r3, r2
 8001602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001604:	c607      	stmia	r6!, {r0, r1, r2}
 8001606:	8033      	strh	r3, [r6, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001608:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe fddf 	bl	80001d0 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	487e      	ldr	r0, [pc, #504]	; (8001818 <main+0x8ec>)
 8001620:	f004 fcb1 	bl	8005f86 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i.%02u C\r\n", (int)TEMP/100, (unsigned int)TEMP%100);
 8001624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001626:	4a81      	ldr	r2, [pc, #516]	; (800182c <main+0x900>)
 8001628:	fb82 1203 	smull	r1, r2, r2, r3
 800162c:	1152      	asrs	r2, r2, #5
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad1      	subs	r1, r2, r3
 8001632:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001634:	4b7d      	ldr	r3, [pc, #500]	; (800182c <main+0x900>)
 8001636:	fba3 0302 	umull	r0, r3, r3, r2
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2064      	movs	r0, #100	; 0x64
 800163e:	fb00 f303 	mul.w	r3, r0, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001648:	460a      	mov	r2, r1
 800164a:	4979      	ldr	r1, [pc, #484]	; (8001830 <main+0x904>)
 800164c:	f008 fc28 	bl	8009ea0 <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001650:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fdbb 	bl	80001d0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	486c      	ldr	r0, [pc, #432]	; (8001818 <main+0x8ec>)
 8001668:	f004 fc8d 	bl	8005f86 <HAL_USART_Transmit>

	  OFF = C2*pow(2,16) + (C4*dT)/pow(2,7);
 800166c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff57 	bl	8000524 <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <main+0x908>)
 800167c:	f7fe ffbc 	bl	80005f8 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4692      	mov	sl, r2
 8001686:	469b      	mov	fp, r3
 8001688:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800168c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ff45 	bl	8000524 <__aeabi_i2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b66      	ldr	r3, [pc, #408]	; (8001838 <main+0x90c>)
 80016a0:	f7ff f8d4 	bl	800084c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4650      	mov	r0, sl
 80016aa:	4659      	mov	r1, fp
 80016ac:	f7fe fdee 	bl	800028c <__adddf3>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff f9f0 	bl	8000a9c <__aeabi_d2lz>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  SENS = C1*pow(2,15) + (C3*dT)/pow(2,8);
 80016c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff2b 	bl	8000524 <__aeabi_i2d>
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b5a      	ldr	r3, [pc, #360]	; (800183c <main+0x910>)
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4692      	mov	sl, r2
 80016de:	469b      	mov	fp, r3
 80016e0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80016e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <main+0x8f0>)
 80016f8:	f7ff f8a8 	bl	800084c <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4650      	mov	r0, sl
 8001702:	4659      	mov	r1, fp
 8001704:	f7fe fdc2 	bl	800028c <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f9c4 	bl	8000a9c <__aeabi_d2lz>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	  P = (pressure*SENS/pow(2,21) - OFF)/pow(2,15);
 800171c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001720:	2200      	movs	r2, #0
 8001722:	4698      	mov	r8, r3
 8001724:	4691      	mov	r9, r2
 8001726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001728:	fb09 f203 	mul.w	r2, r9, r3
 800172c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800172e:	fb08 f303 	mul.w	r3, r8, r3
 8001732:	4413      	add	r3, r2
 8001734:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001736:	fba2 4508 	umull	r4, r5, r2, r8
 800173a:	442b      	add	r3, r5
 800173c:	461d      	mov	r5, r3
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff2b 	bl	800059c <__aeabi_l2d>
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <main+0x914>)
 800174c:	f7ff f87e 	bl	800084c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4692      	mov	sl, r2
 8001756:	469b      	mov	fp, r3
 8001758:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800175c:	f7fe ff1e 	bl	800059c <__aeabi_l2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4650      	mov	r0, sl
 8001766:	4659      	mov	r1, fp
 8001768:	f7fe fd8e 	bl	8000288 <__aeabi_dsub>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b30      	ldr	r3, [pc, #192]	; (800183c <main+0x910>)
 800177a:	f7ff f867 	bl	800084c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff f949 	bl	8000a1c <__aeabi_d2iz>
 800178a:	4603      	mov	r3, r0
 800178c:	66fb      	str	r3, [r7, #108]	; 0x6c

	  strcpy((char*)buf, "Pressure: ");
 800178e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001792:	4a2c      	ldr	r2, [pc, #176]	; (8001844 <main+0x918>)
 8001794:	ca07      	ldmia	r2, {r0, r1, r2}
 8001796:	c303      	stmia	r3!, {r0, r1}
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	3302      	adds	r3, #2
 800179c:	0c12      	lsrs	r2, r2, #16
 800179e:	701a      	strb	r2, [r3, #0]
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80017a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fd13 	bl	80001d0 <strlen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	4818      	ldr	r0, [pc, #96]	; (8001818 <main+0x8ec>)
 80017b8:	f004 fbe5 	bl	8005f86 <HAL_USART_Transmit>
	  sprintf((char*)buf, "%i.%02u Pa\r\n", (int)P/100, (unsigned int)P % 100 );
 80017bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017be:	4a1b      	ldr	r2, [pc, #108]	; (800182c <main+0x900>)
 80017c0:	fb82 1203 	smull	r1, r2, r2, r3
 80017c4:	1152      	asrs	r2, r2, #5
 80017c6:	17db      	asrs	r3, r3, #31
 80017c8:	1ad1      	subs	r1, r2, r3
 80017ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <main+0x900>)
 80017ce:	fba3 0302 	umull	r0, r3, r3, r2
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	fb00 f303 	mul.w	r3, r0, r3
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80017e0:	460a      	mov	r2, r1
 80017e2:	4919      	ldr	r1, [pc, #100]	; (8001848 <main+0x91c>)
 80017e4:	f008 fb5c 	bl	8009ea0 <siprintf>
	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80017e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fcef 	bl	80001d0 <strlen>
 80017f2:	4603      	mov	r3, r0
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	4806      	ldr	r0, [pc, #24]	; (8001818 <main+0x8ec>)
 8001800:	f004 fbc1 	bl	8005f86 <HAL_USART_Transmit>

	  HAL_Delay(500);
 8001804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001808:	f000 fd0e 	bl	8002228 <HAL_Delay>
//	  HAL_USART_Transmit(&husart2, buf, strlen((char*)buf), HAL_MAX_DELAY);

	  //HAL_Delay(500);

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800180c:	f007 ff34 	bl	8009678 <MX_USB_HOST_Process>
	  buf[0] = BARO_CONVERT_PRESSURE;
 8001810:	e5c7      	b.n	80013a2 <main+0x476>
 8001812:	bf00      	nop
 8001814:	0800a650 	.word	0x0800a650
 8001818:	20000158 	.word	0x20000158
 800181c:	40700000 	.word	0x40700000
 8001820:	41600000 	.word	0x41600000
 8001824:	409f4000 	.word	0x409f4000
 8001828:	0800a658 	.word	0x0800a658
 800182c:	51eb851f 	.word	0x51eb851f
 8001830:	0800a668 	.word	0x0800a668
 8001834:	40f00000 	.word	0x40f00000
 8001838:	40600000 	.word	0x40600000
 800183c:	40e00000 	.word	0x40e00000
 8001840:	41400000 	.word	0x41400000
 8001844:	0800a674 	.word	0x0800a674
 8001848:	0800a680 	.word	0x0800a680

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	; 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2230      	movs	r2, #48	; 0x30
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f008 fa28 	bl	8009cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <SystemClock_Config+0xcc>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	; 0x40
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <SystemClock_Config+0xcc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <SystemClock_Config+0xd0>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SystemClock_Config+0xd0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b2:	2302      	movs	r3, #2
 80018b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018ca:	2307      	movs	r3, #7
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	4618      	mov	r0, r3
 80018d4:	f003 fb34 	bl	8004f40 <HAL_RCC_OscConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018de:	f000 f9fb 	bl	8001cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e2:	230f      	movs	r3, #15
 80018e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e6:	2302      	movs	r3, #2
 80018e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2105      	movs	r1, #5
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fd95 	bl	8005430 <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800190c:	f000 f9e4 	bl	8001cd8 <Error_Handler>
  }
}
 8001910:	bf00      	nop
 8001912:	3750      	adds	r7, #80	; 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <MX_I2C1_Init+0x50>)
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <MX_I2C1_Init+0x54>)
 8001928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_I2C1_Init+0x50>)
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <MX_I2C1_Init+0x58>)
 800192e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_I2C1_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_I2C1_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_I2C1_Init+0x50>)
 800193e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_I2C1_Init+0x50>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_I2C1_Init+0x50>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_I2C1_Init+0x50>)
 800195e:	f002 fb59 	bl	8004014 <HAL_I2C_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001968:	f000 f9b6 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000ac 	.word	0x200000ac
 8001974:	40005400 	.word	0x40005400
 8001978:	000186a0 	.word	0x000186a0

0800197c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_SPI1_Init+0x64>)
 8001982:	4a18      	ldr	r2, [pc, #96]	; (80019e4 <MX_SPI1_Init+0x68>)
 8001984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_SPI1_Init+0x64>)
 8001988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800198c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019b0:	2230      	movs	r2, #48	; 0x30
 80019b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019c8:	220a      	movs	r2, #10
 80019ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_SPI1_Init+0x64>)
 80019ce:	f003 ff4f 	bl	8005870 <HAL_SPI_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019d8:	f000 f97e 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000100 	.word	0x20000100
 80019e4:	40013000 	.word	0x40013000

080019e8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_USART2_Init+0x50>)
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <MX_USART2_Init+0x54>)
 80019f0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_USART2_Init+0x50>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_USART2_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_USART2_Init+0x50>)
 8001a26:	f004 fa6d 	bl	8005f04 <HAL_USART_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001a30:	f000 f952 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000158 	.word	0x20000158
 8001a3c:	40004400 	.word	0x40004400

08001a40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <MX_USART3_UART_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_USART3_UART_Init+0x4c>)
 8001a78:	f003 ff83 	bl	8005982 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f929 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000019c 	.word	0x2000019c
 8001a90:	40004800 	.word	0x40004800

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	4b84      	ldr	r3, [pc, #528]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a83      	ldr	r2, [pc, #524]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001ab4:	f043 0310 	orr.w	r3, r3, #16
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b81      	ldr	r3, [pc, #516]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	4b7d      	ldr	r3, [pc, #500]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a7c      	ldr	r2, [pc, #496]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b7a      	ldr	r3, [pc, #488]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a75      	ldr	r2, [pc, #468]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b6f      	ldr	r3, [pc, #444]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a6e      	ldr	r2, [pc, #440]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a67      	ldr	r2, [pc, #412]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a60      	ldr	r2, [pc, #384]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <MX_GPIO_Init+0x22c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2108      	movs	r1, #8
 8001b56:	485b      	ldr	r0, [pc, #364]	; (8001cc4 <MX_GPIO_Init+0x230>)
 8001b58:	f000 fe38 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2101      	movs	r1, #1
 8001b60:	4859      	ldr	r0, [pc, #356]	; (8001cc8 <MX_GPIO_Init+0x234>)
 8001b62:	f000 fe33 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2110      	movs	r1, #16
 8001b6a:	4858      	ldr	r0, [pc, #352]	; (8001ccc <MX_GPIO_Init+0x238>)
 8001b6c:	f000 fe2e 	bl	80027cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b70:	2200      	movs	r2, #0
 8001b72:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b76:	4856      	ldr	r0, [pc, #344]	; (8001cd0 <MX_GPIO_Init+0x23c>)
 8001b78:	f000 fe28 	bl	80027cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	484c      	ldr	r0, [pc, #304]	; (8001cc4 <MX_GPIO_Init+0x230>)
 8001b94:	f000 fc7e 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	4846      	ldr	r0, [pc, #280]	; (8001cc8 <MX_GPIO_Init+0x234>)
 8001bb0:	f000 fc70 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	483e      	ldr	r0, [pc, #248]	; (8001cc8 <MX_GPIO_Init+0x234>)
 8001bd0:	f000 fc60 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bd8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4838      	ldr	r0, [pc, #224]	; (8001ccc <MX_GPIO_Init+0x238>)
 8001bea:	f000 fc53 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4831      	ldr	r0, [pc, #196]	; (8001ccc <MX_GPIO_Init+0x238>)
 8001c06:	f000 fc45 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	482d      	ldr	r0, [pc, #180]	; (8001cd4 <MX_GPIO_Init+0x240>)
 8001c1e:	f000 fc39 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c34:	2305      	movs	r3, #5
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4825      	ldr	r0, [pc, #148]	; (8001cd4 <MX_GPIO_Init+0x240>)
 8001c40:	f000 fc28 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c44:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001c48:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <MX_GPIO_Init+0x23c>)
 8001c5e:	f000 fc19 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c62:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c74:	2306      	movs	r3, #6
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4812      	ldr	r0, [pc, #72]	; (8001cc8 <MX_GPIO_Init+0x234>)
 8001c80:	f000 fc08 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c84:	2320      	movs	r3, #32
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	480e      	ldr	r0, [pc, #56]	; (8001cd0 <MX_GPIO_Init+0x23c>)
 8001c98:	f000 fbfc 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ca0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ca4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <MX_GPIO_Init+0x230>)
 8001cb2:	f000 fbef 	bl	8002494 <HAL_GPIO_Init>

}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cdc:	b672      	cpsid	i
}
 8001cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <Error_Handler+0x8>
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d22:	2007      	movs	r0, #7
 8001d24:	f000 fb74 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_I2C_MspInit+0x84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d78:	2312      	movs	r3, #18
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d84:	2304      	movs	r3, #4
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <HAL_I2C_MspInit+0x8c>)
 8001d90:	f000 fb80 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_I2C_MspInit+0x88>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	; 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40005400 	.word	0x40005400
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_SPI_MspInit+0x84>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d12b      	bne.n	8001e3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_SPI_MspInit+0x88>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_SPI_MspInit+0x88>)
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_SPI_MspInit+0x88>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_SPI_MspInit+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <HAL_SPI_MspInit+0x88>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_SPI_MspInit+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e1e:	23e0      	movs	r3, #224	; 0xe0
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <HAL_SPI_MspInit+0x8c>)
 8001e3a:	f000 fb2b 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40013000 	.word	0x40013000
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <HAL_USART_MspInit+0xc0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d149      	bne.n	8001f0a <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_USART_MspInit+0xc4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eda:	2307      	movs	r3, #7
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <HAL_USART_MspInit+0xc8>)
 8001ee6:	f000 fad5 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efa:	2307      	movs	r3, #7
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <HAL_USART_MspInit+0xcc>)
 8001f06:	f000 fac5 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	; 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020c00 	.word	0x40020c00

08001f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <HAL_UART_MspInit+0xc4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d14b      	bne.n	8001fde <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a20      	ldr	r2, [pc, #128]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_UART_MspInit+0xc8>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fac:	2307      	movs	r3, #7
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <HAL_UART_MspInit+0xcc>)
 8001fb8:	f000 fa6c 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4806      	ldr	r0, [pc, #24]	; (8001ff4 <HAL_UART_MspInit+0xd0>)
 8001fda:	f000 fa5b 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fde:	bf00      	nop
 8001fe0:	3728      	adds	r7, #40	; 0x28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40004800 	.word	0x40004800
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40020c00 	.word	0x40020c00

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f8d0 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <OTG_FS_IRQHandler+0x10>)
 8002052:	f000 fe3f 	bl	8002cd4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200005c4 	.word	0x200005c4

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f007 fdd4 	bl	8009c3c <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	220c      	movs	r2, #12
 8002098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20020000 	.word	0x20020000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	200001e0 	.word	0x200001e0
 80020c8:	200008d8 	.word	0x200008d8

080020cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <SystemInit+0x20>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <SystemInit+0x20>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020f6:	490e      	ldr	r1, [pc, #56]	; (8002130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020f8:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800210c:	4c0b      	ldr	r4, [pc, #44]	; (800213c <LoopFillZerobss+0x26>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800211a:	f7ff ffd7 	bl	80020cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800211e:	f007 fd93 	bl	8009c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002122:	f7fe ff03 	bl	8000f2c <main>
  bx  lr    
 8002126:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002134:	0800a6f0 	.word	0x0800a6f0
  ldr r2, =_sbss
 8002138:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800213c:	200008d8 	.word	0x200008d8

08002140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_Init+0x40>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_Init+0x40>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_Init+0x40>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f000 f94f 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002172:	2000      	movs	r0, #0
 8002174:	f000 f808 	bl	8002188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002178:	f7ff fdb4 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x54>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 f967 	bl	800247a <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f000 f92f 	bl	8002426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_InitTick+0x5c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000008 	.word	0x20000008
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000008 	.word	0x20000008
 800220c:	200001e4 	.word	0x200001e4

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200001e4 	.word	0x200001e4

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008

08002270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800228c:	4013      	ands	r3, r2
 800228e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a2:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	60d3      	str	r3, [r2, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023dc:	d301      	bcc.n	80023e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023de:	2301      	movs	r3, #1
 80023e0:	e00f      	b.n	8002402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <SysTick_Config+0x40>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ea:	210f      	movs	r1, #15
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f7ff ff8e 	bl	8002310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <SysTick_Config+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Config+0x40>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff29 	bl	8002270 <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff3e 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff8e 	bl	8002364 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5d 	bl	8002310 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff31 	bl	80022d4 <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa2 	bl	80023cc <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e16b      	b.n	8002788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 815a 	bne.w	8002782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d130      	bne.n	8002548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80b4 	beq.w	8002782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <HAL_GPIO_Init+0x30c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	4a5f      	ldr	r2, [pc, #380]	; (80027a0 <HAL_GPIO_Init+0x30c>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002628:	6453      	str	r3, [r2, #68]	; 0x44
 800262a:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <HAL_GPIO_Init+0x30c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002636:	4a5b      	ldr	r2, [pc, #364]	; (80027a4 <HAL_GPIO_Init+0x310>)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_GPIO_Init+0x314>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d02b      	beq.n	80026ba <HAL_GPIO_Init+0x226>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a51      	ldr	r2, [pc, #324]	; (80027ac <HAL_GPIO_Init+0x318>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d025      	beq.n	80026b6 <HAL_GPIO_Init+0x222>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_GPIO_Init+0x31c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <HAL_GPIO_Init+0x21e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4f      	ldr	r2, [pc, #316]	; (80027b4 <HAL_GPIO_Init+0x320>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4e      	ldr	r2, [pc, #312]	; (80027b8 <HAL_GPIO_Init+0x324>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x216>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4d      	ldr	r2, [pc, #308]	; (80027bc <HAL_GPIO_Init+0x328>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x212>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4c      	ldr	r2, [pc, #304]	; (80027c0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4b      	ldr	r2, [pc, #300]	; (80027c4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x20a>
 800269a:	2307      	movs	r3, #7
 800269c:	e00e      	b.n	80026bc <HAL_GPIO_Init+0x228>
 800269e:	2308      	movs	r3, #8
 80026a0:	e00c      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026a2:	2306      	movs	r3, #6
 80026a4:	e00a      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026a6:	2305      	movs	r3, #5
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026aa:	2304      	movs	r3, #4
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x228>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_GPIO_Init+0x310>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_GPIO_Init+0x334>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_GPIO_Init+0x334>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_GPIO_Init+0x334>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <HAL_GPIO_Init+0x334>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_GPIO_Init+0x334>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_GPIO_Init+0x334>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_GPIO_Init+0x334>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <HAL_GPIO_Init+0x334>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f ae90 	bls.w	80024b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40021c00 	.word	0x40021c00
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
 80027d8:	4613      	mov	r3, r2
 80027da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027dc:	787b      	ldrb	r3, [r7, #1]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e8:	e003      	b.n	80027f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	041a      	lsls	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	619a      	str	r2, [r3, #24]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002800:	b08f      	sub	sp, #60	; 0x3c
 8002802:	af0a      	add	r7, sp, #40	; 0x28
 8002804:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e054      	b.n	80028ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f006 ff5c 	bl	80096e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2203      	movs	r2, #3
 8002834:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f003 ff8a 	bl	8006768 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	687e      	ldr	r6, [r7, #4]
 800285c:	466d      	mov	r5, sp
 800285e:	f106 0410 	add.w	r4, r6, #16
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800286e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002872:	1d33      	adds	r3, r6, #4
 8002874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f003 ff04 	bl	8006684 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f003 ff81 	bl	800678a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	687e      	ldr	r6, [r7, #4]
 8002890:	466d      	mov	r5, sp
 8002892:	f106 0410 	add.w	r4, r6, #16
 8002896:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800289c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800289e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028a6:	1d33      	adds	r3, r6, #4
 80028a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028aa:	6838      	ldr	r0, [r7, #0]
 80028ac:	f004 f90a 	bl	8006ac4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028c2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b089      	sub	sp, #36	; 0x24
 80028c6:	af04      	add	r7, sp, #16
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	4608      	mov	r0, r1
 80028cc:	4611      	mov	r1, r2
 80028ce:	461a      	mov	r2, r3
 80028d0:	4603      	mov	r3, r0
 80028d2:	70fb      	strb	r3, [r7, #3]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70bb      	strb	r3, [r7, #2]
 80028d8:	4613      	mov	r3, r2
 80028da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_HCD_HC_Init+0x28>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e076      	b.n	80029d8 <HAL_HCD_HC_Init+0x116>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	333d      	adds	r3, #61	; 0x3d
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3338      	adds	r3, #56	; 0x38
 8002912:	787a      	ldrb	r2, [r7, #1]
 8002914:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3340      	adds	r3, #64	; 0x40
 8002924:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002926:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3339      	adds	r3, #57	; 0x39
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	333f      	adds	r3, #63	; 0x3f
 8002948:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800294c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	78ba      	ldrb	r2, [r7, #2]
 8002952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002956:	b2d0      	uxtb	r0, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	212c      	movs	r1, #44	; 0x2c
 800295c:	fb01 f303 	mul.w	r3, r1, r3
 8002960:	4413      	add	r3, r2
 8002962:	333a      	adds	r3, #58	; 0x3a
 8002964:	4602      	mov	r2, r0
 8002966:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002968:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da09      	bge.n	8002984 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	333b      	adds	r3, #59	; 0x3b
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
 8002982:	e008      	b.n	8002996 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	333b      	adds	r3, #59	; 0x3b
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333c      	adds	r3, #60	; 0x3c
 80029a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	787c      	ldrb	r4, [r7, #1]
 80029b0:	78ba      	ldrb	r2, [r7, #2]
 80029b2:	78f9      	ldrb	r1, [r7, #3]
 80029b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4623      	mov	r3, r4
 80029c6:	f004 fa03 	bl	8006dd0 <USB_HC_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}

080029e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_HCD_HC_Halt+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e00f      	b.n	8002a1e <HAL_HCD_HC_Halt+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fc53 	bl	80072ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70bb      	strb	r3, [r7, #2]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	333b      	adds	r3, #59	; 0x3b
 8002a50:	78ba      	ldrb	r2, [r7, #2]
 8002a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	333f      	adds	r3, #63	; 0x3f
 8002a62:	787a      	ldrb	r2, [r7, #1]
 8002a64:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a66:	7c3b      	ldrb	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d112      	bne.n	8002a92 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3342      	adds	r3, #66	; 0x42
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	333d      	adds	r3, #61	; 0x3d
 8002a8c:	7f3a      	ldrb	r2, [r7, #28]
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e008      	b.n	8002aa4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3342      	adds	r3, #66	; 0x42
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	f200 80c6 	bhi.w	8002c38 <HAL_HCD_HC_SubmitRequest+0x210>
 8002aac:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002c25 	.word	0x08002c25
 8002abc:	08002b29 	.word	0x08002b29
 8002ac0:	08002ba7 	.word	0x08002ba7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002ac4:	7c3b      	ldrb	r3, [r7, #16]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	f040 80b8 	bne.w	8002c3c <HAL_HCD_HC_SubmitRequest+0x214>
 8002acc:	78bb      	ldrb	r3, [r7, #2]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 80b4 	bne.w	8002c3c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002ad4:	8b3b      	ldrh	r3, [r7, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d108      	bne.n	8002aec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3355      	adds	r3, #85	; 0x55
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3355      	adds	r3, #85	; 0x55
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3342      	adds	r3, #66	; 0x42
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b12:	e093      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3342      	adds	r3, #66	; 0x42
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
      break;
 8002b26:	e089      	b.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b28:	78bb      	ldrb	r3, [r7, #2]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11d      	bne.n	8002b6a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3355      	adds	r3, #85	; 0x55
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3342      	adds	r3, #66	; 0x42
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b54:	e073      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3342      	adds	r3, #66	; 0x42
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
      break;
 8002b68:	e069      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3354      	adds	r3, #84	; 0x54
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3342      	adds	r3, #66	; 0x42
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
      break;
 8002b90:	e055      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3342      	adds	r3, #66	; 0x42
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	701a      	strb	r2, [r3, #0]
      break;
 8002ba4:	e04b      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002ba6:	78bb      	ldrb	r3, [r7, #2]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11d      	bne.n	8002be8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	212c      	movs	r1, #44	; 0x2c
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3355      	adds	r3, #85	; 0x55
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3342      	adds	r3, #66	; 0x42
 8002bce:	2200      	movs	r2, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bd2:	e034      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3342      	adds	r3, #66	; 0x42
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
      break;
 8002be6:	e02a      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3354      	adds	r3, #84	; 0x54
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	212c      	movs	r1, #44	; 0x2c
 8002c02:	fb01 f303 	mul.w	r3, r1, r3
 8002c06:	4413      	add	r3, r2
 8002c08:	3342      	adds	r3, #66	; 0x42
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
      break;
 8002c0e:	e016      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3342      	adds	r3, #66	; 0x42
 8002c1e:	2202      	movs	r2, #2
 8002c20:	701a      	strb	r2, [r3, #0]
      break;
 8002c22:	e00c      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3342      	adds	r3, #66	; 0x42
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
      break;
 8002c36:	e002      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c3c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	3344      	adds	r3, #68	; 0x44
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	8b3a      	ldrh	r2, [r7, #24]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	202c      	movs	r0, #44	; 0x2c
 8002c58:	fb00 f303 	mul.w	r3, r0, r3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334c      	adds	r3, #76	; 0x4c
 8002c60:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3350      	adds	r3, #80	; 0x50
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3339      	adds	r3, #57	; 0x39
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	222c      	movs	r2, #44	; 0x2c
 8002cb2:	fb02 f303 	mul.w	r3, r2, r3
 8002cb6:	3338      	adds	r3, #56	; 0x38
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	18d1      	adds	r1, r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f004 f9a6 	bl	8007014 <USB_HC_StartXfer>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop

08002cd4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fea7 	bl	8006a3e <USB_GetMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 80f6 	bne.w	8002ee4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 fe8b 	bl	8006a18 <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80ec 	beq.w	8002ee2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 fe82 	bl	8006a18 <USB_ReadInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d1e:	d104      	bne.n	8002d2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fe72 	bl	8006a18 <USB_ReadInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3e:	d104      	bne.n	8002d4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fe62 	bl	8006a18 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5e:	d104      	bne.n	8002d6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f003 fe52 	bl	8006a18 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2202      	movs	r2, #2
 8002d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fe44 	bl	8006a18 <USB_ReadInterrupts>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d9a:	d11c      	bne.n	8002dd6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002da4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002db6:	2110      	movs	r1, #16
 8002db8:	6938      	ldr	r0, [r7, #16]
 8002dba:	f003 fd33 	bl	8006824 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002dbe:	6938      	ldr	r0, [r7, #16]
 8002dc0:	f003 fd64 	bl	800688c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 ff3a 	bl	8006c44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f006 fd07 	bl	80097e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fe1c 	bl	8006a18 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dea:	d102      	bne.n	8002df2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 f89e 	bl	8003f2e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f003 fe0e 	bl	8006a18 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d106      	bne.n	8002e14 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f006 fcd0 	bl	80097ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2208      	movs	r2, #8
 8002e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 fdfd 	bl	8006a18 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d101      	bne.n	8002e2c <HAL_HCD_IRQHandler+0x158>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_HCD_IRQHandler+0x15a>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0210 	bic.w	r2, r2, #16
 8002e40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 ffa1 	bl	8003d8a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0210 	orr.w	r2, r2, #16
 8002e56:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fddb 	bl	8006a18 <USB_ReadInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e6c:	d13a      	bne.n	8002ee4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fa10 	bl	8007298 <USB_HC_ReadInterrupt>
 8002e78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e025      	b.n	8002ecc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d018      	beq.n	8002ec6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eaa:	d106      	bne.n	8002eba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8ab 	bl	800300e <HCD_HC_IN_IRQHandler>
 8002eb8:	e005      	b.n	8002ec6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fbf9 	bl	80036b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d3d4      	bcc.n	8002e80 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ede:	615a      	str	r2, [r3, #20]
 8002ee0:	e000      	b.n	8002ee4 <HAL_HCD_IRQHandler+0x210>
      return;
 8002ee2:	bf00      	nop
    }
  }
}
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_HCD_Start+0x16>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e013      	b.n	8002f28 <HAL_HCD_Start+0x3e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f003 fefc 	bl	8006d0c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f003 fc14 	bl	8006746 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_HCD_Stop+0x16>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e00d      	b.n	8002f62 <HAL_HCD_Stop+0x32>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 faea 	bl	800752c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fe9e 	bl	8006cb8 <USB_ResetPort>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3360      	adds	r3, #96	; 0x60
 8002fa0:	781b      	ldrb	r3, [r3, #0]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3350      	adds	r3, #80	; 0x50
 8002fc8:	681b      	ldr	r3, [r3, #0]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fee2 	bl	8006dac <USB_GetCurrentFrame>
 8002fe8:	4603      	mov	r3, r0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 febd 	bl	8006d7e <USB_GetHostSpeed>
 8003004:	4603      	mov	r3, r0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	015a      	lsls	r2, r3, #5
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4413      	add	r3, r2
 8003030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d11a      	bne.n	8003074 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	2304      	movs	r3, #4
 800304e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	212c      	movs	r1, #44	; 0x2c
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	4413      	add	r3, r2
 800305c:	3361      	adds	r3, #97	; 0x61
 800305e:	2206      	movs	r2, #6
 8003060:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f004 f924 	bl	80072ba <USB_HC_Halt>
 8003072:	e0af      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d11b      	bne.n	80030c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3361      	adds	r3, #97	; 0x61
 80030ae:	2207      	movs	r2, #7
 80030b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 f8fc 	bl	80072ba <USB_HC_Halt>
 80030c2:	e087      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d109      	bne.n	80030ee <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	461a      	mov	r2, r3
 80030e8:	2320      	movs	r3, #32
 80030ea:	6093      	str	r3, [r2, #8]
 80030ec:	e072      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b08      	cmp	r3, #8
 8003102:	d11a      	bne.n	800313a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2308      	movs	r3, #8
 8003114:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3361      	adds	r3, #97	; 0x61
 8003124:	2205      	movs	r2, #5
 8003126:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f004 f8c1 	bl	80072ba <USB_HC_Halt>
 8003138:	e04c      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	d11b      	bne.n	800318a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	461a      	mov	r2, r3
 8003160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003164:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	3361      	adds	r3, #97	; 0x61
 8003174:	2208      	movs	r2, #8
 8003176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f004 f899 	bl	80072ba <USB_HC_Halt>
 8003188:	e024      	b.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b80      	cmp	r3, #128	; 0x80
 800319e:	d119      	bne.n	80031d4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	461a      	mov	r2, r3
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	3361      	adds	r3, #97	; 0x61
 80031c0:	2206      	movs	r2, #6
 80031c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 f873 	bl	80072ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ea:	d112      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 f85f 	bl	80072ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003210:	e24e      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	f040 80df 	bne.w	80033e8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d019      	beq.n	8003266 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3348      	adds	r3, #72	; 0x48
 8003240:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	0159      	lsls	r1, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	440b      	add	r3, r1
 800324a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003254:	1ad2      	subs	r2, r2, r3
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	202c      	movs	r0, #44	; 0x2c
 800325c:	fb00 f303 	mul.w	r3, r0, r3
 8003260:	440b      	add	r3, r1
 8003262:	3350      	adds	r3, #80	; 0x50
 8003264:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3361      	adds	r3, #97	; 0x61
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	212c      	movs	r1, #44	; 0x2c
 800327e:	fb01 f303 	mul.w	r3, r1, r3
 8003282:	4413      	add	r3, r2
 8003284:	335c      	adds	r3, #92	; 0x5c
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	333f      	adds	r3, #63	; 0x3f
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d009      	beq.n	80032c4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	333f      	adds	r3, #63	; 0x3f
 80032be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d111      	bne.n	80032e8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 fff3 	bl	80072ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	461a      	mov	r2, r3
 80032e2:	2310      	movs	r3, #16
 80032e4:	6093      	str	r3, [r2, #8]
 80032e6:	e03a      	b.n	800335e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	333f      	adds	r3, #63	; 0x3f
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d009      	beq.n	8003310 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	333f      	adds	r3, #63	; 0x3f
 800330a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800330c:	2b01      	cmp	r3, #1
 800330e:	d126      	bne.n	800335e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800332e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3360      	adds	r3, #96	; 0x60
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	b2d9      	uxtb	r1, r3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f303 	mul.w	r3, r0, r3
 8003350:	4413      	add	r3, r2
 8003352:	3360      	adds	r3, #96	; 0x60
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f006 fa51 	bl	8009800 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d12b      	bne.n	80033be <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3348      	adds	r3, #72	; 0x48
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	202c      	movs	r0, #44	; 0x2c
 800337c:	fb00 f202 	mul.w	r2, r0, r2
 8003380:	440a      	add	r2, r1
 8003382:	3240      	adds	r2, #64	; 0x40
 8003384:	8812      	ldrh	r2, [r2, #0]
 8003386:	fbb3 f3f2 	udiv	r3, r3, r2
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 818e 	beq.w	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	212c      	movs	r1, #44	; 0x2c
 800339a:	fb01 f303 	mul.w	r3, r1, r3
 800339e:	4413      	add	r3, r2
 80033a0:	3354      	adds	r3, #84	; 0x54
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2d8      	uxtb	r0, r3
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3354      	adds	r3, #84	; 0x54
 80033b8:	4602      	mov	r2, r0
 80033ba:	701a      	strb	r2, [r3, #0]
}
 80033bc:	e178      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	3354      	adds	r3, #84	; 0x54
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	f083 0301 	eor.w	r3, r3, #1
 80033d2:	b2d8      	uxtb	r0, r3
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3354      	adds	r3, #84	; 0x54
 80033e2:	4602      	mov	r2, r0
 80033e4:	701a      	strb	r2, [r3, #0]
}
 80033e6:	e163      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f040 80f6 	bne.w	80035ec <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3361      	adds	r3, #97	; 0x61
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d109      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3360      	adds	r3, #96	; 0x60
 8003422:	2201      	movs	r2, #1
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e0c9      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3361      	adds	r3, #97	; 0x61
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d109      	bne.n	8003450 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	3360      	adds	r3, #96	; 0x60
 800344a:	2205      	movs	r2, #5
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e0b5      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	3361      	adds	r3, #97	; 0x61
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b06      	cmp	r3, #6
 8003462:	d009      	beq.n	8003478 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3361      	adds	r3, #97	; 0x61
 8003472:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003474:	2b08      	cmp	r3, #8
 8003476:	d150      	bne.n	800351a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	335c      	adds	r3, #92	; 0x5c
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	202c      	movs	r0, #44	; 0x2c
 8003490:	fb00 f303 	mul.w	r3, r0, r3
 8003494:	440b      	add	r3, r1
 8003496:	335c      	adds	r3, #92	; 0x5c
 8003498:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	335c      	adds	r3, #92	; 0x5c
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d912      	bls.n	80034d4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	335c      	adds	r3, #92	; 0x5c
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034d2:	e073      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3360      	adds	r3, #96	; 0x60
 80034e2:	2202      	movs	r2, #2
 80034e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003504:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003518:	e050      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3361      	adds	r3, #97	; 0x61
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d122      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3360      	adds	r3, #96	; 0x60
 800353c:	2202      	movs	r2, #2
 800353e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003556:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e023      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3361      	adds	r3, #97	; 0x61
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b07      	cmp	r3, #7
 8003586:	d119      	bne.n	80035bc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	335c      	adds	r3, #92	; 0x5c
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	202c      	movs	r0, #44	; 0x2c
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	440b      	add	r3, r1
 80035a6:	335c      	adds	r3, #92	; 0x5c
 80035a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3360      	adds	r3, #96	; 0x60
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	461a      	mov	r2, r3
 80035ca:	2302      	movs	r3, #2
 80035cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	b2d9      	uxtb	r1, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	202c      	movs	r0, #44	; 0x2c
 80035d8:	fb00 f303 	mul.w	r3, r0, r3
 80035dc:	4413      	add	r3, r2
 80035de:	3360      	adds	r3, #96	; 0x60
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f006 f90b 	bl	8009800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ea:	e061      	b.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d156      	bne.n	80036b0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	333f      	adds	r3, #63	; 0x3f
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b03      	cmp	r3, #3
 8003614:	d111      	bne.n	800363a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 fe41 	bl	80072ba <USB_HC_Halt>
 8003638:	e031      	b.n	800369e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	333f      	adds	r3, #63	; 0x3f
 800365c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800365e:	2b02      	cmp	r3, #2
 8003660:	d11d      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	335c      	adds	r3, #92	; 0x5c
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d110      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3361      	adds	r3, #97	; 0x61
 800368a:	2203      	movs	r2, #3
 800368c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	4611      	mov	r1, r2
 8003698:	4618      	mov	r0, r3
 800369a:	f003 fe0e 	bl	80072ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	2310      	movs	r3, #16
 80036ae:	6093      	str	r3, [r2, #8]
}
 80036b0:	bf00      	nop
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11a      	bne.n	800371e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	2304      	movs	r3, #4
 80036f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3361      	adds	r3, #97	; 0x61
 8003708:	2206      	movs	r2, #6
 800370a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f003 fdcf 	bl	80072ba <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800371c:	e331      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b20      	cmp	r3, #32
 8003732:	d12e      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	461a      	mov	r2, r3
 8003742:	2320      	movs	r3, #32
 8003744:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	333d      	adds	r3, #61	; 0x3d
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	f040 8313 	bne.w	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	333d      	adds	r3, #61	; 0x3d
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3360      	adds	r3, #96	; 0x60
 800377c:	2202      	movs	r2, #2
 800377e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f003 fd95 	bl	80072ba <USB_HC_Halt>
}
 8003790:	e2f7      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a8:	d112      	bne.n	80037d0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fd76 	bl	80072ba <USB_HC_Halt>
}
 80037ce:	e2d8      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d140      	bne.n	8003868 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d111      	bne.n	8003832 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	212c      	movs	r1, #44	; 0x2c
 8003814:	fb01 f303 	mul.w	r3, r1, r3
 8003818:	4413      	add	r3, r2
 800381a:	333d      	adds	r3, #61	; 0x3d
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	2340      	movs	r3, #64	; 0x40
 8003830:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	461a      	mov	r2, r3
 8003840:	2301      	movs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3361      	adds	r3, #97	; 0x61
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f003 fd2a 	bl	80072ba <USB_HC_Halt>
}
 8003866:	e28c      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d12c      	bne.n	80038d8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3361      	adds	r3, #97	; 0x61
 800388c:	2204      	movs	r2, #4
 800388e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	333d      	adds	r3, #61	; 0x3d
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	335c      	adds	r3, #92	; 0x5c
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 fcfb 	bl	80072ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d0:	461a      	mov	r2, r3
 80038d2:	2340      	movs	r3, #64	; 0x40
 80038d4:	6093      	str	r3, [r2, #8]
}
 80038d6:	e254      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d11a      	bne.n	8003924 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	2308      	movs	r3, #8
 80038fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3361      	adds	r3, #97	; 0x61
 800390e:	2205      	movs	r2, #5
 8003910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f003 fccc 	bl	80072ba <USB_HC_Halt>
}
 8003922:	e22e      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b10      	cmp	r3, #16
 8003938:	d140      	bne.n	80039bc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	335c      	adds	r3, #92	; 0x5c
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3361      	adds	r3, #97	; 0x61
 800395a:	2203      	movs	r2, #3
 800395c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	333d      	adds	r3, #61	; 0x3d
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d112      	bne.n	8003998 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333c      	adds	r3, #60	; 0x3c
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d108      	bne.n	8003998 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	333d      	adds	r3, #61	; 0x3d
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 fc89 	bl	80072ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b4:	461a      	mov	r2, r3
 80039b6:	2310      	movs	r3, #16
 80039b8:	6093      	str	r3, [r2, #8]
}
 80039ba:	e1e2      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b80      	cmp	r3, #128	; 0x80
 80039d0:	d164      	bne.n	8003a9c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d111      	bne.n	80039fe <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3361      	adds	r3, #97	; 0x61
 80039e8:	2206      	movs	r2, #6
 80039ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 fc5f 	bl	80072ba <USB_HC_Halt>
 80039fc:	e044      	b.n	8003a88 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	335c      	adds	r3, #92	; 0x5c
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	202c      	movs	r0, #44	; 0x2c
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	335c      	adds	r3, #92	; 0x5c
 8003a1e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	335c      	adds	r3, #92	; 0x5c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d920      	bls.n	8003a76 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	335c      	adds	r3, #92	; 0x5c
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	b2d9      	uxtb	r1, r3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	202c      	movs	r0, #44	; 0x2c
 8003a62:	fb00 f303 	mul.w	r3, r0, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3360      	adds	r3, #96	; 0x60
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f005 fec6 	bl	8009800 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a74:	e008      	b.n	8003a88 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	212c      	movs	r1, #44	; 0x2c
 8003a7c:	fb01 f303 	mul.w	r3, r1, r3
 8003a80:	4413      	add	r3, r2
 8003a82:	3360      	adds	r3, #96	; 0x60
 8003a84:	2202      	movs	r2, #2
 8003a86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a94:	461a      	mov	r2, r3
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	6093      	str	r3, [r2, #8]
}
 8003a9a:	e172      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d11b      	bne.n	8003aec <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	212c      	movs	r1, #44	; 0x2c
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	4413      	add	r3, r2
 8003ac0:	3361      	adds	r3, #97	; 0x61
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f003 fbf2 	bl	80072ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae8:	6093      	str	r3, [r2, #8]
}
 8003aea:	e14a      	b.n	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	f040 813f 	bne.w	8003d82 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3361      	adds	r3, #97	; 0x61
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d17d      	bne.n	8003c14 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2201      	movs	r2, #1
 8003b28:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	333f      	adds	r3, #63	; 0x3f
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d00a      	beq.n	8003b54 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	333f      	adds	r3, #63	; 0x3f
 8003b4c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	f040 8100 	bne.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	212c      	movs	r1, #44	; 0x2c
 8003b62:	fb01 f303 	mul.w	r3, r1, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	3355      	adds	r3, #85	; 0x55
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f083 0301 	eor.w	r3, r3, #1
 8003b70:	b2d8      	uxtb	r0, r3
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3355      	adds	r3, #85	; 0x55
 8003b80:	4602      	mov	r2, r0
 8003b82:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 80e3 	bne.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	334c      	adds	r3, #76	; 0x4c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80d8 	beq.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	334c      	adds	r3, #76	; 0x4c
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	202c      	movs	r0, #44	; 0x2c
 8003bba:	fb00 f202 	mul.w	r2, r0, r2
 8003bbe:	440a      	add	r2, r1
 8003bc0:	3240      	adds	r2, #64	; 0x40
 8003bc2:	8812      	ldrh	r2, [r2, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	202c      	movs	r0, #44	; 0x2c
 8003bce:	fb00 f202 	mul.w	r2, r0, r2
 8003bd2:	440a      	add	r2, r1
 8003bd4:	3240      	adds	r2, #64	; 0x40
 8003bd6:	8812      	ldrh	r2, [r2, #0]
 8003bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80b5 	beq.w	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3355      	adds	r3, #85	; 0x55
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	f083 0301 	eor.w	r3, r3, #1
 8003bfe:	b2d8      	uxtb	r0, r3
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3355      	adds	r3, #85	; 0x55
 8003c0e:	4602      	mov	r2, r0
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e09f      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	3361      	adds	r3, #97	; 0x61
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d109      	bne.n	8003c3c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	212c      	movs	r1, #44	; 0x2c
 8003c2e:	fb01 f303 	mul.w	r3, r1, r3
 8003c32:	4413      	add	r3, r2
 8003c34:	3360      	adds	r3, #96	; 0x60
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e08b      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3361      	adds	r3, #97	; 0x61
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d109      	bne.n	8003c64 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	2202      	movs	r2, #2
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e077      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3361      	adds	r3, #97	; 0x61
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d109      	bne.n	8003c8c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	212c      	movs	r1, #44	; 0x2c
 8003c7e:	fb01 f303 	mul.w	r3, r1, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	3360      	adds	r3, #96	; 0x60
 8003c86:	2205      	movs	r2, #5
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e063      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	212c      	movs	r1, #44	; 0x2c
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	4413      	add	r3, r2
 8003c98:	3361      	adds	r3, #97	; 0x61
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d009      	beq.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3361      	adds	r3, #97	; 0x61
 8003cae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d14f      	bne.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	212c      	movs	r1, #44	; 0x2c
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	202c      	movs	r0, #44	; 0x2c
 8003ccc:	fb00 f303 	mul.w	r3, r0, r3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	335c      	adds	r3, #92	; 0x5c
 8003cd4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d912      	bls.n	8003d10 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	335c      	adds	r3, #92	; 0x5c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3360      	adds	r3, #96	; 0x60
 8003d0a:	2204      	movs	r2, #4
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e021      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3360      	adds	r3, #96	; 0x60
 8003d1e:	2202      	movs	r2, #2
 8003d20:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d40:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d60:	461a      	mov	r2, r3
 8003d62:	2302      	movs	r3, #2
 8003d64:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	b2d9      	uxtb	r1, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	202c      	movs	r0, #44	; 0x2c
 8003d70:	fb00 f303 	mul.w	r3, r0, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3360      	adds	r3, #96	; 0x60
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f005 fd3f 	bl	8009800 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d82:	bf00      	nop
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b08a      	sub	sp, #40	; 0x28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	0c5b      	lsrs	r3, r3, #17
 8003db0:	f003 030f 	and.w	r3, r3, #15
 8003db4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dbe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d004      	beq.n	8003dd0 <HCD_RXQLVL_IRQHandler+0x46>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	f000 80a9 	beq.w	8003f20 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dce:	e0aa      	b.n	8003f26 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a6 	beq.w	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	212c      	movs	r1, #44	; 0x2c
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	3344      	adds	r3, #68	; 0x44
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 809b 	beq.w	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3350      	adds	r3, #80	; 0x50
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	441a      	add	r2, r3
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	202c      	movs	r0, #44	; 0x2c
 8003e08:	fb00 f303 	mul.w	r3, r0, r3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	334c      	adds	r3, #76	; 0x4c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d87a      	bhi.n	8003f0c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	212c      	movs	r1, #44	; 0x2c
 8003e20:	fb01 f303 	mul.w	r3, r1, r3
 8003e24:	4413      	add	r3, r2
 8003e26:	3344      	adds	r3, #68	; 0x44
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f002 fd9a 	bl	8006968 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	212c      	movs	r1, #44	; 0x2c
 8003e3a:	fb01 f303 	mul.w	r3, r1, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	3344      	adds	r3, #68	; 0x44
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	441a      	add	r2, r3
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	202c      	movs	r0, #44	; 0x2c
 8003e4e:	fb00 f303 	mul.w	r3, r0, r3
 8003e52:	440b      	add	r3, r1
 8003e54:	3344      	adds	r3, #68	; 0x44
 8003e56:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3350      	adds	r3, #80	; 0x50
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	202c      	movs	r0, #44	; 0x2c
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	440b      	add	r3, r1
 8003e78:	3350      	adds	r3, #80	; 0x50
 8003e7a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	0cdb      	lsrs	r3, r3, #19
 8003e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e90:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3340      	adds	r3, #64	; 0x40
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d13c      	bne.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d039      	beq.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ec6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ece:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	3354      	adds	r3, #84	; 0x54
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f083 0301 	eor.w	r3, r3, #1
 8003ef6:	b2d8      	uxtb	r0, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3354      	adds	r3, #84	; 0x54
 8003f06:	4602      	mov	r2, r0
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e00b      	b.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3360      	adds	r3, #96	; 0x60
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	701a      	strb	r2, [r3, #0]
      break;
 8003f1e:	e001      	b.n	8003f24 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f24:	bf00      	nop
  }
}
 8003f26:	bf00      	nop
 8003f28:	3728      	adds	r7, #40	; 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b086      	sub	sp, #24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f5a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d10b      	bne.n	8003f7e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d102      	bne.n	8003f76 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f005 fc29 	bl	80097c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0302 	orr.w	r3, r3, #2
 8003f7c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d132      	bne.n	8003fee <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d126      	bne.n	8003fe8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d113      	bne.n	8003fca <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fac:	d106      	bne.n	8003fbc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f002 fe45 	bl	8006c44 <USB_InitFSLSPClkSel>
 8003fba:	e011      	b.n	8003fe0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 fe3e 	bl	8006c44 <USB_InitFSLSPClkSel>
 8003fc8:	e00a      	b.n	8003fe0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d106      	bne.n	8003fe0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003fde:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f005 fc1b 	bl	800981c <HAL_HCD_PortEnabled_Callback>
 8003fe6:	e002      	b.n	8003fee <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f005 fc25 	bl	8009838 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d103      	bne.n	8004000 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f043 0320 	orr.w	r3, r3, #32
 8003ffe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e12b      	b.n	800427e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fe7a 	bl	8001d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	; 0x24
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0201 	bic.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004066:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004076:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004078:	f001 fbd2 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 800407c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a81      	ldr	r2, [pc, #516]	; (8004288 <HAL_I2C_Init+0x274>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d807      	bhi.n	8004098 <HAL_I2C_Init+0x84>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a80      	ldr	r2, [pc, #512]	; (800428c <HAL_I2C_Init+0x278>)
 800408c:	4293      	cmp	r3, r2
 800408e:	bf94      	ite	ls
 8004090:	2301      	movls	r3, #1
 8004092:	2300      	movhi	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e006      	b.n	80040a6 <HAL_I2C_Init+0x92>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a7d      	ldr	r2, [pc, #500]	; (8004290 <HAL_I2C_Init+0x27c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e0e7      	b.n	800427e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a78      	ldr	r2, [pc, #480]	; (8004294 <HAL_I2C_Init+0x280>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0c9b      	lsrs	r3, r3, #18
 80040b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a6a      	ldr	r2, [pc, #424]	; (8004288 <HAL_I2C_Init+0x274>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d802      	bhi.n	80040e8 <HAL_I2C_Init+0xd4>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3301      	adds	r3, #1
 80040e6:	e009      	b.n	80040fc <HAL_I2C_Init+0xe8>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	4a69      	ldr	r2, [pc, #420]	; (8004298 <HAL_I2C_Init+0x284>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	099b      	lsrs	r3, r3, #6
 80040fa:	3301      	adds	r3, #1
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	430b      	orrs	r3, r1
 8004102:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800410e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	495c      	ldr	r1, [pc, #368]	; (8004288 <HAL_I2C_Init+0x274>)
 8004118:	428b      	cmp	r3, r1
 800411a:	d819      	bhi.n	8004150 <HAL_I2C_Init+0x13c>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1e59      	subs	r1, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fbb1 f3f3 	udiv	r3, r1, r3
 800412a:	1c59      	adds	r1, r3, #1
 800412c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004130:	400b      	ands	r3, r1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_I2C_Init+0x138>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e59      	subs	r1, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	fbb1 f3f3 	udiv	r3, r1, r3
 8004144:	3301      	adds	r3, #1
 8004146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414a:	e051      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 800414c:	2304      	movs	r3, #4
 800414e:	e04f      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d111      	bne.n	800417c <HAL_I2C_Init+0x168>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1e58      	subs	r0, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	440b      	add	r3, r1
 8004166:	fbb0 f3f3 	udiv	r3, r0, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e012      	b.n	80041a2 <HAL_I2C_Init+0x18e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1e58      	subs	r0, r3, #1
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	0099      	lsls	r1, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004192:	3301      	adds	r3, #1
 8004194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_Init+0x196>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e022      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10e      	bne.n	80041d0 <HAL_I2C_Init+0x1bc>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1e58      	subs	r0, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6859      	ldr	r1, [r3, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	440b      	add	r3, r1
 80041c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c4:	3301      	adds	r3, #1
 80041c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ce:	e00f      	b.n	80041f0 <HAL_I2C_Init+0x1dc>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1e58      	subs	r0, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	0099      	lsls	r1, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e6:	3301      	adds	r3, #1
 80041e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	6809      	ldr	r1, [r1, #0]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800421e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6911      	ldr	r1, [r2, #16]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68d2      	ldr	r2, [r2, #12]
 800422a:	4311      	orrs	r1, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	430b      	orrs	r3, r1
 8004232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	000186a0 	.word	0x000186a0
 800428c:	001e847f 	.word	0x001e847f
 8004290:	003d08ff 	.word	0x003d08ff
 8004294:	431bde83 	.word	0x431bde83
 8004298:	10624dd3 	.word	0x10624dd3

0800429c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	461a      	mov	r2, r3
 80042a8:	460b      	mov	r3, r1
 80042aa:	817b      	strh	r3, [r7, #10]
 80042ac:	4613      	mov	r3, r2
 80042ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b0:	f7fd ffae 	bl	8002210 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	f040 80e0 	bne.w	8004484 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2319      	movs	r3, #25
 80042ca:	2201      	movs	r2, #1
 80042cc:	4970      	ldr	r1, [pc, #448]	; (8004490 <HAL_I2C_Master_Transmit+0x1f4>)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fc58 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
 80042dc:	e0d3      	b.n	8004486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_I2C_Master_Transmit+0x50>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0cc      	b.n	8004486 <HAL_I2C_Master_Transmit+0x1ea>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d007      	beq.n	8004312 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004320:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2221      	movs	r2, #33	; 0x21
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2210      	movs	r2, #16
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	893a      	ldrh	r2, [r7, #8]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29a      	uxth	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4a50      	ldr	r2, [pc, #320]	; (8004494 <HAL_I2C_Master_Transmit+0x1f8>)
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004354:	8979      	ldrh	r1, [r7, #10]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fac2 	bl	80048e4 <I2C_MasterRequestWrite>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e08d      	b.n	8004486 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004380:	e066      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fcd2 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2b04      	cmp	r3, #4
 8004398:	d107      	bne.n	80043aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e06b      	b.n	8004486 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d11b      	bne.n	8004424 <HAL_I2C_Master_Transmit+0x188>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d017      	beq.n	8004424 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	6a39      	ldr	r1, [r7, #32]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fcc2 	bl	8004db2 <I2C_WaitOnBTFFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	2b04      	cmp	r3, #4
 800443a:	d107      	bne.n	800444c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e01a      	b.n	8004486 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	d194      	bne.n	8004382 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	00100002 	.word	0x00100002
 8004494:	ffff0000 	.word	0xffff0000

08004498 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08c      	sub	sp, #48	; 0x30
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	461a      	mov	r2, r3
 80044a4:	460b      	mov	r3, r1
 80044a6:	817b      	strh	r3, [r7, #10]
 80044a8:	4613      	mov	r3, r2
 80044aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044ac:	f7fd feb0 	bl	8002210 <HAL_GetTick>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	f040 820b 	bne.w	80048d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2319      	movs	r3, #25
 80044c6:	2201      	movs	r2, #1
 80044c8:	497c      	ldr	r1, [pc, #496]	; (80046bc <HAL_I2C_Master_Receive+0x224>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fb5a 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	e1fe      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_I2C_Master_Receive+0x50>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e1f7      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d007      	beq.n	800450e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800451c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2222      	movs	r2, #34	; 0x22
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2210      	movs	r2, #16
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	893a      	ldrh	r2, [r7, #8]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a5c      	ldr	r2, [pc, #368]	; (80046c0 <HAL_I2C_Master_Receive+0x228>)
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004550:	8979      	ldrh	r1, [r7, #10]
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fa46 	bl	80049e8 <I2C_MasterRequestRead>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e1b8      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d113      	bne.n	8004596 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	623b      	str	r3, [r7, #32]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e18c      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b01      	cmp	r3, #1
 800459c:	d11b      	bne.n	80045d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e16c      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d11b      	bne.n	8004616 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	e14c      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800463c:	e138      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	2b03      	cmp	r3, #3
 8004644:	f200 80f1 	bhi.w	800482a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464c:	2b01      	cmp	r3, #1
 800464e:	d123      	bne.n	8004698 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fbed 	bl	8004e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e139      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004696:	e10b      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	2b02      	cmp	r3, #2
 800469e:	d14e      	bne.n	800473e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	2200      	movs	r2, #0
 80046a8:	4906      	ldr	r1, [pc, #24]	; (80046c4 <HAL_I2C_Master_Receive+0x22c>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fa6a 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e10e      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
 80046ba:	bf00      	nop
 80046bc:	00100002 	.word	0x00100002
 80046c0:	ffff0000 	.word	0xffff0000
 80046c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800473c:	e0b8      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	2200      	movs	r2, #0
 8004746:	4966      	ldr	r1, [pc, #408]	; (80048e0 <HAL_I2C_Master_Receive+0x448>)
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fa1b 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e0bf      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	494f      	ldr	r1, [pc, #316]	; (80048e0 <HAL_I2C_Master_Receive+0x448>)
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f9ed 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e091      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004828:	e042      	b.n	80048b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fb00 	bl	8004e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e04c      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b04      	cmp	r3, #4
 800487c:	d118      	bne.n	80048b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f aec2 	bne.w	800463e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
  }
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3728      	adds	r7, #40	; 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	00010004 	.word	0x00010004

080048e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	460b      	mov	r3, r1
 80048f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d006      	beq.n	800490e <I2C_MasterRequestWrite+0x2a>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d003      	beq.n	800490e <I2C_MasterRequestWrite+0x2a>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800490c:	d108      	bne.n	8004920 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e00b      	b.n	8004938 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	2b12      	cmp	r3, #18
 8004926:	d107      	bne.n	8004938 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004936:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f91d 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d103      	bne.n	8004968 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e035      	b.n	80049d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004974:	d108      	bne.n	8004988 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004976:	897b      	ldrh	r3, [r7, #10]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004984:	611a      	str	r2, [r3, #16]
 8004986:	e01b      	b.n	80049c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004988:	897b      	ldrh	r3, [r7, #10]
 800498a:	11db      	asrs	r3, r3, #7
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0306 	and.w	r3, r3, #6
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f063 030f 	orn	r3, r3, #15
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <I2C_MasterRequestWrite+0xfc>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f943 	bl	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e010      	b.n	80049d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <I2C_MasterRequestWrite+0x100>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f933 	bl	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	00010008 	.word	0x00010008
 80049e4:	00010002 	.word	0x00010002

080049e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	460b      	mov	r3, r1
 80049f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d006      	beq.n	8004a22 <I2C_MasterRequestRead+0x3a>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d003      	beq.n	8004a22 <I2C_MasterRequestRead+0x3a>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a20:	d108      	bne.n	8004a34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e00b      	b.n	8004a4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	2b11      	cmp	r3, #17
 8004a3a:	d107      	bne.n	8004a4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f893 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d103      	bne.n	8004a7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e079      	b.n	8004b74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a88:	d108      	bne.n	8004a9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	611a      	str	r2, [r3, #16]
 8004a9a:	e05f      	b.n	8004b5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a9c:	897b      	ldrh	r3, [r7, #10]
 8004a9e:	11db      	asrs	r3, r3, #7
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f063 030f 	orn	r3, r3, #15
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4930      	ldr	r1, [pc, #192]	; (8004b7c <I2C_MasterRequestRead+0x194>)
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f8b9 	bl	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e054      	b.n	8004b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004aca:	897b      	ldrh	r3, [r7, #10]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4929      	ldr	r1, [pc, #164]	; (8004b80 <I2C_MasterRequestRead+0x198>)
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f8a9 	bl	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e044      	b.n	8004b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f831 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00d      	beq.n	8004b44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d103      	bne.n	8004b40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e017      	b.n	8004b74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004b44:	897b      	ldrh	r3, [r7, #10]
 8004b46:	11db      	asrs	r3, r3, #7
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f003 0306 	and.w	r3, r3, #6
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f063 030e 	orn	r3, r3, #14
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4907      	ldr	r1, [pc, #28]	; (8004b80 <I2C_MasterRequestRead+0x198>)
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f865 	bl	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	00010008 	.word	0x00010008
 8004b80:	00010002 	.word	0x00010002

08004b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b94:	e025      	b.n	8004be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d021      	beq.n	8004be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7fd fb37 	bl	8002210 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d116      	bne.n	8004be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e023      	b.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10d      	bne.n	8004c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	43da      	mvns	r2, r3
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	e00c      	b.n	8004c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4013      	ands	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d0b6      	beq.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c40:	e051      	b.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c50:	d123      	bne.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e046      	b.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d021      	beq.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fd fab5 	bl	8002210 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d116      	bne.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e020      	b.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10c      	bne.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e00b      	b.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	43da      	mvns	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d18d      	bne.n	8004c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3c:	e02d      	b.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f8ce 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e02d      	b.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d021      	beq.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fd fa5b 	bl	8002210 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d116      	bne.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e007      	b.n	8004daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da4:	2b80      	cmp	r3, #128	; 0x80
 8004da6:	d1ca      	bne.n	8004d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dbe:	e02d      	b.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f88d 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e02d      	b.n	8004e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d021      	beq.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd8:	f7fd fa1a 	bl	8002210 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d116      	bne.n	8004e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e007      	b.n	8004e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d1ca      	bne.n	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e40:	e042      	b.n	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d119      	bne.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0210 	mvn.w	r2, #16
 8004e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e029      	b.n	8004ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e84:	f7fd f9c4 	bl	8002210 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d302      	bcc.n	8004e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d116      	bne.n	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e007      	b.n	8004ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d1b5      	bne.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef6:	d11b      	bne.n	8004f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e267      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d075      	beq.n	800504a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5e:	4b88      	ldr	r3, [pc, #544]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d00c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b85      	ldr	r3, [pc, #532]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d112      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f76:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f82:	d10b      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	4b7e      	ldr	r3, [pc, #504]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05b      	beq.n	8005048 <HAL_RCC_OscConfig+0x108>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d157      	bne.n	8005048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e242      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x74>
 8004fa6:	4b76      	ldr	r3, [pc, #472]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a75      	ldr	r2, [pc, #468]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e01d      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x98>
 8004fbe:	4b70      	ldr	r3, [pc, #448]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6f      	ldr	r2, [pc, #444]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6c      	ldr	r2, [pc, #432]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
 8004fd8:	4b69      	ldr	r3, [pc, #420]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a68      	ldr	r2, [pc, #416]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a65      	ldr	r2, [pc, #404]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fd f90a 	bl	8002210 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005000:	f7fd f906 	bl	8002210 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	; 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e207      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0xc0>
 800501e:	e014      	b.n	800504a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fd f8f6 	bl	8002210 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7fd f8f2 	bl	8002210 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1f3      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0xe8>
 8005046:	e000      	b.n	800504a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d063      	beq.n	800511e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506a:	2b08      	cmp	r3, #8
 800506c:	d11c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b44      	ldr	r3, [pc, #272]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x152>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e1c7      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4937      	ldr	r1, [pc, #220]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	e03a      	b.n	800511e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b0:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x244>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fd f8ab 	bl	8002210 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050be:	f7fd f8a7 	bl	8002210 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e1a8      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4925      	ldr	r1, [pc, #148]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	e015      	b.n	800511e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCC_OscConfig+0x244>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd f88a 	bl	8002210 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005100:	f7fd f886 	bl	8002210 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e187      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d036      	beq.n	8005198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_RCC_OscConfig+0x248>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd f86a 	bl	8002210 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005140:	f7fd f866 	bl	8002210 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e167      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x200>
 800515e:	e01b      	b.n	8005198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_OscConfig+0x248>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005166:	f7fd f853 	bl	8002210 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	e00e      	b.n	800518c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516e:	f7fd f84f 	bl	8002210 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d907      	bls.n	800518c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e150      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
 8005180:	40023800 	.word	0x40023800
 8005184:	42470000 	.word	0x42470000
 8005188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ea      	bne.n	800516e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8097 	beq.w	80052d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b81      	ldr	r3, [pc, #516]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b7d      	ldr	r3, [pc, #500]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b7a      	ldr	r3, [pc, #488]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b77      	ldr	r3, [pc, #476]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d118      	bne.n	8005214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b74      	ldr	r3, [pc, #464]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a73      	ldr	r2, [pc, #460]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fd f80f 	bl	8002210 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fd f80b 	bl	8002210 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e10c      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x2ea>
 800521c:	4b64      	ldr	r3, [pc, #400]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a63      	ldr	r2, [pc, #396]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	e01c      	b.n	8005264 <HAL_RCC_OscConfig+0x324>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x30c>
 8005232:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a5e      	ldr	r2, [pc, #376]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
 800523e:	4b5c      	ldr	r3, [pc, #368]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a5b      	ldr	r2, [pc, #364]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0x324>
 800524c:	4b58      	ldr	r3, [pc, #352]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
 8005258:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a54      	ldr	r2, [pc, #336]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fc ffd0 	bl	8002210 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fc ffcc 	bl	8002210 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0cb      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	4b49      	ldr	r3, [pc, #292]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ee      	beq.n	8005274 <HAL_RCC_OscConfig+0x334>
 8005296:	e014      	b.n	80052c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fc ffba 	bl	8002210 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fc ffb6 	bl	8002210 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e0b5      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b6:	4b3e      	ldr	r3, [pc, #248]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ee      	bne.n	80052a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c8:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a1 	beq.w	8005420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052de:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d05c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d141      	bne.n	8005376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fc ff8a 	bl	8002210 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005300:	f7fc ff86 	bl	8002210 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e087      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	491b      	ldr	r1, [pc, #108]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fc ff5f 	bl	8002210 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005356:	f7fc ff5b 	bl	8002210 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e05c      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005368:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x416>
 8005374:	e054      	b.n	8005420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fc ff48 	bl	8002210 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fc ff44 	bl	8002210 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e045      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x444>
 80053a2:	e03d      	b.n	8005420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e038      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40007000 	.word	0x40007000
 80053b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x4ec>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d028      	beq.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d121      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11a      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	3b01      	subs	r3, #1
 8005406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d107      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0cc      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d90c      	bls.n	800546c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b65      	ldr	r3, [pc, #404]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b63      	ldr	r3, [pc, #396]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0b8      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005484:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a52      	ldr	r2, [pc, #328]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	494d      	ldr	r1, [pc, #308]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d044      	beq.n	8005550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b47      	ldr	r3, [pc, #284]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d119      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d003      	beq.n	80054ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e067      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550e:	4b37      	ldr	r3, [pc, #220]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4934      	ldr	r1, [pc, #208]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005520:	f7fc fe76 	bl	8002210 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	e00a      	b.n	800553e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005528:	f7fc fe72 	bl	8002210 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e04f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 020c 	and.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	429a      	cmp	r2, r3
 800554e:	d1eb      	bne.n	8005528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20c      	bcs.n	8005578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e032      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4916      	ldr	r1, [pc, #88]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055b6:	f000 f821 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	490a      	ldr	r1, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	5ccb      	ldrb	r3, [r1, r3]
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fc fdd6 	bl	8002188 <HAL_InitTick>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40023c00 	.word	0x40023c00
 80055ec:	40023800 	.word	0x40023800
 80055f0:	0800a694 	.word	0x0800a694
 80055f4:	20000000 	.word	0x20000000
 80055f8:	20000004 	.word	0x20000004

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005600:	b094      	sub	sp, #80	; 0x50
 8005602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
 8005608:	2300      	movs	r3, #0
 800560a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560c:	2300      	movs	r3, #0
 800560e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005614:	4b79      	ldr	r3, [pc, #484]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b08      	cmp	r3, #8
 800561e:	d00d      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x40>
 8005620:	2b08      	cmp	r3, #8
 8005622:	f200 80e1 	bhi.w	80057e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x34>
 800562a:	2b04      	cmp	r3, #4
 800562c:	d003      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x3a>
 800562e:	e0db      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005630:	4b73      	ldr	r3, [pc, #460]	; (8005800 <HAL_RCC_GetSysClockFreq+0x204>)
 8005632:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005634:	e0db      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005636:	4b73      	ldr	r3, [pc, #460]	; (8005804 <HAL_RCC_GetSysClockFreq+0x208>)
 8005638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800563a:	e0d8      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563c:	4b6f      	ldr	r3, [pc, #444]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005644:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005646:	4b6d      	ldr	r3, [pc, #436]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d063      	beq.n	800571a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005652:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	2200      	movs	r2, #0
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
 800565c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	0159      	lsls	r1, r3, #5
 800567c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005680:	0150      	lsls	r0, r2, #5
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4621      	mov	r1, r4
 8005688:	1a51      	subs	r1, r2, r1
 800568a:	6139      	str	r1, [r7, #16]
 800568c:	4629      	mov	r1, r5
 800568e:	eb63 0301 	sbc.w	r3, r3, r1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a0:	4659      	mov	r1, fp
 80056a2:	018b      	lsls	r3, r1, #6
 80056a4:	4651      	mov	r1, sl
 80056a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056aa:	4651      	mov	r1, sl
 80056ac:	018a      	lsls	r2, r1, #6
 80056ae:	4651      	mov	r1, sl
 80056b0:	ebb2 0801 	subs.w	r8, r2, r1
 80056b4:	4659      	mov	r1, fp
 80056b6:	eb63 0901 	sbc.w	r9, r3, r1
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ce:	4690      	mov	r8, r2
 80056d0:	4699      	mov	r9, r3
 80056d2:	4623      	mov	r3, r4
 80056d4:	eb18 0303 	adds.w	r3, r8, r3
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	462b      	mov	r3, r5
 80056dc:	eb49 0303 	adc.w	r3, r9, r3
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ee:	4629      	mov	r1, r5
 80056f0:	024b      	lsls	r3, r1, #9
 80056f2:	4621      	mov	r1, r4
 80056f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056f8:	4621      	mov	r1, r4
 80056fa:	024a      	lsls	r2, r1, #9
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	2200      	movs	r2, #0
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
 8005706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800570c:	f7fb f9ae 	bl	8000a6c <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005718:	e058      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571a:	4b38      	ldr	r3, [pc, #224]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	099b      	lsrs	r3, r3, #6
 8005720:	2200      	movs	r2, #0
 8005722:	4618      	mov	r0, r3
 8005724:	4611      	mov	r1, r2
 8005726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	2300      	movs	r3, #0
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
 8005730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005734:	4642      	mov	r2, r8
 8005736:	464b      	mov	r3, r9
 8005738:	f04f 0000 	mov.w	r0, #0
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	0159      	lsls	r1, r3, #5
 8005742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005746:	0150      	lsls	r0, r2, #5
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4641      	mov	r1, r8
 800574e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb63 0b01 	sbc.w	fp, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800576c:	ebb2 040a 	subs.w	r4, r2, sl
 8005770:	eb63 050b 	sbc.w	r5, r3, fp
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	00eb      	lsls	r3, r5, #3
 800577e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005782:	00e2      	lsls	r2, r4, #3
 8005784:	4614      	mov	r4, r2
 8005786:	461d      	mov	r5, r3
 8005788:	4643      	mov	r3, r8
 800578a:	18e3      	adds	r3, r4, r3
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	464b      	mov	r3, r9
 8005790:	eb45 0303 	adc.w	r3, r5, r3
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057a2:	4629      	mov	r1, r5
 80057a4:	028b      	lsls	r3, r1, #10
 80057a6:	4621      	mov	r1, r4
 80057a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057ac:	4621      	mov	r1, r4
 80057ae:	028a      	lsls	r2, r1, #10
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b6:	2200      	movs	r2, #0
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	61fa      	str	r2, [r7, #28]
 80057bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c0:	f7fb f954 	bl	8000a6c <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4613      	mov	r3, r2
 80057ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	3301      	adds	r3, #1
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057e6:	e002      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3750      	adds	r7, #80	; 0x50
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	00f42400 	.word	0x00f42400
 8005804:	007a1200 	.word	0x007a1200

08005808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCC_GetHCLKFreq+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000000 	.word	0x20000000

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005824:	f7ff fff0 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0a9b      	lsrs	r3, r3, #10
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40023800 	.word	0x40023800
 8005844:	0800a6a4 	.word	0x0800a6a4

08005848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800584c:	f7ff ffdc 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	0b5b      	lsrs	r3, r3, #13
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4903      	ldr	r1, [pc, #12]	; (800586c <HAL_RCC_GetPCLK2Freq+0x24>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40023800 	.word	0x40023800
 800586c:	0800a6a4 	.word	0x0800a6a4

08005870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07b      	b.n	800597a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d108      	bne.n	800589c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d009      	beq.n	80058a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
 800589a:	e005      	b.n	80058a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc fa7e 	bl	8001dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	ea42 0103 	orr.w	r1, r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	f003 0104 	and.w	r1, r3, #4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0210 	and.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e03f      	b.n	8005a14 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7fc fabb 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2224      	movs	r2, #36	; 0x24
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f828 	bl	8005a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a20:	b0c0      	sub	sp, #256	; 0x100
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a38:	68d9      	ldr	r1, [r3, #12]
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	ea40 0301 	orr.w	r3, r0, r1
 8005a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a74:	f021 010c 	bic.w	r1, r1, #12
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a82:	430b      	orrs	r3, r1
 8005a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	6999      	ldr	r1, [r3, #24]
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	ea40 0301 	orr.w	r3, r0, r1
 8005aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	4b8f      	ldr	r3, [pc, #572]	; (8005ce8 <UART_SetConfig+0x2cc>)
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d005      	beq.n	8005abc <UART_SetConfig+0xa0>
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	4b8d      	ldr	r3, [pc, #564]	; (8005cec <UART_SetConfig+0x2d0>)
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d104      	bne.n	8005ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005abc:	f7ff fec4 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8005ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ac4:	e003      	b.n	8005ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ac6:	f7ff feab 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8005aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad8:	f040 810c 	bne.w	8005cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005aee:	4622      	mov	r2, r4
 8005af0:	462b      	mov	r3, r5
 8005af2:	1891      	adds	r1, r2, r2
 8005af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005af6:	415b      	adcs	r3, r3
 8005af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005afe:	4621      	mov	r1, r4
 8005b00:	eb12 0801 	adds.w	r8, r2, r1
 8005b04:	4629      	mov	r1, r5
 8005b06:	eb43 0901 	adc.w	r9, r3, r1
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b1e:	4690      	mov	r8, r2
 8005b20:	4699      	mov	r9, r3
 8005b22:	4623      	mov	r3, r4
 8005b24:	eb18 0303 	adds.w	r3, r8, r3
 8005b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	eb49 0303 	adc.w	r3, r9, r3
 8005b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	18db      	adds	r3, r3, r3
 8005b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b50:	4613      	mov	r3, r2
 8005b52:	eb42 0303 	adc.w	r3, r2, r3
 8005b56:	657b      	str	r3, [r7, #84]	; 0x54
 8005b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b60:	f7fa ff84 	bl	8000a6c <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <UART_SetConfig+0x2d4>)
 8005b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	011c      	lsls	r4, r3, #4
 8005b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b84:	4642      	mov	r2, r8
 8005b86:	464b      	mov	r3, r9
 8005b88:	1891      	adds	r1, r2, r2
 8005b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b8c:	415b      	adcs	r3, r3
 8005b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b94:	4641      	mov	r1, r8
 8005b96:	eb12 0a01 	adds.w	sl, r2, r1
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb4:	4692      	mov	sl, r2
 8005bb6:	469b      	mov	fp, r3
 8005bb8:	4643      	mov	r3, r8
 8005bba:	eb1a 0303 	adds.w	r3, sl, r3
 8005bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005be0:	460b      	mov	r3, r1
 8005be2:	18db      	adds	r3, r3, r3
 8005be4:	643b      	str	r3, [r7, #64]	; 0x40
 8005be6:	4613      	mov	r3, r2
 8005be8:	eb42 0303 	adc.w	r3, r2, r3
 8005bec:	647b      	str	r3, [r7, #68]	; 0x44
 8005bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bf6:	f7fa ff39 	bl	8000a6c <__aeabi_uldivmod>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4b3b      	ldr	r3, [pc, #236]	; (8005cf0 <UART_SetConfig+0x2d4>)
 8005c02:	fba3 2301 	umull	r2, r3, r3, r1
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	2264      	movs	r2, #100	; 0x64
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	1acb      	subs	r3, r1, r3
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c16:	4b36      	ldr	r3, [pc, #216]	; (8005cf0 <UART_SetConfig+0x2d4>)
 8005c18:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	005b      	lsls	r3, r3, #1
 8005c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c24:	441c      	add	r4, r3
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	1891      	adds	r1, r2, r2
 8005c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c40:	415b      	adcs	r3, r3
 8005c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c48:	4641      	mov	r1, r8
 8005c4a:	1851      	adds	r1, r2, r1
 8005c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c4e:	4649      	mov	r1, r9
 8005c50:	414b      	adcs	r3, r1
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c60:	4659      	mov	r1, fp
 8005c62:	00cb      	lsls	r3, r1, #3
 8005c64:	4651      	mov	r1, sl
 8005c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6a:	4651      	mov	r1, sl
 8005c6c:	00ca      	lsls	r2, r1, #3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	4603      	mov	r3, r0
 8005c74:	4642      	mov	r2, r8
 8005c76:	189b      	adds	r3, r3, r2
 8005c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	460a      	mov	r2, r1
 8005c80:	eb42 0303 	adc.w	r3, r2, r3
 8005c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	18db      	adds	r3, r3, r3
 8005ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	eb42 0303 	adc.w	r3, r2, r3
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cb2:	f7fa fedb 	bl	8000a6c <__aeabi_uldivmod>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <UART_SetConfig+0x2d4>)
 8005cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	2164      	movs	r1, #100	; 0x64
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	3332      	adds	r3, #50	; 0x32
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <UART_SetConfig+0x2d4>)
 8005cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	f003 0207 	and.w	r2, r3, #7
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4422      	add	r2, r4
 8005ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ce4:	e105      	b.n	8005ef2 <UART_SetConfig+0x4d6>
 8005ce6:	bf00      	nop
 8005ce8:	40011000 	.word	0x40011000
 8005cec:	40011400 	.word	0x40011400
 8005cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d06:	4642      	mov	r2, r8
 8005d08:	464b      	mov	r3, r9
 8005d0a:	1891      	adds	r1, r2, r2
 8005d0c:	6239      	str	r1, [r7, #32]
 8005d0e:	415b      	adcs	r3, r3
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d16:	4641      	mov	r1, r8
 8005d18:	1854      	adds	r4, r2, r1
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	eb43 0501 	adc.w	r5, r3, r1
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	00eb      	lsls	r3, r5, #3
 8005d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d2e:	00e2      	lsls	r2, r4, #3
 8005d30:	4614      	mov	r4, r2
 8005d32:	461d      	mov	r5, r3
 8005d34:	4643      	mov	r3, r8
 8005d36:	18e3      	adds	r3, r4, r3
 8005d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	eb45 0303 	adc.w	r3, r5, r3
 8005d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d62:	4629      	mov	r1, r5
 8005d64:	008b      	lsls	r3, r1, #2
 8005d66:	4621      	mov	r1, r4
 8005d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	008a      	lsls	r2, r1, #2
 8005d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d74:	f7fa fe7a 	bl	8000a6c <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4b60      	ldr	r3, [pc, #384]	; (8005f00 <UART_SetConfig+0x4e4>)
 8005d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d82:	095b      	lsrs	r3, r3, #5
 8005d84:	011c      	lsls	r4, r3, #4
 8005d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d98:	4642      	mov	r2, r8
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	1891      	adds	r1, r2, r2
 8005d9e:	61b9      	str	r1, [r7, #24]
 8005da0:	415b      	adcs	r3, r3
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da8:	4641      	mov	r1, r8
 8005daa:	1851      	adds	r1, r2, r1
 8005dac:	6139      	str	r1, [r7, #16]
 8005dae:	4649      	mov	r1, r9
 8005db0:	414b      	adcs	r3, r1
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	00cb      	lsls	r3, r1, #3
 8005dc4:	4651      	mov	r1, sl
 8005dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dca:	4651      	mov	r1, sl
 8005dcc:	00ca      	lsls	r2, r1, #3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	189b      	adds	r3, r3, r2
 8005dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ddc:	464b      	mov	r3, r9
 8005dde:	460a      	mov	r2, r1
 8005de0:	eb42 0303 	adc.w	r3, r2, r3
 8005de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e00:	4649      	mov	r1, r9
 8005e02:	008b      	lsls	r3, r1, #2
 8005e04:	4641      	mov	r1, r8
 8005e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0a:	4641      	mov	r1, r8
 8005e0c:	008a      	lsls	r2, r1, #2
 8005e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e12:	f7fa fe2b 	bl	8000a6c <__aeabi_uldivmod>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <UART_SetConfig+0x4e4>)
 8005e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	2164      	movs	r1, #100	; 0x64
 8005e24:	fb01 f303 	mul.w	r3, r1, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	3332      	adds	r3, #50	; 0x32
 8005e2e:	4a34      	ldr	r2, [pc, #208]	; (8005f00 <UART_SetConfig+0x4e4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e3a:	441c      	add	r4, r3
 8005e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e40:	2200      	movs	r2, #0
 8005e42:	673b      	str	r3, [r7, #112]	; 0x70
 8005e44:	677a      	str	r2, [r7, #116]	; 0x74
 8005e46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e4a:	4642      	mov	r2, r8
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	1891      	adds	r1, r2, r2
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	415b      	adcs	r3, r3
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e5a:	4641      	mov	r1, r8
 8005e5c:	1851      	adds	r1, r2, r1
 8005e5e:	6039      	str	r1, [r7, #0]
 8005e60:	4649      	mov	r1, r9
 8005e62:	414b      	adcs	r3, r1
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	f04f 0300 	mov.w	r3, #0
 8005e6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e72:	4659      	mov	r1, fp
 8005e74:	00cb      	lsls	r3, r1, #3
 8005e76:	4651      	mov	r1, sl
 8005e78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	00ca      	lsls	r2, r1, #3
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	4603      	mov	r3, r0
 8005e86:	4642      	mov	r2, r8
 8005e88:	189b      	adds	r3, r3, r2
 8005e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	460a      	mov	r2, r1
 8005e90:	eb42 0303 	adc.w	r3, r2, r3
 8005e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005ea0:	667a      	str	r2, [r7, #100]	; 0x64
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eae:	4649      	mov	r1, r9
 8005eb0:	008b      	lsls	r3, r1, #2
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb8:	4641      	mov	r1, r8
 8005eba:	008a      	lsls	r2, r1, #2
 8005ebc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ec0:	f7fa fdd4 	bl	8000a6c <__aeabi_uldivmod>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4b0d      	ldr	r3, [pc, #52]	; (8005f00 <UART_SetConfig+0x4e4>)
 8005eca:	fba3 1302 	umull	r1, r3, r3, r2
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	2164      	movs	r1, #100	; 0x64
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	011b      	lsls	r3, r3, #4
 8005eda:	3332      	adds	r3, #50	; 0x32
 8005edc:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <UART_SetConfig+0x4e4>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4422      	add	r2, r4
 8005ef0:	609a      	str	r2, [r3, #8]
}
 8005ef2:	bf00      	nop
 8005ef4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005efe:	bf00      	nop
 8005f00:	51eb851f 	.word	0x51eb851f

08005f04 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e033      	b.n	8005f7e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fb ff92 	bl	8001e54 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f90b 	bl	8006154 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b08a      	sub	sp, #40	; 0x28
 8005f8a:	af02      	add	r7, sp, #8
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d17c      	bne.n	800609c <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_USART_Transmit+0x28>
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e075      	b.n	800609e <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_USART_Transmit+0x3a>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e06e      	b.n	800609e <HAL_USART_Transmit+0x118>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2212      	movs	r2, #18
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fc f91b 	bl	8002210 <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	d108      	bne.n	8006004 <HAL_USART_Transmit+0x7e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	e003      	b.n	800600c <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 800600c:	e02a      	b.n	8006064 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f844 	bl	80060a6 <USART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e03a      	b.n	800609e <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800603c:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	3302      	adds	r3, #2
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e007      	b.n	8006056 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3301      	adds	r3, #1
 8006054:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1cf      	bne.n	800600e <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	2140      	movs	r1, #64	; 0x40
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f814 	bl	80060a6 <USART_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e00a      	b.n	800609e <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	603b      	str	r3, [r7, #0]
 80060b2:	4613      	mov	r3, r2
 80060b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80060b6:	e038      	b.n	800612a <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060be:	d034      	beq.n	800612a <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <USART_WaitOnFlagUntilTimeout+0x30>
 80060c6:	f7fc f8a3 	bl	8002210 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d229      	bcs.n	800612a <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060e4:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0220 	bic.w	r2, r2, #32
 80060f4:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006104:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e00f      	b.n	800614a <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	79fb      	ldrb	r3, [r7, #7]
 8006144:	429a      	cmp	r2, r3
 8006146:	d0b7      	beq.n	80060b8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006158:	b0c6      	sub	sp, #280	; 0x118
 800615a:	af00      	add	r7, sp, #0
 800615c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68d9      	ldr	r1, [r3, #12]
 800616e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	f021 030c 	bic.w	r3, r1, #12
 8006178:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800617a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800618e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006196:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800619e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80061a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	431a      	orrs	r2, r3
 80061a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80061ae:	431a      	orrs	r2, r3
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 80061be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c8:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 80061ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80061d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80061de:	f023 030c 	bic.w	r3, r3, #12
 80061e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80061e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	4313      	orrs	r3, r2
 8006202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006206:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800620a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006214:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8006216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6959      	ldr	r1, [r3, #20]
 800621e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8006228:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800622a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	4b8b      	ldr	r3, [pc, #556]	; (8006460 <USART_SetConfig+0x30c>)
 8006232:	429a      	cmp	r2, r3
 8006234:	d006      	beq.n	8006244 <USART_SetConfig+0xf0>
 8006236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b89      	ldr	r3, [pc, #548]	; (8006464 <USART_SetConfig+0x310>)
 800623e:	429a      	cmp	r2, r3
 8006240:	f040 8114 	bne.w	800646c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7ff fb00 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8006248:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800624c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006256:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800625a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800625e:	4622      	mov	r2, r4
 8006260:	462b      	mov	r3, r5
 8006262:	1891      	adds	r1, r2, r2
 8006264:	6739      	str	r1, [r7, #112]	; 0x70
 8006266:	415b      	adcs	r3, r3
 8006268:	677b      	str	r3, [r7, #116]	; 0x74
 800626a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800626e:	4621      	mov	r1, r4
 8006270:	eb12 0801 	adds.w	r8, r2, r1
 8006274:	4629      	mov	r1, r5
 8006276:	eb43 0901 	adc.w	r9, r3, r1
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800628a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800628e:	4690      	mov	r8, r2
 8006290:	4699      	mov	r9, r3
 8006292:	4623      	mov	r3, r4
 8006294:	eb18 0303 	adds.w	r3, r8, r3
 8006298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800629c:	462b      	mov	r3, r5
 800629e:	eb49 0303 	adc.w	r3, r9, r3
 80062a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80062b2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80062b6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80062ba:	460b      	mov	r3, r1
 80062bc:	18db      	adds	r3, r3, r3
 80062be:	66bb      	str	r3, [r7, #104]	; 0x68
 80062c0:	4613      	mov	r3, r2
 80062c2:	eb42 0303 	adc.w	r3, r2, r3
 80062c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80062cc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80062d0:	f7fa fbcc 	bl	8000a6c <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4b63      	ldr	r3, [pc, #396]	; (8006468 <USART_SetConfig+0x314>)
 80062da:	fba3 2302 	umull	r2, r3, r3, r2
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	011c      	lsls	r4, r3, #4
 80062e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062ec:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062f0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80062f4:	4642      	mov	r2, r8
 80062f6:	464b      	mov	r3, r9
 80062f8:	1891      	adds	r1, r2, r2
 80062fa:	6639      	str	r1, [r7, #96]	; 0x60
 80062fc:	415b      	adcs	r3, r3
 80062fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006300:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006304:	4641      	mov	r1, r8
 8006306:	1851      	adds	r1, r2, r1
 8006308:	65b9      	str	r1, [r7, #88]	; 0x58
 800630a:	4649      	mov	r1, r9
 800630c:	414b      	adcs	r3, r1
 800630e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800631c:	4659      	mov	r1, fp
 800631e:	00cb      	lsls	r3, r1, #3
 8006320:	4651      	mov	r1, sl
 8006322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006326:	4651      	mov	r1, sl
 8006328:	00ca      	lsls	r2, r1, #3
 800632a:	4610      	mov	r0, r2
 800632c:	4619      	mov	r1, r3
 800632e:	4603      	mov	r3, r0
 8006330:	4642      	mov	r2, r8
 8006332:	189b      	adds	r3, r3, r2
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006338:	464b      	mov	r3, r9
 800633a:	460a      	mov	r2, r1
 800633c:	eb42 0303 	adc.w	r3, r2, r3
 8006340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006350:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006354:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006358:	460b      	mov	r3, r1
 800635a:	18db      	adds	r3, r3, r3
 800635c:	653b      	str	r3, [r7, #80]	; 0x50
 800635e:	4613      	mov	r3, r2
 8006360:	eb42 0303 	adc.w	r3, r2, r3
 8006364:	657b      	str	r3, [r7, #84]	; 0x54
 8006366:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800636a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800636e:	f7fa fb7d 	bl	8000a6c <__aeabi_uldivmod>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4611      	mov	r1, r2
 8006378:	4b3b      	ldr	r3, [pc, #236]	; (8006468 <USART_SetConfig+0x314>)
 800637a:	fba3 2301 	umull	r2, r3, r3, r1
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	2264      	movs	r2, #100	; 0x64
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	1acb      	subs	r3, r1, r3
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800638e:	4b36      	ldr	r3, [pc, #216]	; (8006468 <USART_SetConfig+0x314>)
 8006390:	fba3 2302 	umull	r2, r3, r3, r2
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800639c:	441c      	add	r4, r3
 800639e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	1891      	adds	r1, r2, r2
 80063b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80063b8:	415b      	adcs	r3, r3
 80063ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063c0:	4641      	mov	r1, r8
 80063c2:	1851      	adds	r1, r2, r1
 80063c4:	6439      	str	r1, [r7, #64]	; 0x40
 80063c6:	4649      	mov	r1, r9
 80063c8:	414b      	adcs	r3, r1
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 80063d8:	4659      	mov	r1, fp
 80063da:	00cb      	lsls	r3, r1, #3
 80063dc:	4651      	mov	r1, sl
 80063de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063e2:	4651      	mov	r1, sl
 80063e4:	00ca      	lsls	r2, r1, #3
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	4642      	mov	r2, r8
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f4:	464b      	mov	r3, r9
 80063f6:	460a      	mov	r2, r1
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800640c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006414:	460b      	mov	r3, r1
 8006416:	18db      	adds	r3, r3, r3
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
 800641a:	4613      	mov	r3, r2
 800641c:	eb42 0303 	adc.w	r3, r2, r3
 8006420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006422:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800642a:	f7fa fb1f 	bl	8000a6c <__aeabi_uldivmod>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <USART_SetConfig+0x314>)
 8006434:	fba3 1302 	umull	r1, r3, r3, r2
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	2164      	movs	r1, #100	; 0x64
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	3332      	adds	r3, #50	; 0x32
 8006446:	4a08      	ldr	r2, [pc, #32]	; (8006468 <USART_SetConfig+0x314>)
 8006448:	fba2 2303 	umull	r2, r3, r2, r3
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	f003 0207 	and.w	r2, r3, #7
 8006452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4422      	add	r2, r4
 800645a:	609a      	str	r2, [r3, #8]
 800645c:	e109      	b.n	8006672 <USART_SetConfig+0x51e>
 800645e:	bf00      	nop
 8006460:	40011000 	.word	0x40011000
 8006464:	40011400 	.word	0x40011400
 8006468:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800646c:	f7ff f9d8 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8006470:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006474:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006478:	2200      	movs	r2, #0
 800647a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800647e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006482:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006486:	4642      	mov	r2, r8
 8006488:	464b      	mov	r3, r9
 800648a:	1891      	adds	r1, r2, r2
 800648c:	6339      	str	r1, [r7, #48]	; 0x30
 800648e:	415b      	adcs	r3, r3
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
 8006492:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006496:	4641      	mov	r1, r8
 8006498:	1854      	adds	r4, r2, r1
 800649a:	4649      	mov	r1, r9
 800649c:	eb43 0501 	adc.w	r5, r3, r1
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	00eb      	lsls	r3, r5, #3
 80064aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ae:	00e2      	lsls	r2, r4, #3
 80064b0:	4614      	mov	r4, r2
 80064b2:	461d      	mov	r5, r3
 80064b4:	4643      	mov	r3, r8
 80064b6:	18e3      	adds	r3, r4, r3
 80064b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064bc:	464b      	mov	r3, r9
 80064be:	eb45 0303 	adc.w	r3, r5, r3
 80064c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064d2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064da:	460b      	mov	r3, r1
 80064dc:	18db      	adds	r3, r3, r3
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e0:	4613      	mov	r3, r2
 80064e2:	eb42 0303 	adc.w	r3, r2, r3
 80064e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ec:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064f0:	f7fa fabc 	bl	8000a6c <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4b61      	ldr	r3, [pc, #388]	; (8006680 <USART_SetConfig+0x52c>)
 80064fa:	fba3 2302 	umull	r2, r3, r3, r2
 80064fe:	095b      	lsrs	r3, r3, #5
 8006500:	011c      	lsls	r4, r3, #4
 8006502:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006506:	2200      	movs	r2, #0
 8006508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800650c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006510:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	1891      	adds	r1, r2, r2
 800651a:	6239      	str	r1, [r7, #32]
 800651c:	415b      	adcs	r3, r3
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
 8006520:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006524:	4641      	mov	r1, r8
 8006526:	eb12 0a01 	adds.w	sl, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0b01 	adc.w	fp, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800653c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006540:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006544:	4692      	mov	sl, r2
 8006546:	469b      	mov	fp, r3
 8006548:	4643      	mov	r3, r8
 800654a:	eb1a 0303 	adds.w	r3, sl, r3
 800654e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006552:	464b      	mov	r3, r9
 8006554:	eb4b 0303 	adc.w	r3, fp, r3
 8006558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800655c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006568:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800656c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006570:	460b      	mov	r3, r1
 8006572:	18db      	adds	r3, r3, r3
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	4613      	mov	r3, r2
 8006578:	eb42 0303 	adc.w	r3, r2, r3
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006582:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006586:	f7fa fa71 	bl	8000a6c <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4611      	mov	r1, r2
 8006590:	4b3b      	ldr	r3, [pc, #236]	; (8006680 <USART_SetConfig+0x52c>)
 8006592:	fba3 2301 	umull	r2, r3, r3, r1
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	2264      	movs	r2, #100	; 0x64
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	1acb      	subs	r3, r1, r3
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065a6:	4b36      	ldr	r3, [pc, #216]	; (8006680 <USART_SetConfig+0x52c>)
 80065a8:	fba3 2302 	umull	r2, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065b4:	441c      	add	r4, r3
 80065b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	1891      	adds	r1, r2, r2
 80065ce:	6139      	str	r1, [r7, #16]
 80065d0:	415b      	adcs	r3, r3
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065d8:	4641      	mov	r1, r8
 80065da:	1851      	adds	r1, r2, r1
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	4649      	mov	r1, r9
 80065e0:	414b      	adcs	r3, r1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80065f0:	4659      	mov	r1, fp
 80065f2:	00cb      	lsls	r3, r1, #3
 80065f4:	4651      	mov	r1, sl
 80065f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fa:	4651      	mov	r1, sl
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	4603      	mov	r3, r0
 8006604:	4642      	mov	r2, r8
 8006606:	189b      	adds	r3, r3, r2
 8006608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800660c:	464b      	mov	r3, r9
 800660e:	460a      	mov	r2, r1
 8006610:	eb42 0303 	adc.w	r3, r2, r3
 8006614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	67bb      	str	r3, [r7, #120]	; 0x78
 8006622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006624:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006628:	460b      	mov	r3, r1
 800662a:	18db      	adds	r3, r3, r3
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	607b      	str	r3, [r7, #4]
 8006636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800663a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800663e:	f7fa fa15 	bl	8000a6c <__aeabi_uldivmod>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4b0e      	ldr	r3, [pc, #56]	; (8006680 <USART_SetConfig+0x52c>)
 8006648:	fba3 1302 	umull	r1, r3, r3, r2
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	2164      	movs	r1, #100	; 0x64
 8006650:	fb01 f303 	mul.w	r3, r1, r3
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	3332      	adds	r3, #50	; 0x32
 800665a:	4a09      	ldr	r2, [pc, #36]	; (8006680 <USART_SetConfig+0x52c>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	f003 0207 	and.w	r2, r3, #7
 8006666:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4422      	add	r2, r4
 800666e:	609a      	str	r2, [r3, #8]
  }
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006678:	46bd      	mov	sp, r7
 800667a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800667e:	bf00      	nop
 8006680:	51eb851f 	.word	0x51eb851f

08006684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006684:	b084      	sub	sp, #16
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
 800668e:	f107 001c 	add.w	r0, r7, #28
 8006692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	2b01      	cmp	r3, #1
 800669a:	d122      	bne.n	80066e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d105      	bne.n	80066d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f9c0 	bl	8006a5c <USB_CoreReset>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
 80066e0:	e01a      	b.n	8006718 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f9b4 	bl	8006a5c <USB_CoreReset>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	639a      	str	r2, [r3, #56]	; 0x38
 800670a:	e005      	b.n	8006718 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10b      	bne.n	8006736 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f043 0206 	orr.w	r2, r3, #6
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006742:	b004      	add	sp, #16
 8006744:	4770      	bx	lr

08006746 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f043 0201 	orr.w	r2, r3, #1
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f023 0201 	bic.w	r2, r3, #1
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d115      	bne.n	80067d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067b8:	2001      	movs	r0, #1
 80067ba:	f7fb fd35 	bl	8002228 <HAL_Delay>
      ms++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f93a 	bl	8006a3e <USB_GetMode>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d01e      	beq.n	800680e <USB_SetCurrentMode+0x84>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b31      	cmp	r3, #49	; 0x31
 80067d4:	d9f0      	bls.n	80067b8 <USB_SetCurrentMode+0x2e>
 80067d6:	e01a      	b.n	800680e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d115      	bne.n	800680a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067ea:	2001      	movs	r0, #1
 80067ec:	f7fb fd1c 	bl	8002228 <HAL_Delay>
      ms++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f921 	bl	8006a3e <USB_GetMode>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <USB_SetCurrentMode+0x84>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b31      	cmp	r3, #49	; 0x31
 8006806:	d9f0      	bls.n	80067ea <USB_SetCurrentMode+0x60>
 8006808:	e001      	b.n	800680e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e005      	b.n	800681a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b32      	cmp	r3, #50	; 0x32
 8006812:	d101      	bne.n	8006818 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a13      	ldr	r2, [pc, #76]	; (8006888 <USB_FlushTxFifo+0x64>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e01b      	b.n	800687c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	daf2      	bge.n	8006832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	019b      	lsls	r3, r3, #6
 8006854:	f043 0220 	orr.w	r2, r3, #32
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a08      	ldr	r2, [pc, #32]	; (8006888 <USB_FlushTxFifo+0x64>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e006      	b.n	800687c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b20      	cmp	r3, #32
 8006878:	d0f0      	beq.n	800685c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	00030d40 	.word	0x00030d40

0800688c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	4a11      	ldr	r2, [pc, #68]	; (80068e8 <USB_FlushRxFifo+0x5c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e018      	b.n	80068dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	daf2      	bge.n	8006898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2210      	movs	r2, #16
 80068ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <USB_FlushRxFifo+0x5c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e006      	b.n	80068dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0310 	and.w	r3, r3, #16
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d0f0      	beq.n	80068bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	00030d40 	.word	0x00030d40

080068ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	; 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4611      	mov	r1, r2
 80068f8:	461a      	mov	r2, r3
 80068fa:	460b      	mov	r3, r1
 80068fc:	71fb      	strb	r3, [r7, #7]
 80068fe:	4613      	mov	r3, r2
 8006900:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800690a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800690e:	2b00      	cmp	r3, #0
 8006910:	d123      	bne.n	800695a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006912:	88bb      	ldrh	r3, [r7, #4]
 8006914:	3303      	adds	r3, #3
 8006916:	089b      	lsrs	r3, r3, #2
 8006918:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800691a:	2300      	movs	r3, #0
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e018      	b.n	8006952 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	031a      	lsls	r2, r3, #12
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692c:	461a      	mov	r2, r3
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	3301      	adds	r3, #1
 8006938:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	3301      	adds	r3, #1
 800693e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	3301      	adds	r3, #1
 8006944:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	3301      	adds	r3, #1
 800694a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	3301      	adds	r3, #1
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	69ba      	ldr	r2, [r7, #24]
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d3e2      	bcc.n	8006920 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3724      	adds	r7, #36	; 0x24
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006968:	b480      	push	{r7}
 800696a:	b08b      	sub	sp, #44	; 0x2c
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800697e:	88fb      	ldrh	r3, [r7, #6]
 8006980:	089b      	lsrs	r3, r3, #2
 8006982:	b29b      	uxth	r3, r3
 8006984:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	623b      	str	r3, [r7, #32]
 8006992:	e014      	b.n	80069be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	601a      	str	r2, [r3, #0]
    pDest++;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	3301      	adds	r3, #1
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	3301      	adds	r3, #1
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	3301      	adds	r3, #1
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	3301      	adds	r3, #1
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	3301      	adds	r3, #1
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d3e6      	bcc.n	8006994 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80069c6:	8bfb      	ldrh	r3, [r7, #30]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d6:	461a      	mov	r2, r3
 80069d8:	f107 0310 	add.w	r3, r7, #16
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	701a      	strb	r2, [r3, #0]
      i++;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	3301      	adds	r3, #1
 80069f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	3301      	adds	r3, #1
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069fe:	8bfb      	ldrh	r3, [r7, #30]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a04:	8bfb      	ldrh	r3, [r7, #30]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ea      	bne.n	80069e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	372c      	adds	r7, #44	; 0x2c
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a30:	68fb      	ldr	r3, [r7, #12]
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
	...

08006a5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <USB_CoreReset+0x64>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d901      	bls.n	8006a7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e01b      	b.n	8006ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	daf2      	bge.n	8006a68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f043 0201 	orr.w	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3301      	adds	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <USB_CoreReset+0x64>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d901      	bls.n	8006aa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e006      	b.n	8006ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d0f0      	beq.n	8006a92 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	00030d40 	.word	0x00030d40

08006ac4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b086      	sub	sp, #24
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d018      	beq.n	8006b4c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10a      	bne.n	8006b36 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b2e:	f043 0304 	orr.w	r3, r3, #4
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e014      	b.n	8006b60 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b44:	f023 0304 	bic.w	r3, r3, #4
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	e009      	b.n	8006b60 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b5a:	f023 0304 	bic.w	r3, r3, #4
 8006b5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b60:	2110      	movs	r1, #16
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fe5e 	bl	8006824 <USB_FlushTxFifo>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff fe8a 	bl	800688c <USB_FlushRxFifo>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d001      	beq.n	8006b82 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	e015      	b.n	8006bb4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b94:	461a      	mov	r2, r3
 8006b96:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d3e5      	bcc.n	8006b88 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a13      	ldr	r2, [pc, #76]	; (8006c30 <USB_HostInit+0x16c>)
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <USB_HostInit+0x170>)
 8006be8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006bec:	e009      	b.n	8006c02 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2280      	movs	r2, #128	; 0x80
 8006bf2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a10      	ldr	r2, [pc, #64]	; (8006c38 <USB_HostInit+0x174>)
 8006bf8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <USB_HostInit+0x178>)
 8006bfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d105      	bne.n	8006c14 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	f043 0210 	orr.w	r2, r3, #16
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <USB_HostInit+0x17c>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c2c:	b004      	add	sp, #16
 8006c2e:	4770      	bx	lr
 8006c30:	01000200 	.word	0x01000200
 8006c34:	00e00300 	.word	0x00e00300
 8006c38:	00600080 	.word	0x00600080
 8006c3c:	004000e0 	.word	0x004000e0
 8006c40:	a3200008 	.word	0xa3200008

08006c44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c62:	f023 0303 	bic.w	r3, r3, #3
 8006c66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d107      	bne.n	8006c96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c92:	6053      	str	r3, [r2, #4]
 8006c94:	e009      	b.n	8006caa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d106      	bne.n	8006caa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ca8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ce8:	2064      	movs	r0, #100	; 0x64
 8006cea:	f7fb fa9d 	bl	8002228 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006cfc:	200a      	movs	r0, #10
 8006cfe:	f7fb fa93 	bl	8002228 <HAL_Delay>

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d30:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <USB_DriveVbus+0x44>
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d106      	bne.n	8006d50 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d4e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5a:	d109      	bne.n	8006d70 <USB_DriveVbus+0x64>
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d6e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	0c5b      	lsrs	r3, r3, #17
 8006d9c:	f003 0303 	and.w	r3, r3, #3
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	b29b      	uxth	r3, r3
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
	...

08006dd0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	4608      	mov	r0, r1
 8006dda:	4611      	mov	r1, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	70fb      	strb	r3, [r7, #3]
 8006de2:	460b      	mov	r3, r1
 8006de4:	70bb      	strb	r3, [r7, #2]
 8006de6:	4613      	mov	r3, r2
 8006de8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dea:	2300      	movs	r3, #0
 8006dec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f04f 33ff 	mov.w	r3, #4294967295
 8006e04:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006e06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d87e      	bhi.n	8006f0c <USB_HC_Init+0x13c>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <USB_HC_Init+0x44>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006ecf 	.word	0x08006ecf
 8006e1c:	08006e25 	.word	0x08006e25
 8006e20:	08006e91 	.word	0x08006e91
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e30:	461a      	mov	r2, r3
 8006e32:	f240 439d 	movw	r3, #1181	; 0x49d
 8006e36:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e38:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da10      	bge.n	8006e62 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	78fa      	ldrb	r2, [r7, #3]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e5e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006e60:	e057      	b.n	8006f12 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d051      	beq.n	8006f12 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e88:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e8c:	60d3      	str	r3, [r2, #12]
      break;
 8006e8e:	e040      	b.n	8006f12 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006ea2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ea4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da34      	bge.n	8006f16 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006eac:	78fb      	ldrb	r3, [r7, #3]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eca:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ecc:	e023      	b.n	8006f16 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eda:	461a      	mov	r2, r3
 8006edc:	f240 2325 	movw	r3, #549	; 0x225
 8006ee0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da17      	bge.n	8006f1a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f04:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006f08:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006f0a:	e006      	b.n	8006f1a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	77fb      	strb	r3, [r7, #31]
      break;
 8006f10:	e004      	b.n	8006f1c <USB_HC_Init+0x14c>
      break;
 8006f12:	bf00      	nop
 8006f14:	e002      	b.n	8006f1c <USB_HC_Init+0x14c>
      break;
 8006f16:	bf00      	nop
 8006f18:	e000      	b.n	8006f1c <USB_HC_Init+0x14c>
      break;
 8006f1a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f36:	f043 0302 	orr.w	r3, r3, #2
 8006f3a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f50:	6939      	ldr	r1, [r7, #16]
 8006f52:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f56:	4313      	orrs	r3, r2
 8006f58:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	da03      	bge.n	8006f76 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	e001      	b.n	8006f7a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff feff 	bl	8006d7e <USB_GetHostSpeed>
 8006f80:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d106      	bne.n	8006f98 <USB_HC_Init+0x1c8>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d003      	beq.n	8006f98 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e001      	b.n	8006f9c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f9c:	787b      	ldrb	r3, [r7, #1]
 8006f9e:	059b      	lsls	r3, r3, #22
 8006fa0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fa4:	78bb      	ldrb	r3, [r7, #2]
 8006fa6:	02db      	lsls	r3, r3, #11
 8006fa8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006fae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fb2:	049b      	lsls	r3, r3, #18
 8006fb4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fb8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006fba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006fc0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fc6:	78fb      	ldrb	r3, [r7, #3]
 8006fc8:	0159      	lsls	r1, r3, #5
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	440b      	add	r3, r1
 8006fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fd8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006fda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d003      	beq.n	8006fea <USB_HC_Init+0x21a>
 8006fe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d10f      	bne.n	800700a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006fea:	78fb      	ldrb	r3, [r7, #3]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007008:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800700a:	7ffb      	ldrb	r3, [r7, #31]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08c      	sub	sp, #48	; 0x30
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800702c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007030:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02d      	beq.n	800709a <USB_HC_StartXfer+0x86>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	791b      	ldrb	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d129      	bne.n	800709a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d117      	bne.n	800707c <USB_HC_StartXfer+0x68>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	79db      	ldrb	r3, [r3, #7]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <USB_HC_StartXfer+0x48>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	79db      	ldrb	r3, [r3, #7]
 8007058:	2b02      	cmp	r3, #2
 800705a:	d10f      	bne.n	800707c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	4413      	add	r3, r2
 8007064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	6a3a      	ldr	r2, [r7, #32]
 8007070:	440a      	add	r2, r1
 8007072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10b      	bne.n	800709a <USB_HC_StartXfer+0x86>
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d107      	bne.n	800709a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	4619      	mov	r1, r3
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fa0f 	bl	80074b4 <USB_DoPing>
      return HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	e0f8      	b.n	800728c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	8912      	ldrh	r2, [r2, #8]
 80070aa:	4413      	add	r3, r2
 80070ac:	3b01      	subs	r3, #1
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	8912      	ldrh	r2, [r2, #8]
 80070b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80070b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070ba:	8b7b      	ldrh	r3, [r7, #26]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d90b      	bls.n	80070d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80070c0:	8b7b      	ldrh	r3, [r7, #26]
 80070c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	8912      	ldrh	r2, [r2, #8]
 80070ca:	fb03 f202 	mul.w	r2, r3, r2
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	611a      	str	r2, [r3, #16]
 80070d2:	e001      	b.n	80070d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80070d4:	2301      	movs	r3, #1
 80070d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	78db      	ldrb	r3, [r3, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	8912      	ldrh	r2, [r2, #8]
 80070e6:	fb03 f202 	mul.w	r2, r3, r2
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	611a      	str	r2, [r3, #16]
 80070ee:	e003      	b.n	80070f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	695a      	ldr	r2, [r3, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007100:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007102:	04d9      	lsls	r1, r3, #19
 8007104:	4b63      	ldr	r3, [pc, #396]	; (8007294 <USB_HC_StartXfer+0x280>)
 8007106:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007108:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	7a9b      	ldrb	r3, [r3, #10]
 800710e:	075b      	lsls	r3, r3, #29
 8007110:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007114:	69f9      	ldr	r1, [r7, #28]
 8007116:	0148      	lsls	r0, r1, #5
 8007118:	6a39      	ldr	r1, [r7, #32]
 800711a:	4401      	add	r1, r0
 800711c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007120:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007122:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	68d9      	ldr	r1, [r3, #12]
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713a:	460a      	mov	r2, r1
 800713c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	440a      	add	r2, r1
 800716c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007170:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007174:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	7e7b      	ldrb	r3, [r7, #25]
 8007186:	075b      	lsls	r3, r3, #29
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	0148      	lsls	r0, r1, #5
 800718c:	6a39      	ldr	r1, [r7, #32]
 800718e:	4401      	add	r1, r0
 8007190:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	78db      	ldrb	r3, [r3, #3]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d004      	beq.n	80071c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	e003      	b.n	80071ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	461a      	mov	r2, r3
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e04e      	b.n	800728c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	78db      	ldrb	r3, [r3, #3]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d149      	bne.n	800728a <USB_HC_StartXfer+0x276>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	695b      	ldr	r3, [r3, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d045      	beq.n	800728a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	79db      	ldrb	r3, [r3, #7]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d830      	bhi.n	8007268 <USB_HC_StartXfer+0x254>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <USB_HC_StartXfer+0x1f8>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	0800721d 	.word	0x0800721d
 8007210:	08007241 	.word	0x08007241
 8007214:	0800721d 	.word	0x0800721d
 8007218:	08007241 	.word	0x08007241
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	3303      	adds	r3, #3
 8007222:	089b      	lsrs	r3, r3, #2
 8007224:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007226:	8afa      	ldrh	r2, [r7, #22]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	b29b      	uxth	r3, r3
 800722e:	429a      	cmp	r2, r3
 8007230:	d91c      	bls.n	800726c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	f043 0220 	orr.w	r2, r3, #32
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	619a      	str	r2, [r3, #24]
        }
        break;
 800723e:	e015      	b.n	800726c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	3303      	adds	r3, #3
 8007246:	089b      	lsrs	r3, r3, #2
 8007248:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800724a:	8afa      	ldrh	r2, [r7, #22]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	b29b      	uxth	r3, r3
 8007256:	429a      	cmp	r2, r3
 8007258:	d90a      	bls.n	8007270 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	619a      	str	r2, [r3, #24]
        }
        break;
 8007266:	e003      	b.n	8007270 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007268:	bf00      	nop
 800726a:	e002      	b.n	8007272 <USB_HC_StartXfer+0x25e>
        break;
 800726c:	bf00      	nop
 800726e:	e000      	b.n	8007272 <USB_HC_StartXfer+0x25e>
        break;
 8007270:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	68d9      	ldr	r1, [r3, #12]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	785a      	ldrb	r2, [r3, #1]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	b29b      	uxth	r3, r3
 8007280:	2000      	movs	r0, #0
 8007282:	9000      	str	r0, [sp, #0]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff fb31 	bl	80068ec <USB_WritePacket>
  }

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3728      	adds	r7, #40	; 0x28
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	1ff80000 	.word	0x1ff80000

08007298 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	b29b      	uxth	r3, r3
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b089      	sub	sp, #36	; 0x24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	0c9b      	lsrs	r3, r3, #18
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	015a      	lsls	r2, r3, #5
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	4413      	add	r3, r2
 80072f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0fdb      	lsrs	r3, r3, #31
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b20      	cmp	r3, #32
 8007308:	d104      	bne.n	8007314 <USB_HC_Halt+0x5a>
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	e0c8      	b.n	80074a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <USB_HC_Halt+0x66>
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d163      	bne.n	80073e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	4413      	add	r3, r2
 8007328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	0151      	lsls	r1, r2, #5
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	440a      	add	r2, r1
 8007336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800733a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	f040 80ab 	bne.w	80074a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d133      	bne.n	80073c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	440a      	add	r2, r1
 8007370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007378:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	440a      	add	r2, r1
 8007390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007398:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073a6:	d81d      	bhi.n	80073e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073be:	d0ec      	beq.n	800739a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073c0:	e070      	b.n	80074a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	69ba      	ldr	r2, [r7, #24]
 80073d2:	0151      	lsls	r1, r2, #5
 80073d4:	69fa      	ldr	r2, [r7, #28]
 80073d6:	440a      	add	r2, r1
 80073d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073e2:	e05f      	b.n	80074a4 <USB_HC_Halt+0x1ea>
            break;
 80073e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073e6:	e05d      	b.n	80074a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007406:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d133      	bne.n	8007480 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	015a      	lsls	r2, r3, #5
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	4413      	add	r3, r2
 8007420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	0151      	lsls	r1, r2, #5
 800742a:	69fa      	ldr	r2, [r7, #28]
 800742c:	440a      	add	r2, r1
 800742e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007432:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007436:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007452:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007456:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
 800745c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007464:	d81d      	bhi.n	80074a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800747c:	d0ec      	beq.n	8007458 <USB_HC_Halt+0x19e>
 800747e:	e011      	b.n	80074a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	440a      	add	r2, r1
 8007496:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800749a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e000      	b.n	80074a4 <USB_HC_Halt+0x1ea>
          break;
 80074a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3724      	adds	r7, #36	; 0x24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80074c8:	2301      	movs	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	04da      	lsls	r2, r3, #19
 80074d0:	4b15      	ldr	r3, [pc, #84]	; (8007528 <USB_DoPing+0x74>)
 80074d2:	4013      	ands	r3, r2
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80074fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007504:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	1ff80000 	.word	0x1ff80000

0800752c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff f911 	bl	8006768 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007546:	2110      	movs	r1, #16
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff f96b 	bl	8006824 <USB_FlushTxFifo>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff f997 	bl	800688c <USB_FlushRxFifo>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007568:	2300      	movs	r3, #0
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	e01f      	b.n	80075ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007584:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800758c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007594:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a2:	461a      	mov	r2, r3
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	3301      	adds	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	2b0f      	cmp	r3, #15
 80075b2:	d9dc      	bls.n	800756e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e034      	b.n	8007624 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ee:	461a      	mov	r2, r3
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007600:	d80c      	bhi.n	800761c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	4413      	add	r3, r2
 800760a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007618:	d0ec      	beq.n	80075f4 <USB_StopHost+0xc8>
 800761a:	e000      	b.n	800761e <USB_StopHost+0xf2>
        break;
 800761c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	3301      	adds	r3, #1
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d9c7      	bls.n	80075ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007630:	461a      	mov	r2, r3
 8007632:	f04f 33ff 	mov.w	r3, #4294967295
 8007636:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff f880 	bl	8006746 <USB_EnableGlobalInt>

  return ret;
 8007646:	7ffb      	ldrb	r3, [r7, #31]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007650:	b590      	push	{r4, r7, lr}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af04      	add	r7, sp, #16
 8007656:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007658:	2301      	movs	r3, #1
 800765a:	2202      	movs	r2, #2
 800765c:	2102      	movs	r1, #2
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fc66 	bl	8007f30 <USBH_FindInterface>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2bff      	cmp	r3, #255	; 0xff
 800766c:	d002      	beq.n	8007674 <USBH_CDC_InterfaceInit+0x24>
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d901      	bls.n	8007678 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007674:	2302      	movs	r3, #2
 8007676:	e13d      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc3b 	bl	8007ef8 <USBH_SelectInterface>
 8007682:	4603      	mov	r3, r0
 8007684:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800768c:	2302      	movs	r3, #2
 800768e:	e131      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007696:	2050      	movs	r0, #80	; 0x50
 8007698:	f002 fafa 	bl	8009c90 <malloc>
 800769c:	4603      	mov	r3, r0
 800769e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e11f      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80076b4:	2250      	movs	r2, #80	; 0x50
 80076b6:	2100      	movs	r1, #0
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f002 faf9 	bl	8009cb0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	211a      	movs	r1, #26
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b25b      	sxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	da15      	bge.n	8007702 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	211a      	movs	r1, #26
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	211a      	movs	r1, #26
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076fc:	881a      	ldrh	r2, [r3, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 ff2c 	bl	8009566 <USBH_AllocPipe>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	7819      	ldrb	r1, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	7858      	ldrb	r0, [r3, #1]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	8952      	ldrh	r2, [r2, #10]
 800772e:	9202      	str	r2, [sp, #8]
 8007730:	2203      	movs	r2, #3
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4623      	mov	r3, r4
 8007738:	4602      	mov	r2, r0
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 fee4 	bl	8009508 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2200      	movs	r2, #0
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f002 f9f3 	bl	8009b34 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800774e:	2300      	movs	r3, #0
 8007750:	2200      	movs	r2, #0
 8007752:	210a      	movs	r1, #10
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fbeb 	bl	8007f30 <USBH_FindInterface>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	2bff      	cmp	r3, #255	; 0xff
 8007762:	d002      	beq.n	800776a <USBH_CDC_InterfaceInit+0x11a>
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d901      	bls.n	800776e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800776a:	2302      	movs	r3, #2
 800776c:	e0c2      	b.n	80078f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	211a      	movs	r1, #26
 8007774:	fb01 f303 	mul.w	r3, r1, r3
 8007778:	4413      	add	r3, r2
 800777a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b25b      	sxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	da16      	bge.n	80077b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	211a      	movs	r1, #26
 800778c:	fb01 f303 	mul.w	r3, r1, r3
 8007790:	4413      	add	r3, r2
 8007792:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007796:	781a      	ldrb	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	211a      	movs	r1, #26
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077ac:	881a      	ldrh	r2, [r3, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	835a      	strh	r2, [r3, #26]
 80077b2:	e015      	b.n	80077e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	211a      	movs	r1, #26
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	211a      	movs	r1, #26
 80077d0:	fb01 f303 	mul.w	r3, r1, r3
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077da:	881a      	ldrh	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	211a      	movs	r1, #26
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	b25b      	sxtb	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da16      	bge.n	8007826 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	211a      	movs	r1, #26
 80077fe:	fb01 f303 	mul.w	r3, r1, r3
 8007802:	4413      	add	r3, r2
 8007804:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	211a      	movs	r1, #26
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	4413      	add	r3, r2
 800781a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800781e:	881a      	ldrh	r2, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	835a      	strh	r2, [r3, #26]
 8007824:	e015      	b.n	8007852 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	211a      	movs	r1, #26
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	211a      	movs	r1, #26
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	4413      	add	r3, r2
 8007848:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800784c:	881a      	ldrh	r2, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	7b9b      	ldrb	r3, [r3, #14]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fe84 	bl	8009566 <USBH_AllocPipe>
 800785e:	4603      	mov	r3, r0
 8007860:	461a      	mov	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	7bdb      	ldrb	r3, [r3, #15]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fe7a 	bl	8009566 <USBH_AllocPipe>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	7b59      	ldrb	r1, [r3, #13]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	7b98      	ldrb	r0, [r3, #14]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	8b12      	ldrh	r2, [r2, #24]
 8007892:	9202      	str	r2, [sp, #8]
 8007894:	2202      	movs	r2, #2
 8007896:	9201      	str	r2, [sp, #4]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4623      	mov	r3, r4
 800789c:	4602      	mov	r2, r0
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fe32 	bl	8009508 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7b19      	ldrb	r1, [r3, #12]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	7bd8      	ldrb	r0, [r3, #15]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	8b52      	ldrh	r2, [r2, #26]
 80078bc:	9202      	str	r2, [sp, #8]
 80078be:	2202      	movs	r2, #2
 80078c0:	9201      	str	r2, [sp, #4]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4623      	mov	r3, r4
 80078c6:	4602      	mov	r2, r0
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fe1d 	bl	8009508 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	7b5b      	ldrb	r3, [r3, #13]
 80078da:	2200      	movs	r2, #0
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f002 f928 	bl	8009b34 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	7b1b      	ldrb	r3, [r3, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f002 f921 	bl	8009b34 <USBH_LL_SetToggle>

  return USBH_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}

080078fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fe12 	bl	8009546 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fe3d 	bl	80095a8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	7b1b      	ldrb	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00e      	beq.n	800795a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	7b1b      	ldrb	r3, [r3, #12]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fdff 	bl	8009546 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7b1b      	ldrb	r3, [r3, #12]
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fe2a 	bl	80095a8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	7b5b      	ldrb	r3, [r3, #13]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00e      	beq.n	8007980 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	7b5b      	ldrb	r3, [r3, #13]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fdec 	bl	8009546 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	7b5b      	ldrb	r3, [r3, #13]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 fe17 	bl	80095a8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00b      	beq.n	80079a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4618      	mov	r0, r3
 8007996:	f002 f983 	bl	8009ca0 <free>
    phost->pActiveClass->pData = 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a0:	2200      	movs	r2, #0
 80079a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3340      	adds	r3, #64	; 0x40
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8b1 	bl	8007b2e <GetLineCoding>
 80079cc:	4603      	mov	r3, r0
 80079ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d105      	bne.n	80079e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079dc:	2102      	movs	r1, #2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80079e2:	7afb      	ldrb	r3, [r7, #11]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079f4:	2301      	movs	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d877      	bhi.n	8007b00 <USBH_CDC_Process+0x114>
 8007a10:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBH_CDC_Process+0x2c>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a2d 	.word	0x08007a2d
 8007a1c:	08007a33 	.word	0x08007a33
 8007a20:	08007a63 	.word	0x08007a63
 8007a24:	08007ad7 	.word	0x08007ad7
 8007a28:	08007ae5 	.word	0x08007ae5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a30:	e06d      	b.n	8007b0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f897 	bl	8007b6c <SetLineCoding>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a50:	e058      	b.n	8007b04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a52:	7bbb      	ldrb	r3, [r7, #14]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d055      	beq.n	8007b04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a60:	e050      	b.n	8007b04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3340      	adds	r3, #64	; 0x40
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f860 	bl	8007b2e <GetLineCoding>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d126      	bne.n	8007ac6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	791b      	ldrb	r3, [r3, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d13b      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d133      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aaa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d12b      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d124      	bne.n	8007b08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f958 	bl	8007d74 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ac4:	e020      	b.n	8007b08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d01d      	beq.n	8007b08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2204      	movs	r2, #4
 8007ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007ad4:	e018      	b.n	8007b08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f867 	bl	8007baa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8da 	bl	8007c96 <CDC_ProcessReception>
      break;
 8007ae2:	e014      	b.n	8007b0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 ffef 	bl	8008aca <USBH_ClrFeature>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10a      	bne.n	8007b0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007afe:	e005      	b.n	8007b0c <USBH_CDC_Process+0x120>

    default:
      break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <USBH_CDC_Process+0x122>
      break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <USBH_CDC_Process+0x122>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <USBH_CDC_Process+0x122>
      break;
 8007b0c:	bf00      	nop

  }

  return status;
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	22a1      	movs	r2, #161	; 0xa1
 8007b3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2221      	movs	r2, #33	; 0x21
 8007b42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2207      	movs	r2, #7
 8007b54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2207      	movs	r2, #7
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 fa81 	bl	8009064 <USBH_CtlReq>
 8007b62:	4603      	mov	r3, r0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2221      	movs	r2, #33	; 0x21
 8007b7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2207      	movs	r2, #7
 8007b92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2207      	movs	r2, #7
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fa62 	bl	8009064 <USBH_CtlReq>
 8007ba0:	4603      	mov	r3, r0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b086      	sub	sp, #24
 8007bae:	af02      	add	r7, sp, #8
 8007bb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d002      	beq.n	8007bd0 <CDC_ProcessTransmission+0x26>
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d023      	beq.n	8007c16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007bce:	e05e      	b.n	8007c8e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	8b12      	ldrh	r2, [r2, #24]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d90b      	bls.n	8007bf4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	69d9      	ldr	r1, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8b1a      	ldrh	r2, [r3, #24]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	7b5b      	ldrb	r3, [r3, #13]
 8007be8:	2001      	movs	r0, #1
 8007bea:	9000      	str	r0, [sp, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f001 fc48 	bl	8009482 <USBH_BulkSendData>
 8007bf2:	e00b      	b.n	8007c0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	7b5b      	ldrb	r3, [r3, #13]
 8007c02:	2001      	movs	r0, #1
 8007c04:	9000      	str	r0, [sp, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 fc3b 	bl	8009482 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c14:	e03b      	b.n	8007c8e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	7b5b      	ldrb	r3, [r3, #13]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 ff5f 	bl	8009ae0 <USBH_LL_GetURBState>
 8007c22:	4603      	mov	r3, r0
 8007c24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d128      	bne.n	8007c7e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	8b12      	ldrh	r2, [r2, #24]
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d90e      	bls.n	8007c56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	8b12      	ldrh	r2, [r2, #24]
 8007c40:	1a9a      	subs	r2, r3, r2
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	8b12      	ldrh	r2, [r2, #24]
 8007c4e:	441a      	add	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	61da      	str	r2, [r3, #28]
 8007c54:	e002      	b.n	8007c5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c6c:	e00e      	b.n	8007c8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f868 	bl	8007d4c <USBH_CDC_TransmitCallback>
      break;
 8007c7c:	e006      	b.n	8007c8c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d103      	bne.n	8007c8c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c8c:	bf00      	nop
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b086      	sub	sp, #24
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d002      	beq.n	8007cbc <CDC_ProcessReception+0x26>
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d00e      	beq.n	8007cd8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007cba:	e043      	b.n	8007d44 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	6a19      	ldr	r1, [r3, #32]
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	8b5a      	ldrh	r2, [r3, #26]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	7b1b      	ldrb	r3, [r3, #12]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fbff 	bl	80094cc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007cd6:	e035      	b.n	8007d44 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	7b1b      	ldrb	r3, [r3, #12]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fefe 	bl	8009ae0 <USBH_LL_GetURBState>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007ce8:	7cfb      	ldrb	r3, [r7, #19]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d129      	bne.n	8007d42 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	7b1b      	ldrb	r3, [r3, #12]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f001 fe61 	bl	80099bc <USBH_LL_GetLastXferSize>
 8007cfa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d016      	beq.n	8007d34 <CDC_ProcessReception+0x9e>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	8b5b      	ldrh	r3, [r3, #26]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d910      	bls.n	8007d34 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad2      	subs	r2, r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a1a      	ldr	r2, [r3, #32]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	441a      	add	r2, r3
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d32:	e006      	b.n	8007d42 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f80f 	bl	8007d60 <USBH_CDC_ReceiveCallback>
      break;
 8007d42:	bf00      	nop
  }
}
 8007d44:	bf00      	nop
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	e029      	b.n	8007df4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	79fa      	ldrb	r2, [r7, #7]
 8007da4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f81f 	bl	8007dfc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f001 fd31 	bl	8009854 <USBH_LL_Init>

  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	e009      	b.n	8007e22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	33e0      	adds	r3, #224	; 0xe0
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	2200      	movs	r2, #0
 8007e1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2b0f      	cmp	r3, #15
 8007e26:	d9f2      	bls.n	8007e0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e009      	b.n	8007e42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e48:	d3f1      	bcc.n	8007e2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2240      	movs	r2, #64	; 0x40
 8007e6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d016      	beq.n	8007ee6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10e      	bne.n	8007ee0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ec8:	1c59      	adds	r1, r3, #1
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	33de      	adds	r3, #222	; 0xde
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e004      	b.n	8007eea <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	73fb      	strb	r3, [r7, #15]
 8007ee4:	e001      	b.n	8007eea <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d204      	bcs.n	8007f1e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	78fa      	ldrb	r2, [r7, #3]
 8007f18:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f1c:	e001      	b.n	8007f22 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	4608      	mov	r0, r1
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	70fb      	strb	r3, [r7, #3]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70bb      	strb	r3, [r7, #2]
 8007f46:	4613      	mov	r3, r2
 8007f48:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f58:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f5a:	e025      	b.n	8007fa8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f5c:	7dfb      	ldrb	r3, [r7, #23]
 8007f5e:	221a      	movs	r2, #26
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	3308      	adds	r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	3302      	adds	r3, #2
 8007f6c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	795b      	ldrb	r3, [r3, #5]
 8007f72:	78fa      	ldrb	r2, [r7, #3]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d002      	beq.n	8007f7e <USBH_FindInterface+0x4e>
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	2bff      	cmp	r3, #255	; 0xff
 8007f7c:	d111      	bne.n	8007fa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f82:	78ba      	ldrb	r2, [r7, #2]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d002      	beq.n	8007f8e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f88:	78bb      	ldrb	r3, [r7, #2]
 8007f8a:	2bff      	cmp	r3, #255	; 0xff
 8007f8c:	d109      	bne.n	8007fa2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f92:	787a      	ldrb	r2, [r7, #1]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d002      	beq.n	8007f9e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f98:	787b      	ldrb	r3, [r7, #1]
 8007f9a:	2bff      	cmp	r3, #255	; 0xff
 8007f9c:	d101      	bne.n	8007fa2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	e006      	b.n	8007fb0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d9d6      	bls.n	8007f5c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fae:	23ff      	movs	r3, #255	; 0xff
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 fc81 	bl	80098cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007fca:	2101      	movs	r1, #1
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 fd9a 	bl	8009b06 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d102      	bne.n	8007ffe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b0b      	cmp	r3, #11
 8008006:	f200 81be 	bhi.w	8008386 <USBH_Process+0x3aa>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <USBH_Process+0x34>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008041 	.word	0x08008041
 8008014:	08008073 	.word	0x08008073
 8008018:	080080db 	.word	0x080080db
 800801c:	08008321 	.word	0x08008321
 8008020:	08008387 	.word	0x08008387
 8008024:	0800817f 	.word	0x0800817f
 8008028:	080082c7 	.word	0x080082c7
 800802c:	080081b5 	.word	0x080081b5
 8008030:	080081d5 	.word	0x080081d5
 8008034:	080081f5 	.word	0x080081f5
 8008038:	08008239 	.word	0x08008239
 800803c:	08008309 	.word	0x08008309
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 819e 	beq.w	800838a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008054:	20c8      	movs	r0, #200	; 0xc8
 8008056:	f001 fd9d 	bl	8009b94 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 fc93 	bl	8009986 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008070:	e18b      	b.n	800838a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008078:	2b01      	cmp	r3, #1
 800807a:	d107      	bne.n	800808c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800808a:	e18d      	b.n	80083a8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008096:	d914      	bls.n	80080c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800809e:	3301      	adds	r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d903      	bls.n	80080ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	220d      	movs	r2, #13
 80080b6:	701a      	strb	r2, [r3, #0]
      break;
 80080b8:	e176      	b.n	80083a8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	701a      	strb	r2, [r3, #0]
      break;
 80080c0:	e172      	b.n	80083a8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080c8:	f103 020a 	add.w	r2, r3, #10
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80080d2:	200a      	movs	r0, #10
 80080d4:	f001 fd5e 	bl	8009b94 <USBH_Delay>
      break;
 80080d8:	e166      	b.n	80083a8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080ea:	2104      	movs	r1, #4
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80080f0:	2064      	movs	r0, #100	; 0x64
 80080f2:	f001 fd4f 	bl	8009b94 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 fc1e 	bl	8009938 <USBH_LL_GetSpeed>
 80080fc:	4603      	mov	r3, r0
 80080fe:	461a      	mov	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2205      	movs	r2, #5
 800810a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fa29 	bl	8009566 <USBH_AllocPipe>
 8008114:	4603      	mov	r3, r0
 8008116:	461a      	mov	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800811c:	2180      	movs	r1, #128	; 0x80
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 fa21 	bl	8009566 <USBH_AllocPipe>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7919      	ldrb	r1, [r3, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008140:	b292      	uxth	r2, r2
 8008142:	9202      	str	r2, [sp, #8]
 8008144:	2200      	movs	r2, #0
 8008146:	9201      	str	r2, [sp, #4]
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	4603      	mov	r3, r0
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 f9da 	bl	8009508 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7959      	ldrb	r1, [r3, #5]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008168:	b292      	uxth	r2, r2
 800816a:	9202      	str	r2, [sp, #8]
 800816c:	2200      	movs	r2, #0
 800816e:	9201      	str	r2, [sp, #4]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4603      	mov	r3, r0
 8008174:	2200      	movs	r2, #0
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f9c6 	bl	8009508 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800817c:	e114      	b.n	80083a8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f918 	bl	80083b4 <USBH_HandleEnum>
 8008184:	4603      	mov	r3, r0
 8008186:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008188:	7bbb      	ldrb	r3, [r7, #14]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 80fe 	bne.w	800838e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d103      	bne.n	80081ac <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2208      	movs	r2, #8
 80081a8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081aa:	e0f0      	b.n	800838e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2207      	movs	r2, #7
 80081b0:	701a      	strb	r2, [r3, #0]
      break;
 80081b2:	e0ec      	b.n	800838e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80e9 	beq.w	8008392 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081c6:	2101      	movs	r1, #1
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2208      	movs	r2, #8
 80081d0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80081d2:	e0de      	b.n	8008392 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fc2c 	bl	8008a3c <USBH_SetCfg>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 80d5 	bne.w	8008396 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2209      	movs	r2, #9
 80081f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80081f2:	e0d0      	b.n	8008396 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008202:	2101      	movs	r1, #1
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fc3c 	bl	8008a82 <USBH_SetFeature>
 800820a:	4603      	mov	r3, r0
 800820c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800820e:	7bbb      	ldrb	r3, [r7, #14]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	220a      	movs	r2, #10
 800821a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800821c:	e0bd      	b.n	800839a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b03      	cmp	r3, #3
 8008224:	f040 80b9 	bne.w	800839a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	220a      	movs	r2, #10
 800822c:	701a      	strb	r2, [r3, #0]
      break;
 800822e:	e0b4      	b.n	800839a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	220a      	movs	r2, #10
 8008234:	701a      	strb	r2, [r3, #0]
      break;
 8008236:	e0b0      	b.n	800839a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80ad 	beq.w	800839e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
 8008250:	e016      	b.n	8008280 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008252:	7bfa      	ldrb	r2, [r7, #15]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	32de      	adds	r2, #222	; 0xde
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	791a      	ldrb	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008264:	429a      	cmp	r2, r3
 8008266:	d108      	bne.n	800827a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008268:	7bfa      	ldrb	r2, [r7, #15]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	32de      	adds	r2, #222	; 0xde
 800826e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008278:	e005      	b.n	8008286 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	3301      	adds	r3, #1
 800827e:	73fb      	strb	r3, [r7, #15]
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0e5      	beq.n	8008252 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d016      	beq.n	80082be <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	4798      	blx	r3
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d109      	bne.n	80082b6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2206      	movs	r2, #6
 80082a6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082ae:	2103      	movs	r1, #3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082b4:	e073      	b.n	800839e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	220d      	movs	r2, #13
 80082ba:	701a      	strb	r2, [r3, #0]
      break;
 80082bc:	e06f      	b.n	800839e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	220d      	movs	r2, #13
 80082c2:	701a      	strb	r2, [r3, #0]
      break;
 80082c4:	e06b      	b.n	800839e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d017      	beq.n	8008300 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d103      	bne.n	80082f0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	220b      	movs	r2, #11
 80082ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082ee:	e058      	b.n	80083a2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d154      	bne.n	80083a2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	220d      	movs	r2, #13
 80082fc:	701a      	strb	r2, [r3, #0]
      break;
 80082fe:	e050      	b.n	80083a2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	220d      	movs	r2, #13
 8008304:	701a      	strb	r2, [r3, #0]
      break;
 8008306:	e04c      	b.n	80083a2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d049      	beq.n	80083a6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
      }
      break;
 800831e:	e042      	b.n	80083a6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff fd67 	bl	8007dfc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d005      	beq.n	8008362 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800835c:	2105      	movs	r1, #5
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b01      	cmp	r3, #1
 800836c:	d107      	bne.n	800837e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fe20 	bl	8007fbc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800837c:	e014      	b.n	80083a8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 faa4 	bl	80098cc <USBH_LL_Start>
      break;
 8008384:	e010      	b.n	80083a8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008386:	bf00      	nop
 8008388:	e00e      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 800838a:	bf00      	nop
 800838c:	e00c      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 800838e:	bf00      	nop
 8008390:	e00a      	b.n	80083a8 <USBH_Process+0x3cc>
    break;
 8008392:	bf00      	nop
 8008394:	e008      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 8008396:	bf00      	nop
 8008398:	e006      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 800839a:	bf00      	nop
 800839c:	e004      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 800839e:	bf00      	nop
 80083a0:	e002      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 80083a2:	bf00      	nop
 80083a4:	e000      	b.n	80083a8 <USBH_Process+0x3cc>
      break;
 80083a6:	bf00      	nop
  }
  return USBH_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop

080083b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af04      	add	r7, sp, #16
 80083ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083bc:	2301      	movs	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b07      	cmp	r3, #7
 80083ca:	f200 81c1 	bhi.w	8008750 <USBH_HandleEnum+0x39c>
 80083ce:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <USBH_HandleEnum+0x20>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	080083f5 	.word	0x080083f5
 80083d8:	080084b3 	.word	0x080084b3
 80083dc:	0800851d 	.word	0x0800851d
 80083e0:	080085ab 	.word	0x080085ab
 80083e4:	08008615 	.word	0x08008615
 80083e8:	08008685 	.word	0x08008685
 80083ec:	080086cb 	.word	0x080086cb
 80083f0:	08008711 	.word	0x08008711
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80083f4:	2108      	movs	r1, #8
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fa50 	bl	800889c <USBH_Get_DevDesc>
 80083fc:	4603      	mov	r3, r0
 80083fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d130      	bne.n	8008468 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	7919      	ldrb	r1, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800842a:	b292      	uxth	r2, r2
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	2200      	movs	r2, #0
 8008430:	9201      	str	r2, [sp, #4]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4603      	mov	r3, r0
 8008436:	2280      	movs	r2, #128	; 0x80
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 f865 	bl	8009508 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7959      	ldrb	r1, [r3, #5]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008452:	b292      	uxth	r2, r2
 8008454:	9202      	str	r2, [sp, #8]
 8008456:	2200      	movs	r2, #0
 8008458:	9201      	str	r2, [sp, #4]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4603      	mov	r3, r0
 800845e:	2200      	movs	r2, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f851 	bl	8009508 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008466:	e175      	b.n	8008754 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008468:	7bbb      	ldrb	r3, [r7, #14]
 800846a:	2b03      	cmp	r3, #3
 800846c:	f040 8172 	bne.w	8008754 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008476:	3301      	adds	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008486:	2b03      	cmp	r3, #3
 8008488:	d903      	bls.n	8008492 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	220d      	movs	r2, #13
 800848e:	701a      	strb	r2, [r3, #0]
      break;
 8008490:	e160      	b.n	8008754 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	795b      	ldrb	r3, [r3, #5]
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f885 	bl	80095a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	791b      	ldrb	r3, [r3, #4]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f001 f87f 	bl	80095a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
      break;
 80084b0:	e150      	b.n	8008754 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084b2:	2112      	movs	r1, #18
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f9f1 	bl	800889c <USBH_Get_DevDesc>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d103      	bne.n	80084cc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ca:	e145      	b.n	8008758 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	f040 8142 	bne.w	8008758 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084da:	3301      	adds	r3, #1
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d903      	bls.n	80084f6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	220d      	movs	r2, #13
 80084f2:	701a      	strb	r2, [r3, #0]
      break;
 80084f4:	e130      	b.n	8008758 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	795b      	ldrb	r3, [r3, #5]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 f853 	bl	80095a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	791b      	ldrb	r3, [r3, #4]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f84d 	bl	80095a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	701a      	strb	r2, [r3, #0]
      break;
 800851a:	e11d      	b.n	8008758 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800851c:	2101      	movs	r1, #1
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa68 	bl	80089f4 <USBH_SetAddress>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008528:	7bbb      	ldrb	r3, [r7, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d132      	bne.n	8008594 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800852e:	2002      	movs	r0, #2
 8008530:	f001 fb30 	bl	8009b94 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2203      	movs	r2, #3
 8008540:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	7919      	ldrb	r1, [r3, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008556:	b292      	uxth	r2, r2
 8008558:	9202      	str	r2, [sp, #8]
 800855a:	2200      	movs	r2, #0
 800855c:	9201      	str	r2, [sp, #4]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	4603      	mov	r3, r0
 8008562:	2280      	movs	r2, #128	; 0x80
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 ffcf 	bl	8009508 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7959      	ldrb	r1, [r3, #5]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800857e:	b292      	uxth	r2, r2
 8008580:	9202      	str	r2, [sp, #8]
 8008582:	2200      	movs	r2, #0
 8008584:	9201      	str	r2, [sp, #4]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	4603      	mov	r3, r0
 800858a:	2200      	movs	r2, #0
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 ffbb 	bl	8009508 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008592:	e0e3      	b.n	800875c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b03      	cmp	r3, #3
 8008598:	f040 80e0 	bne.w	800875c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	220d      	movs	r2, #13
 80085a0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	705a      	strb	r2, [r3, #1]
      break;
 80085a8:	e0d8      	b.n	800875c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085aa:	2109      	movs	r1, #9
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f99d 	bl	80088ec <USBH_Get_CfgDesc>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d103      	bne.n	80085c4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2204      	movs	r2, #4
 80085c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085c2:	e0cd      	b.n	8008760 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	f040 80ca 	bne.w	8008760 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085d2:	3301      	adds	r3, #1
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d903      	bls.n	80085ee <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	220d      	movs	r2, #13
 80085ea:	701a      	strb	r2, [r3, #0]
      break;
 80085ec:	e0b8      	b.n	8008760 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	795b      	ldrb	r3, [r3, #5]
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 ffd7 	bl	80095a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	791b      	ldrb	r3, [r3, #4]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 ffd1 	bl	80095a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]
      break;
 8008612:	e0a5      	b.n	8008760 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f965 	bl	80088ec <USBH_Get_CfgDesc>
 8008622:	4603      	mov	r3, r0
 8008624:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2205      	movs	r2, #5
 8008630:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008632:	e097      	b.n	8008764 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b03      	cmp	r3, #3
 8008638:	f040 8094 	bne.w	8008764 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008642:	3301      	adds	r3, #1
 8008644:	b2da      	uxtb	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008652:	2b03      	cmp	r3, #3
 8008654:	d903      	bls.n	800865e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	220d      	movs	r2, #13
 800865a:	701a      	strb	r2, [r3, #0]
      break;
 800865c:	e082      	b.n	8008764 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	795b      	ldrb	r3, [r3, #5]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 ff9f 	bl	80095a8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 ff99 	bl	80095a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
      break;
 8008682:	e06f      	b.n	8008764 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800868a:	2b00      	cmp	r3, #0
 800868c:	d019      	beq.n	80086c2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800869a:	23ff      	movs	r3, #255	; 0xff
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f949 	bl	8008934 <USBH_Get_StringDesc>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d103      	bne.n	80086b4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2206      	movs	r2, #6
 80086b0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086b2:	e059      	b.n	8008768 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d156      	bne.n	8008768 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2206      	movs	r2, #6
 80086be:	705a      	strb	r2, [r3, #1]
      break;
 80086c0:	e052      	b.n	8008768 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2206      	movs	r2, #6
 80086c6:	705a      	strb	r2, [r3, #1]
      break;
 80086c8:	e04e      	b.n	8008768 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d019      	beq.n	8008708 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086e0:	23ff      	movs	r3, #255	; 0xff
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f926 	bl	8008934 <USBH_Get_StringDesc>
 80086e8:	4603      	mov	r3, r0
 80086ea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d103      	bne.n	80086fa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2207      	movs	r2, #7
 80086f6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80086f8:	e038      	b.n	800876c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d135      	bne.n	800876c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2207      	movs	r2, #7
 8008704:	705a      	strb	r2, [r3, #1]
      break;
 8008706:	e031      	b.n	800876c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2207      	movs	r2, #7
 800870c:	705a      	strb	r2, [r3, #1]
      break;
 800870e:	e02d      	b.n	800876c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008716:	2b00      	cmp	r3, #0
 8008718:	d017      	beq.n	800874a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008726:	23ff      	movs	r3, #255	; 0xff
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f903 	bl	8008934 <USBH_Get_StringDesc>
 800872e:	4603      	mov	r3, r0
 8008730:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800873c:	e018      	b.n	8008770 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d115      	bne.n	8008770 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
      break;
 8008748:	e012      	b.n	8008770 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
      break;
 800874e:	e00f      	b.n	8008770 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008750:	bf00      	nop
 8008752:	e00e      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 8008754:	bf00      	nop
 8008756:	e00c      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 8008758:	bf00      	nop
 800875a:	e00a      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 800875c:	bf00      	nop
 800875e:	e008      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 8008760:	bf00      	nop
 8008762:	e006      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 8008764:	bf00      	nop
 8008766:	e004      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <USBH_HandleEnum+0x3be>
      break;
 8008770:	bf00      	nop
  }
  return Status;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f804 	bl	80087be <USBH_HandleSof>
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b0b      	cmp	r3, #11
 80087ce:	d10a      	bne.n	80087e6 <USBH_HandleSof+0x28>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d005      	beq.n	80087e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
  }
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80087fe:	bf00      	nop
}
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800881a:	bf00      	nop
}
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 f844 	bl	8009902 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	791b      	ldrb	r3, [r3, #4]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fe91 	bl	80095a8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	795b      	ldrb	r3, [r3, #5]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fe8b 	bl	80095a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af02      	add	r7, sp, #8
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088ba:	2100      	movs	r1, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f864 	bl	800898a <USBH_GetDescriptor>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80088c6:	7bfb      	ldrb	r3, [r7, #15]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088d8:	78fa      	ldrb	r2, [r7, #3]
 80088da:	b292      	uxth	r2, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	f000 f918 	bl	8008b12 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	460b      	mov	r3, r1
 80088f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	331c      	adds	r3, #28
 80088fc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80088fe:	887b      	ldrh	r3, [r7, #2]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f83d 	bl	800898a <USBH_GetDescriptor>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d107      	bne.n	800892a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800891a:	887b      	ldrh	r3, [r7, #2]
 800891c:	461a      	mov	r2, r3
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f987 	bl	8008c34 <USBH_ParseCfgDesc>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af02      	add	r7, sp, #8
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	607a      	str	r2, [r7, #4]
 800893e:	461a      	mov	r2, r3
 8008940:	460b      	mov	r3, r1
 8008942:	72fb      	strb	r3, [r7, #11]
 8008944:	4613      	mov	r3, r2
 8008946:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008950:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008958:	893b      	ldrh	r3, [r7, #8]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	460b      	mov	r3, r1
 800895e:	2100      	movs	r1, #0
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f812 	bl	800898a <USBH_GetDescriptor>
 8008966:	4603      	mov	r3, r0
 8008968:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d107      	bne.n	8008980 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008976:	893a      	ldrh	r2, [r7, #8]
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fb24 	bl	8008fc8 <USBH_ParseStringDesc>
  }

  return status;
 8008980:	7dfb      	ldrb	r3, [r7, #23]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	607b      	str	r3, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	72fb      	strb	r3, [r7, #11]
 8008998:	4613      	mov	r3, r2
 800899a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	789b      	ldrb	r3, [r3, #2]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d11c      	bne.n	80089de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2206      	movs	r2, #6
 80089b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	893a      	ldrh	r2, [r7, #8]
 80089ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089bc:	893b      	ldrh	r3, [r7, #8]
 80089be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089c6:	d104      	bne.n	80089d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f240 4209 	movw	r2, #1033	; 0x409
 80089ce:	829a      	strh	r2, [r3, #20]
 80089d0:	e002      	b.n	80089d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	8b3a      	ldrh	r2, [r7, #24]
 80089dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089de:	8b3b      	ldrh	r3, [r7, #24]
 80089e0:	461a      	mov	r2, r3
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fb3d 	bl	8009064 <USBH_CtlReq>
 80089ea:	4603      	mov	r3, r0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	789b      	ldrb	r3, [r3, #2]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d10f      	bne.n	8008a28 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2205      	movs	r2, #5
 8008a12:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fb19 	bl	8009064 <USBH_CtlReq>
 8008a32:	4603      	mov	r3, r0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	789b      	ldrb	r3, [r3, #2]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10e      	bne.n	8008a6e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2209      	movs	r2, #9
 8008a5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	887a      	ldrh	r2, [r7, #2]
 8008a60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	2100      	movs	r1, #0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 faf6 	bl	8009064 <USBH_CtlReq>
 8008a78:	4603      	mov	r3, r0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	789b      	ldrb	r3, [r3, #2]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d10f      	bne.n	8008ab6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fad2 	bl	8009064 <USBH_CtlReq>
 8008ac0:	4603      	mov	r3, r0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	789b      	ldrb	r3, [r3, #2]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d10f      	bne.n	8008afe <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008afe:	2200      	movs	r2, #0
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 faae 	bl	8009064 <USBH_CtlReq>
 8008b08:	4603      	mov	r3, r0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	785a      	ldrb	r2, [r3, #1]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3302      	adds	r3, #2
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3303      	adds	r3, #3
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	791a      	ldrb	r2, [r3, #4]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	795a      	ldrb	r2, [r3, #5]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	799a      	ldrb	r2, [r3, #6]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	79da      	ldrb	r2, [r3, #7]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	79db      	ldrb	r3, [r3, #7]
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	dc11      	bgt.n	8008b98 <USBH_ParseDevDesc+0x86>
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	db16      	blt.n	8008ba6 <USBH_ParseDevDesc+0x94>
 8008b78:	3b08      	subs	r3, #8
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b80:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bf14      	ite	ne
 8008b8c:	2301      	movne	r3, #1
 8008b8e:	2300      	moveq	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d102      	bne.n	8008b9c <USBH_ParseDevDesc+0x8a>
 8008b96:	e006      	b.n	8008ba6 <USBH_ParseDevDesc+0x94>
 8008b98:	2b40      	cmp	r3, #64	; 0x40
 8008b9a:	d104      	bne.n	8008ba6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	79da      	ldrb	r2, [r3, #7]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	71da      	strb	r2, [r3, #7]
      break;
 8008ba4:	e003      	b.n	8008bae <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2240      	movs	r2, #64	; 0x40
 8008baa:	71da      	strb	r2, [r3, #7]
      break;
 8008bac:	bf00      	nop
  }

  if (length > 8U)
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d939      	bls.n	8008c28 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3309      	adds	r3, #9
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	330a      	adds	r3, #10
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	330b      	adds	r3, #11
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	330c      	adds	r3, #12
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	330d      	adds	r3, #13
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	021b      	lsls	r3, r3, #8
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	4313      	orrs	r3, r2
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	7b9a      	ldrb	r2, [r3, #14]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	7bda      	ldrb	r2, [r3, #15]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	7c1a      	ldrb	r2, [r3, #16]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	7c5a      	ldrb	r2, [r3, #17]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	745a      	strb	r2, [r3, #17]
  }
}
 8008c28:	bf00      	nop
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08c      	sub	sp, #48	; 0x30
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008c48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	781a      	ldrb	r2, [r3, #0]
 8008c68:	6a3b      	ldr	r3, [r7, #32]
 8008c6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	785a      	ldrb	r2, [r3, #1]
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	3302      	adds	r3, #2
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	3303      	adds	r3, #3
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c90:	bf28      	it	cs
 8008c92:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	791a      	ldrb	r2, [r3, #4]
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	795a      	ldrb	r2, [r3, #5]
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	799a      	ldrb	r2, [r3, #6]
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	79da      	ldrb	r2, [r3, #7]
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	7a1a      	ldrb	r2, [r3, #8]
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	2b09      	cmp	r3, #9
 8008cca:	d002      	beq.n	8008cd2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	2209      	movs	r2, #9
 8008cd0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	2b09      	cmp	r3, #9
 8008cd6:	f240 809d 	bls.w	8008e14 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008cda:	2309      	movs	r3, #9
 8008cdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ce2:	e081      	b.n	8008de8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008ce4:	f107 0316 	add.w	r3, r7, #22
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cec:	f000 f99f 	bl	800902e <USBH_GetNextDesc>
 8008cf0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d176      	bne.n	8008de8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b09      	cmp	r3, #9
 8008d00:	d002      	beq.n	8008d08 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	2209      	movs	r2, #9
 8008d06:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d0c:	221a      	movs	r2, #26
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	3308      	adds	r3, #8
 8008d14:	6a3a      	ldr	r2, [r7, #32]
 8008d16:	4413      	add	r3, r2
 8008d18:	3302      	adds	r3, #2
 8008d1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d1e:	69f8      	ldr	r0, [r7, #28]
 8008d20:	f000 f87e 	bl	8008e20 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d2e:	e043      	b.n	8008db8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d30:	f107 0316 	add.w	r3, r7, #22
 8008d34:	4619      	mov	r1, r3
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	f000 f979 	bl	800902e <USBH_GetNextDesc>
 8008d3c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	785b      	ldrb	r3, [r3, #1]
 8008d42:	2b05      	cmp	r3, #5
 8008d44:	d138      	bne.n	8008db8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	795b      	ldrb	r3, [r3, #5]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d10f      	bne.n	8008d6e <USBH_ParseCfgDesc+0x13a>
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	799b      	ldrb	r3, [r3, #6]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d10b      	bne.n	8008d6e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	79db      	ldrb	r3, [r3, #7]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10f      	bne.n	8008d7e <USBH_ParseCfgDesc+0x14a>
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b09      	cmp	r3, #9
 8008d64:	d00b      	beq.n	8008d7e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	2209      	movs	r2, #9
 8008d6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d6c:	e007      	b.n	8008d7e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b07      	cmp	r3, #7
 8008d74:	d004      	beq.n	8008d80 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	2207      	movs	r2, #7
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e000      	b.n	8008d80 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008d7e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d84:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d88:	3201      	adds	r2, #1
 8008d8a:	00d2      	lsls	r2, r2, #3
 8008d8c:	211a      	movs	r1, #26
 8008d8e:	fb01 f303 	mul.w	r3, r1, r3
 8008d92:	4413      	add	r3, r2
 8008d94:	3308      	adds	r3, #8
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	4413      	add	r3, r2
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da0:	69b9      	ldr	r1, [r7, #24]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 f86b 	bl	8008e7e <USBH_ParseEPDesc>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008db2:	3301      	adds	r3, #1
 8008db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	791b      	ldrb	r3, [r3, #4]
 8008dbc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d204      	bcs.n	8008dce <USBH_ParseCfgDesc+0x19a>
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	885a      	ldrh	r2, [r3, #2]
 8008dc8:	8afb      	ldrh	r3, [r7, #22]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d8b0      	bhi.n	8008d30 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	791b      	ldrb	r3, [r3, #4]
 8008dd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d201      	bcs.n	8008dde <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e01c      	b.n	8008e18 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de2:	3301      	adds	r3, #1
 8008de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d805      	bhi.n	8008dfc <USBH_ParseCfgDesc+0x1c8>
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	885a      	ldrh	r2, [r3, #2]
 8008df4:	8afb      	ldrh	r3, [r7, #22]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	f63f af74 	bhi.w	8008ce4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	791b      	ldrb	r3, [r3, #4]
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	bf28      	it	cs
 8008e04:	2302      	movcs	r3, #2
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d201      	bcs.n	8008e14 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e001      	b.n	8008e18 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3730      	adds	r7, #48	; 0x30
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	785a      	ldrb	r2, [r3, #1]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	789a      	ldrb	r2, [r3, #2]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	78da      	ldrb	r2, [r3, #3]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	791a      	ldrb	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	795a      	ldrb	r2, [r3, #5]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	799a      	ldrb	r2, [r3, #6]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	79da      	ldrb	r2, [r3, #7]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	7a1a      	ldrb	r2, [r3, #8]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	721a      	strb	r2, [r3, #8]
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b087      	sub	sp, #28
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	785a      	ldrb	r2, [r3, #1]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	789a      	ldrb	r2, [r3, #2]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	78da      	ldrb	r2, [r3, #3]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	3305      	adds	r3, #5
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	799a      	ldrb	r2, [r3, #6]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	889b      	ldrh	r3, [r3, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008eda:	2303      	movs	r3, #3
 8008edc:	75fb      	strb	r3, [r7, #23]
 8008ede:	e033      	b.n	8008f48 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	889b      	ldrh	r3, [r3, #4]
 8008ee4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ee8:	f023 0307 	bic.w	r3, r3, #7
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	889b      	ldrh	r3, [r3, #4]
 8008ef6:	b21a      	sxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3304      	adds	r3, #4
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b299      	uxth	r1, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3305      	adds	r3, #5
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	021b      	lsls	r3, r3, #8
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d110      	bne.n	8008f3a <USBH_ParseEPDesc+0xbc>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b299      	uxth	r1, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3305      	adds	r3, #5
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	430b      	orrs	r3, r1
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	b21b      	sxth	r3, r3
 8008f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f36:	b21b      	sxth	r3, r3
 8008f38:	e001      	b.n	8008f3e <USBH_ParseEPDesc+0xc0>
 8008f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	b21b      	sxth	r3, r3
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d116      	bne.n	8008f80 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	78db      	ldrb	r3, [r3, #3]
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d005      	beq.n	8008f6a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	78db      	ldrb	r3, [r3, #3]
 8008f62:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d127      	bne.n	8008fba <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	799b      	ldrb	r3, [r3, #6]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <USBH_ParseEPDesc+0xfc>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	799b      	ldrb	r3, [r3, #6]
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	d91f      	bls.n	8008fba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	75fb      	strb	r3, [r7, #23]
 8008f7e:	e01c      	b.n	8008fba <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	78db      	ldrb	r3, [r3, #3]
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d10a      	bne.n	8008fa2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	799b      	ldrb	r3, [r3, #6]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <USBH_ParseEPDesc+0x11e>
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	799b      	ldrb	r3, [r3, #6]
 8008f98:	2b10      	cmp	r3, #16
 8008f9a:	d90e      	bls.n	8008fba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	75fb      	strb	r3, [r7, #23]
 8008fa0:	e00b      	b.n	8008fba <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	78db      	ldrb	r3, [r3, #3]
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d105      	bne.n	8008fba <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	799b      	ldrb	r3, [r3, #6]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d120      	bne.n	8009022 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	1e9a      	subs	r2, r3, #2
 8008fe6:	88fb      	ldrh	r3, [r7, #6]
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	bf28      	it	cs
 8008fec:	4613      	movcs	r3, r2
 8008fee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3302      	adds	r3, #2
 8008ff4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	82fb      	strh	r3, [r7, #22]
 8008ffa:	e00b      	b.n	8009014 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008ffc:	8afb      	ldrh	r3, [r7, #22]
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	781a      	ldrb	r2, [r3, #0]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	3301      	adds	r3, #1
 800900c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800900e:	8afb      	ldrh	r3, [r7, #22]
 8009010:	3302      	adds	r3, #2
 8009012:	82fb      	strh	r3, [r7, #22]
 8009014:	8afa      	ldrh	r2, [r7, #22]
 8009016:	8abb      	ldrh	r3, [r7, #20]
 8009018:	429a      	cmp	r2, r3
 800901a:	d3ef      	bcc.n	8008ffc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
  }
}
 8009022:	bf00      	nop
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800902e:	b480      	push	{r7}
 8009030:	b085      	sub	sp, #20
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	881a      	ldrh	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	4413      	add	r3, r2
 8009044:	b29a      	uxth	r2, r3
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009056:	68fb      	ldr	r3, [r7, #12]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr

08009064 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4613      	mov	r3, r2
 8009070:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009072:	2301      	movs	r3, #1
 8009074:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	789b      	ldrb	r3, [r3, #2]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d002      	beq.n	8009084 <USBH_CtlReq+0x20>
 800907e:	2b02      	cmp	r3, #2
 8009080:	d00f      	beq.n	80090a2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009082:	e027      	b.n	80090d4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	88fa      	ldrh	r2, [r7, #6]
 800908e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2202      	movs	r2, #2
 800909a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800909c:	2301      	movs	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]
      break;
 80090a0:	e018      	b.n	80090d4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80090a2:	68f8      	ldr	r0, [r7, #12]
 80090a4:	f000 f81c 	bl	80090e0 <USBH_HandleControl>
 80090a8:	4603      	mov	r3, r0
 80090aa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80090ac:	7dfb      	ldrb	r3, [r7, #23]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <USBH_CtlReq+0x54>
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d106      	bne.n	80090c6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	761a      	strb	r2, [r3, #24]
      break;
 80090c4:	e005      	b.n	80090d2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d102      	bne.n	80090d2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	709a      	strb	r2, [r3, #2]
      break;
 80090d2:	bf00      	nop
  }
  return status;
 80090d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80090e8:	2301      	movs	r3, #1
 80090ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7e1b      	ldrb	r3, [r3, #24]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	2b0a      	cmp	r3, #10
 80090f8:	f200 8156 	bhi.w	80093a8 <USBH_HandleControl+0x2c8>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <USBH_HandleControl+0x24>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009131 	.word	0x08009131
 8009108:	0800914b 	.word	0x0800914b
 800910c:	080091b5 	.word	0x080091b5
 8009110:	080091db 	.word	0x080091db
 8009114:	08009213 	.word	0x08009213
 8009118:	0800923d 	.word	0x0800923d
 800911c:	0800928f 	.word	0x0800928f
 8009120:	080092b1 	.word	0x080092b1
 8009124:	080092ed 	.word	0x080092ed
 8009128:	08009313 	.word	0x08009313
 800912c:	08009351 	.word	0x08009351
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f103 0110 	add.w	r1, r3, #16
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	795b      	ldrb	r3, [r3, #5]
 800913a:	461a      	mov	r2, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f943 	bl	80093c8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2202      	movs	r2, #2
 8009146:	761a      	strb	r2, [r3, #24]
      break;
 8009148:	e139      	b.n	80093be <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fcc5 	bl	8009ae0 <USBH_LL_GetURBState>
 8009156:	4603      	mov	r3, r0
 8009158:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d11e      	bne.n	800919e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	7c1b      	ldrb	r3, [r3, #16]
 8009164:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009168:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	8adb      	ldrh	r3, [r3, #22]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009172:	7b7b      	ldrb	r3, [r7, #13]
 8009174:	2b80      	cmp	r3, #128	; 0x80
 8009176:	d103      	bne.n	8009180 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2203      	movs	r2, #3
 800917c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800917e:	e115      	b.n	80093ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2205      	movs	r2, #5
 8009184:	761a      	strb	r2, [r3, #24]
      break;
 8009186:	e111      	b.n	80093ac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009188:	7b7b      	ldrb	r3, [r7, #13]
 800918a:	2b80      	cmp	r3, #128	; 0x80
 800918c:	d103      	bne.n	8009196 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2209      	movs	r2, #9
 8009192:	761a      	strb	r2, [r3, #24]
      break;
 8009194:	e10a      	b.n	80093ac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2207      	movs	r2, #7
 800919a:	761a      	strb	r2, [r3, #24]
      break;
 800919c:	e106      	b.n	80093ac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d003      	beq.n	80091ac <USBH_HandleControl+0xcc>
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	f040 8100 	bne.w	80093ac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	220b      	movs	r2, #11
 80091b0:	761a      	strb	r2, [r3, #24]
      break;
 80091b2:	e0fb      	b.n	80093ac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6899      	ldr	r1, [r3, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	899a      	ldrh	r2, [r3, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	791b      	ldrb	r3, [r3, #4]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f93a 	bl	8009446 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2204      	movs	r2, #4
 80091d6:	761a      	strb	r2, [r3, #24]
      break;
 80091d8:	e0f1      	b.n	80093be <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	791b      	ldrb	r3, [r3, #4]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fc7d 	bl	8009ae0 <USBH_LL_GetURBState>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d102      	bne.n	80091f6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2209      	movs	r2, #9
 80091f4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	d102      	bne.n	8009202 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80091fc:	2303      	movs	r3, #3
 80091fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009200:	e0d6      	b.n	80093b0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b04      	cmp	r3, #4
 8009206:	f040 80d3 	bne.w	80093b0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	220b      	movs	r2, #11
 800920e:	761a      	strb	r2, [r3, #24]
      break;
 8009210:	e0ce      	b.n	80093b0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6899      	ldr	r1, [r3, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	899a      	ldrh	r2, [r3, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	795b      	ldrb	r3, [r3, #5]
 800921e:	2001      	movs	r0, #1
 8009220:	9000      	str	r0, [sp, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f8ea 	bl	80093fc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800922e:	b29a      	uxth	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2206      	movs	r2, #6
 8009238:	761a      	strb	r2, [r3, #24]
      break;
 800923a:	e0c0      	b.n	80093be <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	795b      	ldrb	r3, [r3, #5]
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fc4c 	bl	8009ae0 <USBH_LL_GetURBState>
 8009248:	4603      	mov	r3, r0
 800924a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d103      	bne.n	800925a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2207      	movs	r2, #7
 8009256:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009258:	e0ac      	b.n	80093b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	2b05      	cmp	r3, #5
 800925e:	d105      	bne.n	800926c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	220c      	movs	r2, #12
 8009264:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009266:	2303      	movs	r3, #3
 8009268:	73fb      	strb	r3, [r7, #15]
      break;
 800926a:	e0a3      	b.n	80093b4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d103      	bne.n	800927a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2205      	movs	r2, #5
 8009276:	761a      	strb	r2, [r3, #24]
      break;
 8009278:	e09c      	b.n	80093b4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800927a:	7bbb      	ldrb	r3, [r7, #14]
 800927c:	2b04      	cmp	r3, #4
 800927e:	f040 8099 	bne.w	80093b4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	220b      	movs	r2, #11
 8009286:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009288:	2302      	movs	r3, #2
 800928a:	73fb      	strb	r3, [r7, #15]
      break;
 800928c:	e092      	b.n	80093b4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	791b      	ldrb	r3, [r3, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	2100      	movs	r1, #0
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8d5 	bl	8009446 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2208      	movs	r2, #8
 80092ac:	761a      	strb	r2, [r3, #24]

      break;
 80092ae:	e086      	b.n	80093be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	791b      	ldrb	r3, [r3, #4]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fc12 	bl	8009ae0 <USBH_LL_GetURBState>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d105      	bne.n	80092d2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	220d      	movs	r2, #13
 80092ca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092d0:	e072      	b.n	80093b8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d103      	bne.n	80092e0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	220b      	movs	r2, #11
 80092dc:	761a      	strb	r2, [r3, #24]
      break;
 80092de:	e06b      	b.n	80093b8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d168      	bne.n	80093b8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80092e6:	2303      	movs	r3, #3
 80092e8:	73fb      	strb	r3, [r7, #15]
      break;
 80092ea:	e065      	b.n	80093b8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	795b      	ldrb	r3, [r3, #5]
 80092f0:	2201      	movs	r2, #1
 80092f2:	9200      	str	r2, [sp, #0]
 80092f4:	2200      	movs	r2, #0
 80092f6:	2100      	movs	r1, #0
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f87f 	bl	80093fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	220a      	movs	r2, #10
 800930e:	761a      	strb	r2, [r3, #24]
      break;
 8009310:	e055      	b.n	80093be <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	795b      	ldrb	r3, [r3, #5]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fbe1 	bl	8009ae0 <USBH_LL_GetURBState>
 800931e:	4603      	mov	r3, r0
 8009320:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d105      	bne.n	8009334 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	220d      	movs	r2, #13
 8009330:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009332:	e043      	b.n	80093bc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d103      	bne.n	8009342 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2209      	movs	r2, #9
 800933e:	761a      	strb	r2, [r3, #24]
      break;
 8009340:	e03c      	b.n	80093bc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	2b04      	cmp	r3, #4
 8009346:	d139      	bne.n	80093bc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	220b      	movs	r2, #11
 800934c:	761a      	strb	r2, [r3, #24]
      break;
 800934e:	e035      	b.n	80093bc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	7e5b      	ldrb	r3, [r3, #25]
 8009354:	3301      	adds	r3, #1
 8009356:	b2da      	uxtb	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	765a      	strb	r2, [r3, #25]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7e5b      	ldrb	r3, [r3, #25]
 8009360:	2b02      	cmp	r3, #2
 8009362:	d806      	bhi.n	8009372 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009370:	e025      	b.n	80093be <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009378:	2106      	movs	r1, #6
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	795b      	ldrb	r3, [r3, #5]
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f90c 	bl	80095a8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	791b      	ldrb	r3, [r3, #4]
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f906 	bl	80095a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80093a2:	2302      	movs	r3, #2
 80093a4:	73fb      	strb	r3, [r7, #15]
      break;
 80093a6:	e00a      	b.n	80093be <USBH_HandleControl+0x2de>

    default:
      break;
 80093a8:	bf00      	nop
 80093aa:	e008      	b.n	80093be <USBH_HandleControl+0x2de>
      break;
 80093ac:	bf00      	nop
 80093ae:	e006      	b.n	80093be <USBH_HandleControl+0x2de>
      break;
 80093b0:	bf00      	nop
 80093b2:	e004      	b.n	80093be <USBH_HandleControl+0x2de>
      break;
 80093b4:	bf00      	nop
 80093b6:	e002      	b.n	80093be <USBH_HandleControl+0x2de>
      break;
 80093b8:	bf00      	nop
 80093ba:	e000      	b.n	80093be <USBH_HandleControl+0x2de>
      break;
 80093bc:	bf00      	nop
  }

  return status;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b088      	sub	sp, #32
 80093cc:	af04      	add	r7, sp, #16
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	4613      	mov	r3, r2
 80093d4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093d6:	79f9      	ldrb	r1, [r7, #7]
 80093d8:	2300      	movs	r3, #0
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	2308      	movs	r3, #8
 80093de:	9302      	str	r3, [sp, #8]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	2200      	movs	r2, #0
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f000 fb46 	bl	8009a7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af04      	add	r7, sp, #16
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4611      	mov	r1, r2
 8009408:	461a      	mov	r2, r3
 800940a:	460b      	mov	r3, r1
 800940c:	80fb      	strh	r3, [r7, #6]
 800940e:	4613      	mov	r3, r2
 8009410:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009420:	7979      	ldrb	r1, [r7, #5]
 8009422:	7e3b      	ldrb	r3, [r7, #24]
 8009424:	9303      	str	r3, [sp, #12]
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	9302      	str	r3, [sp, #8]
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	2301      	movs	r3, #1
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	2300      	movs	r3, #0
 8009434:	2200      	movs	r2, #0
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 fb21 	bl	8009a7e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b088      	sub	sp, #32
 800944a:	af04      	add	r7, sp, #16
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	4611      	mov	r1, r2
 8009452:	461a      	mov	r2, r3
 8009454:	460b      	mov	r3, r1
 8009456:	80fb      	strh	r3, [r7, #6]
 8009458:	4613      	mov	r3, r2
 800945a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800945c:	7979      	ldrb	r1, [r7, #5]
 800945e:	2300      	movs	r3, #0
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	88fb      	ldrh	r3, [r7, #6]
 8009464:	9302      	str	r3, [sp, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	2301      	movs	r3, #1
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2300      	movs	r3, #0
 8009470:	2201      	movs	r2, #1
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 fb03 	bl	8009a7e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009478:	2300      	movs	r3, #0

}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b088      	sub	sp, #32
 8009486:	af04      	add	r7, sp, #16
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	4611      	mov	r1, r2
 800948e:	461a      	mov	r2, r3
 8009490:	460b      	mov	r3, r1
 8009492:	80fb      	strh	r3, [r7, #6]
 8009494:	4613      	mov	r3, r2
 8009496:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094a6:	7979      	ldrb	r1, [r7, #5]
 80094a8:	7e3b      	ldrb	r3, [r7, #24]
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	2301      	movs	r3, #1
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	2302      	movs	r3, #2
 80094ba:	2200      	movs	r2, #0
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fade 	bl	8009a7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	4611      	mov	r1, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	460b      	mov	r3, r1
 80094dc:	80fb      	strh	r3, [r7, #6]
 80094de:	4613      	mov	r3, r2
 80094e0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094e2:	7979      	ldrb	r1, [r7, #5]
 80094e4:	2300      	movs	r3, #0
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	88fb      	ldrh	r3, [r7, #6]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	2301      	movs	r3, #1
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	2302      	movs	r3, #2
 80094f6:	2201      	movs	r2, #1
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 fac0 	bl	8009a7e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3710      	adds	r7, #16
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af04      	add	r7, sp, #16
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	461a      	mov	r2, r3
 8009516:	4603      	mov	r3, r0
 8009518:	70fb      	strb	r3, [r7, #3]
 800951a:	460b      	mov	r3, r1
 800951c:	70bb      	strb	r3, [r7, #2]
 800951e:	4613      	mov	r3, r2
 8009520:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009522:	7878      	ldrb	r0, [r7, #1]
 8009524:	78ba      	ldrb	r2, [r7, #2]
 8009526:	78f9      	ldrb	r1, [r7, #3]
 8009528:	8b3b      	ldrh	r3, [r7, #24]
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	7d3b      	ldrb	r3, [r7, #20]
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	7c3b      	ldrb	r3, [r7, #16]
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	4603      	mov	r3, r0
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa53 	bl	80099e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa72 	bl	8009a40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f836 	bl	80095e4 <USBH_GetFreePipe>
 8009578:	4603      	mov	r3, r0
 800957a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800957c:	89fb      	ldrh	r3, [r7, #14]
 800957e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009582:	4293      	cmp	r3, r2
 8009584:	d00a      	beq.n	800959c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009586:	78fa      	ldrb	r2, [r7, #3]
 8009588:	89fb      	ldrh	r3, [r7, #14]
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009592:	6879      	ldr	r1, [r7, #4]
 8009594:	33e0      	adds	r3, #224	; 0xe0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800959c:	89fb      	ldrh	r3, [r7, #14]
 800959e:	b2db      	uxtb	r3, r3
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	d80d      	bhi.n	80095d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80095ba:	78fb      	ldrb	r3, [r7, #3]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	33e0      	adds	r3, #224	; 0xe0
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	33e0      	adds	r3, #224	; 0xe0
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
 80095f4:	e00f      	b.n	8009616 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	33e0      	adds	r3, #224	; 0xe0
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d102      	bne.n	8009610 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	b29b      	uxth	r3, r3
 800960e:	e007      	b.n	8009620 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	3301      	adds	r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b0f      	cmp	r3, #15
 800961a:	d9ec      	bls.n	80095f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800961c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009630:	2201      	movs	r2, #1
 8009632:	490e      	ldr	r1, [pc, #56]	; (800966c <MX_USB_HOST_Init+0x40>)
 8009634:	480e      	ldr	r0, [pc, #56]	; (8009670 <MX_USB_HOST_Init+0x44>)
 8009636:	f7fe fba7 	bl	8007d88 <USBH_Init>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d001      	beq.n	8009644 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009640:	f7f8 fb4a 	bl	8001cd8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009644:	490b      	ldr	r1, [pc, #44]	; (8009674 <MX_USB_HOST_Init+0x48>)
 8009646:	480a      	ldr	r0, [pc, #40]	; (8009670 <MX_USB_HOST_Init+0x44>)
 8009648:	f7fe fc2c 	bl	8007ea4 <USBH_RegisterClass>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009652:	f7f8 fb41 	bl	8001cd8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009656:	4806      	ldr	r0, [pc, #24]	; (8009670 <MX_USB_HOST_Init+0x44>)
 8009658:	f7fe fcb0 	bl	8007fbc <USBH_Start>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009662:	f7f8 fb39 	bl	8001cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009666:	bf00      	nop
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	0800968d 	.word	0x0800968d
 8009670:	200001e8 	.word	0x200001e8
 8009674:	2000000c 	.word	0x2000000c

08009678 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800967c:	4802      	ldr	r0, [pc, #8]	; (8009688 <MX_USB_HOST_Process+0x10>)
 800967e:	f7fe fcad 	bl	8007fdc <USBH_Process>
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	200001e8 	.word	0x200001e8

0800968c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	3b01      	subs	r3, #1
 800969c:	2b04      	cmp	r3, #4
 800969e:	d819      	bhi.n	80096d4 <USBH_UserProcess+0x48>
 80096a0:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <USBH_UserProcess+0x1c>)
 80096a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a6:	bf00      	nop
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096c5 	.word	0x080096c5
 80096b0:	080096d5 	.word	0x080096d5
 80096b4:	080096cd 	.word	0x080096cd
 80096b8:	080096bd 	.word	0x080096bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80096bc:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <USBH_UserProcess+0x58>)
 80096be:	2203      	movs	r2, #3
 80096c0:	701a      	strb	r2, [r3, #0]
  break;
 80096c2:	e008      	b.n	80096d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <USBH_UserProcess+0x58>)
 80096c6:	2202      	movs	r2, #2
 80096c8:	701a      	strb	r2, [r3, #0]
  break;
 80096ca:	e004      	b.n	80096d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <USBH_UserProcess+0x58>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	701a      	strb	r2, [r3, #0]
  break;
 80096d2:	e000      	b.n	80096d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80096d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	200005c0 	.word	0x200005c0

080096e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08a      	sub	sp, #40	; 0x28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096f0:	f107 0314 	add.w	r3, r7, #20
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	605a      	str	r2, [r3, #4]
 80096fa:	609a      	str	r2, [r3, #8]
 80096fc:	60da      	str	r2, [r3, #12]
 80096fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009708:	d147      	bne.n	800979a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800970a:	2300      	movs	r3, #0
 800970c:	613b      	str	r3, [r7, #16]
 800970e:	4b25      	ldr	r3, [pc, #148]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009712:	4a24      	ldr	r2, [pc, #144]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009714:	f043 0301 	orr.w	r3, r3, #1
 8009718:	6313      	str	r3, [r2, #48]	; 0x30
 800971a:	4b22      	ldr	r3, [pc, #136]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 800971c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	613b      	str	r3, [r7, #16]
 8009724:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800972a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800972c:	2300      	movs	r3, #0
 800972e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009734:	f107 0314 	add.w	r3, r7, #20
 8009738:	4619      	mov	r1, r3
 800973a:	481b      	ldr	r0, [pc, #108]	; (80097a8 <HAL_HCD_MspInit+0xc0>)
 800973c:	f7f8 feaa 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009740:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009746:	2302      	movs	r3, #2
 8009748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800974a:	2300      	movs	r3, #0
 800974c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800974e:	2300      	movs	r3, #0
 8009750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009752:	230a      	movs	r3, #10
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009756:	f107 0314 	add.w	r3, r7, #20
 800975a:	4619      	mov	r1, r3
 800975c:	4812      	ldr	r0, [pc, #72]	; (80097a8 <HAL_HCD_MspInit+0xc0>)
 800975e:	f7f8 fe99 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009762:	4b10      	ldr	r3, [pc, #64]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	4a0f      	ldr	r2, [pc, #60]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800976c:	6353      	str	r3, [r2, #52]	; 0x34
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	4b0c      	ldr	r3, [pc, #48]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009776:	4a0b      	ldr	r2, [pc, #44]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800977c:	6453      	str	r3, [r2, #68]	; 0x44
 800977e:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <HAL_HCD_MspInit+0xbc>)
 8009780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009786:	60fb      	str	r3, [r7, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800978a:	2200      	movs	r2, #0
 800978c:	2100      	movs	r1, #0
 800978e:	2043      	movs	r0, #67	; 0x43
 8009790:	f7f8 fe49 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009794:	2043      	movs	r0, #67	; 0x43
 8009796:	f7f8 fe62 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800979a:	bf00      	nop
 800979c:	3728      	adds	r7, #40	; 0x28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	40023800 	.word	0x40023800
 80097a8:	40020000 	.word	0x40020000

080097ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fe ffed 	bl	800879a <USBH_LL_IncTimer>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7ff f825 	bl	8008826 <USBH_LL_Connect>
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff f82e 	bl	8008854 <USBH_LL_Disconnect>
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
 800980c:	4613      	mov	r3, r2
 800980e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe ffdf 	bl	80087ee <USBH_LL_PortEnabled>
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe ffdf 	bl	800880a <USBH_LL_PortDisabled>
}
 800984c:	bf00      	nop
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009862:	2b01      	cmp	r3, #1
 8009864:	d12a      	bne.n	80098bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009866:	4a18      	ldr	r2, [pc, #96]	; (80098c8 <USBH_LL_Init+0x74>)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a15      	ldr	r2, [pc, #84]	; (80098c8 <USBH_LL_Init+0x74>)
 8009872:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009876:	4b14      	ldr	r3, [pc, #80]	; (80098c8 <USBH_LL_Init+0x74>)
 8009878:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800987c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800987e:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <USBH_LL_Init+0x74>)
 8009880:	2208      	movs	r2, #8
 8009882:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009884:	4b10      	ldr	r3, [pc, #64]	; (80098c8 <USBH_LL_Init+0x74>)
 8009886:	2201      	movs	r2, #1
 8009888:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800988a:	4b0f      	ldr	r3, [pc, #60]	; (80098c8 <USBH_LL_Init+0x74>)
 800988c:	2200      	movs	r2, #0
 800988e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <USBH_LL_Init+0x74>)
 8009892:	2202      	movs	r2, #2
 8009894:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009896:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <USBH_LL_Init+0x74>)
 8009898:	2200      	movs	r2, #0
 800989a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800989c:	480a      	ldr	r0, [pc, #40]	; (80098c8 <USBH_LL_Init+0x74>)
 800989e:	f7f8 ffae 	bl	80027fe <HAL_HCD_Init>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80098a8:	f7f8 fa16 	bl	8001cd8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80098ac:	4806      	ldr	r0, [pc, #24]	; (80098c8 <USBH_LL_Init+0x74>)
 80098ae:	f7f9 fb92 	bl	8002fd6 <HAL_HCD_GetCurrentFrame>
 80098b2:	4603      	mov	r3, r0
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7fe ff60 	bl	800877c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200005c4 	.word	0x200005c4

080098cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7f9 fb01 	bl	8002eea <HAL_HCD_Start>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 f95c 	bl	8009bac <USBH_Get_USB_Status>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009918:	4618      	mov	r0, r3
 800991a:	f7f9 fb09 	bl	8002f30 <HAL_HCD_Stop>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f941 	bl	8009bac <USBH_Get_USB_Status>
 800992a:	4603      	mov	r3, r0
 800992c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800992e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800994a:	4618      	mov	r0, r3
 800994c:	f7f9 fb51 	bl	8002ff2 <HAL_HCD_GetCurrentSpeed>
 8009950:	4603      	mov	r3, r0
 8009952:	2b02      	cmp	r3, #2
 8009954:	d00c      	beq.n	8009970 <USBH_LL_GetSpeed+0x38>
 8009956:	2b02      	cmp	r3, #2
 8009958:	d80d      	bhi.n	8009976 <USBH_LL_GetSpeed+0x3e>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <USBH_LL_GetSpeed+0x2c>
 800995e:	2b01      	cmp	r3, #1
 8009960:	d003      	beq.n	800996a <USBH_LL_GetSpeed+0x32>
 8009962:	e008      	b.n	8009976 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009964:	2300      	movs	r3, #0
 8009966:	73fb      	strb	r3, [r7, #15]
    break;
 8009968:	e008      	b.n	800997c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800996a:	2301      	movs	r3, #1
 800996c:	73fb      	strb	r3, [r7, #15]
    break;
 800996e:	e005      	b.n	800997c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009970:	2302      	movs	r3, #2
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	e002      	b.n	800997c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009976:	2301      	movs	r3, #1
 8009978:	73fb      	strb	r3, [r7, #15]
    break;
 800997a:	bf00      	nop
  }
  return  speed;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800999c:	4618      	mov	r0, r3
 800999e:	f7f9 fae4 	bl	8002f6a <HAL_HCD_ResetPort>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 f8ff 	bl	8009bac <USBH_Get_USB_Status>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	4611      	mov	r1, r2
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f9 faeb 	bl	8002fae <HAL_HCD_HC_GetXferCount>
 80099d8:	4603      	mov	r3, r0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099e2:	b590      	push	{r4, r7, lr}
 80099e4:	b089      	sub	sp, #36	; 0x24
 80099e6:	af04      	add	r7, sp, #16
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	461a      	mov	r2, r3
 80099f0:	4603      	mov	r3, r0
 80099f2:	70fb      	strb	r3, [r7, #3]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70bb      	strb	r3, [r7, #2]
 80099f8:	4613      	mov	r3, r2
 80099fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a0a:	787c      	ldrb	r4, [r7, #1]
 8009a0c:	78ba      	ldrb	r2, [r7, #2]
 8009a0e:	78f9      	ldrb	r1, [r7, #3]
 8009a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a12:	9302      	str	r3, [sp, #8]
 8009a14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	4623      	mov	r3, r4
 8009a22:	f7f8 ff4e 	bl	80028c2 <HAL_HCD_HC_Init>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f8bd 	bl	8009bac <USBH_Get_USB_Status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd90      	pop	{r4, r7, pc}

08009a40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a5a:	78fa      	ldrb	r2, [r7, #3]
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f8 ffbe 	bl	80029e0 <HAL_HCD_HC_Halt>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f89e 	bl	8009bac <USBH_Get_USB_Status>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009a7e:	b590      	push	{r4, r7, lr}
 8009a80:	b089      	sub	sp, #36	; 0x24
 8009a82:	af04      	add	r7, sp, #16
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	70fb      	strb	r3, [r7, #3]
 8009a90:	460b      	mov	r3, r1
 8009a92:	70bb      	strb	r3, [r7, #2]
 8009a94:	4613      	mov	r3, r2
 8009a96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009aa6:	787c      	ldrb	r4, [r7, #1]
 8009aa8:	78ba      	ldrb	r2, [r7, #2]
 8009aaa:	78f9      	ldrb	r1, [r7, #3]
 8009aac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ab0:	9303      	str	r3, [sp, #12]
 8009ab2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4623      	mov	r3, r4
 8009ac2:	f7f8 ffb1 	bl	8002a28 <HAL_HCD_HC_SubmitRequest>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 f86d 	bl	8009bac <USBH_Get_USB_Status>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd90      	pop	{r4, r7, pc}

08009ae0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009af2:	78fa      	ldrb	r2, [r7, #3]
 8009af4:	4611      	mov	r1, r2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7f9 fa45 	bl	8002f86 <HAL_HCD_HC_GetURBState>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d103      	bne.n	8009b24 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009b1c:	78fb      	ldrb	r3, [r7, #3]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f870 	bl	8009c04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009b24:	20c8      	movs	r0, #200	; 0xc8
 8009b26:	f7f8 fb7f 	bl	8002228 <HAL_Delay>
  return USBH_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
 8009b40:	4613      	mov	r3, r2
 8009b42:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b4a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009b4c:	78fb      	ldrb	r3, [r7, #3]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	212c      	movs	r1, #44	; 0x2c
 8009b52:	fb01 f303 	mul.w	r3, r1, r3
 8009b56:	4413      	add	r3, r2
 8009b58:	333b      	adds	r3, #59	; 0x3b
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d009      	beq.n	8009b74 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	212c      	movs	r1, #44	; 0x2c
 8009b66:	fb01 f303 	mul.w	r3, r1, r3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	3354      	adds	r3, #84	; 0x54
 8009b6e:	78ba      	ldrb	r2, [r7, #2]
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	e008      	b.n	8009b86 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009b74:	78fb      	ldrb	r3, [r7, #3]
 8009b76:	68fa      	ldr	r2, [r7, #12]
 8009b78:	212c      	movs	r1, #44	; 0x2c
 8009b7a:	fb01 f303 	mul.w	r3, r1, r3
 8009b7e:	4413      	add	r3, r2
 8009b80:	3355      	adds	r3, #85	; 0x55
 8009b82:	78ba      	ldrb	r2, [r7, #2]
 8009b84:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7f8 fb43 	bl	8002228 <HAL_Delay>
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
	...

08009bac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bba:	79fb      	ldrb	r3, [r7, #7]
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d817      	bhi.n	8009bf0 <USBH_Get_USB_Status+0x44>
 8009bc0:	a201      	add	r2, pc, #4	; (adr r2, 8009bc8 <USBH_Get_USB_Status+0x1c>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009bd9 	.word	0x08009bd9
 8009bcc:	08009bdf 	.word	0x08009bdf
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009beb 	.word	0x08009beb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
    break;
 8009bdc:	e00b      	b.n	8009bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009bde:	2302      	movs	r3, #2
 8009be0:	73fb      	strb	r3, [r7, #15]
    break;
 8009be2:	e008      	b.n	8009bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009be4:	2301      	movs	r3, #1
 8009be6:	73fb      	strb	r3, [r7, #15]
    break;
 8009be8:	e005      	b.n	8009bf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009bea:	2302      	movs	r3, #2
 8009bec:	73fb      	strb	r3, [r7, #15]
    break;
 8009bee:	e002      	b.n	8009bf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bf4:	bf00      	nop
  }
  return usb_status;
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d102      	bne.n	8009c1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
 8009c1c:	e001      	b.n	8009c22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	461a      	mov	r2, r3
 8009c26:	2101      	movs	r1, #1
 8009c28:	4803      	ldr	r0, [pc, #12]	; (8009c38 <MX_DriverVbusFS+0x34>)
 8009c2a:	f7f8 fdcf 	bl	80027cc <HAL_GPIO_WritePin>
}
 8009c2e:	bf00      	nop
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40020800 	.word	0x40020800

08009c3c <__errno>:
 8009c3c:	4b01      	ldr	r3, [pc, #4]	; (8009c44 <__errno+0x8>)
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	2000002c 	.word	0x2000002c

08009c48 <__libc_init_array>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	4d0d      	ldr	r5, [pc, #52]	; (8009c80 <__libc_init_array+0x38>)
 8009c4c:	4c0d      	ldr	r4, [pc, #52]	; (8009c84 <__libc_init_array+0x3c>)
 8009c4e:	1b64      	subs	r4, r4, r5
 8009c50:	10a4      	asrs	r4, r4, #2
 8009c52:	2600      	movs	r6, #0
 8009c54:	42a6      	cmp	r6, r4
 8009c56:	d109      	bne.n	8009c6c <__libc_init_array+0x24>
 8009c58:	4d0b      	ldr	r5, [pc, #44]	; (8009c88 <__libc_init_array+0x40>)
 8009c5a:	4c0c      	ldr	r4, [pc, #48]	; (8009c8c <__libc_init_array+0x44>)
 8009c5c:	f000 fc9e 	bl	800a59c <_init>
 8009c60:	1b64      	subs	r4, r4, r5
 8009c62:	10a4      	asrs	r4, r4, #2
 8009c64:	2600      	movs	r6, #0
 8009c66:	42a6      	cmp	r6, r4
 8009c68:	d105      	bne.n	8009c76 <__libc_init_array+0x2e>
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c70:	4798      	blx	r3
 8009c72:	3601      	adds	r6, #1
 8009c74:	e7ee      	b.n	8009c54 <__libc_init_array+0xc>
 8009c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7a:	4798      	blx	r3
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	e7f2      	b.n	8009c66 <__libc_init_array+0x1e>
 8009c80:	0800a6e8 	.word	0x0800a6e8
 8009c84:	0800a6e8 	.word	0x0800a6e8
 8009c88:	0800a6e8 	.word	0x0800a6e8
 8009c8c:	0800a6ec 	.word	0x0800a6ec

08009c90 <malloc>:
 8009c90:	4b02      	ldr	r3, [pc, #8]	; (8009c9c <malloc+0xc>)
 8009c92:	4601      	mov	r1, r0
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f000 b87f 	b.w	8009d98 <_malloc_r>
 8009c9a:	bf00      	nop
 8009c9c:	2000002c 	.word	0x2000002c

08009ca0 <free>:
 8009ca0:	4b02      	ldr	r3, [pc, #8]	; (8009cac <free+0xc>)
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f000 b80b 	b.w	8009cc0 <_free_r>
 8009caa:	bf00      	nop
 8009cac:	2000002c 	.word	0x2000002c

08009cb0 <memset>:
 8009cb0:	4402      	add	r2, r0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d100      	bne.n	8009cba <memset+0xa>
 8009cb8:	4770      	bx	lr
 8009cba:	f803 1b01 	strb.w	r1, [r3], #1
 8009cbe:	e7f9      	b.n	8009cb4 <memset+0x4>

08009cc0 <_free_r>:
 8009cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cc2:	2900      	cmp	r1, #0
 8009cc4:	d044      	beq.n	8009d50 <_free_r+0x90>
 8009cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cca:	9001      	str	r0, [sp, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f1a1 0404 	sub.w	r4, r1, #4
 8009cd2:	bfb8      	it	lt
 8009cd4:	18e4      	addlt	r4, r4, r3
 8009cd6:	f000 f903 	bl	8009ee0 <__malloc_lock>
 8009cda:	4a1e      	ldr	r2, [pc, #120]	; (8009d54 <_free_r+0x94>)
 8009cdc:	9801      	ldr	r0, [sp, #4]
 8009cde:	6813      	ldr	r3, [r2, #0]
 8009ce0:	b933      	cbnz	r3, 8009cf0 <_free_r+0x30>
 8009ce2:	6063      	str	r3, [r4, #4]
 8009ce4:	6014      	str	r4, [r2, #0]
 8009ce6:	b003      	add	sp, #12
 8009ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cec:	f000 b8fe 	b.w	8009eec <__malloc_unlock>
 8009cf0:	42a3      	cmp	r3, r4
 8009cf2:	d908      	bls.n	8009d06 <_free_r+0x46>
 8009cf4:	6825      	ldr	r5, [r4, #0]
 8009cf6:	1961      	adds	r1, r4, r5
 8009cf8:	428b      	cmp	r3, r1
 8009cfa:	bf01      	itttt	eq
 8009cfc:	6819      	ldreq	r1, [r3, #0]
 8009cfe:	685b      	ldreq	r3, [r3, #4]
 8009d00:	1949      	addeq	r1, r1, r5
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	e7ed      	b.n	8009ce2 <_free_r+0x22>
 8009d06:	461a      	mov	r2, r3
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	b10b      	cbz	r3, 8009d10 <_free_r+0x50>
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	d9fa      	bls.n	8009d06 <_free_r+0x46>
 8009d10:	6811      	ldr	r1, [r2, #0]
 8009d12:	1855      	adds	r5, r2, r1
 8009d14:	42a5      	cmp	r5, r4
 8009d16:	d10b      	bne.n	8009d30 <_free_r+0x70>
 8009d18:	6824      	ldr	r4, [r4, #0]
 8009d1a:	4421      	add	r1, r4
 8009d1c:	1854      	adds	r4, r2, r1
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	6011      	str	r1, [r2, #0]
 8009d22:	d1e0      	bne.n	8009ce6 <_free_r+0x26>
 8009d24:	681c      	ldr	r4, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	6053      	str	r3, [r2, #4]
 8009d2a:	4421      	add	r1, r4
 8009d2c:	6011      	str	r1, [r2, #0]
 8009d2e:	e7da      	b.n	8009ce6 <_free_r+0x26>
 8009d30:	d902      	bls.n	8009d38 <_free_r+0x78>
 8009d32:	230c      	movs	r3, #12
 8009d34:	6003      	str	r3, [r0, #0]
 8009d36:	e7d6      	b.n	8009ce6 <_free_r+0x26>
 8009d38:	6825      	ldr	r5, [r4, #0]
 8009d3a:	1961      	adds	r1, r4, r5
 8009d3c:	428b      	cmp	r3, r1
 8009d3e:	bf04      	itt	eq
 8009d40:	6819      	ldreq	r1, [r3, #0]
 8009d42:	685b      	ldreq	r3, [r3, #4]
 8009d44:	6063      	str	r3, [r4, #4]
 8009d46:	bf04      	itt	eq
 8009d48:	1949      	addeq	r1, r1, r5
 8009d4a:	6021      	streq	r1, [r4, #0]
 8009d4c:	6054      	str	r4, [r2, #4]
 8009d4e:	e7ca      	b.n	8009ce6 <_free_r+0x26>
 8009d50:	b003      	add	sp, #12
 8009d52:	bd30      	pop	{r4, r5, pc}
 8009d54:	200008c8 	.word	0x200008c8

08009d58 <sbrk_aligned>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	4e0e      	ldr	r6, [pc, #56]	; (8009d94 <sbrk_aligned+0x3c>)
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	6831      	ldr	r1, [r6, #0]
 8009d60:	4605      	mov	r5, r0
 8009d62:	b911      	cbnz	r1, 8009d6a <sbrk_aligned+0x12>
 8009d64:	f000 f88c 	bl	8009e80 <_sbrk_r>
 8009d68:	6030      	str	r0, [r6, #0]
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	f000 f887 	bl	8009e80 <_sbrk_r>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d00a      	beq.n	8009d8c <sbrk_aligned+0x34>
 8009d76:	1cc4      	adds	r4, r0, #3
 8009d78:	f024 0403 	bic.w	r4, r4, #3
 8009d7c:	42a0      	cmp	r0, r4
 8009d7e:	d007      	beq.n	8009d90 <sbrk_aligned+0x38>
 8009d80:	1a21      	subs	r1, r4, r0
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 f87c 	bl	8009e80 <_sbrk_r>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d101      	bne.n	8009d90 <sbrk_aligned+0x38>
 8009d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8009d90:	4620      	mov	r0, r4
 8009d92:	bd70      	pop	{r4, r5, r6, pc}
 8009d94:	200008cc 	.word	0x200008cc

08009d98 <_malloc_r>:
 8009d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9c:	1ccd      	adds	r5, r1, #3
 8009d9e:	f025 0503 	bic.w	r5, r5, #3
 8009da2:	3508      	adds	r5, #8
 8009da4:	2d0c      	cmp	r5, #12
 8009da6:	bf38      	it	cc
 8009da8:	250c      	movcc	r5, #12
 8009daa:	2d00      	cmp	r5, #0
 8009dac:	4607      	mov	r7, r0
 8009dae:	db01      	blt.n	8009db4 <_malloc_r+0x1c>
 8009db0:	42a9      	cmp	r1, r5
 8009db2:	d905      	bls.n	8009dc0 <_malloc_r+0x28>
 8009db4:	230c      	movs	r3, #12
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	2600      	movs	r6, #0
 8009dba:	4630      	mov	r0, r6
 8009dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc0:	4e2e      	ldr	r6, [pc, #184]	; (8009e7c <_malloc_r+0xe4>)
 8009dc2:	f000 f88d 	bl	8009ee0 <__malloc_lock>
 8009dc6:	6833      	ldr	r3, [r6, #0]
 8009dc8:	461c      	mov	r4, r3
 8009dca:	bb34      	cbnz	r4, 8009e1a <_malloc_r+0x82>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7ff ffc2 	bl	8009d58 <sbrk_aligned>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	d14d      	bne.n	8009e76 <_malloc_r+0xde>
 8009dda:	6834      	ldr	r4, [r6, #0]
 8009ddc:	4626      	mov	r6, r4
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	d140      	bne.n	8009e64 <_malloc_r+0xcc>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	4631      	mov	r1, r6
 8009de6:	4638      	mov	r0, r7
 8009de8:	eb04 0803 	add.w	r8, r4, r3
 8009dec:	f000 f848 	bl	8009e80 <_sbrk_r>
 8009df0:	4580      	cmp	r8, r0
 8009df2:	d13a      	bne.n	8009e6a <_malloc_r+0xd2>
 8009df4:	6821      	ldr	r1, [r4, #0]
 8009df6:	3503      	adds	r5, #3
 8009df8:	1a6d      	subs	r5, r5, r1
 8009dfa:	f025 0503 	bic.w	r5, r5, #3
 8009dfe:	3508      	adds	r5, #8
 8009e00:	2d0c      	cmp	r5, #12
 8009e02:	bf38      	it	cc
 8009e04:	250c      	movcc	r5, #12
 8009e06:	4629      	mov	r1, r5
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff ffa5 	bl	8009d58 <sbrk_aligned>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	d02b      	beq.n	8009e6a <_malloc_r+0xd2>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	442b      	add	r3, r5
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	e00e      	b.n	8009e38 <_malloc_r+0xa0>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	1b52      	subs	r2, r2, r5
 8009e1e:	d41e      	bmi.n	8009e5e <_malloc_r+0xc6>
 8009e20:	2a0b      	cmp	r2, #11
 8009e22:	d916      	bls.n	8009e52 <_malloc_r+0xba>
 8009e24:	1961      	adds	r1, r4, r5
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	6025      	str	r5, [r4, #0]
 8009e2a:	bf18      	it	ne
 8009e2c:	6059      	strne	r1, [r3, #4]
 8009e2e:	6863      	ldr	r3, [r4, #4]
 8009e30:	bf08      	it	eq
 8009e32:	6031      	streq	r1, [r6, #0]
 8009e34:	5162      	str	r2, [r4, r5]
 8009e36:	604b      	str	r3, [r1, #4]
 8009e38:	4638      	mov	r0, r7
 8009e3a:	f104 060b 	add.w	r6, r4, #11
 8009e3e:	f000 f855 	bl	8009eec <__malloc_unlock>
 8009e42:	f026 0607 	bic.w	r6, r6, #7
 8009e46:	1d23      	adds	r3, r4, #4
 8009e48:	1af2      	subs	r2, r6, r3
 8009e4a:	d0b6      	beq.n	8009dba <_malloc_r+0x22>
 8009e4c:	1b9b      	subs	r3, r3, r6
 8009e4e:	50a3      	str	r3, [r4, r2]
 8009e50:	e7b3      	b.n	8009dba <_malloc_r+0x22>
 8009e52:	6862      	ldr	r2, [r4, #4]
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	bf0c      	ite	eq
 8009e58:	6032      	streq	r2, [r6, #0]
 8009e5a:	605a      	strne	r2, [r3, #4]
 8009e5c:	e7ec      	b.n	8009e38 <_malloc_r+0xa0>
 8009e5e:	4623      	mov	r3, r4
 8009e60:	6864      	ldr	r4, [r4, #4]
 8009e62:	e7b2      	b.n	8009dca <_malloc_r+0x32>
 8009e64:	4634      	mov	r4, r6
 8009e66:	6876      	ldr	r6, [r6, #4]
 8009e68:	e7b9      	b.n	8009dde <_malloc_r+0x46>
 8009e6a:	230c      	movs	r3, #12
 8009e6c:	603b      	str	r3, [r7, #0]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f000 f83c 	bl	8009eec <__malloc_unlock>
 8009e74:	e7a1      	b.n	8009dba <_malloc_r+0x22>
 8009e76:	6025      	str	r5, [r4, #0]
 8009e78:	e7de      	b.n	8009e38 <_malloc_r+0xa0>
 8009e7a:	bf00      	nop
 8009e7c:	200008c8 	.word	0x200008c8

08009e80 <_sbrk_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_sbrk_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f8 f8e8 	bl	8002060 <_sbrk>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_sbrk_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_sbrk_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	200008d0 	.word	0x200008d0

08009ea0 <siprintf>:
 8009ea0:	b40e      	push	{r1, r2, r3}
 8009ea2:	b500      	push	{lr}
 8009ea4:	b09c      	sub	sp, #112	; 0x70
 8009ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ea8:	9002      	str	r0, [sp, #8]
 8009eaa:	9006      	str	r0, [sp, #24]
 8009eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009eb0:	4809      	ldr	r0, [pc, #36]	; (8009ed8 <siprintf+0x38>)
 8009eb2:	9107      	str	r1, [sp, #28]
 8009eb4:	9104      	str	r1, [sp, #16]
 8009eb6:	4909      	ldr	r1, [pc, #36]	; (8009edc <siprintf+0x3c>)
 8009eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ebc:	9105      	str	r1, [sp, #20]
 8009ebe:	6800      	ldr	r0, [r0, #0]
 8009ec0:	9301      	str	r3, [sp, #4]
 8009ec2:	a902      	add	r1, sp, #8
 8009ec4:	f000 f874 	bl	8009fb0 <_svfiprintf_r>
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	b01c      	add	sp, #112	; 0x70
 8009ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed4:	b003      	add	sp, #12
 8009ed6:	4770      	bx	lr
 8009ed8:	2000002c 	.word	0x2000002c
 8009edc:	ffff0208 	.word	0xffff0208

08009ee0 <__malloc_lock>:
 8009ee0:	4801      	ldr	r0, [pc, #4]	; (8009ee8 <__malloc_lock+0x8>)
 8009ee2:	f000 baf9 	b.w	800a4d8 <__retarget_lock_acquire_recursive>
 8009ee6:	bf00      	nop
 8009ee8:	200008d4 	.word	0x200008d4

08009eec <__malloc_unlock>:
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <__malloc_unlock+0x8>)
 8009eee:	f000 baf4 	b.w	800a4da <__retarget_lock_release_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	200008d4 	.word	0x200008d4

08009ef8 <__ssputs_r>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	688e      	ldr	r6, [r1, #8]
 8009efe:	429e      	cmp	r6, r3
 8009f00:	4682      	mov	sl, r0
 8009f02:	460c      	mov	r4, r1
 8009f04:	4690      	mov	r8, r2
 8009f06:	461f      	mov	r7, r3
 8009f08:	d838      	bhi.n	8009f7c <__ssputs_r+0x84>
 8009f0a:	898a      	ldrh	r2, [r1, #12]
 8009f0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f10:	d032      	beq.n	8009f78 <__ssputs_r+0x80>
 8009f12:	6825      	ldr	r5, [r4, #0]
 8009f14:	6909      	ldr	r1, [r1, #16]
 8009f16:	eba5 0901 	sub.w	r9, r5, r1
 8009f1a:	6965      	ldr	r5, [r4, #20]
 8009f1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f24:	3301      	adds	r3, #1
 8009f26:	444b      	add	r3, r9
 8009f28:	106d      	asrs	r5, r5, #1
 8009f2a:	429d      	cmp	r5, r3
 8009f2c:	bf38      	it	cc
 8009f2e:	461d      	movcc	r5, r3
 8009f30:	0553      	lsls	r3, r2, #21
 8009f32:	d531      	bpl.n	8009f98 <__ssputs_r+0xa0>
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7ff ff2f 	bl	8009d98 <_malloc_r>
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	b950      	cbnz	r0, 8009f54 <__ssputs_r+0x5c>
 8009f3e:	230c      	movs	r3, #12
 8009f40:	f8ca 3000 	str.w	r3, [sl]
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f54:	6921      	ldr	r1, [r4, #16]
 8009f56:	464a      	mov	r2, r9
 8009f58:	f000 fac0 	bl	800a4dc <memcpy>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	6126      	str	r6, [r4, #16]
 8009f6a:	6165      	str	r5, [r4, #20]
 8009f6c:	444e      	add	r6, r9
 8009f6e:	eba5 0509 	sub.w	r5, r5, r9
 8009f72:	6026      	str	r6, [r4, #0]
 8009f74:	60a5      	str	r5, [r4, #8]
 8009f76:	463e      	mov	r6, r7
 8009f78:	42be      	cmp	r6, r7
 8009f7a:	d900      	bls.n	8009f7e <__ssputs_r+0x86>
 8009f7c:	463e      	mov	r6, r7
 8009f7e:	6820      	ldr	r0, [r4, #0]
 8009f80:	4632      	mov	r2, r6
 8009f82:	4641      	mov	r1, r8
 8009f84:	f000 fab8 	bl	800a4f8 <memmove>
 8009f88:	68a3      	ldr	r3, [r4, #8]
 8009f8a:	1b9b      	subs	r3, r3, r6
 8009f8c:	60a3      	str	r3, [r4, #8]
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	4433      	add	r3, r6
 8009f92:	6023      	str	r3, [r4, #0]
 8009f94:	2000      	movs	r0, #0
 8009f96:	e7db      	b.n	8009f50 <__ssputs_r+0x58>
 8009f98:	462a      	mov	r2, r5
 8009f9a:	f000 fac7 	bl	800a52c <_realloc_r>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	d1e1      	bne.n	8009f68 <__ssputs_r+0x70>
 8009fa4:	6921      	ldr	r1, [r4, #16]
 8009fa6:	4650      	mov	r0, sl
 8009fa8:	f7ff fe8a 	bl	8009cc0 <_free_r>
 8009fac:	e7c7      	b.n	8009f3e <__ssputs_r+0x46>
	...

08009fb0 <_svfiprintf_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	4698      	mov	r8, r3
 8009fb6:	898b      	ldrh	r3, [r1, #12]
 8009fb8:	061b      	lsls	r3, r3, #24
 8009fba:	b09d      	sub	sp, #116	; 0x74
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	d50e      	bpl.n	8009fe2 <_svfiprintf_r+0x32>
 8009fc4:	690b      	ldr	r3, [r1, #16]
 8009fc6:	b963      	cbnz	r3, 8009fe2 <_svfiprintf_r+0x32>
 8009fc8:	2140      	movs	r1, #64	; 0x40
 8009fca:	f7ff fee5 	bl	8009d98 <_malloc_r>
 8009fce:	6028      	str	r0, [r5, #0]
 8009fd0:	6128      	str	r0, [r5, #16]
 8009fd2:	b920      	cbnz	r0, 8009fde <_svfiprintf_r+0x2e>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	e0d1      	b.n	800a182 <_svfiprintf_r+0x1d2>
 8009fde:	2340      	movs	r3, #64	; 0x40
 8009fe0:	616b      	str	r3, [r5, #20]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe6:	2320      	movs	r3, #32
 8009fe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff0:	2330      	movs	r3, #48	; 0x30
 8009ff2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a19c <_svfiprintf_r+0x1ec>
 8009ff6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ffa:	f04f 0901 	mov.w	r9, #1
 8009ffe:	4623      	mov	r3, r4
 800a000:	469a      	mov	sl, r3
 800a002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a006:	b10a      	cbz	r2, 800a00c <_svfiprintf_r+0x5c>
 800a008:	2a25      	cmp	r2, #37	; 0x25
 800a00a:	d1f9      	bne.n	800a000 <_svfiprintf_r+0x50>
 800a00c:	ebba 0b04 	subs.w	fp, sl, r4
 800a010:	d00b      	beq.n	800a02a <_svfiprintf_r+0x7a>
 800a012:	465b      	mov	r3, fp
 800a014:	4622      	mov	r2, r4
 800a016:	4629      	mov	r1, r5
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ff6d 	bl	8009ef8 <__ssputs_r>
 800a01e:	3001      	adds	r0, #1
 800a020:	f000 80aa 	beq.w	800a178 <_svfiprintf_r+0x1c8>
 800a024:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a026:	445a      	add	r2, fp
 800a028:	9209      	str	r2, [sp, #36]	; 0x24
 800a02a:	f89a 3000 	ldrb.w	r3, [sl]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f000 80a2 	beq.w	800a178 <_svfiprintf_r+0x1c8>
 800a034:	2300      	movs	r3, #0
 800a036:	f04f 32ff 	mov.w	r2, #4294967295
 800a03a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a03e:	f10a 0a01 	add.w	sl, sl, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	9307      	str	r3, [sp, #28]
 800a046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a04a:	931a      	str	r3, [sp, #104]	; 0x68
 800a04c:	4654      	mov	r4, sl
 800a04e:	2205      	movs	r2, #5
 800a050:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a054:	4851      	ldr	r0, [pc, #324]	; (800a19c <_svfiprintf_r+0x1ec>)
 800a056:	f7f6 f8c3 	bl	80001e0 <memchr>
 800a05a:	9a04      	ldr	r2, [sp, #16]
 800a05c:	b9d8      	cbnz	r0, 800a096 <_svfiprintf_r+0xe6>
 800a05e:	06d0      	lsls	r0, r2, #27
 800a060:	bf44      	itt	mi
 800a062:	2320      	movmi	r3, #32
 800a064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a068:	0711      	lsls	r1, r2, #28
 800a06a:	bf44      	itt	mi
 800a06c:	232b      	movmi	r3, #43	; 0x2b
 800a06e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a072:	f89a 3000 	ldrb.w	r3, [sl]
 800a076:	2b2a      	cmp	r3, #42	; 0x2a
 800a078:	d015      	beq.n	800a0a6 <_svfiprintf_r+0xf6>
 800a07a:	9a07      	ldr	r2, [sp, #28]
 800a07c:	4654      	mov	r4, sl
 800a07e:	2000      	movs	r0, #0
 800a080:	f04f 0c0a 	mov.w	ip, #10
 800a084:	4621      	mov	r1, r4
 800a086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a08a:	3b30      	subs	r3, #48	; 0x30
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d94e      	bls.n	800a12e <_svfiprintf_r+0x17e>
 800a090:	b1b0      	cbz	r0, 800a0c0 <_svfiprintf_r+0x110>
 800a092:	9207      	str	r2, [sp, #28]
 800a094:	e014      	b.n	800a0c0 <_svfiprintf_r+0x110>
 800a096:	eba0 0308 	sub.w	r3, r0, r8
 800a09a:	fa09 f303 	lsl.w	r3, r9, r3
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	46a2      	mov	sl, r4
 800a0a4:	e7d2      	b.n	800a04c <_svfiprintf_r+0x9c>
 800a0a6:	9b03      	ldr	r3, [sp, #12]
 800a0a8:	1d19      	adds	r1, r3, #4
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	9103      	str	r1, [sp, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bfbb      	ittet	lt
 800a0b2:	425b      	neglt	r3, r3
 800a0b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0b8:	9307      	strge	r3, [sp, #28]
 800a0ba:	9307      	strlt	r3, [sp, #28]
 800a0bc:	bfb8      	it	lt
 800a0be:	9204      	strlt	r2, [sp, #16]
 800a0c0:	7823      	ldrb	r3, [r4, #0]
 800a0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0c4:	d10c      	bne.n	800a0e0 <_svfiprintf_r+0x130>
 800a0c6:	7863      	ldrb	r3, [r4, #1]
 800a0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ca:	d135      	bne.n	800a138 <_svfiprintf_r+0x188>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	1d1a      	adds	r2, r3, #4
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	9203      	str	r2, [sp, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	bfb8      	it	lt
 800a0d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0dc:	3402      	adds	r4, #2
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1ac <_svfiprintf_r+0x1fc>
 800a0e4:	7821      	ldrb	r1, [r4, #0]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	f7f6 f879 	bl	80001e0 <memchr>
 800a0ee:	b140      	cbz	r0, 800a102 <_svfiprintf_r+0x152>
 800a0f0:	2340      	movs	r3, #64	; 0x40
 800a0f2:	eba0 000a 	sub.w	r0, r0, sl
 800a0f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a0fa:	9b04      	ldr	r3, [sp, #16]
 800a0fc:	4303      	orrs	r3, r0
 800a0fe:	3401      	adds	r4, #1
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a106:	4826      	ldr	r0, [pc, #152]	; (800a1a0 <_svfiprintf_r+0x1f0>)
 800a108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a10c:	2206      	movs	r2, #6
 800a10e:	f7f6 f867 	bl	80001e0 <memchr>
 800a112:	2800      	cmp	r0, #0
 800a114:	d038      	beq.n	800a188 <_svfiprintf_r+0x1d8>
 800a116:	4b23      	ldr	r3, [pc, #140]	; (800a1a4 <_svfiprintf_r+0x1f4>)
 800a118:	bb1b      	cbnz	r3, 800a162 <_svfiprintf_r+0x1b2>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	3307      	adds	r3, #7
 800a11e:	f023 0307 	bic.w	r3, r3, #7
 800a122:	3308      	adds	r3, #8
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a128:	4433      	add	r3, r6
 800a12a:	9309      	str	r3, [sp, #36]	; 0x24
 800a12c:	e767      	b.n	8009ffe <_svfiprintf_r+0x4e>
 800a12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a132:	460c      	mov	r4, r1
 800a134:	2001      	movs	r0, #1
 800a136:	e7a5      	b.n	800a084 <_svfiprintf_r+0xd4>
 800a138:	2300      	movs	r3, #0
 800a13a:	3401      	adds	r4, #1
 800a13c:	9305      	str	r3, [sp, #20]
 800a13e:	4619      	mov	r1, r3
 800a140:	f04f 0c0a 	mov.w	ip, #10
 800a144:	4620      	mov	r0, r4
 800a146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a14a:	3a30      	subs	r2, #48	; 0x30
 800a14c:	2a09      	cmp	r2, #9
 800a14e:	d903      	bls.n	800a158 <_svfiprintf_r+0x1a8>
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0c5      	beq.n	800a0e0 <_svfiprintf_r+0x130>
 800a154:	9105      	str	r1, [sp, #20]
 800a156:	e7c3      	b.n	800a0e0 <_svfiprintf_r+0x130>
 800a158:	fb0c 2101 	mla	r1, ip, r1, r2
 800a15c:	4604      	mov	r4, r0
 800a15e:	2301      	movs	r3, #1
 800a160:	e7f0      	b.n	800a144 <_svfiprintf_r+0x194>
 800a162:	ab03      	add	r3, sp, #12
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	462a      	mov	r2, r5
 800a168:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <_svfiprintf_r+0x1f8>)
 800a16a:	a904      	add	r1, sp, #16
 800a16c:	4638      	mov	r0, r7
 800a16e:	f3af 8000 	nop.w
 800a172:	1c42      	adds	r2, r0, #1
 800a174:	4606      	mov	r6, r0
 800a176:	d1d6      	bne.n	800a126 <_svfiprintf_r+0x176>
 800a178:	89ab      	ldrh	r3, [r5, #12]
 800a17a:	065b      	lsls	r3, r3, #25
 800a17c:	f53f af2c 	bmi.w	8009fd8 <_svfiprintf_r+0x28>
 800a180:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a182:	b01d      	add	sp, #116	; 0x74
 800a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a188:	ab03      	add	r3, sp, #12
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	462a      	mov	r2, r5
 800a18e:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <_svfiprintf_r+0x1f8>)
 800a190:	a904      	add	r1, sp, #16
 800a192:	4638      	mov	r0, r7
 800a194:	f000 f87a 	bl	800a28c <_printf_i>
 800a198:	e7eb      	b.n	800a172 <_svfiprintf_r+0x1c2>
 800a19a:	bf00      	nop
 800a19c:	0800a6ac 	.word	0x0800a6ac
 800a1a0:	0800a6b6 	.word	0x0800a6b6
 800a1a4:	00000000 	.word	0x00000000
 800a1a8:	08009ef9 	.word	0x08009ef9
 800a1ac:	0800a6b2 	.word	0x0800a6b2

0800a1b0 <_printf_common>:
 800a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	4699      	mov	r9, r3
 800a1b8:	688a      	ldr	r2, [r1, #8]
 800a1ba:	690b      	ldr	r3, [r1, #16]
 800a1bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	bfb8      	it	lt
 800a1c4:	4613      	movlt	r3, r2
 800a1c6:	6033      	str	r3, [r6, #0]
 800a1c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	b10a      	cbz	r2, 800a1d6 <_printf_common+0x26>
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	6033      	str	r3, [r6, #0]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	0699      	lsls	r1, r3, #26
 800a1da:	bf42      	ittt	mi
 800a1dc:	6833      	ldrmi	r3, [r6, #0]
 800a1de:	3302      	addmi	r3, #2
 800a1e0:	6033      	strmi	r3, [r6, #0]
 800a1e2:	6825      	ldr	r5, [r4, #0]
 800a1e4:	f015 0506 	ands.w	r5, r5, #6
 800a1e8:	d106      	bne.n	800a1f8 <_printf_common+0x48>
 800a1ea:	f104 0a19 	add.w	sl, r4, #25
 800a1ee:	68e3      	ldr	r3, [r4, #12]
 800a1f0:	6832      	ldr	r2, [r6, #0]
 800a1f2:	1a9b      	subs	r3, r3, r2
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	dc26      	bgt.n	800a246 <_printf_common+0x96>
 800a1f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1fc:	1e13      	subs	r3, r2, #0
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	bf18      	it	ne
 800a202:	2301      	movne	r3, #1
 800a204:	0692      	lsls	r2, r2, #26
 800a206:	d42b      	bmi.n	800a260 <_printf_common+0xb0>
 800a208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a20c:	4649      	mov	r1, r9
 800a20e:	4638      	mov	r0, r7
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d01e      	beq.n	800a254 <_printf_common+0xa4>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	68e5      	ldr	r5, [r4, #12]
 800a21a:	6832      	ldr	r2, [r6, #0]
 800a21c:	f003 0306 	and.w	r3, r3, #6
 800a220:	2b04      	cmp	r3, #4
 800a222:	bf08      	it	eq
 800a224:	1aad      	subeq	r5, r5, r2
 800a226:	68a3      	ldr	r3, [r4, #8]
 800a228:	6922      	ldr	r2, [r4, #16]
 800a22a:	bf0c      	ite	eq
 800a22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a230:	2500      	movne	r5, #0
 800a232:	4293      	cmp	r3, r2
 800a234:	bfc4      	itt	gt
 800a236:	1a9b      	subgt	r3, r3, r2
 800a238:	18ed      	addgt	r5, r5, r3
 800a23a:	2600      	movs	r6, #0
 800a23c:	341a      	adds	r4, #26
 800a23e:	42b5      	cmp	r5, r6
 800a240:	d11a      	bne.n	800a278 <_printf_common+0xc8>
 800a242:	2000      	movs	r0, #0
 800a244:	e008      	b.n	800a258 <_printf_common+0xa8>
 800a246:	2301      	movs	r3, #1
 800a248:	4652      	mov	r2, sl
 800a24a:	4649      	mov	r1, r9
 800a24c:	4638      	mov	r0, r7
 800a24e:	47c0      	blx	r8
 800a250:	3001      	adds	r0, #1
 800a252:	d103      	bne.n	800a25c <_printf_common+0xac>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25c:	3501      	adds	r5, #1
 800a25e:	e7c6      	b.n	800a1ee <_printf_common+0x3e>
 800a260:	18e1      	adds	r1, r4, r3
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	2030      	movs	r0, #48	; 0x30
 800a266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a26a:	4422      	add	r2, r4
 800a26c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a274:	3302      	adds	r3, #2
 800a276:	e7c7      	b.n	800a208 <_printf_common+0x58>
 800a278:	2301      	movs	r3, #1
 800a27a:	4622      	mov	r2, r4
 800a27c:	4649      	mov	r1, r9
 800a27e:	4638      	mov	r0, r7
 800a280:	47c0      	blx	r8
 800a282:	3001      	adds	r0, #1
 800a284:	d0e6      	beq.n	800a254 <_printf_common+0xa4>
 800a286:	3601      	adds	r6, #1
 800a288:	e7d9      	b.n	800a23e <_printf_common+0x8e>
	...

0800a28c <_printf_i>:
 800a28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a290:	7e0f      	ldrb	r7, [r1, #24]
 800a292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a294:	2f78      	cmp	r7, #120	; 0x78
 800a296:	4691      	mov	r9, r2
 800a298:	4680      	mov	r8, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	469a      	mov	sl, r3
 800a29e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2a2:	d807      	bhi.n	800a2b4 <_printf_i+0x28>
 800a2a4:	2f62      	cmp	r7, #98	; 0x62
 800a2a6:	d80a      	bhi.n	800a2be <_printf_i+0x32>
 800a2a8:	2f00      	cmp	r7, #0
 800a2aa:	f000 80d8 	beq.w	800a45e <_printf_i+0x1d2>
 800a2ae:	2f58      	cmp	r7, #88	; 0x58
 800a2b0:	f000 80a3 	beq.w	800a3fa <_printf_i+0x16e>
 800a2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2bc:	e03a      	b.n	800a334 <_printf_i+0xa8>
 800a2be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2c2:	2b15      	cmp	r3, #21
 800a2c4:	d8f6      	bhi.n	800a2b4 <_printf_i+0x28>
 800a2c6:	a101      	add	r1, pc, #4	; (adr r1, 800a2cc <_printf_i+0x40>)
 800a2c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2cc:	0800a325 	.word	0x0800a325
 800a2d0:	0800a339 	.word	0x0800a339
 800a2d4:	0800a2b5 	.word	0x0800a2b5
 800a2d8:	0800a2b5 	.word	0x0800a2b5
 800a2dc:	0800a2b5 	.word	0x0800a2b5
 800a2e0:	0800a2b5 	.word	0x0800a2b5
 800a2e4:	0800a339 	.word	0x0800a339
 800a2e8:	0800a2b5 	.word	0x0800a2b5
 800a2ec:	0800a2b5 	.word	0x0800a2b5
 800a2f0:	0800a2b5 	.word	0x0800a2b5
 800a2f4:	0800a2b5 	.word	0x0800a2b5
 800a2f8:	0800a445 	.word	0x0800a445
 800a2fc:	0800a369 	.word	0x0800a369
 800a300:	0800a427 	.word	0x0800a427
 800a304:	0800a2b5 	.word	0x0800a2b5
 800a308:	0800a2b5 	.word	0x0800a2b5
 800a30c:	0800a467 	.word	0x0800a467
 800a310:	0800a2b5 	.word	0x0800a2b5
 800a314:	0800a369 	.word	0x0800a369
 800a318:	0800a2b5 	.word	0x0800a2b5
 800a31c:	0800a2b5 	.word	0x0800a2b5
 800a320:	0800a42f 	.word	0x0800a42f
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	1d1a      	adds	r2, r3, #4
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	602a      	str	r2, [r5, #0]
 800a32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a334:	2301      	movs	r3, #1
 800a336:	e0a3      	b.n	800a480 <_printf_i+0x1f4>
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	6829      	ldr	r1, [r5, #0]
 800a33c:	0606      	lsls	r6, r0, #24
 800a33e:	f101 0304 	add.w	r3, r1, #4
 800a342:	d50a      	bpl.n	800a35a <_printf_i+0xce>
 800a344:	680e      	ldr	r6, [r1, #0]
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	2e00      	cmp	r6, #0
 800a34a:	da03      	bge.n	800a354 <_printf_i+0xc8>
 800a34c:	232d      	movs	r3, #45	; 0x2d
 800a34e:	4276      	negs	r6, r6
 800a350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a354:	485e      	ldr	r0, [pc, #376]	; (800a4d0 <_printf_i+0x244>)
 800a356:	230a      	movs	r3, #10
 800a358:	e019      	b.n	800a38e <_printf_i+0x102>
 800a35a:	680e      	ldr	r6, [r1, #0]
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a362:	bf18      	it	ne
 800a364:	b236      	sxthne	r6, r6
 800a366:	e7ef      	b.n	800a348 <_printf_i+0xbc>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	1d19      	adds	r1, r3, #4
 800a36e:	6029      	str	r1, [r5, #0]
 800a370:	0601      	lsls	r1, r0, #24
 800a372:	d501      	bpl.n	800a378 <_printf_i+0xec>
 800a374:	681e      	ldr	r6, [r3, #0]
 800a376:	e002      	b.n	800a37e <_printf_i+0xf2>
 800a378:	0646      	lsls	r6, r0, #25
 800a37a:	d5fb      	bpl.n	800a374 <_printf_i+0xe8>
 800a37c:	881e      	ldrh	r6, [r3, #0]
 800a37e:	4854      	ldr	r0, [pc, #336]	; (800a4d0 <_printf_i+0x244>)
 800a380:	2f6f      	cmp	r7, #111	; 0x6f
 800a382:	bf0c      	ite	eq
 800a384:	2308      	moveq	r3, #8
 800a386:	230a      	movne	r3, #10
 800a388:	2100      	movs	r1, #0
 800a38a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a38e:	6865      	ldr	r5, [r4, #4]
 800a390:	60a5      	str	r5, [r4, #8]
 800a392:	2d00      	cmp	r5, #0
 800a394:	bfa2      	ittt	ge
 800a396:	6821      	ldrge	r1, [r4, #0]
 800a398:	f021 0104 	bicge.w	r1, r1, #4
 800a39c:	6021      	strge	r1, [r4, #0]
 800a39e:	b90e      	cbnz	r6, 800a3a4 <_printf_i+0x118>
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	d04d      	beq.n	800a440 <_printf_i+0x1b4>
 800a3a4:	4615      	mov	r5, r2
 800a3a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3aa:	fb03 6711 	mls	r7, r3, r1, r6
 800a3ae:	5dc7      	ldrb	r7, [r0, r7]
 800a3b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3b4:	4637      	mov	r7, r6
 800a3b6:	42bb      	cmp	r3, r7
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	d9f4      	bls.n	800a3a6 <_printf_i+0x11a>
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d10b      	bne.n	800a3d8 <_printf_i+0x14c>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	07de      	lsls	r6, r3, #31
 800a3c4:	d508      	bpl.n	800a3d8 <_printf_i+0x14c>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	4299      	cmp	r1, r3
 800a3cc:	bfde      	ittt	le
 800a3ce:	2330      	movle	r3, #48	; 0x30
 800a3d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3d8:	1b52      	subs	r2, r2, r5
 800a3da:	6122      	str	r2, [r4, #16]
 800a3dc:	f8cd a000 	str.w	sl, [sp]
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	aa03      	add	r2, sp, #12
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	f7ff fee2 	bl	800a1b0 <_printf_common>
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d14c      	bne.n	800a48a <_printf_i+0x1fe>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	b004      	add	sp, #16
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	4835      	ldr	r0, [pc, #212]	; (800a4d0 <_printf_i+0x244>)
 800a3fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a400:	6829      	ldr	r1, [r5, #0]
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	f851 6b04 	ldr.w	r6, [r1], #4
 800a408:	6029      	str	r1, [r5, #0]
 800a40a:	061d      	lsls	r5, r3, #24
 800a40c:	d514      	bpl.n	800a438 <_printf_i+0x1ac>
 800a40e:	07df      	lsls	r7, r3, #31
 800a410:	bf44      	itt	mi
 800a412:	f043 0320 	orrmi.w	r3, r3, #32
 800a416:	6023      	strmi	r3, [r4, #0]
 800a418:	b91e      	cbnz	r6, 800a422 <_printf_i+0x196>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	f023 0320 	bic.w	r3, r3, #32
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	2310      	movs	r3, #16
 800a424:	e7b0      	b.n	800a388 <_printf_i+0xfc>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f043 0320 	orr.w	r3, r3, #32
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	2378      	movs	r3, #120	; 0x78
 800a430:	4828      	ldr	r0, [pc, #160]	; (800a4d4 <_printf_i+0x248>)
 800a432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a436:	e7e3      	b.n	800a400 <_printf_i+0x174>
 800a438:	0659      	lsls	r1, r3, #25
 800a43a:	bf48      	it	mi
 800a43c:	b2b6      	uxthmi	r6, r6
 800a43e:	e7e6      	b.n	800a40e <_printf_i+0x182>
 800a440:	4615      	mov	r5, r2
 800a442:	e7bb      	b.n	800a3bc <_printf_i+0x130>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	6826      	ldr	r6, [r4, #0]
 800a448:	6961      	ldr	r1, [r4, #20]
 800a44a:	1d18      	adds	r0, r3, #4
 800a44c:	6028      	str	r0, [r5, #0]
 800a44e:	0635      	lsls	r5, r6, #24
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	d501      	bpl.n	800a458 <_printf_i+0x1cc>
 800a454:	6019      	str	r1, [r3, #0]
 800a456:	e002      	b.n	800a45e <_printf_i+0x1d2>
 800a458:	0670      	lsls	r0, r6, #25
 800a45a:	d5fb      	bpl.n	800a454 <_printf_i+0x1c8>
 800a45c:	8019      	strh	r1, [r3, #0]
 800a45e:	2300      	movs	r3, #0
 800a460:	6123      	str	r3, [r4, #16]
 800a462:	4615      	mov	r5, r2
 800a464:	e7ba      	b.n	800a3dc <_printf_i+0x150>
 800a466:	682b      	ldr	r3, [r5, #0]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	681d      	ldr	r5, [r3, #0]
 800a46e:	6862      	ldr	r2, [r4, #4]
 800a470:	2100      	movs	r1, #0
 800a472:	4628      	mov	r0, r5
 800a474:	f7f5 feb4 	bl	80001e0 <memchr>
 800a478:	b108      	cbz	r0, 800a47e <_printf_i+0x1f2>
 800a47a:	1b40      	subs	r0, r0, r5
 800a47c:	6060      	str	r0, [r4, #4]
 800a47e:	6863      	ldr	r3, [r4, #4]
 800a480:	6123      	str	r3, [r4, #16]
 800a482:	2300      	movs	r3, #0
 800a484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a488:	e7a8      	b.n	800a3dc <_printf_i+0x150>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4649      	mov	r1, r9
 800a490:	4640      	mov	r0, r8
 800a492:	47d0      	blx	sl
 800a494:	3001      	adds	r0, #1
 800a496:	d0ab      	beq.n	800a3f0 <_printf_i+0x164>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	079b      	lsls	r3, r3, #30
 800a49c:	d413      	bmi.n	800a4c6 <_printf_i+0x23a>
 800a49e:	68e0      	ldr	r0, [r4, #12]
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	4298      	cmp	r0, r3
 800a4a4:	bfb8      	it	lt
 800a4a6:	4618      	movlt	r0, r3
 800a4a8:	e7a4      	b.n	800a3f4 <_printf_i+0x168>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	47d0      	blx	sl
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d09b      	beq.n	800a3f0 <_printf_i+0x164>
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	9903      	ldr	r1, [sp, #12]
 800a4be:	1a5b      	subs	r3, r3, r1
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dcf2      	bgt.n	800a4aa <_printf_i+0x21e>
 800a4c4:	e7eb      	b.n	800a49e <_printf_i+0x212>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	f104 0619 	add.w	r6, r4, #25
 800a4cc:	e7f5      	b.n	800a4ba <_printf_i+0x22e>
 800a4ce:	bf00      	nop
 800a4d0:	0800a6bd 	.word	0x0800a6bd
 800a4d4:	0800a6ce 	.word	0x0800a6ce

0800a4d8 <__retarget_lock_acquire_recursive>:
 800a4d8:	4770      	bx	lr

0800a4da <__retarget_lock_release_recursive>:
 800a4da:	4770      	bx	lr

0800a4dc <memcpy>:
 800a4dc:	440a      	add	r2, r1
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4e4:	d100      	bne.n	800a4e8 <memcpy+0xc>
 800a4e6:	4770      	bx	lr
 800a4e8:	b510      	push	{r4, lr}
 800a4ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	d1f9      	bne.n	800a4ea <memcpy+0xe>
 800a4f6:	bd10      	pop	{r4, pc}

0800a4f8 <memmove>:
 800a4f8:	4288      	cmp	r0, r1
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	eb01 0402 	add.w	r4, r1, r2
 800a500:	d902      	bls.n	800a508 <memmove+0x10>
 800a502:	4284      	cmp	r4, r0
 800a504:	4623      	mov	r3, r4
 800a506:	d807      	bhi.n	800a518 <memmove+0x20>
 800a508:	1e43      	subs	r3, r0, #1
 800a50a:	42a1      	cmp	r1, r4
 800a50c:	d008      	beq.n	800a520 <memmove+0x28>
 800a50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a512:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a516:	e7f8      	b.n	800a50a <memmove+0x12>
 800a518:	4402      	add	r2, r0
 800a51a:	4601      	mov	r1, r0
 800a51c:	428a      	cmp	r2, r1
 800a51e:	d100      	bne.n	800a522 <memmove+0x2a>
 800a520:	bd10      	pop	{r4, pc}
 800a522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a52a:	e7f7      	b.n	800a51c <memmove+0x24>

0800a52c <_realloc_r>:
 800a52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a530:	4680      	mov	r8, r0
 800a532:	4614      	mov	r4, r2
 800a534:	460e      	mov	r6, r1
 800a536:	b921      	cbnz	r1, 800a542 <_realloc_r+0x16>
 800a538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	4611      	mov	r1, r2
 800a53e:	f7ff bc2b 	b.w	8009d98 <_malloc_r>
 800a542:	b92a      	cbnz	r2, 800a550 <_realloc_r+0x24>
 800a544:	f7ff fbbc 	bl	8009cc0 <_free_r>
 800a548:	4625      	mov	r5, r4
 800a54a:	4628      	mov	r0, r5
 800a54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a550:	f000 f81b 	bl	800a58a <_malloc_usable_size_r>
 800a554:	4284      	cmp	r4, r0
 800a556:	4607      	mov	r7, r0
 800a558:	d802      	bhi.n	800a560 <_realloc_r+0x34>
 800a55a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a55e:	d812      	bhi.n	800a586 <_realloc_r+0x5a>
 800a560:	4621      	mov	r1, r4
 800a562:	4640      	mov	r0, r8
 800a564:	f7ff fc18 	bl	8009d98 <_malloc_r>
 800a568:	4605      	mov	r5, r0
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d0ed      	beq.n	800a54a <_realloc_r+0x1e>
 800a56e:	42bc      	cmp	r4, r7
 800a570:	4622      	mov	r2, r4
 800a572:	4631      	mov	r1, r6
 800a574:	bf28      	it	cs
 800a576:	463a      	movcs	r2, r7
 800a578:	f7ff ffb0 	bl	800a4dc <memcpy>
 800a57c:	4631      	mov	r1, r6
 800a57e:	4640      	mov	r0, r8
 800a580:	f7ff fb9e 	bl	8009cc0 <_free_r>
 800a584:	e7e1      	b.n	800a54a <_realloc_r+0x1e>
 800a586:	4635      	mov	r5, r6
 800a588:	e7df      	b.n	800a54a <_realloc_r+0x1e>

0800a58a <_malloc_usable_size_r>:
 800a58a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a58e:	1f18      	subs	r0, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	bfbc      	itt	lt
 800a594:	580b      	ldrlt	r3, [r1, r0]
 800a596:	18c0      	addlt	r0, r0, r3
 800a598:	4770      	bx	lr
	...

0800a59c <_init>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_fini>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr
