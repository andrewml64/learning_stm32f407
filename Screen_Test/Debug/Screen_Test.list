
Screen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000325c  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008378  08008378  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08008378  08008378  00018378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008380  08008380  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008380  08008380  00018380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08008388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000174  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000188  20000188  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108c3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002115  00000000  00000000  00030907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  00032a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d4b  00000000  00000000  000346d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108d1  00000000  00000000  00056423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfbb  00000000  00000000  00066cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134caf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e2c  00000000  00000000  00134d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005104 	.word	0x08005104

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005104 	.word	0x08005104

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80004dc:	b490      	push	{r4, r7}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4604      	mov	r4, r0
 80004e4:	4608      	mov	r0, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	461a      	mov	r2, r3
 80004ea:	4623      	mov	r3, r4
 80004ec:	80fb      	strh	r3, [r7, #6]
 80004ee:	4603      	mov	r3, r0
 80004f0:	80bb      	strh	r3, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	807b      	strh	r3, [r7, #2]
 80004f6:	4613      	mov	r3, r2
 80004f8:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80004fa:	4a17      	ldr	r2, [pc, #92]	; (8000558 <Paint_NewImage+0x7c>)
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <Paint_NewImage+0x7c>)
 8000502:	88bb      	ldrh	r3, [r7, #4]
 8000504:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <Paint_NewImage+0x7c>)
 8000508:	883b      	ldrh	r3, [r7, #0]
 800050a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <Paint_NewImage+0x7c>)
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <Paint_NewImage+0x7c>)
 8000514:	88bb      	ldrh	r3, [r7, #4]
 8000516:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
   
    Paint.Rotate = Rotate;
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <Paint_NewImage+0x7c>)
 800051a:	887b      	ldrh	r3, [r7, #2]
 800051c:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <Paint_NewImage+0x7c>)
 8000520:	2200      	movs	r2, #0
 8000522:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <Paint_NewImage+0x54>
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	2bb4      	cmp	r3, #180	; 0xb4
 800052e:	d106      	bne.n	800053e <Paint_NewImage+0x62>
        Paint.Width = Width;
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <Paint_NewImage+0x7c>)
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000536:	4a08      	ldr	r2, [pc, #32]	; (8000558 <Paint_NewImage+0x7c>)
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	80d3      	strh	r3, [r2, #6]
 800053c:	e006      	b.n	800054c <Paint_NewImage+0x70>
    } else {
        Paint.Width = Height;
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <Paint_NewImage+0x7c>)
 8000540:	88bb      	ldrh	r3, [r7, #4]
 8000542:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <Paint_NewImage+0x7c>)
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	80d3      	strh	r3, [r2, #6]
    }
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bc90      	pop	{r4, r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030

0800055c <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <Paint_SetClearFuntion+0x1c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000004c 	.word	0x2000004c

0800057c <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <Paint_SetDisplayFuntion+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000048 	.word	0x20000048

0800059c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	460b      	mov	r3, r1
 80005a8:	80bb      	strh	r3, [r7, #4]
 80005aa:	4613      	mov	r3, r2
 80005ac:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80005ae:	4b4f      	ldr	r3, [pc, #316]	; (80006ec <Paint_SetPixel+0x150>)
 80005b0:	889b      	ldrh	r3, [r3, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	88fa      	ldrh	r2, [r7, #6]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	f200 808d 	bhi.w	80006d6 <Paint_SetPixel+0x13a>
 80005bc:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <Paint_SetPixel+0x150>)
 80005be:	88db      	ldrh	r3, [r3, #6]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	88ba      	ldrh	r2, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	f200 8086 	bhi.w	80006d6 <Paint_SetPixel+0x13a>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80005ca:	4b48      	ldr	r3, [pc, #288]	; (80006ec <Paint_SetPixel+0x150>)
 80005cc:	89db      	ldrh	r3, [r3, #14]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80005d4:	d02c      	beq.n	8000630 <Paint_SetPixel+0x94>
 80005d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80005da:	dc7e      	bgt.n	80006da <Paint_SetPixel+0x13e>
 80005dc:	2bb4      	cmp	r3, #180	; 0xb4
 80005de:	d016      	beq.n	800060e <Paint_SetPixel+0x72>
 80005e0:	2bb4      	cmp	r3, #180	; 0xb4
 80005e2:	dc7a      	bgt.n	80006da <Paint_SetPixel+0x13e>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <Paint_SetPixel+0x52>
 80005e8:	2b5a      	cmp	r3, #90	; 0x5a
 80005ea:	d005      	beq.n	80005f8 <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80005ec:	e075      	b.n	80006da <Paint_SetPixel+0x13e>
        X = Xpoint;
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	81bb      	strh	r3, [r7, #12]
        break;
 80005f6:	e026      	b.n	8000646 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <Paint_SetPixel+0x150>)
 80005fa:	891b      	ldrh	r3, [r3, #8]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	b29b      	uxth	r3, r3
 8000604:	3b01      	subs	r3, #1
 8000606:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	81bb      	strh	r3, [r7, #12]
        break;
 800060c:	e01b      	b.n	8000646 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 800060e:	4b37      	ldr	r3, [pc, #220]	; (80006ec <Paint_SetPixel+0x150>)
 8000610:	891b      	ldrh	r3, [r3, #8]
 8000612:	b29a      	uxth	r2, r3
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	b29b      	uxth	r3, r3
 800061a:	3b01      	subs	r3, #1
 800061c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800061e:	4b33      	ldr	r3, [pc, #204]	; (80006ec <Paint_SetPixel+0x150>)
 8000620:	895b      	ldrh	r3, [r3, #10]
 8000622:	b29a      	uxth	r2, r3
 8000624:	88bb      	ldrh	r3, [r7, #4]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	b29b      	uxth	r3, r3
 800062a:	3b01      	subs	r3, #1
 800062c:	81bb      	strh	r3, [r7, #12]
        break;
 800062e:	e00a      	b.n	8000646 <Paint_SetPixel+0xaa>
        X = Ypoint;
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <Paint_SetPixel+0x150>)
 8000636:	895b      	ldrh	r3, [r3, #10]
 8000638:	b29a      	uxth	r2, r3
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	3b01      	subs	r3, #1
 8000642:	81bb      	strh	r3, [r7, #12]
        break;
 8000644:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <Paint_SetPixel+0x150>)
 8000648:	8a1b      	ldrh	r3, [r3, #16]
 800064a:	b29b      	uxth	r3, r3
 800064c:	2b03      	cmp	r3, #3
 800064e:	d846      	bhi.n	80006de <Paint_SetPixel+0x142>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <Paint_SetPixel+0xbc>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	080006af 	.word	0x080006af
 800065c:	08000669 	.word	0x08000669
 8000660:	0800067b 	.word	0x0800067b
 8000664:	0800068d 	.word	0x0800068d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <Paint_SetPixel+0x150>)
 800066a:	891b      	ldrh	r3, [r3, #8]
 800066c:	b29a      	uxth	r2, r3
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	3b01      	subs	r3, #1
 8000676:	81fb      	strh	r3, [r7, #14]
        break;
 8000678:	e01a      	b.n	80006b0 <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <Paint_SetPixel+0x150>)
 800067c:	895b      	ldrh	r3, [r3, #10]
 800067e:	b29a      	uxth	r2, r3
 8000680:	89bb      	ldrh	r3, [r7, #12]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	3b01      	subs	r3, #1
 8000688:	81bb      	strh	r3, [r7, #12]
        break;
 800068a:	e011      	b.n	80006b0 <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <Paint_SetPixel+0x150>)
 800068e:	891b      	ldrh	r3, [r3, #8]
 8000690:	b29a      	uxth	r2, r3
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29b      	uxth	r3, r3
 8000698:	3b01      	subs	r3, #1
 800069a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <Paint_SetPixel+0x150>)
 800069e:	895b      	ldrh	r3, [r3, #10]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	89bb      	ldrh	r3, [r7, #12]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	3b01      	subs	r3, #1
 80006aa:	81bb      	strh	r3, [r7, #12]
        break;
 80006ac:	e000      	b.n	80006b0 <Paint_SetPixel+0x114>
        break;
 80006ae:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <Paint_SetPixel+0x150>)
 80006b2:	891b      	ldrh	r3, [r3, #8]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	89fa      	ldrh	r2, [r7, #14]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d812      	bhi.n	80006e2 <Paint_SetPixel+0x146>
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <Paint_SetPixel+0x150>)
 80006be:	895b      	ldrh	r3, [r3, #10]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	89ba      	ldrh	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d80c      	bhi.n	80006e2 <Paint_SetPixel+0x146>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <Paint_SetPixel+0x154>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	89b9      	ldrh	r1, [r7, #12]
 80006d0:	89f8      	ldrh	r0, [r7, #14]
 80006d2:	4798      	blx	r3
 80006d4:	e006      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006d6:	bf00      	nop
 80006d8:	e004      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006da:	bf00      	nop
 80006dc:	e002      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006de:	bf00      	nop
 80006e0:	e000      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006e2:	bf00      	nop
}
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000030 	.word	0x20000030
 80006f0:	20000048 	.word	0x20000048

080006f4 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <Paint_Clear+0x1c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	4610      	mov	r0, r2
 8000706:	4798      	blx	r3
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000004c 	.word	0x2000004c

08000714 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4604      	mov	r4, r0
 800071c:	4608      	mov	r0, r1
 800071e:	4611      	mov	r1, r2
 8000720:	461a      	mov	r2, r3
 8000722:	4623      	mov	r3, r4
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	4603      	mov	r3, r0
 8000728:	80bb      	strh	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	807b      	strh	r3, [r7, #2]
 800072e:	4613      	mov	r3, r2
 8000730:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <Paint_DrawPoint+0x12c>)
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	b29b      	uxth	r3, r3
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	429a      	cmp	r2, r3
 800073c:	d87b      	bhi.n	8000836 <Paint_DrawPoint+0x122>
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <Paint_DrawPoint+0x12c>)
 8000740:	88db      	ldrh	r3, [r3, #6]
 8000742:	b29b      	uxth	r3, r3
 8000744:	88ba      	ldrh	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d875      	bhi.n	8000836 <Paint_DrawPoint+0x122>
        //Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 800074a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d144      	bne.n	80007dc <Paint_DrawPoint+0xc8>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8000752:	2300      	movs	r3, #0
 8000754:	81fb      	strh	r3, [r7, #14]
 8000756:	e039      	b.n	80007cc <Paint_DrawPoint+0xb8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000758:	2300      	movs	r3, #0
 800075a:	81bb      	strh	r3, [r7, #12]
 800075c:	e029      	b.n	80007b2 <Paint_DrawPoint+0x9e>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000764:	441a      	add	r2, r3
 8000766:	787b      	ldrb	r3, [r7, #1]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	db28      	blt.n	80007c0 <Paint_DrawPoint+0xac>
 800076e:	88ba      	ldrh	r2, [r7, #4]
 8000770:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000774:	441a      	add	r2, r3
 8000776:	787b      	ldrb	r3, [r7, #1]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	db20      	blt.n	80007c0 <Paint_DrawPoint+0xac>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800077e:	89fa      	ldrh	r2, [r7, #14]
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	4413      	add	r3, r2
 8000784:	b29a      	uxth	r2, r3
 8000786:	787b      	ldrb	r3, [r7, #1]
 8000788:	b29b      	uxth	r3, r3
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	b298      	uxth	r0, r3
 800078e:	89ba      	ldrh	r2, [r7, #12]
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	b29a      	uxth	r2, r3
 8000796:	787b      	ldrb	r3, [r7, #1]
 8000798:	b29b      	uxth	r3, r3
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f7ff fefb 	bl	800059c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80007a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	81bb      	strh	r3, [r7, #12]
 80007b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80007b6:	787b      	ldrb	r3, [r7, #1]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	3b01      	subs	r3, #1
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbce      	blt.n	800075e <Paint_DrawPoint+0x4a>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80007c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	81fb      	strh	r3, [r7, #14]
 80007cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007d0:	787b      	ldrb	r3, [r7, #1]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	3b01      	subs	r3, #1
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbbe      	blt.n	8000758 <Paint_DrawPoint+0x44>
 80007da:	e02d      	b.n	8000838 <Paint_DrawPoint+0x124>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	81fb      	strh	r3, [r7, #14]
 80007e0:	e023      	b.n	800082a <Paint_DrawPoint+0x116>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	81bb      	strh	r3, [r7, #12]
 80007e6:	e015      	b.n	8000814 <Paint_DrawPoint+0x100>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80007e8:	89fa      	ldrh	r2, [r7, #14]
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	4413      	add	r3, r2
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b298      	uxth	r0, r3
 80007f4:	89ba      	ldrh	r2, [r7, #12]
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b29b      	uxth	r3, r3
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	4619      	mov	r1, r3
 8000804:	f7ff feca 	bl	800059c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000808:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800080c:	b29b      	uxth	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	81bb      	strh	r3, [r7, #12]
 8000814:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe4      	blt.n	80007e8 <Paint_DrawPoint+0xd4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800081e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000822:	b29b      	uxth	r3, r3
 8000824:	3301      	adds	r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800082e:	787b      	ldrb	r3, [r7, #1]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbd6      	blt.n	80007e2 <Paint_DrawPoint+0xce>
 8000834:	e000      	b.n	8000838 <Paint_DrawPoint+0x124>
        return;
 8000836:	bf00      	nop
            }
        }
    }
}
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	20000030 	.word	0x20000030

08000844 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08d      	sub	sp, #52	; 0x34
 8000848:	af02      	add	r7, sp, #8
 800084a:	4604      	mov	r4, r0
 800084c:	4608      	mov	r0, r1
 800084e:	4611      	mov	r1, r2
 8000850:	461a      	mov	r2, r3
 8000852:	4623      	mov	r3, r4
 8000854:	80fb      	strh	r3, [r7, #6]
 8000856:	4603      	mov	r3, r0
 8000858:	80bb      	strh	r3, [r7, #4]
 800085a:	460b      	mov	r3, r1
 800085c:	807b      	strh	r3, [r7, #2]
 800085e:	4613      	mov	r3, r2
 8000860:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <Paint_DrawLine+0x154>)
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	b29b      	uxth	r3, r3
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	429a      	cmp	r2, r3
 800086c:	f200 808c 	bhi.w	8000988 <Paint_DrawLine+0x144>
 8000870:	4b49      	ldr	r3, [pc, #292]	; (8000998 <Paint_DrawLine+0x154>)
 8000872:	88db      	ldrh	r3, [r3, #6]
 8000874:	b29b      	uxth	r3, r3
 8000876:	88ba      	ldrh	r2, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	f200 8085 	bhi.w	8000988 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <Paint_DrawLine+0x154>)
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000884:	887a      	ldrh	r2, [r7, #2]
 8000886:	429a      	cmp	r2, r3
 8000888:	d87e      	bhi.n	8000988 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <Paint_DrawLine+0x154>)
 800088c:	88db      	ldrh	r3, [r3, #6]
 800088e:	b29b      	uxth	r3, r3
 8000890:	883a      	ldrh	r2, [r7, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d878      	bhi.n	8000988 <Paint_DrawLine+0x144>
        //Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bfb8      	it	lt
 80008a8:	425b      	neglt	r3, r3
 80008aa:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80008ac:	883a      	ldrh	r2, [r7, #0]
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bfb8      	it	lt
 80008b6:	425b      	neglt	r3, r3
 80008b8:	425b      	negs	r3, r3
 80008ba:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d201      	bcs.n	80008c8 <Paint_DrawLine+0x84>
 80008c4:	2301      	movs	r3, #1
 80008c6:	e001      	b.n	80008cc <Paint_DrawLine+0x88>
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80008ce:	88ba      	ldrh	r2, [r7, #4]
 80008d0:	883b      	ldrh	r3, [r7, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d201      	bcs.n	80008da <Paint_DrawLine+0x96>
 80008d6:	2301      	movs	r3, #1
 80008d8:	e001      	b.n	80008de <Paint_DrawLine+0x9a>
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	4413      	add	r3, r2
 80008e6:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80008ec:	7ffb      	ldrb	r3, [r7, #31]
 80008ee:	3301      	adds	r3, #1
 80008f0:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80008f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d118      	bne.n	800092c <Paint_DrawLine+0xe8>
 80008fa:	7ffa      	ldrb	r2, [r7, #31]
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <Paint_DrawLine+0x158>)
 80008fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000902:	0859      	lsrs	r1, r3, #1
 8000904:	460b      	mov	r3, r1
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	440b      	add	r3, r1
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10c      	bne.n	800092c <Paint_DrawLine+0xe8>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8000912:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000916:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000918:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800091a:	2201      	movs	r2, #1
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	f7ff fef7 	bl	8000714 <Paint_DrawPoint>
            Dotted_Len = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	77fb      	strb	r3, [r7, #31]
 800092a:	e008      	b.n	800093e <Paint_DrawLine+0xfa>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800092c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000930:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000932:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000934:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000936:	2401      	movs	r4, #1
 8000938:	9400      	str	r4, [sp, #0]
 800093a:	f7ff feeb 	bl	8000714 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	dc0c      	bgt.n	8000962 <Paint_DrawLine+0x11e>
            if (Xpoint == Xend)
 8000948:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	429a      	cmp	r2, r3
 800094e:	d01d      	beq.n	800098c <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8000950:	6a3a      	ldr	r2, [r7, #32]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	4413      	add	r3, r2
 8000956:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	b29a      	uxth	r2, r3
 800095c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800095e:	4413      	add	r3, r2
 8000960:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbbf      	blt.n	80008ec <Paint_DrawLine+0xa8>
            if (Ypoint == Yend)
 800096c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800096e:	883b      	ldrh	r3, [r7, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d00d      	beq.n	8000990 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8000974:	6a3a      	ldr	r2, [r7, #32]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	4413      	add	r3, r2
 800097a:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b29a      	uxth	r2, r3
 8000980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000982:	4413      	add	r3, r2
 8000984:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8000986:	e7b1      	b.n	80008ec <Paint_DrawLine+0xa8>
        return;
 8000988:	bf00      	nop
 800098a:	e002      	b.n	8000992 <Paint_DrawLine+0x14e>
                break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <Paint_DrawLine+0x14e>
                break;
 8000990:	bf00      	nop
        }
    }
}
 8000992:	372c      	adds	r7, #44	; 0x2c
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000030 	.word	0x20000030
 800099c:	aaaaaaab 	.word	0xaaaaaaab

080009a0 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80009be:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <Paint_DrawCircle+0x1bc>)
 80009c0:	889b      	ldrh	r3, [r3, #4]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	88fa      	ldrh	r2, [r7, #6]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	f200 8172 	bhi.w	8000cb0 <Paint_DrawCircle+0x310>
 80009cc:	4b63      	ldr	r3, [pc, #396]	; (8000b5c <Paint_DrawCircle+0x1bc>)
 80009ce:	88db      	ldrh	r3, [r3, #6]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f080 816b 	bcs.w	8000cb0 <Paint_DrawCircle+0x310>
        return;
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f1c3 0303 	rsb	r3, r3, #3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80009f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	f040 8153 	bne.w	8000ca0 <Paint_DrawCircle+0x300>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80009fa:	e0a6      	b.n	8000b4a <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	813b      	strh	r3, [r7, #8]
 8000a00:	e075      	b.n	8000aee <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8000a02:	89fa      	ldrh	r2, [r7, #14]
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	4413      	add	r3, r2
 8000a08:	b298      	uxth	r0, r3
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b299      	uxth	r1, r3
 8000a12:	883a      	ldrh	r2, [r7, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f7ff fe7b 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b298      	uxth	r0, r3
 8000a26:	893a      	ldrh	r2, [r7, #8]
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b299      	uxth	r1, r3
 8000a2e:	883a      	ldrh	r2, [r7, #0]
 8000a30:	2301      	movs	r3, #1
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	f7ff fe6d 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	88fa      	ldrh	r2, [r7, #6]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	b298      	uxth	r0, r3
 8000a42:	89fa      	ldrh	r2, [r7, #14]
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	883a      	ldrh	r2, [r7, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	f7ff fe5f 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8000a56:	893b      	ldrh	r3, [r7, #8]
 8000a58:	88fa      	ldrh	r2, [r7, #6]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b298      	uxth	r0, r3
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	88ba      	ldrh	r2, [r7, #4]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	b299      	uxth	r1, r3
 8000a66:	883a      	ldrh	r2, [r7, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f7ff fe51 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b298      	uxth	r0, r3
 8000a7a:	893b      	ldrh	r3, [r7, #8]
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b299      	uxth	r1, r3
 8000a82:	883a      	ldrh	r2, [r7, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f7ff fe43 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8000a8e:	89fa      	ldrh	r2, [r7, #14]
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4413      	add	r3, r2
 8000a94:	b298      	uxth	r0, r3
 8000a96:	893b      	ldrh	r3, [r7, #8]
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	883a      	ldrh	r2, [r7, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f7ff fe35 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8000aaa:	893a      	ldrh	r2, [r7, #8]
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b298      	uxth	r0, r3
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	88ba      	ldrh	r2, [r7, #4]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	b299      	uxth	r1, r3
 8000aba:	883a      	ldrh	r2, [r7, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f7ff fe27 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8000ac6:	893a      	ldrh	r2, [r7, #8]
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	4413      	add	r3, r2
 8000acc:	b298      	uxth	r0, r3
 8000ace:	89fa      	ldrh	r2, [r7, #14]
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	883a      	ldrh	r2, [r7, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	f7ff fe19 	bl	8000714 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8000ae2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	813b      	strh	r3, [r7, #8]
 8000aee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000af2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dd83      	ble.n	8000a02 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8000afa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da09      	bge.n	8000b16 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	3306      	adds	r3, #6
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	817b      	strh	r3, [r7, #10]
 8000b14:	e013      	b.n	8000b3e <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000b16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	897b      	ldrh	r3, [r7, #10]
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	330a      	adds	r3, #10
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8000b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8000b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8000b4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f77f af52 	ble.w	80009fc <Paint_DrawCircle+0x5c>
 8000b58:	e0ab      	b.n	8000cb2 <Paint_DrawCircle+0x312>
 8000b5a:	bf00      	nop
 8000b5c:	20000030 	.word	0x20000030
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8000b60:	89fa      	ldrh	r2, [r7, #14]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4413      	add	r3, r2
 8000b66:	b298      	uxth	r0, r3
 8000b68:	89ba      	ldrh	r2, [r7, #12]
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b74:	883a      	ldrh	r2, [r7, #0]
 8000b76:	2401      	movs	r4, #1
 8000b78:	9400      	str	r4, [sp, #0]
 8000b7a:	f7ff fdcb 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b298      	uxth	r0, r3
 8000b86:	89ba      	ldrh	r2, [r7, #12]
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b92:	883a      	ldrh	r2, [r7, #0]
 8000b94:	2401      	movs	r4, #1
 8000b96:	9400      	str	r4, [sp, #0]
 8000b98:	f7ff fdbc 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8000b9c:	89bb      	ldrh	r3, [r7, #12]
 8000b9e:	88fa      	ldrh	r2, [r7, #6]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	89fa      	ldrh	r2, [r7, #14]
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b299      	uxth	r1, r3
 8000bac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb0:	883a      	ldrh	r2, [r7, #0]
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	9400      	str	r4, [sp, #0]
 8000bb6:	f7ff fdad 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8000bba:	89bb      	ldrh	r3, [r7, #12]
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	b299      	uxth	r1, r3
 8000bca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	2401      	movs	r4, #1
 8000bd2:	9400      	str	r4, [sp, #0]
 8000bd4:	f7ff fd9e 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	88fa      	ldrh	r2, [r7, #6]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	b298      	uxth	r0, r3
 8000be0:	89bb      	ldrh	r3, [r7, #12]
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	b299      	uxth	r1, r3
 8000be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bec:	883a      	ldrh	r2, [r7, #0]
 8000bee:	2401      	movs	r4, #1
 8000bf0:	9400      	str	r4, [sp, #0]
 8000bf2:	f7ff fd8f 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8000bf6:	89fa      	ldrh	r2, [r7, #14]
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	89bb      	ldrh	r3, [r7, #12]
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	b299      	uxth	r1, r3
 8000c06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c0a:	883a      	ldrh	r2, [r7, #0]
 8000c0c:	2401      	movs	r4, #1
 8000c0e:	9400      	str	r4, [sp, #0]
 8000c10:	f7ff fd80 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8000c14:	89ba      	ldrh	r2, [r7, #12]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	88ba      	ldrh	r2, [r7, #4]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b299      	uxth	r1, r3
 8000c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c28:	883a      	ldrh	r2, [r7, #0]
 8000c2a:	2401      	movs	r4, #1
 8000c2c:	9400      	str	r4, [sp, #0]
 8000c2e:	f7ff fd71 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8000c32:	89ba      	ldrh	r2, [r7, #12]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4413      	add	r3, r2
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	89fa      	ldrh	r2, [r7, #14]
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b299      	uxth	r1, r3
 8000c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	2401      	movs	r4, #1
 8000c4a:	9400      	str	r4, [sp, #0]
 8000c4c:	f7ff fd62 	bl	8000714 <Paint_DrawPoint>

            if (Esp < 0 )
 8000c50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da09      	bge.n	8000c6c <Paint_DrawCircle+0x2cc>
                Esp += 4 * XCurrent + 6;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	897b      	ldrh	r3, [r7, #10]
 8000c60:	4413      	add	r3, r2
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	3306      	adds	r3, #6
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	817b      	strh	r3, [r7, #10]
 8000c6a:	e013      	b.n	8000c94 <Paint_DrawCircle+0x2f4>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000c6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	897b      	ldrh	r3, [r7, #10]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	330a      	adds	r3, #10
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8000c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8000c94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8000ca0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ca4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f77f af59 	ble.w	8000b60 <Paint_DrawCircle+0x1c0>
 8000cae:	e000      	b.n	8000cb2 <Paint_DrawCircle+0x312>
        return;
 8000cb0:	bf00      	nop
        }
    }
}
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}

08000cb8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	81fb      	strh	r3, [r7, #14]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	81bb      	strh	r3, [r7, #12]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <Paint_DrawChar+0x150>)
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	89fa      	ldrh	r2, [r7, #14]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f200 8092 	bhi.w	8000dfe <Paint_DrawChar+0x146>
 8000cda:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <Paint_DrawChar+0x150>)
 8000cdc:	88db      	ldrh	r3, [r3, #6]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	89ba      	ldrh	r2, [r7, #12]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	f200 808b 	bhi.w	8000dfe <Paint_DrawChar+0x146>
        //Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	3b20      	subs	r3, #32
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	88d2      	ldrh	r2, [r2, #6]
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	8892      	ldrh	r2, [r2, #4]
 8000cf8:	08d2      	lsrs	r2, r2, #3
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	8892      	ldrh	r2, [r2, #4]
 8000d02:	f002 0207 	and.w	r2, r2, #7
 8000d06:	b292      	uxth	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	bf14      	ite	ne
 8000d0c:	2201      	movne	r2, #1
 8000d0e:	2200      	moveq	r2, #0
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440a      	add	r2, r1
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4413      	add	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	83fb      	strh	r3, [r7, #30]
 8000d28:	e063      	b.n	8000df2 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	83bb      	strh	r3, [r7, #28]
 8000d2e:	e04e      	b.n	8000dce <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000d30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d118      	bne.n	8000d6c <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	8bbb      	ldrh	r3, [r7, #28]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	fa42 f303 	asr.w	r3, r2, r3
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d031      	beq.n	8000db6 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000d52:	89fa      	ldrh	r2, [r7, #14]
 8000d54:	8bbb      	ldrh	r3, [r7, #28]
 8000d56:	4413      	add	r3, r2
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	8bfb      	ldrh	r3, [r7, #30]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fc19 	bl	800059c <Paint_SetPixel>
 8000d6a:	e024      	b.n	8000db6 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	8bbb      	ldrh	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	fa42 f303 	asr.w	r3, r2, r3
 8000d7e:	400b      	ands	r3, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00c      	beq.n	8000d9e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000d84:	89fa      	ldrh	r2, [r7, #14]
 8000d86:	8bbb      	ldrh	r3, [r7, #28]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b298      	uxth	r0, r3
 8000d8c:	89ba      	ldrh	r2, [r7, #12]
 8000d8e:	8bfb      	ldrh	r3, [r7, #30]
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff fc00 	bl	800059c <Paint_SetPixel>
 8000d9c:	e00b      	b.n	8000db6 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	8bbb      	ldrh	r3, [r7, #28]
 8000da2:	4413      	add	r3, r2
 8000da4:	b298      	uxth	r0, r3
 8000da6:	89ba      	ldrh	r2, [r7, #12]
 8000da8:	8bfb      	ldrh	r3, [r7, #30]
 8000daa:	4413      	add	r3, r2
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff fbf3 	bl	800059c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000db6:	8bbb      	ldrh	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	d102      	bne.n	8000dc8 <Paint_DrawChar+0x110>
                ptr++;
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000dc8:	8bbb      	ldrh	r3, [r7, #28]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	83bb      	strh	r3, [r7, #28]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	889b      	ldrh	r3, [r3, #4]
 8000dd2:	8bba      	ldrh	r2, [r7, #28]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3ab      	bcc.n	8000d30 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	889b      	ldrh	r3, [r3, #4]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <Paint_DrawChar+0x134>
            ptr++;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000dec:	8bfb      	ldrh	r3, [r7, #30]
 8000dee:	3301      	adds	r3, #1
 8000df0:	83fb      	strh	r3, [r7, #30]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	88db      	ldrh	r3, [r3, #6]
 8000df6:	8bfa      	ldrh	r2, [r7, #30]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d396      	bcc.n	8000d2a <Paint_DrawChar+0x72>
 8000dfc:	e000      	b.n	8000e00 <Paint_DrawChar+0x148>
        return;
 8000dfe:	bf00      	nop
    }// Write all
}
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000030 	.word	0x20000030

08000e0c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	60ba      	str	r2, [r7, #8]
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4603      	mov	r3, r0
 8000e18:	81fb      	strh	r3, [r7, #14]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e28:	889b      	ldrh	r3, [r3, #4]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	89fa      	ldrh	r2, [r7, #14]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d83b      	bhi.n	8000eaa <Paint_DrawString_EN+0x9e>
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e34:	88db      	ldrh	r3, [r3, #6]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	89ba      	ldrh	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d835      	bhi.n	8000eaa <Paint_DrawString_EN+0x9e>
        //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8000e3e:	e02f      	b.n	8000ea0 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000e40:	8afb      	ldrh	r3, [r7, #22]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	8892      	ldrh	r2, [r2, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e4a:	8892      	ldrh	r2, [r2, #4]
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	dd06      	ble.n	8000e60 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	88da      	ldrh	r2, [r3, #6]
 8000e5a:	8abb      	ldrh	r3, [r7, #20]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000e60:	8abb      	ldrh	r3, [r7, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	88d2      	ldrh	r2, [r2, #6]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e6a:	88d2      	ldrh	r2, [r2, #6]
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	dd03      	ble.n	8000e7a <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	8ab9      	ldrh	r1, [r7, #20]
 8000e80:	8af8      	ldrh	r0, [r7, #22]
 8000e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	8c3b      	ldrh	r3, [r7, #32]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f7ff ff14 	bl	8000cb8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3301      	adds	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	889a      	ldrh	r2, [r3, #4]
 8000e9a:	8afb      	ldrh	r3, [r7, #22]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1cb      	bne.n	8000e40 <Paint_DrawString_EN+0x34>
 8000ea8:	e000      	b.n	8000eac <Paint_DrawString_EN+0xa0>
        return;
 8000eaa:	bf00      	nop
    }
}
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000030 	.word	0x20000030

08000eb8 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	817b      	strh	r3, [r7, #10]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	813b      	strh	r3, [r7, #8]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	e049      	b.n	8000f6c <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e03f      	b.n	8000f5e <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8000ede:	897a      	ldrh	r2, [r7, #10]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <Paint_DrawImage+0xc8>)
 8000ee6:	8912      	ldrh	r2, [r2, #8]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	da34      	bge.n	8000f58 <Paint_DrawImage+0xa0>
 8000eee:	893a      	ldrh	r2, [r7, #8]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <Paint_DrawImage+0xc8>)
 8000ef6:	8952      	ldrh	r2, [r2, #10]
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	4293      	cmp	r3, r2
 8000efc:	da2c      	bge.n	8000f58 <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	897b      	ldrh	r3, [r7, #10]
 8000f04:	4413      	add	r3, r2
 8000f06:	b298      	uxth	r0, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	893b      	ldrh	r3, [r7, #8]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29c      	uxth	r4, r3
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	3301      	adds	r3, #1
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	fb01 f303 	mul.w	r3, r1, r3
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	440b      	add	r3, r1
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	440b      	add	r3, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	4621      	mov	r1, r4
 8000f54:	f7ff fb22 	bl	800059c <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dbbb      	blt.n	8000ede <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbb1      	blt.n	8000ed8 <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000030 	.word	0x20000030

08000f84 <Module_Init>:
/******************************************************************************
function :	Start hardware
parameter:
******************************************************************************/
int Module_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <Module_Init+0x34>)
 8000f8e:	f001 fcb5 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2110      	movs	r1, #16
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <Module_Init+0x38>)
 8000f98:	f001 fcb0 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <Module_Init+0x38>)
 8000fa2:	f001 fcab 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <Module_Init+0x34>)
 8000fac:	f001 fca6 	bl	80028fc <HAL_GPIO_WritePin>
	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <LCD_1IN28_Reset+0x38>)
 8000fca:	f001 fc97 	bl	80028fc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000fce:	2064      	movs	r0, #100	; 0x64
 8000fd0:	f001 f9c2 	bl	8002358 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <LCD_1IN28_Reset+0x38>)
 8000fda:	f001 fc8f 	bl	80028fc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000fde:	2064      	movs	r0, #100	; 0x64
 8000fe0:	f001 f9ba 	bl	8002358 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <LCD_1IN28_Reset+0x38>)
 8000fea:	f001 fc87 	bl	80028fc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f001 f9b2 	bl	8002358 <HAL_Delay>
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020400 	.word	0x40020400

08000ffc <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2120      	movs	r1, #32
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <LCD_1IN28_SendCommand+0x40>)
 800100c:	f001 fc76 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2110      	movs	r1, #16
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <LCD_1IN28_SendCommand+0x40>)
 8001016:	f001 fc71 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Reg, 1, 500);
 800101a:	1df9      	adds	r1, r7, #7
 800101c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001020:	2201      	movs	r2, #1
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <LCD_1IN28_SendCommand+0x44>)
 8001024:	f002 f9bd 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	4803      	ldr	r0, [pc, #12]	; (800103c <LCD_1IN28_SendCommand+0x40>)
 800102e:	f001 fc65 	bl	80028fc <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020800 	.word	0x40020800
 8001040:	20000058 	.word	0x20000058

08001044 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2120      	movs	r1, #32
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <LCD_1IN28_SendData_8Bit+0x40>)
 8001054:	f001 fc52 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2110      	movs	r1, #16
 800105c:	4809      	ldr	r0, [pc, #36]	; (8001084 <LCD_1IN28_SendData_8Bit+0x40>)
 800105e:	f001 fc4d 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 8001062:	1df9      	adds	r1, r7, #7
 8001064:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001068:	2201      	movs	r2, #1
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <LCD_1IN28_SendData_8Bit+0x44>)
 800106c:	f002 f999 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2110      	movs	r1, #16
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <LCD_1IN28_SendData_8Bit+0x40>)
 8001076:	f001 fc41 	bl	80028fc <HAL_GPIO_WritePin>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40020800 	.word	0x40020800
 8001088:	20000058 	.word	0x20000058

0800108c <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
	uint8_t data1 = Data >> 8;
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	2120      	movs	r1, #32
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <LCD_1IN28_SendData_16Bit+0x58>)
 80010a6:	f001 fc29 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2110      	movs	r1, #16
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LCD_1IN28_SendData_16Bit+0x58>)
 80010b0:	f001 fc24 	bl	80028fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data1, 1, 500);
 80010b4:	f107 010f 	add.w	r1, r7, #15
 80010b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010bc:	2201      	movs	r2, #1
 80010be:	480a      	ldr	r0, [pc, #40]	; (80010e8 <LCD_1IN28_SendData_16Bit+0x5c>)
 80010c0:	f002 f96f 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 80010c4:	1db9      	adds	r1, r7, #6
 80010c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ca:	2201      	movs	r2, #1
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <LCD_1IN28_SendData_16Bit+0x5c>)
 80010ce:	f002 f968 	bl	80033a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2110      	movs	r1, #16
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <LCD_1IN28_SendData_16Bit+0x58>)
 80010d8:	f001 fc10 	bl	80028fc <HAL_GPIO_WritePin>
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000058 	.word	0x20000058

080010ec <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0xEF);
 80010f0:	20ef      	movs	r0, #239	; 0xef
 80010f2:	f7ff ff83 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 80010f6:	20eb      	movs	r0, #235	; 0xeb
 80010f8:	f7ff ff80 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80010fc:	2014      	movs	r0, #20
 80010fe:	f7ff ffa1 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xFE);
 8001102:	20fe      	movs	r0, #254	; 0xfe
 8001104:	f7ff ff7a 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8001108:	20ef      	movs	r0, #239	; 0xef
 800110a:	f7ff ff77 	bl	8000ffc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 800110e:	20eb      	movs	r0, #235	; 0xeb
 8001110:	f7ff ff74 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001114:	2014      	movs	r0, #20
 8001116:	f7ff ff95 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 800111a:	2084      	movs	r0, #132	; 0x84
 800111c:	f7ff ff6e 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8001120:	2040      	movs	r0, #64	; 0x40
 8001122:	f7ff ff8f 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 8001126:	2085      	movs	r0, #133	; 0x85
 8001128:	f7ff ff68 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 800112c:	20ff      	movs	r0, #255	; 0xff
 800112e:	f7ff ff89 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8001132:	2086      	movs	r0, #134	; 0x86
 8001134:	f7ff ff62 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001138:	20ff      	movs	r0, #255	; 0xff
 800113a:	f7ff ff83 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 800113e:	2087      	movs	r0, #135	; 0x87
 8001140:	f7ff ff5c 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001144:	20ff      	movs	r0, #255	; 0xff
 8001146:	f7ff ff7d 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 800114a:	2088      	movs	r0, #136	; 0x88
 800114c:	f7ff ff56 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001150:	200a      	movs	r0, #10
 8001152:	f7ff ff77 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 8001156:	2089      	movs	r0, #137	; 0x89
 8001158:	f7ff ff50 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 800115c:	2021      	movs	r0, #33	; 0x21
 800115e:	f7ff ff71 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001162:	208a      	movs	r0, #138	; 0x8a
 8001164:	f7ff ff4a 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff ff6b 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 800116e:	208b      	movs	r0, #139	; 0x8b
 8001170:	f7ff ff44 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	f7ff ff65 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 800117a:	208c      	movs	r0, #140	; 0x8c
 800117c:	f7ff ff3e 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff ff5f 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8001186:	208d      	movs	r0, #141	; 0x8d
 8001188:	f7ff ff38 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff ff59 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001192:	208e      	movs	r0, #142	; 0x8e
 8001194:	f7ff ff32 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001198:	20ff      	movs	r0, #255	; 0xff
 800119a:	f7ff ff53 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 800119e:	208f      	movs	r0, #143	; 0x8f
 80011a0:	f7ff ff2c 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80011a4:	20ff      	movs	r0, #255	; 0xff
 80011a6:	f7ff ff4d 	bl	8001044 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80011aa:	20b6      	movs	r0, #182	; 0xb6
 80011ac:	f7ff ff26 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff ff47 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80011b6:	2020      	movs	r0, #32
 80011b8:	f7ff ff44 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80011bc:	2036      	movs	r0, #54	; 0x36
 80011be:	f7ff ff1d 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 80011c2:	2008      	movs	r0, #8
 80011c4:	f7ff ff3e 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 80011c8:	203a      	movs	r0, #58	; 0x3a
 80011ca:	f7ff ff17 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 80011ce:	2005      	movs	r0, #5
 80011d0:	f7ff ff38 	bl	8001044 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 80011d4:	2090      	movs	r0, #144	; 0x90
 80011d6:	f7ff ff11 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 80011da:	2008      	movs	r0, #8
 80011dc:	f7ff ff32 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80011e0:	2008      	movs	r0, #8
 80011e2:	f7ff ff2f 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80011e6:	2008      	movs	r0, #8
 80011e8:	f7ff ff2c 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 80011ec:	2008      	movs	r0, #8
 80011ee:	f7ff ff29 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 80011f2:	20bd      	movs	r0, #189	; 0xbd
 80011f4:	f7ff ff02 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 80011f8:	2006      	movs	r0, #6
 80011fa:	f7ff ff23 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 80011fe:	20bc      	movs	r0, #188	; 0xbc
 8001200:	f7ff fefc 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff1d 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 800120a:	20ff      	movs	r0, #255	; 0xff
 800120c:	f7ff fef6 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001210:	2060      	movs	r0, #96	; 0x60
 8001212:	f7ff ff17 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff ff14 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 800121c:	2004      	movs	r0, #4
 800121e:	f7ff ff11 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8001222:	20c3      	movs	r0, #195	; 0xc3
 8001224:	f7ff feea 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001228:	2013      	movs	r0, #19
 800122a:	f7ff ff0b 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 800122e:	20c4      	movs	r0, #196	; 0xc4
 8001230:	f7ff fee4 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001234:	2013      	movs	r0, #19
 8001236:	f7ff ff05 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 800123a:	20c9      	movs	r0, #201	; 0xc9
 800123c:	f7ff fede 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001240:	2022      	movs	r0, #34	; 0x22
 8001242:	f7ff feff 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8001246:	20be      	movs	r0, #190	; 0xbe
 8001248:	f7ff fed8 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 800124c:	2011      	movs	r0, #17
 800124e:	f7ff fef9 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8001252:	20e1      	movs	r0, #225	; 0xe1
 8001254:	f7ff fed2 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001258:	2010      	movs	r0, #16
 800125a:	f7ff fef3 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 800125e:	200e      	movs	r0, #14
 8001260:	f7ff fef0 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001264:	20df      	movs	r0, #223	; 0xdf
 8001266:	f7ff fec9 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 800126a:	2021      	movs	r0, #33	; 0x21
 800126c:	f7ff feea 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001270:	200c      	movs	r0, #12
 8001272:	f7ff fee7 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff fee4 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 800127c:	20f0      	movs	r0, #240	; 0xf0
 800127e:	f7ff febd 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001282:	2045      	movs	r0, #69	; 0x45
 8001284:	f7ff fede 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001288:	2009      	movs	r0, #9
 800128a:	f7ff fedb 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800128e:	2008      	movs	r0, #8
 8001290:	f7ff fed8 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001294:	2008      	movs	r0, #8
 8001296:	f7ff fed5 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 800129a:	2026      	movs	r0, #38	; 0x26
 800129c:	f7ff fed2 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80012a0:	202a      	movs	r0, #42	; 0x2a
 80012a2:	f7ff fecf 	bl	8001044 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 80012a6:	20f1      	movs	r0, #241	; 0xf1
 80012a8:	f7ff fea8 	bl	8000ffc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80012ac:	2043      	movs	r0, #67	; 0x43
 80012ae:	f7ff fec9 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80012b2:	2070      	movs	r0, #112	; 0x70
 80012b4:	f7ff fec6 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80012b8:	2072      	movs	r0, #114	; 0x72
 80012ba:	f7ff fec3 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80012be:	2036      	movs	r0, #54	; 0x36
 80012c0:	f7ff fec0 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 80012c4:	2037      	movs	r0, #55	; 0x37
 80012c6:	f7ff febd 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 80012ca:	206f      	movs	r0, #111	; 0x6f
 80012cc:	f7ff feba 	bl	8001044 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 80012d0:	20f2      	movs	r0, #242	; 0xf2
 80012d2:	f7ff fe93 	bl	8000ffc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 80012d6:	2045      	movs	r0, #69	; 0x45
 80012d8:	f7ff feb4 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 80012dc:	2009      	movs	r0, #9
 80012de:	f7ff feb1 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 80012e2:	2008      	movs	r0, #8
 80012e4:	f7ff feae 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 80012e8:	2008      	movs	r0, #8
 80012ea:	f7ff feab 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 80012ee:	2026      	movs	r0, #38	; 0x26
 80012f0:	f7ff fea8 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80012f4:	202a      	movs	r0, #42	; 0x2a
 80012f6:	f7ff fea5 	bl	8001044 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 80012fa:	20f3      	movs	r0, #243	; 0xf3
 80012fc:	f7ff fe7e 	bl	8000ffc <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001300:	2043      	movs	r0, #67	; 0x43
 8001302:	f7ff fe9f 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001306:	2070      	movs	r0, #112	; 0x70
 8001308:	f7ff fe9c 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 800130c:	2072      	movs	r0, #114	; 0x72
 800130e:	f7ff fe99 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001312:	2036      	movs	r0, #54	; 0x36
 8001314:	f7ff fe96 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8001318:	2037      	movs	r0, #55	; 0x37
 800131a:	f7ff fe93 	bl	8001044 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 800131e:	206f      	movs	r0, #111	; 0x6f
 8001320:	f7ff fe90 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8001324:	20ed      	movs	r0, #237	; 0xed
 8001326:	f7ff fe69 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 800132a:	201b      	movs	r0, #27
 800132c:	f7ff fe8a 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001330:	200b      	movs	r0, #11
 8001332:	f7ff fe87 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8001336:	20ae      	movs	r0, #174	; 0xae
 8001338:	f7ff fe60 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 800133c:	2077      	movs	r0, #119	; 0x77
 800133e:	f7ff fe81 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8001342:	20cd      	movs	r0, #205	; 0xcd
 8001344:	f7ff fe5a 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8001348:	2063      	movs	r0, #99	; 0x63
 800134a:	f7ff fe7b 	bl	8001044 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 800134e:	2070      	movs	r0, #112	; 0x70
 8001350:	f7ff fe54 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001354:	2007      	movs	r0, #7
 8001356:	f7ff fe75 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800135a:	2007      	movs	r0, #7
 800135c:	f7ff fe72 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fe6f 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001366:	200e      	movs	r0, #14
 8001368:	f7ff fe6c 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 800136c:	200f      	movs	r0, #15
 800136e:	f7ff fe69 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001372:	2009      	movs	r0, #9
 8001374:	f7ff fe66 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001378:	2007      	movs	r0, #7
 800137a:	f7ff fe63 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800137e:	2008      	movs	r0, #8
 8001380:	f7ff fe60 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001384:	2003      	movs	r0, #3
 8001386:	f7ff fe5d 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 800138a:	20e8      	movs	r0, #232	; 0xe8
 800138c:	f7ff fe36 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001390:	2034      	movs	r0, #52	; 0x34
 8001392:	f7ff fe57 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001396:	2062      	movs	r0, #98	; 0x62
 8001398:	f7ff fe30 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 800139c:	2018      	movs	r0, #24
 800139e:	f7ff fe51 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80013a2:	200d      	movs	r0, #13
 80013a4:	f7ff fe4e 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80013a8:	2071      	movs	r0, #113	; 0x71
 80013aa:	f7ff fe4b 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 80013ae:	20ed      	movs	r0, #237	; 0xed
 80013b0:	f7ff fe48 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80013b4:	2070      	movs	r0, #112	; 0x70
 80013b6:	f7ff fe45 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80013ba:	2070      	movs	r0, #112	; 0x70
 80013bc:	f7ff fe42 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80013c0:	2018      	movs	r0, #24
 80013c2:	f7ff fe3f 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f7ff fe3c 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80013cc:	2071      	movs	r0, #113	; 0x71
 80013ce:	f7ff fe39 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 80013d2:	20ef      	movs	r0, #239	; 0xef
 80013d4:	f7ff fe36 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80013d8:	2070      	movs	r0, #112	; 0x70
 80013da:	f7ff fe33 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80013de:	2070      	movs	r0, #112	; 0x70
 80013e0:	f7ff fe30 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 80013e4:	2063      	movs	r0, #99	; 0x63
 80013e6:	f7ff fe09 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80013ea:	2018      	movs	r0, #24
 80013ec:	f7ff fe2a 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 80013f0:	2011      	movs	r0, #17
 80013f2:	f7ff fe27 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80013f6:	2071      	movs	r0, #113	; 0x71
 80013f8:	f7ff fe24 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 80013fc:	20f1      	movs	r0, #241	; 0xf1
 80013fe:	f7ff fe21 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001402:	2070      	movs	r0, #112	; 0x70
 8001404:	f7ff fe1e 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001408:	2070      	movs	r0, #112	; 0x70
 800140a:	f7ff fe1b 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 800140e:	2018      	movs	r0, #24
 8001410:	f7ff fe18 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001414:	2013      	movs	r0, #19
 8001416:	f7ff fe15 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800141a:	2071      	movs	r0, #113	; 0x71
 800141c:	f7ff fe12 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001420:	20f3      	movs	r0, #243	; 0xf3
 8001422:	f7ff fe0f 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001426:	2070      	movs	r0, #112	; 0x70
 8001428:	f7ff fe0c 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800142c:	2070      	movs	r0, #112	; 0x70
 800142e:	f7ff fe09 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f7ff fde2 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001438:	2028      	movs	r0, #40	; 0x28
 800143a:	f7ff fe03 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 800143e:	2029      	movs	r0, #41	; 0x29
 8001440:	f7ff fe00 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001444:	20f1      	movs	r0, #241	; 0xf1
 8001446:	f7ff fdfd 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff fdfa 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001450:	20f1      	movs	r0, #241	; 0xf1
 8001452:	f7ff fdf7 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fdf4 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800145c:	2007      	movs	r0, #7
 800145e:	f7ff fdf1 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001462:	2066      	movs	r0, #102	; 0x66
 8001464:	f7ff fdca 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001468:	203c      	movs	r0, #60	; 0x3c
 800146a:	f7ff fdeb 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fde8 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001474:	20cd      	movs	r0, #205	; 0xcd
 8001476:	f7ff fde5 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800147a:	2067      	movs	r0, #103	; 0x67
 800147c:	f7ff fde2 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001480:	2045      	movs	r0, #69	; 0x45
 8001482:	f7ff fddf 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001486:	2045      	movs	r0, #69	; 0x45
 8001488:	f7ff fddc 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 800148c:	2010      	movs	r0, #16
 800148e:	f7ff fdd9 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fdd6 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff fdd3 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fdd0 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80014a4:	2067      	movs	r0, #103	; 0x67
 80014a6:	f7ff fda9 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fdca 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80014b0:	203c      	movs	r0, #60	; 0x3c
 80014b2:	f7ff fdc7 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fdc4 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fdc1 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fdbe 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fdbb 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 80014ce:	2054      	movs	r0, #84	; 0x54
 80014d0:	f7ff fdb8 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80014d4:	2010      	movs	r0, #16
 80014d6:	f7ff fdb5 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 80014da:	2032      	movs	r0, #50	; 0x32
 80014dc:	f7ff fdb2 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 80014e0:	2098      	movs	r0, #152	; 0x98
 80014e2:	f7ff fdaf 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 80014e6:	2074      	movs	r0, #116	; 0x74
 80014e8:	f7ff fd88 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 80014ec:	2010      	movs	r0, #16
 80014ee:	f7ff fda9 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 80014f2:	2085      	movs	r0, #133	; 0x85
 80014f4:	f7ff fda6 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 80014f8:	2080      	movs	r0, #128	; 0x80
 80014fa:	f7ff fda3 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fda0 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fd9d 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800150a:	204e      	movs	r0, #78	; 0x4e
 800150c:	f7ff fd9a 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fd97 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0x98);
 8001516:	2098      	movs	r0, #152	; 0x98
 8001518:	f7ff fd70 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 800151c:	203e      	movs	r0, #62	; 0x3e
 800151e:	f7ff fd91 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001522:	2007      	movs	r0, #7
 8001524:	f7ff fd8e 	bl	8001044 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8001528:	2035      	movs	r0, #53	; 0x35
 800152a:	f7ff fd67 	bl	8000ffc <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 800152e:	2021      	movs	r0, #33	; 0x21
 8001530:	f7ff fd64 	bl	8000ffc <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8001534:	2011      	movs	r0, #17
 8001536:	f7ff fd61 	bl	8000ffc <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 ff0c 	bl	8002358 <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001540:	2029      	movs	r0, #41	; 0x29
 8001542:	f7ff fd5b 	bl	8000ffc <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 8001546:	2014      	movs	r0, #20
 8001548:	f000 ff06 	bl	8002358 <HAL_Delay>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 800155a:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <LCD_1IN28_SetAttributes+0x54>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001560:	2308      	movs	r3, #8
 8001562:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <LCD_1IN28_SetAttributes+0x54>)
 800156c:	22f0      	movs	r2, #240	; 0xf0
 800156e:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <LCD_1IN28_SetAttributes+0x54>)
 8001572:	22f0      	movs	r2, #240	; 0xf0
 8001574:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8001576:	23c8      	movs	r3, #200	; 0xc8
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e007      	b.n	800158c <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <LCD_1IN28_SetAttributes+0x54>)
 800157e:	22f0      	movs	r2, #240	; 0xf0
 8001580:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <LCD_1IN28_SetAttributes+0x54>)
 8001584:	22f0      	movs	r2, #240	; 0xf0
 8001586:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8001588:	2368      	movs	r3, #104	; 0x68
 800158a:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 800158c:	2036      	movs	r0, #54	; 0x36
 800158e:	f7ff fd35 	bl	8000ffc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fd55 	bl	8001044 <LCD_1IN28_SendData_8Bit>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000050 	.word	0x20000050

080015a8 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80015b2:	f7ff fd05 	bl	8000fc0 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ffc9 	bl	8001550 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80015be:	f7ff fd95 	bl	80010ec <LCD_1IN28_InitReg>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80015ca:	b590      	push	{r4, r7, lr}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4604      	mov	r4, r0
 80015d2:	4608      	mov	r0, r1
 80015d4:	4611      	mov	r1, r2
 80015d6:	461a      	mov	r2, r3
 80015d8:	4623      	mov	r3, r4
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4603      	mov	r3, r0
 80015de:	80bb      	strh	r3, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 80015e8:	202a      	movs	r0, #42	; 0x2a
 80015ea:	f7ff fd07 	bl	8000ffc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff fd28 	bl	8001044 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fd23 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fd20 	bl	8001044 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd1b 	bl	8001044 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 800160e:	202b      	movs	r0, #43	; 0x2b
 8001610:	f7ff fcf4 	bl	8000ffc <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff fd15 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 800161a:	88bb      	ldrh	r3, [r7, #4]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd10 	bl	8001044 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fd0d 	bl	8001044 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 800162a:	883b      	ldrh	r3, [r7, #0]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fd08 	bl	8001044 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8001634:	202c      	movs	r0, #44	; 0x2c
 8001636:	f7ff fce1 	bl	8000ffc <LCD_1IN28_SendCommand>
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bd90      	pop	{r4, r7, pc}

08001642 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 800164c:	23ef      	movs	r3, #239	; 0xef
 800164e:	22ef      	movs	r2, #239	; 0xef
 8001650:	2100      	movs	r1, #0
 8001652:	2000      	movs	r0, #0
 8001654:	f7ff ffb9 	bl	80015ca <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001658:	2300      	movs	r3, #0
 800165a:	81fb      	strh	r3, [r7, #14]
 800165c:	e00f      	b.n	800167e <LCD_1IN28_Clear+0x3c>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800165e:	2300      	movs	r3, #0
 8001660:	81bb      	strh	r3, [r7, #12]
 8001662:	e006      	b.n	8001672 <LCD_1IN28_Clear+0x30>
			LCD_1IN28_SendData_16Bit(Color);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd10 	bl	800108c <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 800166c:	89bb      	ldrh	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	81bb      	strh	r3, [r7, #12]
 8001672:	89bb      	ldrh	r3, [r7, #12]
 8001674:	2bef      	cmp	r3, #239	; 0xef
 8001676:	d9f5      	bls.n	8001664 <LCD_1IN28_Clear+0x22>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001678:	89fb      	ldrh	r3, [r7, #14]
 800167a:	3301      	adds	r3, #1
 800167c:	81fb      	strh	r3, [r7, #14]
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	2bef      	cmp	r3, #239	; 0xef
 8001682:	d9ec      	bls.n	800165e <LCD_1IN28_Clear+0x1c>
		}
	 }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	80fb      	strh	r3, [r7, #6]
 8001698:	460b      	mov	r3, r1
 800169a:	80bb      	strh	r3, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	88b9      	ldrh	r1, [r7, #4]
 80016a6:	88f8      	ldrh	r0, [r7, #6]
 80016a8:	f7ff ff8f 	bl	80015ca <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fcec 	bl	800108c <LCD_1IN28_SendData_16Bit>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b08d      	sub	sp, #52	; 0x34
 80016c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f000 fdd7 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f8c9 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ca:	f000 fa7f 	bl	8001bcc <MX_GPIO_Init>
  MX_SPI1_Init();
 80016ce:	f000 f92f 	bl	8001930 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80016d2:	f000 fa51 	bl	8001b78 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016d6:	f000 f961 	bl	800199c <MX_TIM1_Init>
  MX_TIM3_Init();
 80016da:	f000 f9ff 	bl	8001adc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 20;
 80016de:	4b56      	ldr	r3, [pc, #344]	; (8001838 <main+0x17c>)
 80016e0:	2214      	movs	r2, #20
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016e4:	2100      	movs	r1, #0
 80016e6:	4855      	ldr	r0, [pc, #340]	; (800183c <main+0x180>)
 80016e8:	f002 f9aa 	bl	8003a40 <HAL_TIM_PWM_Start>
  strcpy((char*)buf, "Screen Demo\r\n");
 80016ec:	463b      	mov	r3, r7
 80016ee:	4a54      	ldr	r2, [pc, #336]	; (8001840 <main+0x184>)
 80016f0:	461c      	mov	r4, r3
 80016f2:	4613      	mov	r3, r2
 80016f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f6:	c407      	stmia	r4!, {r0, r1, r2}
 80016f8:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80016fa:	463b      	mov	r3, r7
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd63 	bl	80001c8 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	4639      	mov	r1, r7
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	484d      	ldr	r0, [pc, #308]	; (8001844 <main+0x188>)
 800170e:	f003 f958 	bl	80049c2 <HAL_UART_Transmit>
  Module_Init();
 8001712:	f7ff fc37 	bl	8000f84 <Module_Init>

//printf("LCD_1IN28_ Init and Clear...\r\n");
  LCD_1IN28_Init(VERTICAL);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff ff46 	bl	80015a8 <LCD_1IN28_Init>
  LCD_1IN28_Clear(BLACK);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff ff90 	bl	8001642 <LCD_1IN28_Clear>

//printf("Paint_NewImage\r\n");
  Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8001722:	2300      	movs	r3, #0
 8001724:	2200      	movs	r2, #0
 8001726:	21f0      	movs	r1, #240	; 0xf0
 8001728:	20f0      	movs	r0, #240	; 0xf0
 800172a:	f7fe fed7 	bl	80004dc <Paint_NewImage>

//printf("Set Clear and Display Funtion\r\n");
  Paint_SetClearFuntion(LCD_1IN28_Clear);
 800172e:	4846      	ldr	r0, [pc, #280]	; (8001848 <main+0x18c>)
 8001730:	f7fe ff14 	bl	800055c <Paint_SetClearFuntion>
  Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8001734:	4845      	ldr	r0, [pc, #276]	; (800184c <main+0x190>)
 8001736:	f7fe ff21 	bl	800057c <Paint_SetDisplayFuntion>

//printf("Paint_Clear\r\n");
  Paint_Clear(BLACK);
 800173a:	2000      	movs	r0, #0
 800173c:	f7fe ffda 	bl	80006f4 <Paint_Clear>
  HAL_Delay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	f000 fe09 	bl	8002358 <HAL_Delay>

//printf("drawing...\r\n");

  Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8001746:	2300      	movs	r3, #0
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	2302      	movs	r3, #2
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	231f      	movs	r3, #31
 8001750:	2278      	movs	r2, #120	; 0x78
 8001752:	2178      	movs	r1, #120	; 0x78
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f7ff f923 	bl	80009a0 <Paint_DrawCircle>
  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800175a:	2300      	movs	r3, #0
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2304      	movs	r3, #4
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	230c      	movs	r3, #12
 800176a:	2278      	movs	r2, #120	; 0x78
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	; 0x78
 8001770:	f7ff f868 	bl	8000844 <Paint_DrawLine>
  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8001774:	2300      	movs	r3, #0
 8001776:	9302      	str	r3, [sp, #8]
 8001778:	2304      	movs	r3, #4
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	23f0      	movs	r3, #240	; 0xf0
 8001784:	2278      	movs	r2, #120	; 0x78
 8001786:	21e4      	movs	r1, #228	; 0xe4
 8001788:	2078      	movs	r0, #120	; 0x78
 800178a:	f7ff f85b 	bl	8000844 <Paint_DrawLine>
  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800178e:	2300      	movs	r3, #0
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	2304      	movs	r3, #4
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2378      	movs	r3, #120	; 0x78
 800179e:	220c      	movs	r2, #12
 80017a0:	2178      	movs	r1, #120	; 0x78
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff f84e 	bl	8000844 <Paint_DrawLine>
  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80017a8:	2300      	movs	r3, #0
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2304      	movs	r3, #4
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2378      	movs	r3, #120	; 0x78
 80017b8:	22f0      	movs	r2, #240	; 0xf0
 80017ba:	2178      	movs	r1, #120	; 0x78
 80017bc:	20e4      	movs	r0, #228	; 0xe4
 80017be:	f7ff f841 	bl	8000844 <Paint_DrawLine>

  Paint_DrawImage(gImage_70X70, 85, 25, 70, 70);
 80017c2:	2346      	movs	r3, #70	; 0x46
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2346      	movs	r3, #70	; 0x46
 80017c8:	2219      	movs	r2, #25
 80017ca:	2155      	movs	r1, #85	; 0x55
 80017cc:	4820      	ldr	r0, [pc, #128]	; (8001850 <main+0x194>)
 80017ce:	f7ff fb73 	bl	8000eb8 <Paint_DrawImage>
  Paint_DrawString_EN(123, 123, "WAVESHARE",&Font16,  BLACK, GREEN);
 80017d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2300      	movs	r3, #0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <main+0x198>)
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <main+0x19c>)
 80017e0:	217b      	movs	r1, #123	; 0x7b
 80017e2:	207b      	movs	r0, #123	; 0x7b
 80017e4:	f7ff fb12 	bl	8000e0c <Paint_DrawString_EN>

  Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 80017e8:	2300      	movs	r3, #0
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	2303      	movs	r3, #3
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2346      	movs	r3, #70	; 0x46
 80017f8:	2246      	movs	r2, #70	; 0x46
 80017fa:	2178      	movs	r1, #120	; 0x78
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f7ff f821 	bl	8000844 <Paint_DrawLine>
  Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 8001802:	2300      	movs	r3, #0
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2303      	movs	r3, #3
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	231f      	movs	r3, #31
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	22b0      	movs	r2, #176	; 0xb0
 8001812:	2178      	movs	r1, #120	; 0x78
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f7ff f815 	bl	8000844 <Paint_DrawLine>
  Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 800181a:	2300      	movs	r3, #0
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2302      	movs	r3, #2
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	23d2      	movs	r3, #210	; 0xd2
 800182a:	2278      	movs	r2, #120	; 0x78
 800182c:	2178      	movs	r1, #120	; 0x78
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f7ff f808 	bl	8000844 <Paint_DrawLine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001834:	e7fe      	b.n	8001834 <main+0x178>
 8001836:	bf00      	nop
 8001838:	40010000 	.word	0x40010000
 800183c:	200000b0 	.word	0x200000b0
 8001840:	0800511c 	.word	0x0800511c
 8001844:	20000140 	.word	0x20000140
 8001848:	08001643 	.word	0x08001643
 800184c:	0800168f 	.word	0x0800168f
 8001850:	08005d18 	.word	0x08005d18
 8001854:	20000000 	.word	0x20000000
 8001858:	0800512c 	.word	0x0800512c

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b094      	sub	sp, #80	; 0x50
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0320 	add.w	r3, r7, #32
 8001866:	2230      	movs	r2, #48	; 0x30
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fc42 	bl	80050f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <SystemClock_Config+0xcc>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <SystemClock_Config+0xcc>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <SystemClock_Config+0xcc>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	2300      	movs	r3, #0
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <SystemClock_Config+0xd0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <SystemClock_Config+0xd0>)
 80018a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <SystemClock_Config+0xd0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018bc:	2301      	movs	r3, #1
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c0:	2310      	movs	r3, #16
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018cc:	2308      	movs	r3, #8
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018d0:	2364      	movs	r3, #100	; 0x64
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018d8:	2307      	movs	r3, #7
 80018da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018dc:	f107 0320 	add.w	r3, r7, #32
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f83d 	bl	8002960 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018ec:	f000 fb14 	bl	8001f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f0:	230f      	movs	r3, #15
 80018f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001902:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001906:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fa9e 	bl	8002e50 <HAL_RCC_ClockConfig>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800191a:	f000 fafd 	bl	8001f18 <Error_Handler>
  }
}
 800191e:	bf00      	nop
 8001920:	3750      	adds	r7, #80	; 0x50
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_SPI1_Init+0x64>)
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <MX_SPI1_Init+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_SPI1_Init+0x64>)
 800193c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_SPI1_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_SPI1_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_SPI1_Init+0x64>)
 800195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001960:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_SPI1_Init+0x64>)
 800197c:	220a      	movs	r2, #10
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_SPI1_Init+0x64>)
 8001982:	f001 fc85 	bl	8003290 <HAL_SPI_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800198c:	f000 fac4 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000058 	.word	0x20000058
 8001998:	40013000 	.word	0x40013000

0800199c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b096      	sub	sp, #88	; 0x58
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2220      	movs	r2, #32
 80019d2:	2100      	movs	r1, #0
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fb8d 	bl	80050f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <MX_TIM1_Init+0x138>)
 80019dc:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <MX_TIM1_Init+0x13c>)
 80019de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25-1;
 80019e0:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <MX_TIM1_Init+0x138>)
 80019e2:	2218      	movs	r2, #24
 80019e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b3b      	ldr	r3, [pc, #236]	; (8001ad4 <MX_TIM1_Init+0x138>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80019ec:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <MX_TIM1_Init+0x138>)
 80019ee:	2263      	movs	r2, #99	; 0x63
 80019f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <MX_TIM1_Init+0x138>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <MX_TIM1_Init+0x138>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a04:	4833      	ldr	r0, [pc, #204]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001a06:	f001 fed3 	bl	80037b0 <HAL_TIM_Base_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001a10:	f000 fa82 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482c      	ldr	r0, [pc, #176]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001a22:	f002 fa9f 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001a2c:	f000 fa74 	bl	8001f18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a30:	4828      	ldr	r0, [pc, #160]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001a32:	f001 ffac 	bl	800398e <HAL_TIM_PWM_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a3c:	f000 fa6c 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4821      	ldr	r0, [pc, #132]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001a50:	f002 fe88 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001a5a:	f000 fa5d 	bl	8001f18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001a84:	f002 f9ac 	bl	8003de0 <HAL_TIM_PWM_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001a8e:	f000 fa43 	bl	8001f18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001ab6:	f002 fed1 	bl	800485c <HAL_TIMEx_ConfigBreakDeadTime>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ac0:	f000 fa2a 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM1_Init+0x138>)
 8001ac6:	f000 fadb 	bl	8002080 <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3758      	adds	r7, #88	; 0x58
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200000b0 	.word	0x200000b0
 8001ad8:	40010000 	.word	0x40010000

08001adc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <MX_TIM3_Init+0x98>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25000-1;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b00:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001b04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000-1;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b0e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001b12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b22:	f001 fe45 	bl	80037b0 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b2c:	f000 f9f4 	bl	8001f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b3e:	f002 fa11 	bl	8003f64 <HAL_TIM_ConfigClockSource>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001b48:	f000 f9e6 	bl	8001f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_TIM3_Init+0x94>)
 8001b5a:	f002 fe03 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f000 f9d8 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200000f8 	.word	0x200000f8
 8001b74:	40000400 	.word	0x40000400

08001b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <MX_USART2_UART_Init+0x50>)
 8001b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f002 feba 	bl	8004928 <HAL_UART_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bba:	f000 f9ad 	bl	8001f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000140 	.word	0x20000140
 8001bc8:	40004400 	.word	0x40004400

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	4bb0      	ldr	r3, [pc, #704]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4aaf      	ldr	r2, [pc, #700]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001bec:	f043 0310 	orr.w	r3, r3, #16
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4bad      	ldr	r3, [pc, #692]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4ba9      	ldr	r3, [pc, #676]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4aa8      	ldr	r2, [pc, #672]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4ba6      	ldr	r3, [pc, #664]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4ba2      	ldr	r3, [pc, #648]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4aa1      	ldr	r2, [pc, #644]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b9f      	ldr	r3, [pc, #636]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b9b      	ldr	r3, [pc, #620]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a9a      	ldr	r2, [pc, #616]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b98      	ldr	r3, [pc, #608]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a93      	ldr	r2, [pc, #588]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b91      	ldr	r3, [pc, #580]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b8d      	ldr	r3, [pc, #564]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a8c      	ldr	r2, [pc, #560]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b8a      	ldr	r3, [pc, #552]	; (8001ea8 <MX_GPIO_Init+0x2dc>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4887      	ldr	r0, [pc, #540]	; (8001eac <MX_GPIO_Init+0x2e0>)
 8001c90:	f000 fe34 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2101      	movs	r1, #1
 8001c98:	4885      	ldr	r0, [pc, #532]	; (8001eb0 <MX_GPIO_Init+0x2e4>)
 8001c9a:	f000 fe2f 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Screen_Pin|DC_Screen_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2130      	movs	r1, #48	; 0x30
 8001ca2:	4883      	ldr	r0, [pc, #524]	; (8001eb0 <MX_GPIO_Init+0x2e4>)
 8001ca4:	f000 fe2a 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Screen_Pin|BL_Screen_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2103      	movs	r1, #3
 8001cac:	4881      	ldr	r0, [pc, #516]	; (8001eb4 <MX_GPIO_Init+0x2e8>)
 8001cae:	f000 fe25 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001cb8:	487f      	ldr	r0, [pc, #508]	; (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001cba:	f000 fe1f 	bl	80028fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001cbe:	2308      	movs	r3, #8
 8001cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4875      	ldr	r0, [pc, #468]	; (8001eac <MX_GPIO_Init+0x2e0>)
 8001cd6:	f000 fc75 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_Screen_Pin DC_Screen_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_Screen_Pin|DC_Screen_Pin;
 8001cda:	2331      	movs	r3, #49	; 0x31
 8001cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	486f      	ldr	r0, [pc, #444]	; (8001eb0 <MX_GPIO_Init+0x2e4>)
 8001cf2:	f000 fc67 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d06:	2305      	movs	r3, #5
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4867      	ldr	r0, [pc, #412]	; (8001eb0 <MX_GPIO_Init+0x2e4>)
 8001d12:	f000 fc57 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4864      	ldr	r0, [pc, #400]	; (8001ebc <MX_GPIO_Init+0x2f0>)
 8001d2c:	f000 fc4a 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d30:	2310      	movs	r3, #16
 8001d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d40:	2306      	movs	r3, #6
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 031c 	add.w	r3, r7, #28
 8001d48:	4619      	mov	r1, r3
 8001d4a:	485c      	ldr	r0, [pc, #368]	; (8001ebc <MX_GPIO_Init+0x2f0>)
 8001d4c:	f000 fc3a 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Screen_Pin BL_Screen_Pin */
  GPIO_InitStruct.Pin = RST_Screen_Pin|BL_Screen_Pin;
 8001d50:	2303      	movs	r3, #3
 8001d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	4853      	ldr	r0, [pc, #332]	; (8001eb4 <MX_GPIO_Init+0x2e8>)
 8001d68:	f000 fc2c 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	484d      	ldr	r0, [pc, #308]	; (8001eb4 <MX_GPIO_Init+0x2e8>)
 8001d80:	f000 fc20 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_Pin */
  GPIO_InitStruct.Pin = Backlight_Pin;
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d88:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Backlight_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	4844      	ldr	r0, [pc, #272]	; (8001eac <MX_GPIO_Init+0x2e0>)
 8001d9a:	f000 fc13 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001db0:	2305      	movs	r3, #5
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	483e      	ldr	r0, [pc, #248]	; (8001eb4 <MX_GPIO_Init+0x2e8>)
 8001dbc:	f000 fc02 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001dc0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001dc4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4837      	ldr	r0, [pc, #220]	; (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001dda:	f000 fbf3 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001dde:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df0:	2306      	movs	r3, #6
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	482d      	ldr	r0, [pc, #180]	; (8001eb0 <MX_GPIO_Init+0x2e4>)
 8001dfc:	f000 fbe2 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	4829      	ldr	r0, [pc, #164]	; (8001ebc <MX_GPIO_Init+0x2f0>)
 8001e16:	f000 fbd5 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001e1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e2c:	230a      	movs	r3, #10
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	4821      	ldr	r0, [pc, #132]	; (8001ebc <MX_GPIO_Init+0x2f0>)
 8001e38:	f000 fbc4 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <MX_GPIO_Init+0x2ec>)
 8001e50:	f000 fbb8 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001e54:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5a:	2312      	movs	r3, #18
 8001e5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e66:	2304      	movs	r3, #4
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4810      	ldr	r0, [pc, #64]	; (8001eb4 <MX_GPIO_Init+0x2e8>)
 8001e72:	f000 fba7 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001e76:	2302      	movs	r3, #2
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <MX_GPIO_Init+0x2e0>)
 8001e8c:	f000 fb9a 	bl	80025c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2017      	movs	r0, #23
 8001e96:	f000 fb5e 	bl	8002556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e9a:	2017      	movs	r0, #23
 8001e9c:	f000 fb77 	bl	800258e <HAL_NVIC_EnableIRQ>

}
 8001ea0:	bf00      	nop
 8001ea2:	3730      	adds	r7, #48	; 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Backlight_Pin){
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	2b80      	cmp	r3, #128	; 0x80
 8001ece:	d105      	bne.n	8001edc <HAL_GPIO_EXTI_Callback+0x1c>
		TIM1->CCR1 = 100;
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001ed2:	2264      	movs	r2, #100	; 0x64
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_Base_Start_IT(&htim3);
 8001ed6:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001ed8:	f001 fcba 	bl	8003850 <HAL_TIM_Base_Start_IT>
	}
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	200000f8 	.word	0x200000f8

08001eec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d102      	bne.n	8001f02 <HAL_TIM_PeriodElapsedCallback+0x16>
		TIM1->CCR1 = 20;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001efe:	2214      	movs	r2, #20
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
	}
	HAL_TIM_Base_Stop_IT(&htim3);
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f04:	f001 fd14 	bl	8003930 <HAL_TIM_Base_Stop_IT>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200000f8 	.word	0x200000f8
 8001f14:	40010000 	.word	0x40010000

08001f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1c:	b672      	cpsid	i
}
 8001f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <Error_Handler+0x8>
	...

08001f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a0f      	ldr	r2, [pc, #60]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	; 0x40
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_MspInit+0x4c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f62:	2007      	movs	r0, #7
 8001f64:	f000 faec 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_SPI_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12b      	bne.n	8001fee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a17      	ldr	r2, [pc, #92]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fce:	23e0      	movs	r3, #224	; 0xe0
 8001fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fde:	2305      	movs	r3, #5
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_SPI_MspInit+0x8c>)
 8001fea:	f000 faeb 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	3728      	adds	r7, #40	; 0x28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_TIM_Base_MspInit+0x70>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	4a16      	ldr	r2, [pc, #88]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6453      	str	r3, [r2, #68]	; 0x44
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002032:	e01a      	b.n	800206a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_TIM_Base_MspInit+0x78>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d115      	bne.n	800206a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6413      	str	r3, [r2, #64]	; 0x40
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_TIM_Base_MspInit+0x74>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	201d      	movs	r0, #29
 8002060:	f000 fa79 	bl	8002556 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002064:	201d      	movs	r0, #29
 8002066:	f000 fa92 	bl	800258e <HAL_NVIC_EnableIRQ>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40023800 	.word	0x40023800
 800207c:	40000400 	.word	0x40000400

08002080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <HAL_TIM_MspPostInit+0x68>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d11e      	bne.n	80020e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a10      	ldr	r2, [pc, #64]	; (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020ac:	f043 0310 	orr.w	r3, r3, #16
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_TIM_MspPostInit+0x6c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020d4:	f107 030c 	add.w	r3, r7, #12
 80020d8:	4619      	mov	r1, r3
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <HAL_TIM_MspPostInit+0x70>)
 80020dc:	f000 fa72 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40021000 	.word	0x40021000

080020f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_UART_MspInit+0x84>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d12b      	bne.n	800216e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_UART_MspInit+0x88>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <HAL_UART_MspInit+0x88>)
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_UART_MspInit+0x88>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_UART_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a10      	ldr	r2, [pc, #64]	; (800217c <HAL_UART_MspInit+0x88>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_UART_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800214e:	230c      	movs	r3, #12
 8002150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800215e:	2307      	movs	r3, #7
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <HAL_UART_MspInit+0x8c>)
 800216a:	f000 fa2b 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800216e:	bf00      	nop
 8002170:	3728      	adds	r7, #40	; 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40004400 	.word	0x40004400
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d0:	f000 f8a2 	bl	8002318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Backlight_Pin);
 80021dc:	2080      	movs	r0, #128	; 0x80
 80021de:	f000 fba7 	bl	8002930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <TIM3_IRQHandler+0x10>)
 80021ee:	f001 fcef 	bl	8003bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200000f8 	.word	0x200000f8

080021fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <SystemInit+0x20>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <SystemInit+0x20>)
 8002208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800220c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002226:	490e      	ldr	r1, [pc, #56]	; (8002260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0b      	ldr	r2, [pc, #44]	; (8002268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800223c:	4c0b      	ldr	r4, [pc, #44]	; (800226c <LoopFillZerobss+0x26>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800224a:	f7ff ffd7 	bl	80021fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800224e:	f002 ff2d 	bl	80050ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff fa33 	bl	80016bc <main>
  bx  lr    
 8002256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002264:	08008388 	.word	0x08008388
  ldr r2, =_sbss
 8002268:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800226c:	20000188 	.word	0x20000188

08002270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC_IRQHandler>
	...

08002274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_Init+0x40>)
 800227e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x40>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_Init+0x40>)
 800228a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x40>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x40>)
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f94f 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fe3c 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f967 	bl	80025aa <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f92f 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000008 	.word	0x20000008
 8002310:	20000010 	.word	0x20000010
 8002314:	2000000c 	.word	0x2000000c

08002318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x20>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x24>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <HAL_IncTick+0x24>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000010 	.word	0x20000010
 800233c:	20000184 	.word	0x20000184

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_GetTick+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000184 	.word	0x20000184

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffde 	bl	8002340 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000010 	.word	0x20000010

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e16b      	b.n	80028b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 815a 	bne.w	80028b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80b4 	beq.w	80028b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a5f      	ldr	r2, [pc, #380]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <HAL_GPIO_Init+0x310>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a52      	ldr	r2, [pc, #328]	; (80028d8 <HAL_GPIO_Init+0x314>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d02b      	beq.n	80027ea <HAL_GPIO_Init+0x226>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a51      	ldr	r2, [pc, #324]	; (80028dc <HAL_GPIO_Init+0x318>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d025      	beq.n	80027e6 <HAL_GPIO_Init+0x222>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a50      	ldr	r2, [pc, #320]	; (80028e0 <HAL_GPIO_Init+0x31c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01f      	beq.n	80027e2 <HAL_GPIO_Init+0x21e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4f      	ldr	r2, [pc, #316]	; (80028e4 <HAL_GPIO_Init+0x320>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d019      	beq.n	80027de <HAL_GPIO_Init+0x21a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4e      	ldr	r2, [pc, #312]	; (80028e8 <HAL_GPIO_Init+0x324>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d013      	beq.n	80027da <HAL_GPIO_Init+0x216>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4d      	ldr	r2, [pc, #308]	; (80028ec <HAL_GPIO_Init+0x328>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00d      	beq.n	80027d6 <HAL_GPIO_Init+0x212>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <HAL_GPIO_Init+0x32c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <HAL_GPIO_Init+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4b      	ldr	r2, [pc, #300]	; (80028f4 <HAL_GPIO_Init+0x330>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d101      	bne.n	80027ce <HAL_GPIO_Init+0x20a>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e00e      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027ce:	2308      	movs	r3, #8
 80027d0:	e00c      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027d2:	2306      	movs	r3, #6
 80027d4:	e00a      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027d6:	2305      	movs	r3, #5
 80027d8:	e008      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027da:	2304      	movs	r3, #4
 80027dc:	e006      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027de:	2303      	movs	r3, #3
 80027e0:	e004      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e002      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_GPIO_Init+0x228>
 80027ea:	2300      	movs	r3, #0
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f002 0203 	and.w	r2, r2, #3
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4093      	lsls	r3, r2
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027fc:	4935      	ldr	r1, [pc, #212]	; (80028d4 <HAL_GPIO_Init+0x310>)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	3302      	adds	r3, #2
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800282e:	4a32      	ldr	r2, [pc, #200]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800285e:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002882:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_GPIO_Init+0x334>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028ac:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <HAL_GPIO_Init+0x334>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	f67f ae90 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3724      	adds	r7, #36	; 0x24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40020000 	.word	0x40020000
 80028dc:	40020400 	.word	0x40020400
 80028e0:	40020800 	.word	0x40020800
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40021400 	.word	0x40021400
 80028f0:	40021800 	.word	0x40021800
 80028f4:	40021c00 	.word	0x40021c00
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	88fb      	ldrh	r3, [r7, #6]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d006      	beq.n	8002954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002946:	4a05      	ldr	r2, [pc, #20]	; (800295c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fab6 	bl	8001ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40013c00 	.word	0x40013c00

08002960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e267      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d075      	beq.n	8002a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297e:	4b88      	ldr	r3, [pc, #544]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d00c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298a:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002992:	2b08      	cmp	r3, #8
 8002994:	d112      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b82      	ldr	r3, [pc, #520]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800299e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a2:	d10b      	bne.n	80029bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a4:	4b7e      	ldr	r3, [pc, #504]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d05b      	beq.n	8002a68 <HAL_RCC_OscConfig+0x108>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d157      	bne.n	8002a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e242      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c4:	d106      	bne.n	80029d4 <HAL_RCC_OscConfig+0x74>
 80029c6:	4b76      	ldr	r3, [pc, #472]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e01d      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x98>
 80029de:	4b70      	ldr	r3, [pc, #448]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a6f      	ldr	r2, [pc, #444]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6c      	ldr	r2, [pc, #432]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	e00b      	b.n	8002a10 <HAL_RCC_OscConfig+0xb0>
 80029f8:	4b69      	ldr	r3, [pc, #420]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a68      	ldr	r2, [pc, #416]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a65      	ldr	r2, [pc, #404]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7ff fc92 	bl	8002340 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a20:	f7ff fc8e 	bl	8002340 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e207      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b5b      	ldr	r3, [pc, #364]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0xc0>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7ff fc7e 	bl	8002340 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a48:	f7ff fc7a 	bl	8002340 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1f3      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0xe8>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d063      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1c7      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4937      	ldr	r1, [pc, #220]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e03a      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b34      	ldr	r3, [pc, #208]	; (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7ff fc33 	bl	8002340 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ade:	f7ff fc2f 	bl	8002340 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1a8      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	4b2b      	ldr	r3, [pc, #172]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4925      	ldr	r1, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_OscConfig+0x244>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff fc12 	bl	8002340 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b20:	f7ff fc0e 	bl	8002340 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e187      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d036      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff fbf2 	bl	8002340 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b60:	f7ff fbee 	bl	8002340 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e167      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_OscConfig+0x240>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x200>
 8002b7e:	e01b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_OscConfig+0x248>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7ff fbdb 	bl	8002340 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7ff fbd7 	bl	8002340 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d907      	bls.n	8002bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e150      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ea      	bne.n	8002b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8097 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b7d      	ldr	r3, [pc, #500]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a7c      	ldr	r2, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b7a      	ldr	r3, [pc, #488]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a73      	ldr	r2, [pc, #460]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fb97 	bl	8002340 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7ff fb93 	bl	8002340 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e10c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_OscConfig+0x474>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x2ea>
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	4a63      	ldr	r2, [pc, #396]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	; 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x30c>
 8002c52:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a5e      	ldr	r2, [pc, #376]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x324>
 8002c6c:	4b58      	ldr	r3, [pc, #352]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70
 8002c78:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a54      	ldr	r2, [pc, #336]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fb58 	bl	8002340 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7ff fb54 	bl	8002340 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0cb      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x334>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb8:	f7ff fb42 	bl	8002340 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fb3e 	bl	8002340 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0b5      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	4a38      	ldr	r2, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a1 	beq.w	8002e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d05c      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d141      	bne.n	8002d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7ff fb12 	bl	8002340 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d20:	f7ff fb0e 	bl	8002340 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e087      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	491b      	ldr	r1, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fae7 	bl	8002340 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d76:	f7ff fae3 	bl	8002340 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e05c      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d88:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x416>
 8002d94:	e054      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_RCC_OscConfig+0x478>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fad0 	bl	8002340 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff facc 	bl	8002340 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e045      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x444>
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e038      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <HAL_RCC_OscConfig+0x4ec>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d028      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d121      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d11a      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0cc      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e64:	4b68      	ldr	r3, [pc, #416]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d90c      	bls.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b65      	ldr	r3, [pc, #404]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7a:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b8      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	494d      	ldr	r1, [pc, #308]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d044      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d119      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e07f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	4b3f      	ldr	r3, [pc, #252]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e067      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f023 0203 	bic.w	r2, r3, #3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	4934      	ldr	r1, [pc, #208]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f40:	f7ff f9fe 	bl	8002340 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f48:	f7ff f9fa 	bl	8002340 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e04f      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 020c 	and.w	r2, r3, #12
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d1eb      	bne.n	8002f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d20c      	bcs.n	8002f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_RCC_ClockConfig+0x1b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4916      	ldr	r1, [pc, #88]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	490e      	ldr	r1, [pc, #56]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fd6:	f000 f821 	bl	800301c <HAL_RCC_GetSysClockFreq>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	490a      	ldr	r1, [pc, #40]	; (8003010 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe8:	5ccb      	ldrb	r3, [r1, r3]
 8002fea:	fa22 f303 	lsr.w	r3, r2, r3
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff f95e 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40023c00 	.word	0x40023c00
 800300c:	40023800 	.word	0x40023800
 8003010:	08008360 	.word	0x08008360
 8003014:	20000008 	.word	0x20000008
 8003018:	2000000c 	.word	0x2000000c

0800301c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b094      	sub	sp, #80	; 0x50
 8003022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
 8003028:	2300      	movs	r3, #0
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800302c:	2300      	movs	r3, #0
 800302e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003034:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b08      	cmp	r3, #8
 800303e:	d00d      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x40>
 8003040:	2b08      	cmp	r3, #8
 8003042:	f200 80e1 	bhi.w	8003208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x34>
 800304a:	2b04      	cmp	r3, #4
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x3a>
 800304e:	e0db      	b.n	8003208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003050:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_GetSysClockFreq+0x204>)
 8003052:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003054:	e0db      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003056:	4b73      	ldr	r3, [pc, #460]	; (8003224 <HAL_RCC_GetSysClockFreq+0x208>)
 8003058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800305a:	e0d8      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003066:	4b6d      	ldr	r3, [pc, #436]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d063      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	63bb      	str	r3, [r7, #56]	; 0x38
 800307c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
 8003086:	2300      	movs	r3, #0
 8003088:	637b      	str	r3, [r7, #52]	; 0x34
 800308a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800308e:	4622      	mov	r2, r4
 8003090:	462b      	mov	r3, r5
 8003092:	f04f 0000 	mov.w	r0, #0
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	0159      	lsls	r1, r3, #5
 800309c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a0:	0150      	lsls	r0, r2, #5
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4621      	mov	r1, r4
 80030a8:	1a51      	subs	r1, r2, r1
 80030aa:	6139      	str	r1, [r7, #16]
 80030ac:	4629      	mov	r1, r5
 80030ae:	eb63 0301 	sbc.w	r3, r3, r1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030c0:	4659      	mov	r1, fp
 80030c2:	018b      	lsls	r3, r1, #6
 80030c4:	4651      	mov	r1, sl
 80030c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ca:	4651      	mov	r1, sl
 80030cc:	018a      	lsls	r2, r1, #6
 80030ce:	4651      	mov	r1, sl
 80030d0:	ebb2 0801 	subs.w	r8, r2, r1
 80030d4:	4659      	mov	r1, fp
 80030d6:	eb63 0901 	sbc.w	r9, r3, r1
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	eb18 0303 	adds.w	r3, r8, r3
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	462b      	mov	r3, r5
 80030fc:	eb49 0303 	adc.w	r3, r9, r3
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800310e:	4629      	mov	r1, r5
 8003110:	024b      	lsls	r3, r1, #9
 8003112:	4621      	mov	r1, r4
 8003114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003118:	4621      	mov	r1, r4
 800311a:	024a      	lsls	r2, r1, #9
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003122:	2200      	movs	r2, #0
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
 8003126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800312c:	f7fd f854 	bl	80001d8 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	e058      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	4618      	mov	r0, r3
 8003144:	4611      	mov	r1, r2
 8003146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800314a:	623b      	str	r3, [r7, #32]
 800314c:	2300      	movs	r3, #0
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0159      	lsls	r1, r3, #5
 8003162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003166:	0150      	lsls	r0, r2, #5
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4641      	mov	r1, r8
 800316e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003172:	4649      	mov	r1, r9
 8003174:	eb63 0b01 	sbc.w	fp, r3, r1
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800318c:	ebb2 040a 	subs.w	r4, r2, sl
 8003190:	eb63 050b 	sbc.w	r5, r3, fp
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	00eb      	lsls	r3, r5, #3
 800319e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a2:	00e2      	lsls	r2, r4, #3
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	4643      	mov	r3, r8
 80031aa:	18e3      	adds	r3, r4, r3
 80031ac:	603b      	str	r3, [r7, #0]
 80031ae:	464b      	mov	r3, r9
 80031b0:	eb45 0303 	adc.w	r3, r5, r3
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	f04f 0300 	mov.w	r3, #0
 80031be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031c2:	4629      	mov	r1, r5
 80031c4:	028b      	lsls	r3, r1, #10
 80031c6:	4621      	mov	r1, r4
 80031c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031cc:	4621      	mov	r1, r4
 80031ce:	028a      	lsls	r2, r1, #10
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d6:	2200      	movs	r2, #0
 80031d8:	61bb      	str	r3, [r7, #24]
 80031da:	61fa      	str	r2, [r7, #28]
 80031dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e0:	f7fc fffa 	bl	80001d8 <__aeabi_uldivmod>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4613      	mov	r3, r2
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	3301      	adds	r3, #1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003206:	e002      	b.n	800320e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetSysClockFreq+0x204>)
 800320a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800320c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003210:	4618      	mov	r0, r3
 8003212:	3750      	adds	r7, #80	; 0x50
 8003214:	46bd      	mov	sp, r7
 8003216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200

08003228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCC_GetHCLKFreq+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000008 	.word	0x20000008

08003240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003244:	f7ff fff0 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08008370 	.word	0x08008370

08003268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800326c:	f7ff ffdc 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b05      	ldr	r3, [pc, #20]	; (8003288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	0b5b      	lsrs	r3, r3, #13
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4903      	ldr	r1, [pc, #12]	; (800328c <HAL_RCC_GetPCLK2Freq+0x24>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40023800 	.word	0x40023800
 800328c:	08008370 	.word	0x08008370

08003290 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07b      	b.n	800339a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b2:	d009      	beq.n	80032c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	61da      	str	r2, [r3, #28]
 80032ba:	e005      	b.n	80032c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe fe46 	bl	8001f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	ea42 0103 	orr.w	r1, r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	f003 0104 	and.w	r1, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	f003 0210 	and.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003388:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b088      	sub	sp, #32
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_SPI_Transmit+0x22>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e126      	b.n	8003612 <HAL_SPI_Transmit+0x270>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033cc:	f7fe ffb8 	bl	8002340 <HAL_GetTick>
 80033d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033d2:	88fb      	ldrh	r3, [r7, #6]
 80033d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
 80033e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033e6:	e10b      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_SPI_Transmit+0x52>
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033f8:	e102      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	88fa      	ldrh	r2, [r7, #6]
 8003418:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003440:	d10f      	bne.n	8003462 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003450:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003460:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d007      	beq.n	8003480 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003488:	d14b      	bne.n	8003522 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0xf6>
 8003492:	8afb      	ldrh	r3, [r7, #22]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d13e      	bne.n	8003516 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	881a      	ldrh	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034bc:	e02b      	b.n	8003516 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d112      	bne.n	80034f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80034f0:	e011      	b.n	8003516 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f2:	f7fe ff25 	bl	8002340 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d803      	bhi.n	800350a <HAL_SPI_Transmit+0x168>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d102      	bne.n	8003510 <HAL_SPI_Transmit+0x16e>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003514:	e074      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ce      	bne.n	80034be <HAL_SPI_Transmit+0x11c>
 8003520:	e04c      	b.n	80035bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <HAL_SPI_Transmit+0x18e>
 800352a:	8afb      	ldrh	r3, [r7, #22]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d140      	bne.n	80035b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	330c      	adds	r3, #12
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003556:	e02c      	b.n	80035b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d113      	bne.n	800358e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	86da      	strh	r2, [r3, #54]	; 0x36
 800358c:	e011      	b.n	80035b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358e:	f7fe fed7 	bl	8002340 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <HAL_SPI_Transmit+0x204>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d102      	bne.n	80035ac <HAL_SPI_Transmit+0x20a>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035b0:	e026      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1cd      	bne.n	8003558 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f8b3 	bl	800372c <SPI_EndRxTxTransaction>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
 80035fc:	e000      	b.n	8003600 <HAL_SPI_Transmit+0x25e>
  }

error:
 80035fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003610:	7ffb      	ldrb	r3, [r7, #31]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800362c:	f7fe fe88 	bl	8002340 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800363c:	f7fe fe80 	bl	8002340 <HAL_GetTick>
 8003640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	0d1b      	lsrs	r3, r3, #20
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003652:	e054      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d050      	beq.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800365c:	f7fe fe70 	bl	8002340 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	429a      	cmp	r2, r3
 800366a:	d902      	bls.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d13d      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800368a:	d111      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d004      	beq.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d107      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b8:	d10f      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e017      	b.n	800371e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	429a      	cmp	r2, r3
 800371a:	d19b      	bne.n	8003654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000008 	.word	0x20000008

0800372c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <SPI_EndRxTxTransaction+0x7c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <SPI_EndRxTxTransaction+0x80>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0d5b      	lsrs	r3, r3, #21
 8003744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003756:	d112      	bne.n	800377e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff ff5a 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d016      	beq.n	800379c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00f      	b.n	800379e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3b01      	subs	r3, #1
 8003788:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d0f2      	beq.n	800377e <SPI_EndRxTxTransaction+0x52>
 8003798:	e000      	b.n	800379c <SPI_EndRxTxTransaction+0x70>
        break;
 800379a:	bf00      	nop
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000008 	.word	0x20000008
 80037ac:	165e9f81 	.word	0x165e9f81

080037b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fe fc14 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f000 fca8 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d001      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e04e      	b.n	8003906 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a23      	ldr	r2, [pc, #140]	; (8003914 <HAL_TIM_Base_Start_IT+0xc4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d022      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003892:	d01d      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <HAL_TIM_Base_Start_IT+0xc8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d018      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_TIM_Base_Start_IT+0xcc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_TIM_Base_Start_IT+0xd4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a19      	ldr	r2, [pc, #100]	; (8003928 <HAL_TIM_Base_Start_IT+0xd8>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x80>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_Base_Start_IT+0xdc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d111      	bne.n	80038f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b06      	cmp	r3, #6
 80038e0:	d010      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	e007      	b.n	8003904 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800

08003930 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10f      	bne.n	8003978 <HAL_TIM_Base_Stop_IT+0x48>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a1a      	ldr	r2, [r3, #32]
 800395e:	f240 4344 	movw	r3, #1092	; 0x444
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_TIM_Base_Stop_IT+0x48>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e041      	b.n	8003a24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f839 	bl	8003a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 fbb9 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_TIM_PWM_Start+0x24>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e022      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d109      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x3e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e015      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start+0x58>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e008      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07c      	b.n	8003bac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0x82>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac0:	e013      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x92>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad0:	e00b      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0xa2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae0:	e003      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2201      	movs	r2, #1
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fe10 	bl	8004718 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2d      	ldr	r2, [pc, #180]	; (8003bb4 <HAL_TIM_PWM_Start+0x174>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_PWM_Start+0xcc>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <HAL_TIM_PWM_Start+0x178>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_PWM_Start+0xd0>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_TIM_PWM_Start+0xd2>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <HAL_TIM_PWM_Start+0x174>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d022      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d01d      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_TIM_PWM_Start+0x17c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a1d      	ldr	r2, [pc, #116]	; (8003bc0 <HAL_TIM_PWM_Start+0x180>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d013      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a1c      	ldr	r2, [pc, #112]	; (8003bc4 <HAL_TIM_PWM_Start+0x184>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIM_PWM_Start+0x178>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_TIM_PWM_Start+0x188>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x136>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a16      	ldr	r2, [pc, #88]	; (8003bcc <HAL_TIM_PWM_Start+0x18c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d111      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d010      	beq.n	8003baa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	e007      	b.n	8003baa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40000400 	.word	0x40000400
 8003bc0:	40000800 	.word	0x40000800
 8003bc4:	40000c00 	.word	0x40000c00
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40001800 	.word	0x40001800

08003bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0202 	mvn.w	r2, #2
 8003bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa77 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa69 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa7a 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0204 	mvn.w	r2, #4
 8003c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2202      	movs	r2, #2
 8003c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa4d 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa3f 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fa50 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0208 	mvn.w	r2, #8
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa23 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa15 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa26 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9f9 	bl	8004106 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9eb 	bl	80040f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f9fc 	bl	800411a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0201 	mvn.w	r2, #1
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe f8cc 	bl	8001eec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fdca 	bl	8004914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b40      	cmp	r3, #64	; 0x40
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9c1 	bl	800412e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0220 	mvn.w	r2, #32
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fd94 	bl	8004900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0ae      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	f200 809f 	bhi.w	8003f4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e49 	.word	0x08003e49
 8003e18:	08003f4d 	.word	0x08003f4d
 8003e1c:	08003f4d 	.word	0x08003f4d
 8003e20:	08003f4d 	.word	0x08003f4d
 8003e24:	08003e89 	.word	0x08003e89
 8003e28:	08003f4d 	.word	0x08003f4d
 8003e2c:	08003f4d 	.word	0x08003f4d
 8003e30:	08003f4d 	.word	0x08003f4d
 8003e34:	08003ecb 	.word	0x08003ecb
 8003e38:	08003f4d 	.word	0x08003f4d
 8003e3c:	08003f4d 	.word	0x08003f4d
 8003e40:	08003f4d 	.word	0x08003f4d
 8003e44:	08003f0b 	.word	0x08003f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fa18 	bl	8004284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
 8003e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0204 	bic.w	r2, r2, #4
 8003e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6999      	ldr	r1, [r3, #24]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	619a      	str	r2, [r3, #24]
      break;
 8003e86:	e064      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fa68 	bl	8004364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6999      	ldr	r1, [r3, #24]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	619a      	str	r2, [r3, #24]
      break;
 8003ec8:	e043      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fabd 	bl	8004450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0208 	orr.w	r2, r2, #8
 8003ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0204 	bic.w	r2, r2, #4
 8003ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69d9      	ldr	r1, [r3, #28]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	61da      	str	r2, [r3, #28]
      break;
 8003f08:	e023      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fb11 	bl	8004538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69d9      	ldr	r1, [r3, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	021a      	lsls	r2, r3, #8
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	61da      	str	r2, [r3, #28]
      break;
 8003f4a:	e002      	b.n	8003f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIM_ConfigClockSource+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e0b4      	b.n	80040ea <HAL_TIM_ConfigClockSource+0x186>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d03e      	beq.n	8004038 <HAL_TIM_ConfigClockSource+0xd4>
 8003fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbe:	f200 8087 	bhi.w	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc6:	f000 8086 	beq.w	80040d6 <HAL_TIM_ConfigClockSource+0x172>
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	d87f      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d01a      	beq.n	800400a <HAL_TIM_ConfigClockSource+0xa6>
 8003fd4:	2b70      	cmp	r3, #112	; 0x70
 8003fd6:	d87b      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d050      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x11a>
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d877      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b50      	cmp	r3, #80	; 0x50
 8003fe2:	d03c      	beq.n	800405e <HAL_TIM_ConfigClockSource+0xfa>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d873      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d058      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x13a>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d86f      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b30      	cmp	r3, #48	; 0x30
 8003ff2:	d064      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d86b      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d060      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x15a>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d867      	bhi.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d05c      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	2b10      	cmp	r3, #16
 8004006:	d05a      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	e062      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f000 fb5d 	bl	80046d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800402c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	609a      	str	r2, [r3, #8]
      break;
 8004036:	e04f      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6899      	ldr	r1, [r3, #8]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f000 fb46 	bl	80046d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800405a:	609a      	str	r2, [r3, #8]
      break;
 800405c:	e03c      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	461a      	mov	r2, r3
 800406c:	f000 faba 	bl	80045e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2150      	movs	r1, #80	; 0x50
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fb13 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 800407c:	e02c      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6859      	ldr	r1, [r3, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	461a      	mov	r2, r3
 800408c:	f000 fad9 	bl	8004642 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2160      	movs	r1, #96	; 0x60
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fb03 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 800409c:	e01c      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f000 fa9a 	bl	80045e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 faf3 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 80040bc:	e00c      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f000 faea 	bl	80046a2 <TIM_ITRx_SetConfig>
      break;
 80040ce:	e003      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	e000      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a40      	ldr	r2, [pc, #256]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d00f      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3d      	ldr	r2, [pc, #244]	; (800425c <TIM_Base_SetConfig+0x118>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00b      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <TIM_Base_SetConfig+0x120>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <TIM_Base_SetConfig+0x114>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d027      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <TIM_Base_SetConfig+0x118>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d023      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <TIM_Base_SetConfig+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <TIM_Base_SetConfig+0x124>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d017      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <TIM_Base_SetConfig+0x128>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_Base_SetConfig+0x12c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_Base_SetConfig+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_Base_SetConfig+0x134>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <TIM_Base_SetConfig+0x138>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a23      	ldr	r2, [pc, #140]	; (8004280 <TIM_Base_SetConfig+0x13c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d103      	bne.n	8004244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40010400 	.word	0x40010400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800
 8004278:	40001800 	.word	0x40001800
 800427c:	40001c00 	.word	0x40001c00
 8004280:	40002000 	.word	0x40002000

08004284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0302 	bic.w	r3, r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a20      	ldr	r2, [pc, #128]	; (800435c <TIM_OC1_SetConfig+0xd8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC1_SetConfig+0x64>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <TIM_OC1_SetConfig+0xdc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d10c      	bne.n	8004302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 0308 	bic.w	r3, r3, #8
 80042ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a15      	ldr	r2, [pc, #84]	; (800435c <TIM_OC1_SetConfig+0xd8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC1_SetConfig+0x8e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC1_SetConfig+0xdc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d111      	bne.n	8004336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	621a      	str	r2, [r3, #32]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40010000 	.word	0x40010000
 8004360:	40010400 	.word	0x40010400

08004364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f023 0210 	bic.w	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0320 	bic.w	r3, r3, #32
 80043ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a22      	ldr	r2, [pc, #136]	; (8004448 <TIM_OC2_SetConfig+0xe4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_OC2_SetConfig+0x68>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a21      	ldr	r2, [pc, #132]	; (800444c <TIM_OC2_SetConfig+0xe8>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10d      	bne.n	80043e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <TIM_OC2_SetConfig+0xe4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_OC2_SetConfig+0x94>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <TIM_OC2_SetConfig+0xe8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d113      	bne.n	8004420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	621a      	str	r2, [r3, #32]
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40010000 	.word	0x40010000
 800444c:	40010400 	.word	0x40010400

08004450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a21      	ldr	r2, [pc, #132]	; (8004530 <TIM_OC3_SetConfig+0xe0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_OC3_SetConfig+0x66>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a20      	ldr	r2, [pc, #128]	; (8004534 <TIM_OC3_SetConfig+0xe4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10d      	bne.n	80044d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <TIM_OC3_SetConfig+0xe0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_OC3_SetConfig+0x92>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <TIM_OC3_SetConfig+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d113      	bne.n	800450a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	621a      	str	r2, [r3, #32]
}
 8004524:	bf00      	nop
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40010000 	.word	0x40010000
 8004534:	40010400 	.word	0x40010400

08004538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	031b      	lsls	r3, r3, #12
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <TIM_OC4_SetConfig+0xa4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_OC4_SetConfig+0x68>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a11      	ldr	r2, [pc, #68]	; (80045e0 <TIM_OC4_SetConfig+0xa8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d109      	bne.n	80045b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40010400 	.word	0x40010400

080045e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 030a 	bic.w	r3, r3, #10
 8004620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	621a      	str	r2, [r3, #32]
}
 8004636:	bf00      	nop
 8004638:	371c      	adds	r7, #28
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004642:	b480      	push	{r7}
 8004644:	b087      	sub	sp, #28
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f023 0210 	bic.w	r2, r3, #16
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800466c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800467e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b085      	sub	sp, #20
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	f043 0307 	orr.w	r3, r3, #7
 80046c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	021a      	lsls	r2, r3, #8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2201      	movs	r2, #1
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	43db      	mvns	r3, r3
 800473a:	401a      	ands	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	621a      	str	r2, [r3, #32]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004778:	2302      	movs	r3, #2
 800477a:	e05a      	b.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a21      	ldr	r2, [pc, #132]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d01d      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1d      	ldr	r2, [pc, #116]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a15      	ldr	r2, [pc, #84]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10c      	bne.n	8004820 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	4313      	orrs	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800
 800484c:	40000c00 	.word	0x40000c00
 8004850:	40010400 	.word	0x40010400
 8004854:	40014000 	.word	0x40014000
 8004858:	40001800 	.word	0x40001800

0800485c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004874:	2302      	movs	r3, #2
 8004876:	e03d      	b.n	80048f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e03f      	b.n	80049ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd fbd0 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800496a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f929 	bl	8004bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08a      	sub	sp, #40	; 0x28
 80049c6:	af02      	add	r7, sp, #8
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d17c      	bne.n	8004adc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_UART_Transmit+0x2c>
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e075      	b.n	8004ade <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_UART_Transmit+0x3e>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e06e      	b.n	8004ade <HAL_UART_Transmit+0x11c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2221      	movs	r2, #33	; 0x21
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a16:	f7fd fc93 	bl	8002340 <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88fa      	ldrh	r2, [r7, #6]
 8004a20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	88fa      	ldrh	r2, [r7, #6]
 8004a26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a30:	d108      	bne.n	8004a44 <HAL_UART_Transmit+0x82>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	e003      	b.n	8004a4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a54:	e02a      	b.n	8004aac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2180      	movs	r1, #128	; 0x80
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f840 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e036      	b.n	8004ade <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	3302      	adds	r3, #2
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e007      	b.n	8004a9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1cf      	bne.n	8004a56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2140      	movs	r1, #64	; 0x40
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f810 	bl	8004ae6 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b090      	sub	sp, #64	; 0x40
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4613      	mov	r3, r2
 8004af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af6:	e050      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d04c      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b06:	f7fd fc1b 	bl	8002340 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d241      	bcs.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	330c      	adds	r3, #12
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b36:	637a      	str	r2, [r7, #52]	; 0x34
 8004b38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3314      	adds	r3, #20
 8004b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6a:	623a      	str	r2, [r7, #32]
 8004b6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	69f9      	ldr	r1, [r7, #28]
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e5      	bne.n	8004b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00f      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d09f      	beq.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3740      	adds	r7, #64	; 0x40
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b0c0      	sub	sp, #256	; 0x100
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	ea40 0301 	orr.w	r3, r0, r1
 8004bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	ea40 0301 	orr.w	r3, r0, r1
 8004c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8f      	ldr	r3, [pc, #572]	; (8004e90 <UART_SetConfig+0x2cc>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0xa0>
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <UART_SetConfig+0x2d0>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fb00 	bl	8003268 <HAL_RCC_GetPCLK2Freq>
 8004c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c6c:	e003      	b.n	8004c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7fe fae7 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8004c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	f040 810c 	bne.w	8004e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	eb12 0801 	adds.w	r8, r2, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb43 0901 	adc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d08:	f7fb fa66 	bl	80001d8 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d34:	415b      	adcs	r3, r3
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb43 0b01 	adc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	4692      	mov	sl, r2
 8004d5e:	469b      	mov	fp, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	eb1a 0303 	adds.w	r3, sl, r3
 8004d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d9e:	f7fb fa1b 	bl	80001d8 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	; 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004de8:	415b      	adcs	r3, r3
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6339      	str	r1, [r7, #48]	; 0x30
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e5a:	f7fb f9bd 	bl	80001d8 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8c:	e105      	b.n	800509a <UART_SetConfig+0x4d6>
 8004e8e:	bf00      	nop
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40011400 	.word	0x40011400
 8004e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	6239      	str	r1, [r7, #32]
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0501 	adc.w	r5, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4621      	mov	r1, r4
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f1c:	f7fb f95c 	bl	80001d8 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6139      	str	r1, [r7, #16]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fa8:	4649      	mov	r1, r9
 8004faa:	008b      	lsls	r3, r1, #2
 8004fac:	4641      	mov	r1, r8
 8004fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fba:	f7fb f90d 	bl	80001d8 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a34      	ldr	r2, [pc, #208]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe2:	441c      	add	r4, r3
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe8:	2200      	movs	r2, #0
 8004fea:	673b      	str	r3, [r7, #112]	; 0x70
 8004fec:	677a      	str	r2, [r7, #116]	; 0x74
 8004fee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005002:	4641      	mov	r1, r8
 8005004:	1851      	adds	r1, r2, r1
 8005006:	6039      	str	r1, [r7, #0]
 8005008:	4649      	mov	r1, r9
 800500a:	414b      	adcs	r3, r1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501a:	4659      	mov	r1, fp
 800501c:	00cb      	lsls	r3, r1, #3
 800501e:	4651      	mov	r1, sl
 8005020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005024:	4651      	mov	r1, sl
 8005026:	00ca      	lsls	r2, r1, #3
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	4603      	mov	r3, r0
 800502e:	4642      	mov	r2, r8
 8005030:	189b      	adds	r3, r3, r2
 8005032:	66bb      	str	r3, [r7, #104]	; 0x68
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	663b      	str	r3, [r7, #96]	; 0x60
 8005048:	667a      	str	r2, [r7, #100]	; 0x64
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005056:	4649      	mov	r1, r9
 8005058:	008b      	lsls	r3, r1, #2
 800505a:	4641      	mov	r1, r8
 800505c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005060:	4641      	mov	r1, r8
 8005062:	008a      	lsls	r2, r1, #2
 8005064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005068:	f7fb f8b6 	bl	80001d8 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005072:	fba3 1302 	umull	r1, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	3332      	adds	r3, #50	; 0x32
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4422      	add	r2, r4
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	bf00      	nop
 800509c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050a0:	46bd      	mov	sp, r7
 80050a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a6:	bf00      	nop
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <__libc_init_array>:
 80050ac:	b570      	push	{r4, r5, r6, lr}
 80050ae:	4d0d      	ldr	r5, [pc, #52]	; (80050e4 <__libc_init_array+0x38>)
 80050b0:	4c0d      	ldr	r4, [pc, #52]	; (80050e8 <__libc_init_array+0x3c>)
 80050b2:	1b64      	subs	r4, r4, r5
 80050b4:	10a4      	asrs	r4, r4, #2
 80050b6:	2600      	movs	r6, #0
 80050b8:	42a6      	cmp	r6, r4
 80050ba:	d109      	bne.n	80050d0 <__libc_init_array+0x24>
 80050bc:	4d0b      	ldr	r5, [pc, #44]	; (80050ec <__libc_init_array+0x40>)
 80050be:	4c0c      	ldr	r4, [pc, #48]	; (80050f0 <__libc_init_array+0x44>)
 80050c0:	f000 f820 	bl	8005104 <_init>
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	2600      	movs	r6, #0
 80050ca:	42a6      	cmp	r6, r4
 80050cc:	d105      	bne.n	80050da <__libc_init_array+0x2e>
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
 80050d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d4:	4798      	blx	r3
 80050d6:	3601      	adds	r6, #1
 80050d8:	e7ee      	b.n	80050b8 <__libc_init_array+0xc>
 80050da:	f855 3b04 	ldr.w	r3, [r5], #4
 80050de:	4798      	blx	r3
 80050e0:	3601      	adds	r6, #1
 80050e2:	e7f2      	b.n	80050ca <__libc_init_array+0x1e>
 80050e4:	08008380 	.word	0x08008380
 80050e8:	08008380 	.word	0x08008380
 80050ec:	08008380 	.word	0x08008380
 80050f0:	08008384 	.word	0x08008384

080050f4 <memset>:
 80050f4:	4402      	add	r2, r0
 80050f6:	4603      	mov	r3, r0
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d100      	bne.n	80050fe <memset+0xa>
 80050fc:	4770      	bx	lr
 80050fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005102:	e7f9      	b.n	80050f8 <memset+0x4>

08005104 <_init>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	bf00      	nop
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr

08005110 <_fini>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr
