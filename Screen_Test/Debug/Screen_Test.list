
Screen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007564  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032e0  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d4  0800a9d4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d4  0800a9d4  0001a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9dc  0800a9dc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000224  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138db  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244b  00000000  00000000  00033987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  00036f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226b4  00000000  00000000  00038058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bbc  00000000  00000000  0005a70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b70  00000000  00000000  0006f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fe38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000509c  00000000  00000000  0013fe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076dc 	.word	0x080076dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080076dc 	.word	0x080076dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000d70:	b490      	push	{r4, r7}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4623      	mov	r3, r4
 8000d80:	80fb      	strh	r3, [r7, #6]
 8000d82:	4603      	mov	r3, r0
 8000d84:	80bb      	strh	r3, [r7, #4]
 8000d86:	460b      	mov	r3, r1
 8000d88:	807b      	strh	r3, [r7, #2]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <Paint_NewImage+0x7c>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000d94:	4a15      	ldr	r2, [pc, #84]	; (8000dec <Paint_NewImage+0x7c>)
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <Paint_NewImage+0x7c>)
 8000d9c:	883b      	ldrh	r3, [r7, #0]
 8000d9e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <Paint_NewImage+0x7c>)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000da6:	4a11      	ldr	r2, [pc, #68]	; (8000dec <Paint_NewImage+0x7c>)
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
   
    Paint.Rotate = Rotate;
 8000dac:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <Paint_NewImage+0x7c>)
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <Paint_NewImage+0x7c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d002      	beq.n	8000dc4 <Paint_NewImage+0x54>
 8000dbe:	887b      	ldrh	r3, [r7, #2]
 8000dc0:	2bb4      	cmp	r3, #180	; 0xb4
 8000dc2:	d106      	bne.n	8000dd2 <Paint_NewImage+0x62>
        Paint.Width = Width;
 8000dc4:	4a09      	ldr	r2, [pc, #36]	; (8000dec <Paint_NewImage+0x7c>)
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <Paint_NewImage+0x7c>)
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	80d3      	strh	r3, [r2, #6]
 8000dd0:	e006      	b.n	8000de0 <Paint_NewImage+0x70>
    } else {
        Paint.Width = Height;
 8000dd2:	4a06      	ldr	r2, [pc, #24]	; (8000dec <Paint_NewImage+0x7c>)
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <Paint_NewImage+0x7c>)
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	80d3      	strh	r3, [r2, #6]
    }
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc90      	pop	{r4, r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000098 	.word	0x20000098

08000df0 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <Paint_SetClearFuntion+0x1c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200000b4 	.word	0x200000b4

08000e10 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <Paint_SetDisplayFuntion+0x1c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200000b0 	.word	0x200000b0

08000e30 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000e42:	4b4f      	ldr	r3, [pc, #316]	; (8000f80 <Paint_SetPixel+0x150>)
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 808d 	bhi.w	8000f6a <Paint_SetPixel+0x13a>
 8000e50:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <Paint_SetPixel+0x150>)
 8000e52:	88db      	ldrh	r3, [r3, #6]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	88ba      	ldrh	r2, [r7, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f200 8086 	bhi.w	8000f6a <Paint_SetPixel+0x13a>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000e5e:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <Paint_SetPixel+0x150>)
 8000e60:	89db      	ldrh	r3, [r3, #14]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000e68:	d02c      	beq.n	8000ec4 <Paint_SetPixel+0x94>
 8000e6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000e6e:	dc7e      	bgt.n	8000f6e <Paint_SetPixel+0x13e>
 8000e70:	2bb4      	cmp	r3, #180	; 0xb4
 8000e72:	d016      	beq.n	8000ea2 <Paint_SetPixel+0x72>
 8000e74:	2bb4      	cmp	r3, #180	; 0xb4
 8000e76:	dc7a      	bgt.n	8000f6e <Paint_SetPixel+0x13e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <Paint_SetPixel+0x52>
 8000e7c:	2b5a      	cmp	r3, #90	; 0x5a
 8000e7e:	d005      	beq.n	8000e8c <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8000e80:	e075      	b.n	8000f6e <Paint_SetPixel+0x13e>
        X = Xpoint;
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	81bb      	strh	r3, [r7, #12]
        break;
 8000e8a:	e026      	b.n	8000eda <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <Paint_SetPixel+0x150>)
 8000e8e:	891b      	ldrh	r3, [r3, #8]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	88bb      	ldrh	r3, [r7, #4]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	81bb      	strh	r3, [r7, #12]
        break;
 8000ea0:	e01b      	b.n	8000eda <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <Paint_SetPixel+0x150>)
 8000ea4:	891b      	ldrh	r3, [r3, #8]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000eb2:	4b33      	ldr	r3, [pc, #204]	; (8000f80 <Paint_SetPixel+0x150>)
 8000eb4:	895b      	ldrh	r3, [r3, #10]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	81bb      	strh	r3, [r7, #12]
        break;
 8000ec2:	e00a      	b.n	8000eda <Paint_SetPixel+0xaa>
        X = Ypoint;
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <Paint_SetPixel+0x150>)
 8000eca:	895b      	ldrh	r3, [r3, #10]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	81bb      	strh	r3, [r7, #12]
        break;
 8000ed8:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <Paint_SetPixel+0x150>)
 8000edc:	8a1b      	ldrh	r3, [r3, #16]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d846      	bhi.n	8000f72 <Paint_SetPixel+0x142>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <Paint_SetPixel+0xbc>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f43 	.word	0x08000f43
 8000ef0:	08000efd 	.word	0x08000efd
 8000ef4:	08000f0f 	.word	0x08000f0f
 8000ef8:	08000f21 	.word	0x08000f21
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <Paint_SetPixel+0x150>)
 8000efe:	891b      	ldrh	r3, [r3, #8]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	89fb      	ldrh	r3, [r7, #14]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	81fb      	strh	r3, [r7, #14]
        break;
 8000f0c:	e01a      	b.n	8000f44 <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <Paint_SetPixel+0x150>)
 8000f10:	895b      	ldrh	r3, [r3, #10]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	89bb      	ldrh	r3, [r7, #12]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	81bb      	strh	r3, [r7, #12]
        break;
 8000f1e:	e011      	b.n	8000f44 <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <Paint_SetPixel+0x150>)
 8000f22:	891b      	ldrh	r3, [r3, #8]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <Paint_SetPixel+0x150>)
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	89bb      	ldrh	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	81bb      	strh	r3, [r7, #12]
        break;
 8000f40:	e000      	b.n	8000f44 <Paint_SetPixel+0x114>
        break;
 8000f42:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <Paint_SetPixel+0x150>)
 8000f46:	891b      	ldrh	r3, [r3, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	89fa      	ldrh	r2, [r7, #14]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d812      	bhi.n	8000f76 <Paint_SetPixel+0x146>
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <Paint_SetPixel+0x150>)
 8000f52:	895b      	ldrh	r3, [r3, #10]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d80c      	bhi.n	8000f76 <Paint_SetPixel+0x146>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <Paint_SetPixel+0x154>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	887a      	ldrh	r2, [r7, #2]
 8000f62:	89b9      	ldrh	r1, [r7, #12]
 8000f64:	89f8      	ldrh	r0, [r7, #14]
 8000f66:	4798      	blx	r3
 8000f68:	e006      	b.n	8000f78 <Paint_SetPixel+0x148>
        return;
 8000f6a:	bf00      	nop
 8000f6c:	e004      	b.n	8000f78 <Paint_SetPixel+0x148>
        return;
 8000f6e:	bf00      	nop
 8000f70:	e002      	b.n	8000f78 <Paint_SetPixel+0x148>
        return;
 8000f72:	bf00      	nop
 8000f74:	e000      	b.n	8000f78 <Paint_SetPixel+0x148>
        return;
 8000f76:	bf00      	nop
}
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000098 	.word	0x20000098
 8000f84:	200000b0 	.word	0x200000b0

08000f88 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <Paint_Clear+0x1c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	88fa      	ldrh	r2, [r7, #6]
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4798      	blx	r3
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000b4 	.word	0x200000b4

08000fa8 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	807b      	strh	r3, [r7, #2]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <Paint_DrawPoint+0x12c>)
 8000fc8:	889b      	ldrh	r3, [r3, #4]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	88fa      	ldrh	r2, [r7, #6]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d87b      	bhi.n	80010ca <Paint_DrawPoint+0x122>
 8000fd2:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <Paint_DrawPoint+0x12c>)
 8000fd4:	88db      	ldrh	r3, [r3, #6]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	88ba      	ldrh	r2, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d875      	bhi.n	80010ca <Paint_DrawPoint+0x122>
        //Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 8000fde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d144      	bne.n	8001070 <Paint_DrawPoint+0xc8>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	81fb      	strh	r3, [r7, #14]
 8000fea:	e039      	b.n	8001060 <Paint_DrawPoint+0xb8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	81bb      	strh	r3, [r7, #12]
 8000ff0:	e029      	b.n	8001046 <Paint_DrawPoint+0x9e>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8000ff2:	88fa      	ldrh	r2, [r7, #6]
 8000ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	787b      	ldrb	r3, [r7, #1]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	db28      	blt.n	8001054 <Paint_DrawPoint+0xac>
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001008:	441a      	add	r2, r3
 800100a:	787b      	ldrb	r3, [r7, #1]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	db20      	blt.n	8001054 <Paint_DrawPoint+0xac>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001012:	89fa      	ldrh	r2, [r7, #14]
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	4413      	add	r3, r2
 8001018:	b29a      	uxth	r2, r3
 800101a:	787b      	ldrb	r3, [r7, #1]
 800101c:	b29b      	uxth	r3, r3
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	b298      	uxth	r0, r3
 8001022:	89ba      	ldrh	r2, [r7, #12]
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	b29a      	uxth	r2, r3
 800102a:	787b      	ldrb	r3, [r7, #1]
 800102c:	b29b      	uxth	r3, r3
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b29b      	uxth	r3, r3
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fefb 	bl	8000e30 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800103a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800103e:	b29b      	uxth	r3, r3
 8001040:	3301      	adds	r3, #1
 8001042:	b29b      	uxth	r3, r3
 8001044:	81bb      	strh	r3, [r7, #12]
 8001046:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800104a:	787b      	ldrb	r3, [r7, #1]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	3b01      	subs	r3, #1
 8001050:	429a      	cmp	r2, r3
 8001052:	dbce      	blt.n	8000ff2 <Paint_DrawPoint+0x4a>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001054:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001058:	b29b      	uxth	r3, r3
 800105a:	3301      	adds	r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	81fb      	strh	r3, [r7, #14]
 8001060:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001064:	787b      	ldrb	r3, [r7, #1]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	3b01      	subs	r3, #1
 800106a:	429a      	cmp	r2, r3
 800106c:	dbbe      	blt.n	8000fec <Paint_DrawPoint+0x44>
 800106e:	e02d      	b.n	80010cc <Paint_DrawPoint+0x124>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001070:	2300      	movs	r3, #0
 8001072:	81fb      	strh	r3, [r7, #14]
 8001074:	e023      	b.n	80010be <Paint_DrawPoint+0x116>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8001076:	2300      	movs	r3, #0
 8001078:	81bb      	strh	r3, [r7, #12]
 800107a:	e015      	b.n	80010a8 <Paint_DrawPoint+0x100>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800107c:	89fa      	ldrh	r2, [r7, #14]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	4413      	add	r3, r2
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	b298      	uxth	r0, r3
 8001088:	89ba      	ldrh	r2, [r7, #12]
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	3b01      	subs	r3, #1
 8001092:	b29b      	uxth	r3, r3
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff feca 	bl	8000e30 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800109c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3301      	adds	r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	81bb      	strh	r3, [r7, #12]
 80010a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dbe4      	blt.n	800107c <Paint_DrawPoint+0xd4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80010b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	81fb      	strh	r3, [r7, #14]
 80010be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010c2:	787b      	ldrb	r3, [r7, #1]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbd6      	blt.n	8001076 <Paint_DrawPoint+0xce>
 80010c8:	e000      	b.n	80010cc <Paint_DrawPoint+0x124>
        return;
 80010ca:	bf00      	nop
            }
        }
    }
}
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000098 	.word	0x20000098

080010d8 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b08d      	sub	sp, #52	; 0x34
 80010dc:	af02      	add	r7, sp, #8
 80010de:	4604      	mov	r4, r0
 80010e0:	4608      	mov	r0, r1
 80010e2:	4611      	mov	r1, r2
 80010e4:	461a      	mov	r2, r3
 80010e6:	4623      	mov	r3, r4
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	4603      	mov	r3, r0
 80010ec:	80bb      	strh	r3, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]
 80010f2:	4613      	mov	r3, r2
 80010f4:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <Paint_DrawLine+0x154>)
 80010f8:	889b      	ldrh	r3, [r3, #4]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	88fa      	ldrh	r2, [r7, #6]
 80010fe:	429a      	cmp	r2, r3
 8001100:	f200 808c 	bhi.w	800121c <Paint_DrawLine+0x144>
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <Paint_DrawLine+0x154>)
 8001106:	88db      	ldrh	r3, [r3, #6]
 8001108:	b29b      	uxth	r3, r3
 800110a:	88ba      	ldrh	r2, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	f200 8085 	bhi.w	800121c <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001112:	4b46      	ldr	r3, [pc, #280]	; (800122c <Paint_DrawLine+0x154>)
 8001114:	889b      	ldrh	r3, [r3, #4]
 8001116:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	429a      	cmp	r2, r3
 800111c:	d87e      	bhi.n	800121c <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <Paint_DrawLine+0x154>)
 8001120:	88db      	ldrh	r3, [r3, #6]
 8001122:	b29b      	uxth	r3, r3
 8001124:	883a      	ldrh	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d878      	bhi.n	800121c <Paint_DrawLine+0x144>
        //Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800112e:	88bb      	ldrh	r3, [r7, #4]
 8001130:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	bfb8      	it	lt
 800113c:	425b      	neglt	r3, r3
 800113e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001140:	883a      	ldrh	r2, [r7, #0]
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	bfb8      	it	lt
 800114a:	425b      	neglt	r3, r3
 800114c:	425b      	negs	r3, r3
 800114e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	429a      	cmp	r2, r3
 8001156:	d201      	bcs.n	800115c <Paint_DrawLine+0x84>
 8001158:	2301      	movs	r3, #1
 800115a:	e001      	b.n	8001160 <Paint_DrawLine+0x88>
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001162:	88ba      	ldrh	r2, [r7, #4]
 8001164:	883b      	ldrh	r3, [r7, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d201      	bcs.n	800116e <Paint_DrawLine+0x96>
 800116a:	2301      	movs	r3, #1
 800116c:	e001      	b.n	8001172 <Paint_DrawLine+0x9a>
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	4413      	add	r3, r2
 800117a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001180:	7ffb      	ldrb	r3, [r7, #31]
 8001182:	3301      	adds	r3, #1
 8001184:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 8001186:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800118a:	2b01      	cmp	r3, #1
 800118c:	d118      	bne.n	80011c0 <Paint_DrawLine+0xe8>
 800118e:	7ffa      	ldrb	r2, [r7, #31]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <Paint_DrawLine+0x158>)
 8001192:	fba3 1302 	umull	r1, r3, r3, r2
 8001196:	0859      	lsrs	r1, r3, #1
 8001198:	460b      	mov	r3, r1
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	440b      	add	r3, r1
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <Paint_DrawLine+0xe8>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80011a6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011aa:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80011ac:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80011ae:	2201      	movs	r2, #1
 80011b0:	9200      	str	r2, [sp, #0]
 80011b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b6:	f7ff fef7 	bl	8000fa8 <Paint_DrawPoint>
            Dotted_Len = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	77fb      	strb	r3, [r7, #31]
 80011be:	e008      	b.n	80011d2 <Paint_DrawLine+0xfa>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80011c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011c4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80011c6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80011c8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80011ca:	2401      	movs	r4, #1
 80011cc:	9400      	str	r4, [sp, #0]
 80011ce:	f7ff feeb 	bl	8000fa8 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dc0c      	bgt.n	80011f6 <Paint_DrawLine+0x11e>
            if (Xpoint == Xend)
 80011dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d01d      	beq.n	8001220 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 80011e4:	6a3a      	ldr	r2, [r7, #32]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	4413      	add	r3, r2
 80011ea:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011f2:	4413      	add	r3, r2
 80011f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbbf      	blt.n	8001180 <Paint_DrawLine+0xa8>
            if (Ypoint == Yend)
 8001200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001202:	883b      	ldrh	r3, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d00d      	beq.n	8001224 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8001208:	6a3a      	ldr	r2, [r7, #32]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4413      	add	r3, r2
 800120e:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	b29a      	uxth	r2, r3
 8001214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001216:	4413      	add	r3, r2
 8001218:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800121a:	e7b1      	b.n	8001180 <Paint_DrawLine+0xa8>
        return;
 800121c:	bf00      	nop
 800121e:	e002      	b.n	8001226 <Paint_DrawLine+0x14e>
                break;
 8001220:	bf00      	nop
 8001222:	e000      	b.n	8001226 <Paint_DrawLine+0x14e>
                break;
 8001224:	bf00      	nop
        }
    }
}
 8001226:	372c      	adds	r7, #44	; 0x2c
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	20000098 	.word	0x20000098
 8001230:	aaaaaaab 	.word	0xaaaaaaab

08001234 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b087      	sub	sp, #28
 8001238:	af02      	add	r7, sp, #8
 800123a:	4604      	mov	r4, r0
 800123c:	4608      	mov	r0, r1
 800123e:	4611      	mov	r1, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4623      	mov	r3, r4
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	4603      	mov	r3, r0
 8001248:	80bb      	strh	r3, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	807b      	strh	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <Paint_DrawCircle+0x1bc>)
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	b29b      	uxth	r3, r3
 8001258:	88fa      	ldrh	r2, [r7, #6]
 800125a:	429a      	cmp	r2, r3
 800125c:	f200 8172 	bhi.w	8001544 <Paint_DrawCircle+0x310>
 8001260:	4b63      	ldr	r3, [pc, #396]	; (80013f0 <Paint_DrawCircle+0x1bc>)
 8001262:	88db      	ldrh	r3, [r3, #6]
 8001264:	b29b      	uxth	r3, r3
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	f080 816b 	bcs.w	8001544 <Paint_DrawCircle+0x310>
        return;
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	b29b      	uxth	r3, r3
 800127c:	f1c3 0303 	rsb	r3, r3, #3
 8001280:	b29b      	uxth	r3, r3
 8001282:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 8001284:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001288:	2b01      	cmp	r3, #1
 800128a:	f040 8153 	bne.w	8001534 <Paint_DrawCircle+0x300>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800128e:	e0a6      	b.n	80013de <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001290:	89fb      	ldrh	r3, [r7, #14]
 8001292:	813b      	strh	r3, [r7, #8]
 8001294:	e075      	b.n	8001382 <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8001296:	89fa      	ldrh	r2, [r7, #14]
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4413      	add	r3, r2
 800129c:	b298      	uxth	r0, r3
 800129e:	893a      	ldrh	r2, [r7, #8]
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	b299      	uxth	r1, r3
 80012a6:	883a      	ldrh	r2, [r7, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	f7ff fe7b 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b298      	uxth	r0, r3
 80012ba:	893a      	ldrh	r2, [r7, #8]
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	b299      	uxth	r1, r3
 80012c2:	883a      	ldrh	r2, [r7, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2301      	movs	r3, #1
 80012ca:	f7ff fe6d 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 80012ce:	893b      	ldrh	r3, [r7, #8]
 80012d0:	88fa      	ldrh	r2, [r7, #6]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b298      	uxth	r0, r3
 80012d6:	89fa      	ldrh	r2, [r7, #14]
 80012d8:	88bb      	ldrh	r3, [r7, #4]
 80012da:	4413      	add	r3, r2
 80012dc:	b299      	uxth	r1, r3
 80012de:	883a      	ldrh	r2, [r7, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2301      	movs	r3, #1
 80012e6:	f7ff fe5f 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 80012ea:	893b      	ldrh	r3, [r7, #8]
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b298      	uxth	r0, r3
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b299      	uxth	r1, r3
 80012fa:	883a      	ldrh	r2, [r7, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	f7ff fe51 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b298      	uxth	r0, r3
 800130e:	893b      	ldrh	r3, [r7, #8]
 8001310:	88ba      	ldrh	r2, [r7, #4]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b299      	uxth	r1, r3
 8001316:	883a      	ldrh	r2, [r7, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	f7ff fe43 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8001322:	89fa      	ldrh	r2, [r7, #14]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4413      	add	r3, r2
 8001328:	b298      	uxth	r0, r3
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b299      	uxth	r1, r3
 8001332:	883a      	ldrh	r2, [r7, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	f7ff fe35 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800133e:	893a      	ldrh	r2, [r7, #8]
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4413      	add	r3, r2
 8001344:	b298      	uxth	r0, r3
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	b299      	uxth	r1, r3
 800134e:	883a      	ldrh	r2, [r7, #0]
 8001350:	2301      	movs	r3, #1
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	f7ff fe27 	bl	8000fa8 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800135a:	893a      	ldrh	r2, [r7, #8]
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4413      	add	r3, r2
 8001360:	b298      	uxth	r0, r3
 8001362:	89fa      	ldrh	r2, [r7, #14]
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	b299      	uxth	r1, r3
 800136a:	883a      	ldrh	r2, [r7, #0]
 800136c:	2301      	movs	r3, #1
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	f7ff fe19 	bl	8000fa8 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8001376:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800137a:	b29b      	uxth	r3, r3
 800137c:	3301      	adds	r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	813b      	strh	r3, [r7, #8]
 8001382:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001386:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800138a:	429a      	cmp	r2, r3
 800138c:	dd83      	ble.n	8001296 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 800138e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da09      	bge.n	80013aa <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	b29a      	uxth	r2, r3
 800139c:	897b      	ldrh	r3, [r7, #10]
 800139e:	4413      	add	r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	3306      	adds	r3, #6
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	817b      	strh	r3, [r7, #10]
 80013a8:	e013      	b.n	80013d2 <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 80013aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	897b      	ldrh	r3, [r7, #10]
 80013bc:	4413      	add	r3, r2
 80013be:	b29b      	uxth	r3, r3
 80013c0:	330a      	adds	r3, #10
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80013c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80013d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3301      	adds	r3, #1
 80013da:	b29b      	uxth	r3, r3
 80013dc:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 80013de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	f77f af52 	ble.w	8001290 <Paint_DrawCircle+0x5c>
 80013ec:	e0ab      	b.n	8001546 <Paint_DrawCircle+0x312>
 80013ee:	bf00      	nop
 80013f0:	20000098 	.word	0x20000098
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 80013f4:	89fa      	ldrh	r2, [r7, #14]
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	4413      	add	r3, r2
 80013fa:	b298      	uxth	r0, r3
 80013fc:	89ba      	ldrh	r2, [r7, #12]
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	b299      	uxth	r1, r3
 8001404:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001408:	883a      	ldrh	r2, [r7, #0]
 800140a:	2401      	movs	r4, #1
 800140c:	9400      	str	r4, [sp, #0]
 800140e:	f7ff fdcb 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b298      	uxth	r0, r3
 800141a:	89ba      	ldrh	r2, [r7, #12]
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	b299      	uxth	r1, r3
 8001422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001426:	883a      	ldrh	r2, [r7, #0]
 8001428:	2401      	movs	r4, #1
 800142a:	9400      	str	r4, [sp, #0]
 800142c:	f7ff fdbc 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8001430:	89bb      	ldrh	r3, [r7, #12]
 8001432:	88fa      	ldrh	r2, [r7, #6]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b298      	uxth	r0, r3
 8001438:	89fa      	ldrh	r2, [r7, #14]
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	b299      	uxth	r1, r3
 8001440:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001444:	883a      	ldrh	r2, [r7, #0]
 8001446:	2401      	movs	r4, #1
 8001448:	9400      	str	r4, [sp, #0]
 800144a:	f7ff fdad 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	88fa      	ldrh	r2, [r7, #6]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b298      	uxth	r0, r3
 8001456:	89fb      	ldrh	r3, [r7, #14]
 8001458:	88ba      	ldrh	r2, [r7, #4]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b299      	uxth	r1, r3
 800145e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001462:	883a      	ldrh	r2, [r7, #0]
 8001464:	2401      	movs	r4, #1
 8001466:	9400      	str	r4, [sp, #0]
 8001468:	f7ff fd9e 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b298      	uxth	r0, r3
 8001474:	89bb      	ldrh	r3, [r7, #12]
 8001476:	88ba      	ldrh	r2, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b299      	uxth	r1, r3
 800147c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001480:	883a      	ldrh	r2, [r7, #0]
 8001482:	2401      	movs	r4, #1
 8001484:	9400      	str	r4, [sp, #0]
 8001486:	f7ff fd8f 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800148a:	89fa      	ldrh	r2, [r7, #14]
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	4413      	add	r3, r2
 8001490:	b298      	uxth	r0, r3
 8001492:	89bb      	ldrh	r3, [r7, #12]
 8001494:	88ba      	ldrh	r2, [r7, #4]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	b299      	uxth	r1, r3
 800149a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800149e:	883a      	ldrh	r2, [r7, #0]
 80014a0:	2401      	movs	r4, #1
 80014a2:	9400      	str	r4, [sp, #0]
 80014a4:	f7ff fd80 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 80014a8:	89ba      	ldrh	r2, [r7, #12]
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4413      	add	r3, r2
 80014ae:	b298      	uxth	r0, r3
 80014b0:	89fb      	ldrh	r3, [r7, #14]
 80014b2:	88ba      	ldrh	r2, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b299      	uxth	r1, r3
 80014b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014bc:	883a      	ldrh	r2, [r7, #0]
 80014be:	2401      	movs	r4, #1
 80014c0:	9400      	str	r4, [sp, #0]
 80014c2:	f7ff fd71 	bl	8000fa8 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 80014c6:	89ba      	ldrh	r2, [r7, #12]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4413      	add	r3, r2
 80014cc:	b298      	uxth	r0, r3
 80014ce:	89fa      	ldrh	r2, [r7, #14]
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	b299      	uxth	r1, r3
 80014d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014da:	883a      	ldrh	r2, [r7, #0]
 80014dc:	2401      	movs	r4, #1
 80014de:	9400      	str	r4, [sp, #0]
 80014e0:	f7ff fd62 	bl	8000fa8 <Paint_DrawPoint>

            if (Esp < 0 )
 80014e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da09      	bge.n	8001500 <Paint_DrawCircle+0x2cc>
                Esp += 4 * XCurrent + 6;
 80014ec:	89fb      	ldrh	r3, [r7, #14]
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	897b      	ldrh	r3, [r7, #10]
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3306      	adds	r3, #6
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	817b      	strh	r3, [r7, #10]
 80014fe:	e013      	b.n	8001528 <Paint_DrawCircle+0x2f4>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8001500:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001504:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	b29a      	uxth	r2, r3
 8001510:	897b      	ldrh	r3, [r7, #10]
 8001512:	4413      	add	r3, r2
 8001514:	b29b      	uxth	r3, r3
 8001516:	330a      	adds	r3, #10
 8001518:	b29b      	uxth	r3, r3
 800151a:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800151c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29b      	uxth	r3, r3
 8001526:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8001528:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152c:	b29b      	uxth	r3, r3
 800152e:	3301      	adds	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8001534:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001538:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	f77f af59 	ble.w	80013f4 <Paint_DrawCircle+0x1c0>
 8001542:	e000      	b.n	8001546 <Paint_DrawCircle+0x312>
        return;
 8001544:	bf00      	nop
        }
    }
}
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}

0800154c <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	4603      	mov	r3, r0
 8001556:	81fb      	strh	r3, [r7, #14]
 8001558:	460b      	mov	r3, r1
 800155a:	81bb      	strh	r3, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <Paint_DrawChar+0x150>)
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	b29b      	uxth	r3, r3
 8001566:	89fa      	ldrh	r2, [r7, #14]
 8001568:	429a      	cmp	r2, r3
 800156a:	f200 8092 	bhi.w	8001692 <Paint_DrawChar+0x146>
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <Paint_DrawChar+0x150>)
 8001570:	88db      	ldrh	r3, [r3, #6]
 8001572:	b29b      	uxth	r3, r3
 8001574:	89ba      	ldrh	r2, [r7, #12]
 8001576:	429a      	cmp	r2, r3
 8001578:	f200 808b 	bhi.w	8001692 <Paint_DrawChar+0x146>
        //Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800157c:	7afb      	ldrb	r3, [r7, #11]
 800157e:	3b20      	subs	r3, #32
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	88d2      	ldrh	r2, [r2, #6]
 8001584:	fb02 f303 	mul.w	r3, r2, r3
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	8892      	ldrh	r2, [r2, #4]
 800158c:	08d2      	lsrs	r2, r2, #3
 800158e:	b292      	uxth	r2, r2
 8001590:	4611      	mov	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	8892      	ldrh	r2, [r2, #4]
 8001596:	f002 0207 	and.w	r2, r2, #7
 800159a:	b292      	uxth	r2, r2
 800159c:	2a00      	cmp	r2, #0
 800159e:	bf14      	ite	ne
 80015a0:	2201      	movne	r2, #1
 80015a2:	2200      	moveq	r2, #0
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440a      	add	r2, r1
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	4413      	add	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	83fb      	strh	r3, [r7, #30]
 80015bc:	e063      	b.n	8001686 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80015be:	2300      	movs	r3, #0
 80015c0:	83bb      	strh	r3, [r7, #28]
 80015c2:	e04e      	b.n	8001662 <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80015c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d118      	bne.n	8001600 <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	8bbb      	ldrh	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	fa42 f303 	asr.w	r3, r2, r3
 80015e0:	400b      	ands	r3, r1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d031      	beq.n	800164a <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80015e6:	89fa      	ldrh	r2, [r7, #14]
 80015e8:	8bbb      	ldrh	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	b298      	uxth	r0, r3
 80015ee:	89ba      	ldrh	r2, [r7, #12]
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	4413      	add	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff fc19 	bl	8000e30 <Paint_SetPixel>
 80015fe:	e024      	b.n	800164a <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	8bbb      	ldrh	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	fa42 f303 	asr.w	r3, r2, r3
 8001612:	400b      	ands	r3, r1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001618:	89fa      	ldrh	r2, [r7, #14]
 800161a:	8bbb      	ldrh	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	b298      	uxth	r0, r3
 8001620:	89ba      	ldrh	r2, [r7, #12]
 8001622:	8bfb      	ldrh	r3, [r7, #30]
 8001624:	4413      	add	r3, r2
 8001626:	b29b      	uxth	r3, r3
 8001628:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fc00 	bl	8000e30 <Paint_SetPixel>
 8001630:	e00b      	b.n	800164a <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001632:	89fa      	ldrh	r2, [r7, #14]
 8001634:	8bbb      	ldrh	r3, [r7, #28]
 8001636:	4413      	add	r3, r2
 8001638:	b298      	uxth	r0, r3
 800163a:	89ba      	ldrh	r2, [r7, #12]
 800163c:	8bfb      	ldrh	r3, [r7, #30]
 800163e:	4413      	add	r3, r2
 8001640:	b29b      	uxth	r3, r3
 8001642:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fbf3 	bl	8000e30 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800164a:	8bbb      	ldrh	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	b29b      	uxth	r3, r3
 8001652:	2b07      	cmp	r3, #7
 8001654:	d102      	bne.n	800165c <Paint_DrawChar+0x110>
                ptr++;
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	3301      	adds	r3, #1
 800165a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800165c:	8bbb      	ldrh	r3, [r7, #28]
 800165e:	3301      	adds	r3, #1
 8001660:	83bb      	strh	r3, [r7, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	8bba      	ldrh	r2, [r7, #28]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3ab      	bcc.n	80015c4 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	889b      	ldrh	r3, [r3, #4]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	b29b      	uxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <Paint_DrawChar+0x134>
            ptr++;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	3301      	adds	r3, #1
 800167e:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001680:	8bfb      	ldrh	r3, [r7, #30]
 8001682:	3301      	adds	r3, #1
 8001684:	83fb      	strh	r3, [r7, #30]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	88db      	ldrh	r3, [r3, #6]
 800168a:	8bfa      	ldrh	r2, [r7, #30]
 800168c:	429a      	cmp	r2, r3
 800168e:	d396      	bcc.n	80015be <Paint_DrawChar+0x72>
 8001690:	e000      	b.n	8001694 <Paint_DrawChar+0x148>
        return;
 8001692:	bf00      	nop
    }// Write all
}
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000098 	.word	0x20000098

080016a0 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4603      	mov	r3, r0
 80016ac:	81fb      	strh	r3, [r7, #14]
 80016ae:	460b      	mov	r3, r1
 80016b0:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <Paint_DrawString_EN+0xa8>)
 80016bc:	889b      	ldrh	r3, [r3, #4]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	89fa      	ldrh	r2, [r7, #14]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d83b      	bhi.n	800173e <Paint_DrawString_EN+0x9e>
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <Paint_DrawString_EN+0xa8>)
 80016c8:	88db      	ldrh	r3, [r3, #6]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	89ba      	ldrh	r2, [r7, #12]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d835      	bhi.n	800173e <Paint_DrawString_EN+0x9e>
        //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 80016d2:	e02f      	b.n	8001734 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80016d4:	8afb      	ldrh	r3, [r7, #22]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	8892      	ldrh	r2, [r2, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <Paint_DrawString_EN+0xa8>)
 80016de:	8892      	ldrh	r2, [r2, #4]
 80016e0:	b292      	uxth	r2, r2
 80016e2:	4293      	cmp	r3, r2
 80016e4:	dd06      	ble.n	80016f4 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	88da      	ldrh	r2, [r3, #6]
 80016ee:	8abb      	ldrh	r3, [r7, #20]
 80016f0:	4413      	add	r3, r2
 80016f2:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80016f4:	8abb      	ldrh	r3, [r7, #20]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	88d2      	ldrh	r2, [r2, #6]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a12      	ldr	r2, [pc, #72]	; (8001748 <Paint_DrawString_EN+0xa8>)
 80016fe:	88d2      	ldrh	r2, [r2, #6]
 8001700:	b292      	uxth	r2, r2
 8001702:	4293      	cmp	r3, r2
 8001704:	dd03      	ble.n	800170e <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800170a:	89bb      	ldrh	r3, [r7, #12]
 800170c:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	8ab9      	ldrh	r1, [r7, #20]
 8001714:	8af8      	ldrh	r0, [r7, #22]
 8001716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	8c3b      	ldrh	r3, [r7, #32]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f7ff ff14 	bl	800154c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	889a      	ldrh	r2, [r3, #4]
 800172e:	8afb      	ldrh	r3, [r7, #22]
 8001730:	4413      	add	r3, r2
 8001732:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1cb      	bne.n	80016d4 <Paint_DrawString_EN+0x34>
 800173c:	e000      	b.n	8001740 <Paint_DrawString_EN+0xa0>
        return;
 800173e:	bf00      	nop
    }
}
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000098 	.word	0x20000098

0800174c <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	4608      	mov	r0, r1
 8001756:	4611      	mov	r1, r2
 8001758:	461a      	mov	r2, r3
 800175a:	4603      	mov	r3, r0
 800175c:	817b      	strh	r3, [r7, #10]
 800175e:	460b      	mov	r3, r1
 8001760:	813b      	strh	r3, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	e049      	b.n	8001800 <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	e03f      	b.n	80017f2 <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8001772:	897a      	ldrh	r2, [r7, #10]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4413      	add	r3, r2
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <Paint_DrawImage+0xc8>)
 800177a:	8912      	ldrh	r2, [r2, #8]
 800177c:	b292      	uxth	r2, r2
 800177e:	4293      	cmp	r3, r2
 8001780:	da34      	bge.n	80017ec <Paint_DrawImage+0xa0>
 8001782:	893a      	ldrh	r2, [r7, #8]
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	4413      	add	r3, r2
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <Paint_DrawImage+0xc8>)
 800178a:	8952      	ldrh	r2, [r2, #10]
 800178c:	b292      	uxth	r2, r2
 800178e:	4293      	cmp	r3, r2
 8001790:	da2c      	bge.n	80017ec <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	b29a      	uxth	r2, r3
 8001796:	897b      	ldrh	r3, [r7, #10]
 8001798:	4413      	add	r3, r2
 800179a:	b298      	uxth	r0, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	b29a      	uxth	r2, r3
 80017a0:	893b      	ldrh	r3, [r7, #8]
 80017a2:	4413      	add	r3, r2
 80017a4:	b29c      	uxth	r4, r3
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	461a      	mov	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3301      	adds	r3, #1
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	6939      	ldr	r1, [r7, #16]
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4619      	mov	r1, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	440b      	add	r3, r1
 80017d6:	68f9      	ldr	r1, [r7, #12]
 80017d8:	440b      	add	r3, r1
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	4621      	mov	r1, r4
 80017e8:	f7ff fb22 	bl	8000e30 <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbbb      	blt.n	8001772 <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3301      	adds	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbb1      	blt.n	800176c <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	20000098 	.word	0x20000098

08001818 <Module_Init>:
/******************************************************************************
function :	Start hardware
parameter:
******************************************************************************/
int Module_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2101      	movs	r1, #1
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <Module_Init+0x34>)
 8001822:	f001 ff4d 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2110      	movs	r1, #16
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <Module_Init+0x38>)
 800182c:	f001 ff48 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2120      	movs	r1, #32
 8001834:	4806      	ldr	r0, [pc, #24]	; (8001850 <Module_Init+0x38>)
 8001836:	f001 ff43 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	2102      	movs	r1, #2
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <Module_Init+0x34>)
 8001840:	f001 ff3e 	bl	80036c0 <HAL_GPIO_WritePin>
	return 0;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020400 	.word	0x40020400
 8001850:	40020800 	.word	0x40020800

08001854 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2101      	movs	r1, #1
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <LCD_1IN28_Reset+0x38>)
 800185e:	f001 ff2f 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001862:	2064      	movs	r0, #100	; 0x64
 8001864:	f001 fc5a 	bl	800311c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2101      	movs	r1, #1
 800186c:	4807      	ldr	r0, [pc, #28]	; (800188c <LCD_1IN28_Reset+0x38>)
 800186e:	f001 ff27 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001872:	2064      	movs	r0, #100	; 0x64
 8001874:	f001 fc52 	bl	800311c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2101      	movs	r1, #1
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <LCD_1IN28_Reset+0x38>)
 800187e:	f001 ff1f 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001882:	2064      	movs	r0, #100	; 0x64
 8001884:	f001 fc4a 	bl	800311c <HAL_Delay>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40020400 	.word	0x40020400

08001890 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <LCD_1IN28_SendCommand+0x40>)
 80018a0:	f001 ff0e 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2110      	movs	r1, #16
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <LCD_1IN28_SendCommand+0x40>)
 80018aa:	f001 ff09 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Reg, 1, 500);
 80018ae:	1df9      	adds	r1, r7, #7
 80018b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b4:	2201      	movs	r2, #1
 80018b6:	4807      	ldr	r0, [pc, #28]	; (80018d4 <LCD_1IN28_SendCommand+0x44>)
 80018b8:	f003 fbeb 	bl	8005092 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2110      	movs	r1, #16
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <LCD_1IN28_SendCommand+0x40>)
 80018c2:	f001 fefd 	bl	80036c0 <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40020800 	.word	0x40020800
 80018d4:	20000114 	.word	0x20000114

080018d8 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2120      	movs	r1, #32
 80018e6:	480c      	ldr	r0, [pc, #48]	; (8001918 <LCD_1IN28_SendData_8Bit+0x40>)
 80018e8:	f001 feea 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2110      	movs	r1, #16
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <LCD_1IN28_SendData_8Bit+0x40>)
 80018f2:	f001 fee5 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 80018f6:	1df9      	adds	r1, r7, #7
 80018f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018fc:	2201      	movs	r2, #1
 80018fe:	4807      	ldr	r0, [pc, #28]	; (800191c <LCD_1IN28_SendData_8Bit+0x44>)
 8001900:	f003 fbc7 	bl	8005092 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2110      	movs	r1, #16
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <LCD_1IN28_SendData_8Bit+0x40>)
 800190a:	f001 fed9 	bl	80036c0 <HAL_GPIO_WritePin>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40020800 	.word	0x40020800
 800191c:	20000114 	.word	0x20000114

08001920 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
	uint8_t data1 = Data >> 8;
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	2120      	movs	r1, #32
 8001938:	480f      	ldr	r0, [pc, #60]	; (8001978 <LCD_1IN28_SendData_16Bit+0x58>)
 800193a:	f001 fec1 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2110      	movs	r1, #16
 8001942:	480d      	ldr	r0, [pc, #52]	; (8001978 <LCD_1IN28_SendData_16Bit+0x58>)
 8001944:	f001 febc 	bl	80036c0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data1, 1, 500);
 8001948:	f107 010f 	add.w	r1, r7, #15
 800194c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001950:	2201      	movs	r2, #1
 8001952:	480a      	ldr	r0, [pc, #40]	; (800197c <LCD_1IN28_SendData_16Bit+0x5c>)
 8001954:	f003 fb9d 	bl	8005092 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 8001958:	1db9      	adds	r1, r7, #6
 800195a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800195e:	2201      	movs	r2, #1
 8001960:	4806      	ldr	r0, [pc, #24]	; (800197c <LCD_1IN28_SendData_16Bit+0x5c>)
 8001962:	f003 fb96 	bl	8005092 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2110      	movs	r1, #16
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <LCD_1IN28_SendData_16Bit+0x58>)
 800196c:	f001 fea8 	bl	80036c0 <HAL_GPIO_WritePin>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40020800 	.word	0x40020800
 800197c:	20000114 	.word	0x20000114

08001980 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0xEF);
 8001984:	20ef      	movs	r0, #239	; 0xef
 8001986:	f7ff ff83 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800198a:	20eb      	movs	r0, #235	; 0xeb
 800198c:	f7ff ff80 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffa1 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xFE);
 8001996:	20fe      	movs	r0, #254	; 0xfe
 8001998:	f7ff ff7a 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 800199c:	20ef      	movs	r0, #239	; 0xef
 800199e:	f7ff ff77 	bl	8001890 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 80019a2:	20eb      	movs	r0, #235	; 0xeb
 80019a4:	f7ff ff74 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 80019a8:	2014      	movs	r0, #20
 80019aa:	f7ff ff95 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 80019ae:	2084      	movs	r0, #132	; 0x84
 80019b0:	f7ff ff6e 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 80019b4:	2040      	movs	r0, #64	; 0x40
 80019b6:	f7ff ff8f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 80019ba:	2085      	movs	r0, #133	; 0x85
 80019bc:	f7ff ff68 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80019c0:	20ff      	movs	r0, #255	; 0xff
 80019c2:	f7ff ff89 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 80019c6:	2086      	movs	r0, #134	; 0x86
 80019c8:	f7ff ff62 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80019cc:	20ff      	movs	r0, #255	; 0xff
 80019ce:	f7ff ff83 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 80019d2:	2087      	movs	r0, #135	; 0x87
 80019d4:	f7ff ff5c 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 80019d8:	20ff      	movs	r0, #255	; 0xff
 80019da:	f7ff ff7d 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 80019de:	2088      	movs	r0, #136	; 0x88
 80019e0:	f7ff ff56 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 80019e4:	200a      	movs	r0, #10
 80019e6:	f7ff ff77 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 80019ea:	2089      	movs	r0, #137	; 0x89
 80019ec:	f7ff ff50 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 80019f0:	2021      	movs	r0, #33	; 0x21
 80019f2:	f7ff ff71 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 80019f6:	208a      	movs	r0, #138	; 0x8a
 80019f8:	f7ff ff4a 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff ff6b 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8001a02:	208b      	movs	r0, #139	; 0x8b
 8001a04:	f7ff ff44 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001a08:	2080      	movs	r0, #128	; 0x80
 8001a0a:	f7ff ff65 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 8001a0e:	208c      	movs	r0, #140	; 0x8c
 8001a10:	f7ff ff3e 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff ff5f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 8001a1a:	208d      	movs	r0, #141	; 0x8d
 8001a1c:	f7ff ff38 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7ff ff59 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 8001a26:	208e      	movs	r0, #142	; 0x8e
 8001a28:	f7ff ff32 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001a2c:	20ff      	movs	r0, #255	; 0xff
 8001a2e:	f7ff ff53 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 8001a32:	208f      	movs	r0, #143	; 0x8f
 8001a34:	f7ff ff2c 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001a38:	20ff      	movs	r0, #255	; 0xff
 8001a3a:	f7ff ff4d 	bl	80018d8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 8001a3e:	20b6      	movs	r0, #182	; 0xb6
 8001a40:	f7ff ff26 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f7ff ff47 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 8001a4a:	2020      	movs	r0, #32
 8001a4c:	f7ff ff44 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 8001a50:	2036      	movs	r0, #54	; 0x36
 8001a52:	f7ff ff1d 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 8001a56:	2008      	movs	r0, #8
 8001a58:	f7ff ff3e 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8001a5c:	203a      	movs	r0, #58	; 0x3a
 8001a5e:	f7ff ff17 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8001a62:	2005      	movs	r0, #5
 8001a64:	f7ff ff38 	bl	80018d8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 8001a68:	2090      	movs	r0, #144	; 0x90
 8001a6a:	f7ff ff11 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8001a6e:	2008      	movs	r0, #8
 8001a70:	f7ff ff32 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001a74:	2008      	movs	r0, #8
 8001a76:	f7ff ff2f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001a7a:	2008      	movs	r0, #8
 8001a7c:	f7ff ff2c 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001a80:	2008      	movs	r0, #8
 8001a82:	f7ff ff29 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001a86:	20bd      	movs	r0, #189	; 0xbd
 8001a88:	f7ff ff02 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	f7ff ff23 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8001a92:	20bc      	movs	r0, #188	; 0xbc
 8001a94:	f7ff fefc 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f7ff ff1d 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8001a9e:	20ff      	movs	r0, #255	; 0xff
 8001aa0:	f7ff fef6 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001aa4:	2060      	movs	r0, #96	; 0x60
 8001aa6:	f7ff ff17 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff ff14 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001ab0:	2004      	movs	r0, #4
 8001ab2:	f7ff ff11 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8001ab6:	20c3      	movs	r0, #195	; 0xc3
 8001ab8:	f7ff feea 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001abc:	2013      	movs	r0, #19
 8001abe:	f7ff ff0b 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8001ac2:	20c4      	movs	r0, #196	; 0xc4
 8001ac4:	f7ff fee4 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001ac8:	2013      	movs	r0, #19
 8001aca:	f7ff ff05 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8001ace:	20c9      	movs	r0, #201	; 0xc9
 8001ad0:	f7ff fede 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001ad4:	2022      	movs	r0, #34	; 0x22
 8001ad6:	f7ff feff 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 8001ada:	20be      	movs	r0, #190	; 0xbe
 8001adc:	f7ff fed8 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8001ae0:	2011      	movs	r0, #17
 8001ae2:	f7ff fef9 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8001ae6:	20e1      	movs	r0, #225	; 0xe1
 8001ae8:	f7ff fed2 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001aec:	2010      	movs	r0, #16
 8001aee:	f7ff fef3 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001af2:	200e      	movs	r0, #14
 8001af4:	f7ff fef0 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001af8:	20df      	movs	r0, #223	; 0xdf
 8001afa:	f7ff fec9 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 8001afe:	2021      	movs	r0, #33	; 0x21
 8001b00:	f7ff feea 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001b04:	200c      	movs	r0, #12
 8001b06:	f7ff fee7 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	f7ff fee4 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8001b10:	20f0      	movs	r0, #240	; 0xf0
 8001b12:	f7ff febd 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001b16:	2045      	movs	r0, #69	; 0x45
 8001b18:	f7ff fede 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001b1c:	2009      	movs	r0, #9
 8001b1e:	f7ff fedb 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001b22:	2008      	movs	r0, #8
 8001b24:	f7ff fed8 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001b28:	2008      	movs	r0, #8
 8001b2a:	f7ff fed5 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 8001b2e:	2026      	movs	r0, #38	; 0x26
 8001b30:	f7ff fed2 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001b34:	202a      	movs	r0, #42	; 0x2a
 8001b36:	f7ff fecf 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 8001b3a:	20f1      	movs	r0, #241	; 0xf1
 8001b3c:	f7ff fea8 	bl	8001890 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001b40:	2043      	movs	r0, #67	; 0x43
 8001b42:	f7ff fec9 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001b46:	2070      	movs	r0, #112	; 0x70
 8001b48:	f7ff fec6 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001b4c:	2072      	movs	r0, #114	; 0x72
 8001b4e:	f7ff fec3 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001b52:	2036      	movs	r0, #54	; 0x36
 8001b54:	f7ff fec0 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 8001b58:	2037      	movs	r0, #55	; 0x37
 8001b5a:	f7ff febd 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001b5e:	206f      	movs	r0, #111	; 0x6f
 8001b60:	f7ff feba 	bl	80018d8 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001b64:	20f2      	movs	r0, #242	; 0xf2
 8001b66:	f7ff fe93 	bl	8001890 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 8001b6a:	2045      	movs	r0, #69	; 0x45
 8001b6c:	f7ff feb4 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001b70:	2009      	movs	r0, #9
 8001b72:	f7ff feb1 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001b76:	2008      	movs	r0, #8
 8001b78:	f7ff feae 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001b7c:	2008      	movs	r0, #8
 8001b7e:	f7ff feab 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001b82:	2026      	movs	r0, #38	; 0x26
 8001b84:	f7ff fea8 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001b88:	202a      	movs	r0, #42	; 0x2a
 8001b8a:	f7ff fea5 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8001b8e:	20f3      	movs	r0, #243	; 0xf3
 8001b90:	f7ff fe7e 	bl	8001890 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001b94:	2043      	movs	r0, #67	; 0x43
 8001b96:	f7ff fe9f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 8001b9a:	2070      	movs	r0, #112	; 0x70
 8001b9c:	f7ff fe9c 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001ba0:	2072      	movs	r0, #114	; 0x72
 8001ba2:	f7ff fe99 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001ba6:	2036      	movs	r0, #54	; 0x36
 8001ba8:	f7ff fe96 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8001bac:	2037      	movs	r0, #55	; 0x37
 8001bae:	f7ff fe93 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001bb2:	206f      	movs	r0, #111	; 0x6f
 8001bb4:	f7ff fe90 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8001bb8:	20ed      	movs	r0, #237	; 0xed
 8001bba:	f7ff fe69 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8001bbe:	201b      	movs	r0, #27
 8001bc0:	f7ff fe8a 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001bc4:	200b      	movs	r0, #11
 8001bc6:	f7ff fe87 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 8001bca:	20ae      	movs	r0, #174	; 0xae
 8001bcc:	f7ff fe60 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001bd0:	2077      	movs	r0, #119	; 0x77
 8001bd2:	f7ff fe81 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8001bd6:	20cd      	movs	r0, #205	; 0xcd
 8001bd8:	f7ff fe5a 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8001bdc:	2063      	movs	r0, #99	; 0x63
 8001bde:	f7ff fe7b 	bl	80018d8 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8001be2:	2070      	movs	r0, #112	; 0x70
 8001be4:	f7ff fe54 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001be8:	2007      	movs	r0, #7
 8001bea:	f7ff fe75 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001bee:	2007      	movs	r0, #7
 8001bf0:	f7ff fe72 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001bf4:	2004      	movs	r0, #4
 8001bf6:	f7ff fe6f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 8001bfa:	200e      	movs	r0, #14
 8001bfc:	f7ff fe6c 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001c00:	200f      	movs	r0, #15
 8001c02:	f7ff fe69 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001c06:	2009      	movs	r0, #9
 8001c08:	f7ff fe66 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001c0c:	2007      	movs	r0, #7
 8001c0e:	f7ff fe63 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001c12:	2008      	movs	r0, #8
 8001c14:	f7ff fe60 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f7ff fe5d 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 8001c1e:	20e8      	movs	r0, #232	; 0xe8
 8001c20:	f7ff fe36 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 8001c24:	2034      	movs	r0, #52	; 0x34
 8001c26:	f7ff fe57 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 8001c2a:	2062      	movs	r0, #98	; 0x62
 8001c2c:	f7ff fe30 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001c30:	2018      	movs	r0, #24
 8001c32:	f7ff fe51 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 8001c36:	200d      	movs	r0, #13
 8001c38:	f7ff fe4e 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001c3c:	2071      	movs	r0, #113	; 0x71
 8001c3e:	f7ff fe4b 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 8001c42:	20ed      	movs	r0, #237	; 0xed
 8001c44:	f7ff fe48 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001c48:	2070      	movs	r0, #112	; 0x70
 8001c4a:	f7ff fe45 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001c4e:	2070      	movs	r0, #112	; 0x70
 8001c50:	f7ff fe42 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001c54:	2018      	movs	r0, #24
 8001c56:	f7ff fe3f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 8001c5a:	200f      	movs	r0, #15
 8001c5c:	f7ff fe3c 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001c60:	2071      	movs	r0, #113	; 0x71
 8001c62:	f7ff fe39 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 8001c66:	20ef      	movs	r0, #239	; 0xef
 8001c68:	f7ff fe36 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001c6c:	2070      	movs	r0, #112	; 0x70
 8001c6e:	f7ff fe33 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001c72:	2070      	movs	r0, #112	; 0x70
 8001c74:	f7ff fe30 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 8001c78:	2063      	movs	r0, #99	; 0x63
 8001c7a:	f7ff fe09 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001c7e:	2018      	movs	r0, #24
 8001c80:	f7ff fe2a 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001c84:	2011      	movs	r0, #17
 8001c86:	f7ff fe27 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001c8a:	2071      	movs	r0, #113	; 0x71
 8001c8c:	f7ff fe24 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001c90:	20f1      	movs	r0, #241	; 0xf1
 8001c92:	f7ff fe21 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001c96:	2070      	movs	r0, #112	; 0x70
 8001c98:	f7ff fe1e 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001c9c:	2070      	movs	r0, #112	; 0x70
 8001c9e:	f7ff fe1b 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001ca2:	2018      	movs	r0, #24
 8001ca4:	f7ff fe18 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001ca8:	2013      	movs	r0, #19
 8001caa:	f7ff fe15 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001cae:	2071      	movs	r0, #113	; 0x71
 8001cb0:	f7ff fe12 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001cb4:	20f3      	movs	r0, #243	; 0xf3
 8001cb6:	f7ff fe0f 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001cba:	2070      	movs	r0, #112	; 0x70
 8001cbc:	f7ff fe0c 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001cc0:	2070      	movs	r0, #112	; 0x70
 8001cc2:	f7ff fe09 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8001cc6:	2064      	movs	r0, #100	; 0x64
 8001cc8:	f7ff fde2 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001ccc:	2028      	movs	r0, #40	; 0x28
 8001cce:	f7ff fe03 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001cd2:	2029      	movs	r0, #41	; 0x29
 8001cd4:	f7ff fe00 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001cd8:	20f1      	movs	r0, #241	; 0xf1
 8001cda:	f7ff fdfd 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff fdfa 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001ce4:	20f1      	movs	r0, #241	; 0xf1
 8001ce6:	f7ff fdf7 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fdf4 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001cf0:	2007      	movs	r0, #7
 8001cf2:	f7ff fdf1 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001cf6:	2066      	movs	r0, #102	; 0x66
 8001cf8:	f7ff fdca 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001cfc:	203c      	movs	r0, #60	; 0x3c
 8001cfe:	f7ff fdeb 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7ff fde8 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001d08:	20cd      	movs	r0, #205	; 0xcd
 8001d0a:	f7ff fde5 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 8001d0e:	2067      	movs	r0, #103	; 0x67
 8001d10:	f7ff fde2 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001d14:	2045      	movs	r0, #69	; 0x45
 8001d16:	f7ff fddf 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001d1a:	2045      	movs	r0, #69	; 0x45
 8001d1c:	f7ff fddc 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001d20:	2010      	movs	r0, #16
 8001d22:	f7ff fdd9 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff fdd6 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff fdd3 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fdd0 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 8001d38:	2067      	movs	r0, #103	; 0x67
 8001d3a:	f7ff fda9 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fdca 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 8001d44:	203c      	movs	r0, #60	; 0x3c
 8001d46:	f7ff fdc7 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fdc4 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fdc1 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff fdbe 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff fdbb 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001d62:	2054      	movs	r0, #84	; 0x54
 8001d64:	f7ff fdb8 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 8001d68:	2010      	movs	r0, #16
 8001d6a:	f7ff fdb5 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8001d6e:	2032      	movs	r0, #50	; 0x32
 8001d70:	f7ff fdb2 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001d74:	2098      	movs	r0, #152	; 0x98
 8001d76:	f7ff fdaf 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 8001d7a:	2074      	movs	r0, #116	; 0x74
 8001d7c:	f7ff fd88 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8001d80:	2010      	movs	r0, #16
 8001d82:	f7ff fda9 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8001d86:	2085      	movs	r0, #133	; 0x85
 8001d88:	f7ff fda6 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8001d8c:	2080      	movs	r0, #128	; 0x80
 8001d8e:	f7ff fda3 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fda0 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fd9d 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8001d9e:	204e      	movs	r0, #78	; 0x4e
 8001da0:	f7ff fd9a 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8001da4:	2000      	movs	r0, #0
 8001da6:	f7ff fd97 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0x98);
 8001daa:	2098      	movs	r0, #152	; 0x98
 8001dac:	f7ff fd70 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001db0:	203e      	movs	r0, #62	; 0x3e
 8001db2:	f7ff fd91 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001db6:	2007      	movs	r0, #7
 8001db8:	f7ff fd8e 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8001dbc:	2035      	movs	r0, #53	; 0x35
 8001dbe:	f7ff fd67 	bl	8001890 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001dc2:	2021      	movs	r0, #33	; 0x21
 8001dc4:	f7ff fd64 	bl	8001890 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8001dc8:	2011      	movs	r0, #17
 8001dca:	f7ff fd61 	bl	8001890 <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 8001dce:	2078      	movs	r0, #120	; 0x78
 8001dd0:	f001 f9a4 	bl	800311c <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001dd4:	2029      	movs	r0, #41	; 0x29
 8001dd6:	f7ff fd5b 	bl	8001890 <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 8001dda:	2014      	movs	r0, #20
 8001ddc:	f001 f99e 	bl	800311c <HAL_Delay>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <LCD_1IN28_SetAttributes+0x54>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001df4:	2308      	movs	r3, #8
 8001df6:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d108      	bne.n	8001e10 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <LCD_1IN28_SetAttributes+0x54>)
 8001e00:	22f0      	movs	r2, #240	; 0xf0
 8001e02:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <LCD_1IN28_SetAttributes+0x54>)
 8001e06:	22f0      	movs	r2, #240	; 0xf0
 8001e08:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 8001e0a:	23c8      	movs	r3, #200	; 0xc8
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e007      	b.n	8001e20 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <LCD_1IN28_SetAttributes+0x54>)
 8001e12:	22f0      	movs	r2, #240	; 0xf0
 8001e14:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <LCD_1IN28_SetAttributes+0x54>)
 8001e18:	22f0      	movs	r2, #240	; 0xf0
 8001e1a:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 8001e1c:	2368      	movs	r3, #104	; 0x68
 8001e1e:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 8001e20:	2036      	movs	r0, #54	; 0x36
 8001e22:	f7ff fd35 	bl	8001890 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fd55 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200000b8 	.word	0x200000b8

08001e3c <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 8001e46:	f7ff fd05 	bl	8001854 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ffc9 	bl	8001de4 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 8001e52:	f7ff fd95 	bl	8001980 <LCD_1IN28_InitReg>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001e5e:	b590      	push	{r4, r7, lr}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4604      	mov	r4, r0
 8001e66:	4608      	mov	r0, r1
 8001e68:	4611      	mov	r1, r2
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4623      	mov	r3, r4
 8001e6e:	80fb      	strh	r3, [r7, #6]
 8001e70:	4603      	mov	r3, r0
 8001e72:	80bb      	strh	r3, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8001e7c:	202a      	movs	r0, #42	; 0x2a
 8001e7e:	f7ff fd07 	bl	8001890 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fd28 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd23 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fd20 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fd1b 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8001ea2:	202b      	movs	r0, #43	; 0x2b
 8001ea4:	f7ff fcf4 	bl	8001890 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fd15 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 8001eae:	88bb      	ldrh	r3, [r7, #4]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fd10 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fd0d 	bl	80018d8 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8001ebe:	883b      	ldrh	r3, [r7, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fd08 	bl	80018d8 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8001ec8:	202c      	movs	r0, #44	; 0x2c
 8001eca:	f7ff fce1 	bl	8001890 <LCD_1IN28_SendCommand>
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}

08001ed6 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8001ee0:	23ef      	movs	r3, #239	; 0xef
 8001ee2:	22ef      	movs	r2, #239	; 0xef
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff ffb9 	bl	8001e5e <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	81fb      	strh	r3, [r7, #14]
 8001ef0:	e00f      	b.n	8001f12 <LCD_1IN28_Clear+0x3c>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	81bb      	strh	r3, [r7, #12]
 8001ef6:	e006      	b.n	8001f06 <LCD_1IN28_Clear+0x30>
			LCD_1IN28_SendData_16Bit(Color);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fd10 	bl	8001920 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001f00:	89bb      	ldrh	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	81bb      	strh	r3, [r7, #12]
 8001f06:	89bb      	ldrh	r3, [r7, #12]
 8001f08:	2bef      	cmp	r3, #239	; 0xef
 8001f0a:	d9f5      	bls.n	8001ef8 <LCD_1IN28_Clear+0x22>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	81fb      	strh	r3, [r7, #14]
 8001f12:	89fb      	ldrh	r3, [r7, #14]
 8001f14:	2bef      	cmp	r3, #239	; 0xef
 8001f16:	d9ec      	bls.n	8001ef2 <LCD_1IN28_Clear+0x1c>
		}
	 }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	80fb      	strh	r3, [r7, #6]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	80bb      	strh	r3, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 8001f34:	88bb      	ldrh	r3, [r7, #4]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	88b9      	ldrh	r1, [r7, #4]
 8001f3a:	88f8      	ldrh	r0, [r7, #6]
 8001f3c:	f7ff ff8f 	bl	8001e5e <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fcec 	bl	8001920 <LCD_1IN28_SendData_16Bit>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b08d      	sub	sp, #52	; 0x34
 8001f54:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f56:	f001 f86f 	bl	8003038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f5a:	f000 f971 	bl	8002240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5e:	f000 fb8f 	bl	8002680 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001f62:	f000 fa05 	bl	8002370 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f66:	f000 fb61 	bl	800262c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001f6a:	f000 fa37 	bl	80023dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001f6e:	f000 fad5 	bl	800251c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001f72:	f000 f9cf 	bl	8002314 <MX_I2C1_Init>
  MX_TIM9_Init();
 8001f76:	f000 fb1f 	bl	80025b8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef ret;

  TIM1->CCR1 = 20;
 8001f7a:	4ba2      	ldr	r3, [pc, #648]	; (8002204 <main+0x2b4>)
 8001f7c:	2214      	movs	r2, #20
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f80:	2100      	movs	r1, #0
 8001f82:	48a1      	ldr	r0, [pc, #644]	; (8002208 <main+0x2b8>)
 8001f84:	f003 fbd4 	bl	8005730 <HAL_TIM_PWM_Start>

  buf[0] = BARO_RESET;
 8001f88:	231e      	movs	r3, #30
 8001f8a:	703b      	strb	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001f8c:	23ee      	movs	r3, #238	; 0xee
 8001f8e:	b299      	uxth	r1, r3
 8001f90:	463a      	mov	r2, r7
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	489c      	ldr	r0, [pc, #624]	; (800220c <main+0x2bc>)
 8001f9c:	f001 fd06 	bl	80039ac <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f001 f8bb 	bl	800311c <HAL_Delay>

  buf[0] = BARO_PROM_ADDR | BARO_C5;
 8001fa6:	22a0      	movs	r2, #160	; 0xa0
 8001fa8:	230a      	movs	r3, #10
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	703b      	strb	r3, [r7, #0]
  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001fb0:	23ee      	movs	r3, #238	; 0xee
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	463a      	mov	r2, r7
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	4893      	ldr	r0, [pc, #588]	; (800220c <main+0x2bc>)
 8001fc0:	f001 fcf4 	bl	80039ac <HAL_I2C_Master_Transmit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  if (ret != HAL_OK){
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <main+0x8e>
  	strcpy((char*)buf, "Error TX_1e\r\n");
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4a8f      	ldr	r2, [pc, #572]	; (8002210 <main+0x2c0>)
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd8:	c407      	stmia	r4!, {r0, r1, r2}
 8001fda:	8023      	strh	r3, [r4, #0]
 8001fdc:	e021      	b.n	8002022 <main+0xd2>
  }else{
  	  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 8001fde:	23ee      	movs	r3, #238	; 0xee
 8001fe0:	b299      	uxth	r1, r3
 8001fe2:	463a      	mov	r2, r7
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2302      	movs	r3, #2
 8001fec:	4887      	ldr	r0, [pc, #540]	; (800220c <main+0x2bc>)
 8001fee:	f001 fddb 	bl	8003ba8 <HAL_I2C_Master_Receive>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	77fb      	strb	r3, [r7, #31]
  	  if (ret != HAL_OK){
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <main+0xbe>
  		  strcpy((char*)buf, "Error Rx\r\n");
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4a85      	ldr	r2, [pc, #532]	; (8002214 <main+0x2c4>)
 8002000:	ca07      	ldmia	r2, {r0, r1, r2}
 8002002:	c303      	stmia	r3!, {r0, r1}
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	3302      	adds	r3, #2
 8002008:	0c12      	lsrs	r2, r2, #16
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e009      	b.n	8002022 <main+0xd2>
  	  } else {
  		  Const_5 = ((buf[0] << 8) | buf[1]);
 800200e:	783b      	ldrb	r3, [r7, #0]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b21a      	sxth	r2, r3
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	b21b      	sxth	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b21b      	sxth	r3, r3
 800201c:	b29a      	uxth	r2, r3
 800201e:	4b7e      	ldr	r3, [pc, #504]	; (8002218 <main+0x2c8>)
 8002020:	801a      	strh	r2, [r3, #0]
  	  }
  }
  HAL_Delay(10);
 8002022:	200a      	movs	r0, #10
 8002024:	f001 f87a 	bl	800311c <HAL_Delay>

  buf[0] = BARO_PROM_ADDR | BARO_C6;
 8002028:	22a0      	movs	r2, #160	; 0xa0
 800202a:	230c      	movs	r3, #12
 800202c:	4313      	orrs	r3, r2
 800202e:	b2db      	uxtb	r3, r3
 8002030:	703b      	strb	r3, [r7, #0]
  	ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8002032:	23ee      	movs	r3, #238	; 0xee
 8002034:	b299      	uxth	r1, r3
 8002036:	463a      	mov	r2, r7
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2301      	movs	r3, #1
 8002040:	4872      	ldr	r0, [pc, #456]	; (800220c <main+0x2bc>)
 8002042:	f001 fcb3 	bl	80039ac <HAL_I2C_Master_Transmit>
 8002046:	4603      	mov	r3, r0
 8002048:	77fb      	strb	r3, [r7, #31]
  	if (ret != HAL_OK){
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <main+0x110>
  		strcpy((char*)buf, "Error TX_1f\r\n");
 8002050:	463b      	mov	r3, r7
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <main+0x2cc>)
 8002054:	461c      	mov	r4, r3
 8002056:	4613      	mov	r3, r2
 8002058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800205a:	c407      	stmia	r4!, {r0, r1, r2}
 800205c:	8023      	strh	r3, [r4, #0]
 800205e:	e021      	b.n	80020a4 <main+0x154>
  	}else{
  		 ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 8002060:	23ee      	movs	r3, #238	; 0xee
 8002062:	b299      	uxth	r1, r3
 8002064:	463a      	mov	r2, r7
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2302      	movs	r3, #2
 800206e:	4867      	ldr	r0, [pc, #412]	; (800220c <main+0x2bc>)
 8002070:	f001 fd9a 	bl	8003ba8 <HAL_I2C_Master_Receive>
 8002074:	4603      	mov	r3, r0
 8002076:	77fb      	strb	r3, [r7, #31]
  		 if (ret != HAL_OK){
 8002078:	7ffb      	ldrb	r3, [r7, #31]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d008      	beq.n	8002090 <main+0x140>
  			 strcpy((char*)buf, "Error Rx\r\n");
 800207e:	463b      	mov	r3, r7
 8002080:	4a64      	ldr	r2, [pc, #400]	; (8002214 <main+0x2c4>)
 8002082:	ca07      	ldmia	r2, {r0, r1, r2}
 8002084:	c303      	stmia	r3!, {r0, r1}
 8002086:	801a      	strh	r2, [r3, #0]
 8002088:	3302      	adds	r3, #2
 800208a:	0c12      	lsrs	r2, r2, #16
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e009      	b.n	80020a4 <main+0x154>
  		 } else {
  			 Const_6 = ((buf[0] << 8) | buf[1]);
 8002090:	783b      	ldrb	r3, [r7, #0]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	b21a      	sxth	r2, r3
 8002096:	787b      	ldrb	r3, [r7, #1]
 8002098:	b21b      	sxth	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b21b      	sxth	r3, r3
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b5f      	ldr	r3, [pc, #380]	; (8002220 <main+0x2d0>)
 80020a2:	801a      	strh	r2, [r3, #0]
  		 }
  	}
  HAL_Delay(10);
 80020a4:	200a      	movs	r0, #10
 80020a6:	f001 f839 	bl	800311c <HAL_Delay>

  buf[0] = BARO_CONVERT_TEMP;
 80020aa:	2358      	movs	r3, #88	; 0x58
 80020ac:	703b      	strb	r3, [r7, #0]
  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80020ae:	23ee      	movs	r3, #238	; 0xee
 80020b0:	b299      	uxth	r1, r3
 80020b2:	463a      	mov	r2, r7
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2301      	movs	r3, #1
 80020bc:	4853      	ldr	r0, [pc, #332]	; (800220c <main+0x2bc>)
 80020be:	f001 fc75 	bl	80039ac <HAL_I2C_Master_Transmit>
 80020c2:	4603      	mov	r3, r0
 80020c4:	77fb      	strb	r3, [r7, #31]
  if (ret != HAL_OK){
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <main+0x18a>
	  strcpy((char*)buf, "Error TX_2\r\n");
 80020cc:	463b      	mov	r3, r7
 80020ce:	4a55      	ldr	r2, [pc, #340]	; (8002224 <main+0x2d4>)
 80020d0:	461c      	mov	r4, r3
 80020d2:	4613      	mov	r3, r2
 80020d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d6:	c407      	stmia	r4!, {r0, r1, r2}
 80020d8:	7023      	strb	r3, [r4, #0]
  }

  Module_Init();
 80020da:	f7ff fb9d 	bl	8001818 <Module_Init>

//printf("LCD_1IN28_ Init and Clear...\r\n");
  LCD_1IN28_Init(VERTICAL);
 80020de:	2001      	movs	r0, #1
 80020e0:	f7ff feac 	bl	8001e3c <LCD_1IN28_Init>
  LCD_1IN28_Clear(BLACK);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff fef6 	bl	8001ed6 <LCD_1IN28_Clear>

//printf("Paint_NewImage\r\n");
  Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 80020ea:	2300      	movs	r3, #0
 80020ec:	2200      	movs	r2, #0
 80020ee:	21f0      	movs	r1, #240	; 0xf0
 80020f0:	20f0      	movs	r0, #240	; 0xf0
 80020f2:	f7fe fe3d 	bl	8000d70 <Paint_NewImage>

//printf("Set Clear and Display Funtion\r\n");
  Paint_SetClearFuntion(LCD_1IN28_Clear);
 80020f6:	484c      	ldr	r0, [pc, #304]	; (8002228 <main+0x2d8>)
 80020f8:	f7fe fe7a 	bl	8000df0 <Paint_SetClearFuntion>
  Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 80020fc:	484b      	ldr	r0, [pc, #300]	; (800222c <main+0x2dc>)
 80020fe:	f7fe fe87 	bl	8000e10 <Paint_SetDisplayFuntion>

//printf("Paint_Clear\r\n");
  Paint_Clear(BLACK);
 8002102:	2000      	movs	r0, #0
 8002104:	f7fe ff40 	bl	8000f88 <Paint_Clear>
  HAL_Delay(100);
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	f001 f807 	bl	800311c <HAL_Delay>

//printf("drawing...\r\n");

  Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 800210e:	2300      	movs	r3, #0
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2302      	movs	r3, #2
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	231f      	movs	r3, #31
 8002118:	2278      	movs	r2, #120	; 0x78
 800211a:	2178      	movs	r1, #120	; 0x78
 800211c:	2078      	movs	r0, #120	; 0x78
 800211e:	f7ff f889 	bl	8001234 <Paint_DrawCircle>
  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8002122:	2300      	movs	r3, #0
 8002124:	9302      	str	r3, [sp, #8]
 8002126:	2304      	movs	r3, #4
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	230c      	movs	r3, #12
 8002132:	2278      	movs	r2, #120	; 0x78
 8002134:	2100      	movs	r1, #0
 8002136:	2078      	movs	r0, #120	; 0x78
 8002138:	f7fe ffce 	bl	80010d8 <Paint_DrawLine>
  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800213c:	2300      	movs	r3, #0
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	2304      	movs	r3, #4
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	23f0      	movs	r3, #240	; 0xf0
 800214c:	2278      	movs	r2, #120	; 0x78
 800214e:	21e4      	movs	r1, #228	; 0xe4
 8002150:	2078      	movs	r0, #120	; 0x78
 8002152:	f7fe ffc1 	bl	80010d8 <Paint_DrawLine>
  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8002156:	2300      	movs	r3, #0
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2304      	movs	r3, #4
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2378      	movs	r3, #120	; 0x78
 8002166:	220c      	movs	r2, #12
 8002168:	2178      	movs	r1, #120	; 0x78
 800216a:	2000      	movs	r0, #0
 800216c:	f7fe ffb4 	bl	80010d8 <Paint_DrawLine>
  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8002170:	2300      	movs	r3, #0
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	2304      	movs	r3, #4
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2378      	movs	r3, #120	; 0x78
 8002180:	22f0      	movs	r2, #240	; 0xf0
 8002182:	2178      	movs	r1, #120	; 0x78
 8002184:	20e4      	movs	r0, #228	; 0xe4
 8002186:	f7fe ffa7 	bl	80010d8 <Paint_DrawLine>

  Paint_DrawImage(gImage_70X70, 85, 25, 70, 70);
 800218a:	2346      	movs	r3, #70	; 0x46
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2346      	movs	r3, #70	; 0x46
 8002190:	2219      	movs	r2, #25
 8002192:	2155      	movs	r1, #85	; 0x55
 8002194:	4826      	ldr	r0, [pc, #152]	; (8002230 <main+0x2e0>)
 8002196:	f7ff fad9 	bl	800174c <Paint_DrawImage>
  Paint_DrawString_EN(123, 123, "WAVESHARE",&Font16,  BLACK, GREEN);
 800219a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <main+0x2e4>)
 80021a6:	4a24      	ldr	r2, [pc, #144]	; (8002238 <main+0x2e8>)
 80021a8:	217b      	movs	r1, #123	; 0x7b
 80021aa:	207b      	movs	r0, #123	; 0x7b
 80021ac:	f7ff fa78 	bl	80016a0 <Paint_DrawString_EN>

  Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 80021b0:	2300      	movs	r3, #0
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2303      	movs	r3, #3
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	2346      	movs	r3, #70	; 0x46
 80021c0:	2246      	movs	r2, #70	; 0x46
 80021c2:	2178      	movs	r1, #120	; 0x78
 80021c4:	2078      	movs	r0, #120	; 0x78
 80021c6:	f7fe ff87 	bl	80010d8 <Paint_DrawLine>
  Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 80021ca:	2300      	movs	r3, #0
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2303      	movs	r3, #3
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	231f      	movs	r3, #31
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	22b0      	movs	r2, #176	; 0xb0
 80021da:	2178      	movs	r1, #120	; 0x78
 80021dc:	2078      	movs	r0, #120	; 0x78
 80021de:	f7fe ff7b 	bl	80010d8 <Paint_DrawLine>
  Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 80021e2:	2300      	movs	r3, #0
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	2302      	movs	r3, #2
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	23d2      	movs	r3, #210	; 0xd2
 80021f2:	2278      	movs	r2, #120	; 0x78
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	2078      	movs	r0, #120	; 0x78
 80021f8:	f7fe ff6e 	bl	80010d8 <Paint_DrawLine>

  HAL_TIM_Base_Start_IT(&htim9);
 80021fc:	480f      	ldr	r0, [pc, #60]	; (800223c <main+0x2ec>)
 80021fe:	f003 f99f 	bl	8005540 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002202:	e7fe      	b.n	8002202 <main+0x2b2>
 8002204:	40010000 	.word	0x40010000
 8002208:	2000016c 	.word	0x2000016c
 800220c:	200000c0 	.word	0x200000c0
 8002210:	080076f4 	.word	0x080076f4
 8002214:	08007704 	.word	0x08007704
 8002218:	20000008 	.word	0x20000008
 800221c:	08007710 	.word	0x08007710
 8002220:	2000000a 	.word	0x2000000a
 8002224:	08007720 	.word	0x08007720
 8002228:	08001ed7 	.word	0x08001ed7
 800222c:	08001f23 	.word	0x08001f23
 8002230:	08008340 	.word	0x08008340
 8002234:	20000000 	.word	0x20000000
 8002238:	08007730 	.word	0x08007730
 800223c:	200001fc 	.word	0x200001fc

08002240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b094      	sub	sp, #80	; 0x50
 8002244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	2230      	movs	r2, #48	; 0x30
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fdce 	bl	8006df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	4b28      	ldr	r3, [pc, #160]	; (800230c <SystemClock_Config+0xcc>)
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <SystemClock_Config+0xcc>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	6413      	str	r3, [r2, #64]	; 0x40
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <SystemClock_Config+0xcc>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	4b22      	ldr	r3, [pc, #136]	; (8002310 <SystemClock_Config+0xd0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a21      	ldr	r2, [pc, #132]	; (8002310 <SystemClock_Config+0xd0>)
 800228a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <SystemClock_Config+0xd0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800229c:	2302      	movs	r3, #2
 800229e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a4:	2310      	movs	r3, #16
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a8:	2302      	movs	r3, #2
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022ac:	2300      	movs	r3, #0
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022b0:	2308      	movs	r3, #8
 80022b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022b4:	2364      	movs	r3, #100	; 0x64
 80022b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b8:	2302      	movs	r3, #2
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022bc:	2307      	movs	r3, #7
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	4618      	mov	r0, r3
 80022c6:	f002 f9c3 	bl	8004650 <HAL_RCC_OscConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022d0:	f000 fc52 	bl	8002b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d4:	230f      	movs	r3, #15
 80022d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80022e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2101      	movs	r1, #1
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 fc24 	bl	8004b40 <HAL_RCC_ClockConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022fe:	f000 fc3b 	bl	8002b78 <Error_Handler>
  }
}
 8002302:	bf00      	nop
 8002304:	3750      	adds	r7, #80	; 0x50
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000

08002314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <MX_I2C1_Init+0x50>)
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <MX_I2C1_Init+0x54>)
 800231c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <MX_I2C1_Init+0x50>)
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <MX_I2C1_Init+0x58>)
 8002322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_I2C1_Init+0x50>)
 8002332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <MX_I2C1_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_I2C1_Init+0x50>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <MX_I2C1_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_I2C1_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002350:	4804      	ldr	r0, [pc, #16]	; (8002364 <MX_I2C1_Init+0x50>)
 8002352:	f001 f9e7 	bl	8003724 <HAL_I2C_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800235c:	f000 fc0c 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200000c0 	.word	0x200000c0
 8002368:	40005400 	.word	0x40005400
 800236c:	000186a0 	.word	0x000186a0

08002370 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <MX_SPI1_Init+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_SPI1_Init+0x64>)
 800237c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002380:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_SPI1_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_SPI1_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_SPI1_Init+0x64>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023bc:	220a      	movs	r2, #10
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_SPI1_Init+0x64>)
 80023c2:	f002 fddd 	bl	8004f80 <HAL_SPI_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023cc:	f000 fbd4 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000114 	.word	0x20000114
 80023d8:	40013000 	.word	0x40013000

080023dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b096      	sub	sp, #88	; 0x58
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	611a      	str	r2, [r3, #16]
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2220      	movs	r2, #32
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fceb 	bl	8006df0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800241a:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <MX_TIM1_Init+0x138>)
 800241c:	4a3e      	ldr	r2, [pc, #248]	; (8002518 <MX_TIM1_Init+0x13c>)
 800241e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25-1;
 8002420:	4b3c      	ldr	r3, [pc, #240]	; (8002514 <MX_TIM1_Init+0x138>)
 8002422:	2218      	movs	r2, #24
 8002424:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <MX_TIM1_Init+0x138>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800242c:	4b39      	ldr	r3, [pc, #228]	; (8002514 <MX_TIM1_Init+0x138>)
 800242e:	2263      	movs	r2, #99	; 0x63
 8002430:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <MX_TIM1_Init+0x138>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002438:	4b36      	ldr	r3, [pc, #216]	; (8002514 <MX_TIM1_Init+0x138>)
 800243a:	2200      	movs	r2, #0
 800243c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243e:	4b35      	ldr	r3, [pc, #212]	; (8002514 <MX_TIM1_Init+0x138>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002444:	4833      	ldr	r0, [pc, #204]	; (8002514 <MX_TIM1_Init+0x138>)
 8002446:	f003 f82b 	bl	80054a0 <HAL_TIM_Base_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002450:	f000 fb92 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800245a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800245e:	4619      	mov	r1, r3
 8002460:	482c      	ldr	r0, [pc, #176]	; (8002514 <MX_TIM1_Init+0x138>)
 8002462:	f003 fbf7 	bl	8005c54 <HAL_TIM_ConfigClockSource>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800246c:	f000 fb84 	bl	8002b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002470:	4828      	ldr	r0, [pc, #160]	; (8002514 <MX_TIM1_Init+0x138>)
 8002472:	f003 f904 	bl	800567e <HAL_TIM_PWM_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800247c:	f000 fb7c 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002488:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800248c:	4619      	mov	r1, r3
 800248e:	4821      	ldr	r0, [pc, #132]	; (8002514 <MX_TIM1_Init+0x138>)
 8002490:	f003 ffe0 	bl	8006454 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800249a:	f000 fb6d 	bl	8002b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249e:	2360      	movs	r3, #96	; 0x60
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024aa:	2300      	movs	r3, #0
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	4814      	ldr	r0, [pc, #80]	; (8002514 <MX_TIM1_Init+0x138>)
 80024c4:	f003 fb04 	bl	8005ad0 <HAL_TIM_PWM_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80024ce:	f000 fb53 	bl	8002b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4807      	ldr	r0, [pc, #28]	; (8002514 <MX_TIM1_Init+0x138>)
 80024f6:	f004 f829 	bl	800654c <HAL_TIMEx_ConfigBreakDeadTime>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002500:	f000 fb3a 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <MX_TIM1_Init+0x138>)
 8002506:	f000 fc59 	bl	8002dbc <HAL_TIM_MspPostInit>

}
 800250a:	bf00      	nop
 800250c:	3758      	adds	r7, #88	; 0x58
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000016c 	.word	0x2000016c
 8002518:	40010000 	.word	0x40010000

0800251c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	463b      	mov	r3, r7
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <MX_TIM3_Init+0x94>)
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <MX_TIM3_Init+0x98>)
 800253c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25000-1;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002540:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8002544:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000-1;
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <MX_TIM3_Init+0x94>)
 800254e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002552:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255a:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_TIM3_Init+0x94>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002560:	4813      	ldr	r0, [pc, #76]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002562:	f002 ff9d 	bl	80054a0 <HAL_TIM_Base_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800256c:	f000 fb04 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4619      	mov	r1, r3
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM3_Init+0x94>)
 800257e:	f003 fb69 	bl	8005c54 <HAL_TIM_ConfigClockSource>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002588:	f000 faf6 	bl	8002b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002594:	463b      	mov	r3, r7
 8002596:	4619      	mov	r1, r3
 8002598:	4805      	ldr	r0, [pc, #20]	; (80025b0 <MX_TIM3_Init+0x94>)
 800259a:	f003 ff5b 	bl	8006454 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80025a4:	f000 fae8 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200001b4 	.word	0x200001b4
 80025b4:	40000400 	.word	0x40000400

080025b8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025be:	463b      	mov	r3, r7
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <MX_TIM9_Init+0x70>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 25000-1;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025d2:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80025d6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 5000-1;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80025e4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80025f2:	480c      	ldr	r0, [pc, #48]	; (8002624 <MX_TIM9_Init+0x6c>)
 80025f4:	f002 ff54 	bl	80054a0 <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80025fe:	f000 fabb 	bl	8002b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002608:	463b      	mov	r3, r7
 800260a:	4619      	mov	r1, r3
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_TIM9_Init+0x6c>)
 800260e:	f003 fb21 	bl	8005c54 <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8002618:	f000 faae 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200001fc 	.word	0x200001fc
 8002628:	40014000 	.word	0x40014000

0800262c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <MX_USART2_UART_Init+0x50>)
 8002634:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800263c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002652:	220c      	movs	r2, #12
 8002654:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_USART2_UART_Init+0x4c>)
 8002664:	f003 ffd8 	bl	8006618 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800266e:	f000 fa83 	bl	8002b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000244 	.word	0x20000244
 800267c:	40004400 	.word	0x40004400

08002680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	f107 031c 	add.w	r3, r7, #28
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	4ba8      	ldr	r3, [pc, #672]	; (800293c <MX_GPIO_Init+0x2bc>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4aa7      	ldr	r2, [pc, #668]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4ba5      	ldr	r3, [pc, #660]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	4ba1      	ldr	r3, [pc, #644]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4aa0      	ldr	r2, [pc, #640]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026bc:	f043 0304 	orr.w	r3, r3, #4
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b9e      	ldr	r3, [pc, #632]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0304 	and.w	r3, r3, #4
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	4b9a      	ldr	r3, [pc, #616]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	4a99      	ldr	r2, [pc, #612]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026dc:	6313      	str	r3, [r2, #48]	; 0x30
 80026de:	4b97      	ldr	r3, [pc, #604]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b93      	ldr	r3, [pc, #588]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	4a92      	ldr	r2, [pc, #584]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6313      	str	r3, [r2, #48]	; 0x30
 80026fa:	4b90      	ldr	r3, [pc, #576]	; (800293c <MX_GPIO_Init+0x2bc>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b8c      	ldr	r3, [pc, #560]	; (800293c <MX_GPIO_Init+0x2bc>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a8b      	ldr	r2, [pc, #556]	; (800293c <MX_GPIO_Init+0x2bc>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b89      	ldr	r3, [pc, #548]	; (800293c <MX_GPIO_Init+0x2bc>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b85      	ldr	r3, [pc, #532]	; (800293c <MX_GPIO_Init+0x2bc>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a84      	ldr	r2, [pc, #528]	; (800293c <MX_GPIO_Init+0x2bc>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b82      	ldr	r3, [pc, #520]	; (800293c <MX_GPIO_Init+0x2bc>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800273e:	2200      	movs	r2, #0
 8002740:	2108      	movs	r1, #8
 8002742:	487f      	ldr	r0, [pc, #508]	; (8002940 <MX_GPIO_Init+0x2c0>)
 8002744:	f000 ffbc 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	2101      	movs	r1, #1
 800274c:	487d      	ldr	r0, [pc, #500]	; (8002944 <MX_GPIO_Init+0x2c4>)
 800274e:	f000 ffb7 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Screen_Pin|DC_Screen_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	2130      	movs	r1, #48	; 0x30
 8002756:	487b      	ldr	r0, [pc, #492]	; (8002944 <MX_GPIO_Init+0x2c4>)
 8002758:	f000 ffb2 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Screen_Pin|BL_Screen_Pin, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	2103      	movs	r1, #3
 8002760:	4879      	ldr	r0, [pc, #484]	; (8002948 <MX_GPIO_Init+0x2c8>)
 8002762:	f000 ffad 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002766:	2200      	movs	r2, #0
 8002768:	f24f 0110 	movw	r1, #61456	; 0xf010
 800276c:	4877      	ldr	r0, [pc, #476]	; (800294c <MX_GPIO_Init+0x2cc>)
 800276e:	f000 ffa7 	bl	80036c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002772:	2308      	movs	r3, #8
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4619      	mov	r1, r3
 8002788:	486d      	ldr	r0, [pc, #436]	; (8002940 <MX_GPIO_Init+0x2c0>)
 800278a:	f000 fdfd 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_Screen_Pin DC_Screen_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_Screen_Pin|DC_Screen_Pin;
 800278e:	2331      	movs	r3, #49	; 0x31
 8002790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002792:	2301      	movs	r3, #1
 8002794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	4867      	ldr	r0, [pc, #412]	; (8002944 <MX_GPIO_Init+0x2c4>)
 80027a6:	f000 fdef 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80027aa:	2308      	movs	r3, #8
 80027ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ba:	2305      	movs	r3, #5
 80027bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	485f      	ldr	r0, [pc, #380]	; (8002944 <MX_GPIO_Init+0x2c4>)
 80027c6:	f000 fddf 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	485c      	ldr	r0, [pc, #368]	; (8002950 <MX_GPIO_Init+0x2d0>)
 80027e0:	f000 fdd2 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027e4:	2310      	movs	r3, #16
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027f4:	2306      	movs	r3, #6
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	4619      	mov	r1, r3
 80027fe:	4854      	ldr	r0, [pc, #336]	; (8002950 <MX_GPIO_Init+0x2d0>)
 8002800:	f000 fdc2 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Screen_Pin BL_Screen_Pin */
  GPIO_InitStruct.Pin = RST_Screen_Pin|BL_Screen_Pin;
 8002804:	2303      	movs	r3, #3
 8002806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	484b      	ldr	r0, [pc, #300]	; (8002948 <MX_GPIO_Init+0x2c8>)
 800281c:	f000 fdb4 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002820:	2304      	movs	r3, #4
 8002822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	4845      	ldr	r0, [pc, #276]	; (8002948 <MX_GPIO_Init+0x2c8>)
 8002834:	f000 fda8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_Pin */
  GPIO_InitStruct.Pin = Backlight_Pin;
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800283c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Backlight_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	483c      	ldr	r0, [pc, #240]	; (8002940 <MX_GPIO_Init+0x2c0>)
 800284e:	f000 fd9b 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002858:	2302      	movs	r3, #2
 800285a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002864:	2305      	movs	r3, #5
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	4836      	ldr	r0, [pc, #216]	; (8002948 <MX_GPIO_Init+0x2c8>)
 8002870:	f000 fd8a 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002874:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002878:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002886:	f107 031c 	add.w	r3, r7, #28
 800288a:	4619      	mov	r1, r3
 800288c:	482f      	ldr	r0, [pc, #188]	; (800294c <MX_GPIO_Init+0x2cc>)
 800288e:	f000 fd7b 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002892:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80028a4:	2306      	movs	r3, #6
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	4825      	ldr	r0, [pc, #148]	; (8002944 <MX_GPIO_Init+0x2c4>)
 80028b0:	f000 fd6a 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	4821      	ldr	r0, [pc, #132]	; (8002950 <MX_GPIO_Init+0x2d0>)
 80028ca:	f000 fd5d 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80028ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80028d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80028e0:	230a      	movs	r3, #10
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4819      	ldr	r0, [pc, #100]	; (8002950 <MX_GPIO_Init+0x2d0>)
 80028ec:	f000 fd4c 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80028f0:	2320      	movs	r3, #32
 80028f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <MX_GPIO_Init+0x2cc>)
 8002904:	f000 fd40 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002908:	2302      	movs	r3, #2
 800290a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800290c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002916:	f107 031c 	add.w	r3, r7, #28
 800291a:	4619      	mov	r1, r3
 800291c:	4808      	ldr	r0, [pc, #32]	; (8002940 <MX_GPIO_Init+0x2c0>)
 800291e:	f000 fd33 	bl	8003388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2017      	movs	r0, #23
 8002928:	f000 fcf7 	bl	800331a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800292c:	2017      	movs	r0, #23
 800292e:	f000 fd10 	bl	8003352 <HAL_NVIC_EnableIRQ>

}
 8002932:	bf00      	nop
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40021000 	.word	0x40021000
 8002944:	40020800 	.word	0x40020800
 8002948:	40020400 	.word	0x40020400
 800294c:	40020c00 	.word	0x40020c00
 8002950:	40020000 	.word	0x40020000

08002954 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Backlight_Pin){
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	2b80      	cmp	r3, #128	; 0x80
 8002962:	d109      	bne.n	8002978 <HAL_GPIO_EXTI_Callback+0x24>
		TIM1->CCR1 = 100;
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002966:	2264      	movs	r2, #100	; 0x64
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_Base_Start_IT(&htim3);
 800296a:	4806      	ldr	r0, [pc, #24]	; (8002984 <HAL_GPIO_EXTI_Callback+0x30>)
 800296c:	f002 fde8 	bl	8005540 <HAL_TIM_Base_Start_IT>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <HAL_GPIO_EXTI_Callback+0x30>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2200      	movs	r2, #0
 8002976:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40010000 	.word	0x40010000
 8002984:	200001b4 	.word	0x200001b4

08002988 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b092      	sub	sp, #72	; 0x48
 800298c:	af02      	add	r7, sp, #8
 800298e:	6078      	str	r0, [r7, #4]

	if (htim == &htim3){
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d106      	bne.n	80029a6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		TIM1->CCR1 = 20;
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800299a:	2214      	movs	r2, #20
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_Base_Stop_IT(&htim3);
 800299e:	4868      	ldr	r0, [pc, #416]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80029a0:	f002 fe3e 	bl	8005620 <HAL_TIM_Base_Stop_IT>
		sprintf((char*)usart_buf, "%i | \r\n", (int) dT);
		HAL_UART_Transmit(&huart2, usart_buf, strlen((char*)usart_buf), 100);*/

	}

}
 80029a4:	e0c7      	b.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x1ae>
	else if (htim == &htim9){
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	f040 80c3 	bne.w	8002b36 <HAL_TIM_PeriodElapsedCallback+0x1ae>
		uint32_t temp = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		int32_t dT = 0, TEMP = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029b8:	2300      	movs	r3, #0
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
		strcpy((char*)usart_buf, "All Good\r\n");
 80029bc:	f107 0318 	add.w	r3, r7, #24
 80029c0:	4a62      	ldr	r2, [pc, #392]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80029c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c4:	c303      	stmia	r3!, {r0, r1}
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	3302      	adds	r3, #2
 80029ca:	0c12      	lsrs	r2, r2, #16
 80029cc:	701a      	strb	r2, [r3, #0]
		buf[0] = ADC_BARO_READ_ADDR;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80029d4:	23ee      	movs	r3, #238	; 0xee
 80029d6:	b299      	uxth	r1, r3
 80029d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2301      	movs	r3, #1
 80029e4:	485a      	ldr	r0, [pc, #360]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80029e6:	f000 ffe1 	bl	80039ac <HAL_I2C_Master_Transmit>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 80029f0:	23ee      	movs	r3, #238	; 0xee
 80029f2:	b299      	uxth	r1, r3
 80029f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029f8:	f04f 33ff 	mov.w	r3, #4294967295
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2303      	movs	r3, #3
 8002a00:	4853      	ldr	r0, [pc, #332]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002a02:	f001 f8d1 	bl	8003ba8 <HAL_I2C_Master_Receive>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		temp = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 8002a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
		dT = temp - Const_5*pow(2,8);
 8002a22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002a24:	f7fd fd6e 	bl	8000504 <__aeabi_ui2d>
 8002a28:	4604      	mov	r4, r0
 8002a2a:	460d      	mov	r5, r1
 8002a2c:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fd77 	bl	8000524 <__aeabi_i2d>
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002a3c:	f7fd fddc 	bl	80005f8 <__aeabi_dmul>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fc1e 	bl	8000288 <__aeabi_dsub>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fd ffe2 	bl	8000a1c <__aeabi_d2iz>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
		TEMP = 2000 + dT*Const_6/pow(2,23);
 8002a5c:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd5b 	bl	8000524 <__aeabi_i2d>
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002a74:	f7fd feea 	bl	800084c <__aeabi_ddiv>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002a86:	f7fd fc01 	bl	800028c <__adddf3>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fd ffc3 	bl	8000a1c <__aeabi_d2iz>
 8002a96:	4603      	mov	r3, r0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
		sprintf((char*)disp_buf, "%iC ", (int)TEMP);
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa0:	4931      	ldr	r1, [pc, #196]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 f9ac 	bl	8006e00 <siprintf>
		Paint_DrawString_EN(123, 123+16, (char *) disp_buf, &Font16, BLACK, GREEN);
 8002aa8:	f107 020c 	add.w	r2, r7, #12
 8002aac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002ab8:	218b      	movs	r1, #139	; 0x8b
 8002aba:	207b      	movs	r0, #123	; 0x7b
 8002abc:	f7fe fdf0 	bl	80016a0 <Paint_DrawString_EN>
		__HAL_TIM_SET_COUNTER(&htim9, 0);
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
		buf[0] = BARO_RESET;
 8002ac8:	231e      	movs	r3, #30
 8002aca:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8002ace:	23ee      	movs	r3, #238	; 0xee
 8002ad0:	b299      	uxth	r1, r3
 8002ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2301      	movs	r3, #1
 8002ade:	481c      	ldr	r0, [pc, #112]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002ae0:	f000 ff64 	bl	80039ac <HAL_I2C_Master_Transmit>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (ret != HAL_OK){
 8002aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_TIM_PeriodElapsedCallback+0x17a>
			strcpy((char*)usart_buf, "Error TX_1\r\n");
 8002af2:	f107 0318 	add.w	r3, r7, #24
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002af8:	461c      	mov	r4, r3
 8002afa:	4613      	mov	r3, r2
 8002afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afe:	c407      	stmia	r4!, {r0, r1, r2}
 8002b00:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, disp_buf, strlen((char*)disp_buf), 100);
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fb62 	bl	80001d0 <strlen>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f107 010c 	add.w	r1, r7, #12
 8002b14:	2364      	movs	r3, #100	; 0x64
 8002b16:	4817      	ldr	r0, [pc, #92]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002b18:	f003 fdcb 	bl	80066b2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, usart_buf, strlen((char*)usart_buf), 100);
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fb55 	bl	80001d0 <strlen>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f107 0118 	add.w	r1, r7, #24
 8002b2e:	2364      	movs	r3, #100	; 0x64
 8002b30:	4810      	ldr	r0, [pc, #64]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002b32:	f003 fdbe 	bl	80066b2 <HAL_UART_Transmit>
}
 8002b36:	bf00      	nop
 8002b38:	3740      	adds	r7, #64	; 0x40
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200001b4 	.word	0x200001b4
 8002b44:	40010000 	.word	0x40010000
 8002b48:	200001fc 	.word	0x200001fc
 8002b4c:	0800773c 	.word	0x0800773c
 8002b50:	200000c0 	.word	0x200000c0
 8002b54:	20000008 	.word	0x20000008
 8002b58:	40700000 	.word	0x40700000
 8002b5c:	2000000a 	.word	0x2000000a
 8002b60:	41600000 	.word	0x41600000
 8002b64:	409f4000 	.word	0x409f4000
 8002b68:	08007748 	.word	0x08007748
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	08007750 	.word	0x08007750
 8002b74:	20000244 	.word	0x20000244

08002b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i
}
 8002b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b80:	e7fe      	b.n	8002b80 <Error_Handler+0x8>
	...

08002b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	4b10      	ldr	r3, [pc, #64]	; (8002bd0 <HAL_MspInit+0x4c>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a0f      	ldr	r2, [pc, #60]	; (8002bd0 <HAL_MspInit+0x4c>)
 8002b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_MspInit+0x4c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_MspInit+0x4c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_MspInit+0x4c>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_MspInit+0x4c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bc2:	2007      	movs	r0, #7
 8002bc4:	f000 fb9e 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	; (8002c58 <HAL_I2C_MspInit+0x84>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d12c      	bne.n	8002c50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_I2C_MspInit+0x88>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_I2C_MspInit+0x88>)
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_I2C_MspInit+0x88>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002c12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c18:	2312      	movs	r3, #18
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c24:	2304      	movs	r3, #4
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	480c      	ldr	r0, [pc, #48]	; (8002c60 <HAL_I2C_MspInit+0x8c>)
 8002c30:	f000 fbaa 	bl	8003388 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_I2C_MspInit+0x88>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <HAL_I2C_MspInit+0x88>)
 8002c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_I2C_MspInit+0x88>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c50:	bf00      	nop
 8002c52:	3728      	adds	r7, #40	; 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40005400 	.word	0x40005400
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020400 	.word	0x40020400

08002c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <HAL_SPI_MspInit+0x84>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12b      	bne.n	8002cde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002c90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	4a10      	ldr	r2, [pc, #64]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_SPI_MspInit+0x88>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002cbe:	23e0      	movs	r3, #224	; 0xe0
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cce:	2305      	movs	r3, #5
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <HAL_SPI_MspInit+0x8c>)
 8002cda:	f000 fb55 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	; 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40013000 	.word	0x40013000
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2a      	ldr	r2, [pc, #168]	; (8002dac <HAL_TIM_Base_MspInit+0xb8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d116      	bne.n	8002d34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2018      	movs	r0, #24
 8002d28:	f000 faf7 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d2c:	2018      	movs	r0, #24
 8002d2e:	f000 fb10 	bl	8003352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002d32:	e036      	b.n	8002da2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_TIM_Base_MspInit+0xc0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d116      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	201d      	movs	r0, #29
 8002d60:	f000 fadb 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d64:	201d      	movs	r0, #29
 8002d66:	f000 faf4 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002d6a:	e01a      	b.n	8002da2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM9)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <HAL_TIM_Base_MspInit+0xc4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d115      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_TIM_Base_MspInit+0xbc>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2018      	movs	r0, #24
 8002d98:	f000 fabf 	bl	800331a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d9c:	2018      	movs	r0, #24
 8002d9e:	f000 fad8 	bl	8003352 <HAL_NVIC_EnableIRQ>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40014000 	.word	0x40014000

08002dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <HAL_TIM_MspPostInit+0x68>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d11e      	bne.n	8002e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_TIM_MspPostInit+0x6c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_TIM_MspPostInit+0x6c>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_TIM_MspPostInit+0x6c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	4619      	mov	r1, r3
 8002e16:	4805      	ldr	r0, [pc, #20]	; (8002e2c <HAL_TIM_MspPostInit+0x70>)
 8002e18:	f000 fab6 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e1c:	bf00      	nop
 8002e1e:	3720      	adds	r7, #32
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40021000 	.word	0x40021000

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_UART_MspInit+0x84>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d12b      	bne.n	8002eaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_UART_MspInit+0x88>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_UART_MspInit+0x88>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_UART_MspInit+0x88>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_UART_MspInit+0x88>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <HAL_UART_MspInit+0x88>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_UART_MspInit+0x88>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <HAL_UART_MspInit+0x8c>)
 8002ea6:	f000 fa6f 	bl	8003388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3728      	adds	r7, #40	; 0x28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40004400 	.word	0x40004400
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020000 	.word	0x40020000

08002ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec4:	e7fe      	b.n	8002ec4 <NMI_Handler+0x4>

08002ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eca:	e7fe      	b.n	8002eca <HardFault_Handler+0x4>

08002ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed0:	e7fe      	b.n	8002ed0 <MemManage_Handler+0x4>

08002ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <BusFault_Handler+0x4>

08002ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <UsageFault_Handler+0x4>

08002ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f0c:	f000 f8e6 	bl	80030dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Backlight_Pin);
 8002f18:	2080      	movs	r0, #128	; 0x80
 8002f1a:	f000 fbeb 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f28:	4803      	ldr	r0, [pc, #12]	; (8002f38 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8002f2a:	f002 fcc9 	bl	80058c0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8002f2e:	4803      	ldr	r0, [pc, #12]	; (8002f3c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002f30:	f002 fcc6 	bl	80058c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	2000016c 	.word	0x2000016c
 8002f3c:	200001fc 	.word	0x200001fc

08002f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <TIM3_IRQHandler+0x10>)
 8002f46:	f002 fcbb 	bl	80058c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200001b4 	.word	0x200001b4

08002f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f5c:	4a14      	ldr	r2, [pc, #80]	; (8002fb0 <_sbrk+0x5c>)
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <_sbrk+0x60>)
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <_sbrk+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d102      	bne.n	8002f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <_sbrk+0x64>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	; (8002fbc <_sbrk+0x68>)
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <_sbrk+0x64>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d207      	bcs.n	8002f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f84:	f003 ff0a 	bl	8006d9c <__errno>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e009      	b.n	8002fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <_sbrk+0x64>)
 8002fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	20020000 	.word	0x20020000
 8002fb4:	00000400 	.word	0x00000400
 8002fb8:	20000288 	.word	0x20000288
 8002fbc:	200002a0 	.word	0x200002a0

08002fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <SystemInit+0x20>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <SystemInit+0x20>)
 8002fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe8:	480d      	ldr	r0, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003000:	4c0b      	ldr	r4, [pc, #44]	; (8003030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800300e:	f7ff ffd7 	bl	8002fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f003 fec9 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003016:	f7fe ff9b 	bl	8001f50 <main>
  bx  lr    
 800301a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800301c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003024:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003028:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 800302c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003030:	200002a0 	.word	0x200002a0

08003034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC_IRQHandler>
	...

08003038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0d      	ldr	r2, [pc, #52]	; (8003078 <HAL_Init+0x40>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_Init+0x40>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_Init+0x40>)
 800304e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_Init+0x40>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a07      	ldr	r2, [pc, #28]	; (8003078 <HAL_Init+0x40>)
 800305a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003060:	2003      	movs	r0, #3
 8003062:	f000 f94f 	bl	8003304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003066:	2000      	movs	r0, #0
 8003068:	f000 f808 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800306c:	f7ff fd8a 	bl	8002b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x54>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f967 	bl	800336e <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00e      	b.n	80030c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80a      	bhi.n	80030c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f000 f92f 	bl	800331a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_InitTick+0x5c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	20000014 	.word	0x20000014
 80030d8:	20000010 	.word	0x20000010

080030dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x20>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_IncTick+0x24>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000014 	.word	0x20000014
 8003100:	2000028c 	.word	0x2000028c

08003104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return uwTick;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_GetTick+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	2000028c 	.word	0x2000028c

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff ffee 	bl	8003104 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003142:	bf00      	nop
 8003144:	f7ff ffde 	bl	8003104 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000014 	.word	0x20000014

08003164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800318c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	60d3      	str	r3, [r2, #12]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b0:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <__NVIC_GetPriorityGrouping+0x18>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	f003 0307 	and.w	r3, r3, #7
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	db0b      	blt.n	80031f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	4907      	ldr	r1, [pc, #28]	; (8003200 <__NVIC_EnableIRQ+0x38>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2001      	movs	r0, #1
 80031ea:	fa00 f202 	lsl.w	r2, r0, r2
 80031ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000e100 	.word	0xe000e100

08003204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003214:	2b00      	cmp	r3, #0
 8003216:	db0a      	blt.n	800322e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2da      	uxtb	r2, r3
 800321c:	490c      	ldr	r1, [pc, #48]	; (8003250 <__NVIC_SetPriority+0x4c>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	0112      	lsls	r2, r2, #4
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	440b      	add	r3, r1
 8003228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800322c:	e00a      	b.n	8003244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <__NVIC_SetPriority+0x50>)
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	3b04      	subs	r3, #4
 800323c:	0112      	lsls	r2, r2, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	440b      	add	r3, r1
 8003242:	761a      	strb	r2, [r3, #24]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	e000e100 	.word	0xe000e100
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b480      	push	{r7}
 800325a:	b089      	sub	sp, #36	; 0x24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	2b04      	cmp	r3, #4
 8003274:	bf28      	it	cs
 8003276:	2304      	movcs	r3, #4
 8003278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3304      	adds	r3, #4
 800327e:	2b06      	cmp	r3, #6
 8003280:	d902      	bls.n	8003288 <NVIC_EncodePriority+0x30>
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3b03      	subs	r3, #3
 8003286:	e000      	b.n	800328a <NVIC_EncodePriority+0x32>
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	401a      	ands	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a0:	f04f 31ff 	mov.w	r1, #4294967295
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa01 f303 	lsl.w	r3, r1, r3
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	4313      	orrs	r3, r2
         );
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3724      	adds	r7, #36	; 0x24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d0:	d301      	bcc.n	80032d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d2:	2301      	movs	r3, #1
 80032d4:	e00f      	b.n	80032f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d6:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <SysTick_Config+0x40>)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032de:	210f      	movs	r1, #15
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	f7ff ff8e 	bl	8003204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <SysTick_Config+0x40>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <SysTick_Config+0x40>)
 80032f0:	2207      	movs	r2, #7
 80032f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000e010 	.word	0xe000e010

08003304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ff29 	bl	8003164 <__NVIC_SetPriorityGrouping>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331a:	b580      	push	{r7, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	af00      	add	r7, sp, #0
 8003320:	4603      	mov	r3, r0
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332c:	f7ff ff3e 	bl	80031ac <__NVIC_GetPriorityGrouping>
 8003330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7ff ff8e 	bl	8003258 <NVIC_EncodePriority>
 800333c:	4602      	mov	r2, r0
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff5d 	bl	8003204 <__NVIC_SetPriority>
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff ff31 	bl	80031c8 <__NVIC_EnableIRQ>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7ff ffa2 	bl	80032c0 <SysTick_Config>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	; 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e16b      	b.n	800367c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a4:	2201      	movs	r2, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 815a 	bne.w	8003676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d005      	beq.n	80033da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b03      	cmp	r3, #3
 8003446:	d017      	beq.n	8003478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d123      	bne.n	80034cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	220f      	movs	r2, #15
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80b4 	beq.w	8003676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b60      	ldr	r3, [pc, #384]	; (8003694 <HAL_GPIO_Init+0x30c>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <HAL_GPIO_Init+0x30c>)
 8003518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351c:	6453      	str	r3, [r2, #68]	; 0x44
 800351e:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <HAL_GPIO_Init+0x30c>)
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352a:	4a5b      	ldr	r2, [pc, #364]	; (8003698 <HAL_GPIO_Init+0x310>)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	3302      	adds	r3, #2
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a52      	ldr	r2, [pc, #328]	; (800369c <HAL_GPIO_Init+0x314>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d02b      	beq.n	80035ae <HAL_GPIO_Init+0x226>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a51      	ldr	r2, [pc, #324]	; (80036a0 <HAL_GPIO_Init+0x318>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d025      	beq.n	80035aa <HAL_GPIO_Init+0x222>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a50      	ldr	r2, [pc, #320]	; (80036a4 <HAL_GPIO_Init+0x31c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01f      	beq.n	80035a6 <HAL_GPIO_Init+0x21e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4f      	ldr	r2, [pc, #316]	; (80036a8 <HAL_GPIO_Init+0x320>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d019      	beq.n	80035a2 <HAL_GPIO_Init+0x21a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4e      	ldr	r2, [pc, #312]	; (80036ac <HAL_GPIO_Init+0x324>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_GPIO_Init+0x216>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_GPIO_Init+0x328>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00d      	beq.n	800359a <HAL_GPIO_Init+0x212>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_GPIO_Init+0x32c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <HAL_GPIO_Init+0x20e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4b      	ldr	r2, [pc, #300]	; (80036b8 <HAL_GPIO_Init+0x330>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_GPIO_Init+0x20a>
 800358e:	2307      	movs	r3, #7
 8003590:	e00e      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 8003592:	2308      	movs	r3, #8
 8003594:	e00c      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 8003596:	2306      	movs	r3, #6
 8003598:	e00a      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 800359a:	2305      	movs	r3, #5
 800359c:	e008      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 800359e:	2304      	movs	r3, #4
 80035a0:	e006      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035a2:	2303      	movs	r3, #3
 80035a4:	e004      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e002      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_GPIO_Init+0x228>
 80035ae:	2300      	movs	r3, #0
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	f002 0203 	and.w	r2, r2, #3
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	4093      	lsls	r3, r2
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c0:	4935      	ldr	r1, [pc, #212]	; (8003698 <HAL_GPIO_Init+0x310>)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ce:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_GPIO_Init+0x334>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4013      	ands	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f2:	4a32      	ldr	r2, [pc, #200]	; (80036bc <HAL_GPIO_Init+0x334>)
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f8:	4b30      	ldr	r3, [pc, #192]	; (80036bc <HAL_GPIO_Init+0x334>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <HAL_GPIO_Init+0x334>)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <HAL_GPIO_Init+0x334>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_GPIO_Init+0x334>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3301      	adds	r3, #1
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b0f      	cmp	r3, #15
 8003680:	f67f ae90 	bls.w	80033a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3724      	adds	r7, #36	; 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	40013800 	.word	0x40013800
 800369c:	40020000 	.word	0x40020000
 80036a0:	40020400 	.word	0x40020400
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020c00 	.word	0x40020c00
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40021400 	.word	0x40021400
 80036b4:	40021800 	.word	0x40021800
 80036b8:	40021c00 	.word	0x40021c00
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff f91e 	bl	8002954 <HAL_GPIO_EXTI_Callback>
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e12b      	b.n	800398e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fa42 	bl	8002bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0201 	bic.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003788:	f001 fbd2 	bl	8004f30 <HAL_RCC_GetPCLK1Freq>
 800378c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4a81      	ldr	r2, [pc, #516]	; (8003998 <HAL_I2C_Init+0x274>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d807      	bhi.n	80037a8 <HAL_I2C_Init+0x84>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a80      	ldr	r2, [pc, #512]	; (800399c <HAL_I2C_Init+0x278>)
 800379c:	4293      	cmp	r3, r2
 800379e:	bf94      	ite	ls
 80037a0:	2301      	movls	r3, #1
 80037a2:	2300      	movhi	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e006      	b.n	80037b6 <HAL_I2C_Init+0x92>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a7d      	ldr	r2, [pc, #500]	; (80039a0 <HAL_I2C_Init+0x27c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bf94      	ite	ls
 80037b0:	2301      	movls	r3, #1
 80037b2:	2300      	movhi	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0e7      	b.n	800398e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a78      	ldr	r2, [pc, #480]	; (80039a4 <HAL_I2C_Init+0x280>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0c9b      	lsrs	r3, r3, #18
 80037c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a6a      	ldr	r2, [pc, #424]	; (8003998 <HAL_I2C_Init+0x274>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d802      	bhi.n	80037f8 <HAL_I2C_Init+0xd4>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	3301      	adds	r3, #1
 80037f6:	e009      	b.n	800380c <HAL_I2C_Init+0xe8>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_I2C_Init+0x284>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	3301      	adds	r3, #1
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	430b      	orrs	r3, r1
 8003812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800381e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	495c      	ldr	r1, [pc, #368]	; (8003998 <HAL_I2C_Init+0x274>)
 8003828:	428b      	cmp	r3, r1
 800382a:	d819      	bhi.n	8003860 <HAL_I2C_Init+0x13c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e59      	subs	r1, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fbb1 f3f3 	udiv	r3, r1, r3
 800383a:	1c59      	adds	r1, r3, #1
 800383c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003840:	400b      	ands	r3, r1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_I2C_Init+0x138>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e59      	subs	r1, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fbb1 f3f3 	udiv	r3, r1, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385a:	e051      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 800385c:	2304      	movs	r3, #4
 800385e:	e04f      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d111      	bne.n	800388c <HAL_I2C_Init+0x168>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1e58      	subs	r0, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e012      	b.n	80038b2 <HAL_I2C_Init+0x18e>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e58      	subs	r0, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	0099      	lsls	r1, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Init+0x196>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e022      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10e      	bne.n	80038e0 <HAL_I2C_Init+0x1bc>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1e58      	subs	r0, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	440b      	add	r3, r1
 80038d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d4:	3301      	adds	r3, #1
 80038d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038de:	e00f      	b.n	8003900 <HAL_I2C_Init+0x1dc>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1e58      	subs	r0, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6859      	ldr	r1, [r3, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	0099      	lsls	r1, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f6:	3301      	adds	r3, #1
 80038f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	6809      	ldr	r1, [r1, #0]
 8003904:	4313      	orrs	r3, r2
 8003906:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800392e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6911      	ldr	r1, [r2, #16]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68d2      	ldr	r2, [r2, #12]
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	430b      	orrs	r3, r1
 8003942:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	000186a0 	.word	0x000186a0
 800399c:	001e847f 	.word	0x001e847f
 80039a0:	003d08ff 	.word	0x003d08ff
 80039a4:	431bde83 	.word	0x431bde83
 80039a8:	10624dd3 	.word	0x10624dd3

080039ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	461a      	mov	r2, r3
 80039b8:	460b      	mov	r3, r1
 80039ba:	817b      	strh	r3, [r7, #10]
 80039bc:	4613      	mov	r3, r2
 80039be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff fba0 	bl	8003104 <HAL_GetTick>
 80039c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f040 80e0 	bne.w	8003b94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2319      	movs	r3, #25
 80039da:	2201      	movs	r2, #1
 80039dc:	4970      	ldr	r1, [pc, #448]	; (8003ba0 <HAL_I2C_Master_Transmit+0x1f4>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fc58 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0d3      	b.n	8003b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_I2C_Master_Transmit+0x50>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0cc      	b.n	8003b96 <HAL_I2C_Master_Transmit+0x1ea>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d007      	beq.n	8003a22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2221      	movs	r2, #33	; 0x21
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	893a      	ldrh	r2, [r7, #8]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a50      	ldr	r2, [pc, #320]	; (8003ba4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a64:	8979      	ldrh	r1, [r7, #10]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fac2 	bl	8003ff4 <I2C_MasterRequestWrite>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e08d      	b.n	8003b96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a90:	e066      	b.n	8003b60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 fcd2 	bl	8004440 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00d      	beq.n	8003abe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d107      	bne.n	8003aba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06b      	b.n	8003b96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d11b      	bne.n	8003b34 <HAL_I2C_Master_Transmit+0x188>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d017      	beq.n	8003b34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	6a39      	ldr	r1, [r7, #32]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fcc2 	bl	80044c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d107      	bne.n	8003b5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e01a      	b.n	8003b96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d194      	bne.n	8003a92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	00100002 	.word	0x00100002
 8003ba4:	ffff0000 	.word	0xffff0000

08003ba8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	817b      	strh	r3, [r7, #10]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bbc:	f7ff faa2 	bl	8003104 <HAL_GetTick>
 8003bc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	f040 820b 	bne.w	8003fe6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2319      	movs	r3, #25
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	497c      	ldr	r1, [pc, #496]	; (8003dcc <HAL_I2C_Master_Receive+0x224>)
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fb5a 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
 8003be8:	e1fe      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2C_Master_Receive+0x50>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e1f7      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d007      	beq.n	8003c1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2222      	movs	r2, #34	; 0x22
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	893a      	ldrh	r2, [r7, #8]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a5c      	ldr	r2, [pc, #368]	; (8003dd0 <HAL_I2C_Master_Receive+0x228>)
 8003c5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fa46 	bl	80040f8 <I2C_MasterRequestRead>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1b8      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e18c      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d11b      	bne.n	8003ce6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e16c      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	e14c      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d4c:	e138      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	f200 80f1 	bhi.w	8003f3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d123      	bne.n	8003da8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fbed 	bl	8004544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e139      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003da6:	e10b      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d14e      	bne.n	8003e4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	2200      	movs	r2, #0
 8003db8:	4906      	ldr	r1, [pc, #24]	; (8003dd4 <HAL_I2C_Master_Receive+0x22c>)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fa6a 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e10e      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
 8003dca:	bf00      	nop
 8003dcc:	00100002 	.word	0x00100002
 8003dd0:	ffff0000 	.word	0xffff0000
 8003dd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e4c:	e0b8      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	2200      	movs	r2, #0
 8003e56:	4966      	ldr	r1, [pc, #408]	; (8003ff0 <HAL_I2C_Master_Receive+0x448>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fa1b 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0bf      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	494f      	ldr	r1, [pc, #316]	; (8003ff0 <HAL_I2C_Master_Receive+0x448>)
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f9ed 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e091      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691a      	ldr	r2, [r3, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f38:	e042      	b.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fb00 	bl	8004544 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e04c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d118      	bne.n	8003fc0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f47f aec2 	bne.w	8003d4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3728      	adds	r7, #40	; 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	00010004 	.word	0x00010004

08003ff4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	460b      	mov	r3, r1
 8004002:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b08      	cmp	r3, #8
 800400e:	d006      	beq.n	800401e <I2C_MasterRequestWrite+0x2a>
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d003      	beq.n	800401e <I2C_MasterRequestWrite+0x2a>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800401c:	d108      	bne.n	8004030 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e00b      	b.n	8004048 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	2b12      	cmp	r3, #18
 8004036:	d107      	bne.n	8004048 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f000 f91d 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800406e:	d103      	bne.n	8004078 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e035      	b.n	80040e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004084:	d108      	bne.n	8004098 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004086:	897b      	ldrh	r3, [r7, #10]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e01b      	b.n	80040d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004098:	897b      	ldrh	r3, [r7, #10]
 800409a:	11db      	asrs	r3, r3, #7
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f063 030f 	orn	r3, r3, #15
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	490e      	ldr	r1, [pc, #56]	; (80040f0 <I2C_MasterRequestWrite+0xfc>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f943 	bl	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e010      	b.n	80040e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4907      	ldr	r1, [pc, #28]	; (80040f4 <I2C_MasterRequestWrite+0x100>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f933 	bl	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010008 	.word	0x00010008
 80040f4:	00010002 	.word	0x00010002

080040f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af02      	add	r7, sp, #8
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	460b      	mov	r3, r1
 8004106:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800411c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b08      	cmp	r3, #8
 8004122:	d006      	beq.n	8004132 <I2C_MasterRequestRead+0x3a>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d003      	beq.n	8004132 <I2C_MasterRequestRead+0x3a>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004130:	d108      	bne.n	8004144 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00b      	b.n	800415c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	2b11      	cmp	r3, #17
 800414a:	d107      	bne.n	800415c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f893 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004182:	d103      	bne.n	800418c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e079      	b.n	8004284 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004198:	d108      	bne.n	80041ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800419a:	897b      	ldrh	r3, [r7, #10]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	611a      	str	r2, [r3, #16]
 80041aa:	e05f      	b.n	800426c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041ac:	897b      	ldrh	r3, [r7, #10]
 80041ae:	11db      	asrs	r3, r3, #7
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0306 	and.w	r3, r3, #6
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f063 030f 	orn	r3, r3, #15
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4930      	ldr	r1, [pc, #192]	; (800428c <I2C_MasterRequestRead+0x194>)
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f8b9 	bl	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e054      	b.n	8004284 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041da:	897b      	ldrh	r3, [r7, #10]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4929      	ldr	r1, [pc, #164]	; (8004290 <I2C_MasterRequestRead+0x198>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f8a9 	bl	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e044      	b.n	8004284 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800421e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f831 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00d      	beq.n	8004254 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004246:	d103      	bne.n	8004250 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e017      	b.n	8004284 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004254:	897b      	ldrh	r3, [r7, #10]
 8004256:	11db      	asrs	r3, r3, #7
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 0306 	and.w	r3, r3, #6
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f063 030e 	orn	r3, r3, #14
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4907      	ldr	r1, [pc, #28]	; (8004290 <I2C_MasterRequestRead+0x198>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f865 	bl	8004342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	00010008 	.word	0x00010008
 8004290:	00010002 	.word	0x00010002

08004294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a4:	e025      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe ff29 	bl	8003104 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e023      	b.n	800433a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10d      	bne.n	8004318 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	e00c      	b.n	8004332 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	429a      	cmp	r2, r3
 8004336:	d0b6      	beq.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
 800434e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004350:	e051      	b.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004360:	d123      	bne.n	80043aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f043 0204 	orr.w	r2, r3, #4
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e046      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d021      	beq.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fe fea7 	bl	8003104 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d116      	bne.n	80043f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e020      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10c      	bne.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e00b      	b.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	43da      	mvns	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d18d      	bne.n	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800444c:	e02d      	b.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 f8ce 	bl	80045f0 <I2C_IsAcknowledgeFailed>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e02d      	b.n	80044ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d021      	beq.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fe fe4d 	bl	8003104 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d116      	bne.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e007      	b.n	80044ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d1ca      	bne.n	800444e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	60f8      	str	r0, [r7, #12]
 80044ca:	60b9      	str	r1, [r7, #8]
 80044cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ce:	e02d      	b.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f88d 	bl	80045f0 <I2C_IsAcknowledgeFailed>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e02d      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e6:	d021      	beq.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fe fe0c 	bl	8003104 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d116      	bne.n	800452c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e007      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b04      	cmp	r3, #4
 8004538:	d1ca      	bne.n	80044d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004550:	e042      	b.n	80045d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d119      	bne.n	8004594 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0210 	mvn.w	r2, #16
 8004568:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e029      	b.n	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004594:	f7fe fdb6 	bl	8003104 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d302      	bcc.n	80045aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d1b5      	bne.n	8004552 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d11b      	bne.n	8004640 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004610:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	f043 0204 	orr.w	r2, r3, #4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e267      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d075      	beq.n	800475a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466e:	4b88      	ldr	r3, [pc, #544]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
 8004676:	2b04      	cmp	r3, #4
 8004678:	d00c      	beq.n	8004694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4b85      	ldr	r3, [pc, #532]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004682:	2b08      	cmp	r3, #8
 8004684:	d112      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004686:	4b82      	ldr	r3, [pc, #520]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004692:	d10b      	bne.n	80046ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	4b7e      	ldr	r3, [pc, #504]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d05b      	beq.n	8004758 <HAL_RCC_OscConfig+0x108>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d157      	bne.n	8004758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e242      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d106      	bne.n	80046c4 <HAL_RCC_OscConfig+0x74>
 80046b6:	4b76      	ldr	r3, [pc, #472]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a75      	ldr	r2, [pc, #468]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01d      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x98>
 80046ce:	4b70      	ldr	r3, [pc, #448]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6f      	ldr	r2, [pc, #444]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4b6d      	ldr	r3, [pc, #436]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6c      	ldr	r2, [pc, #432]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e00b      	b.n	8004700 <HAL_RCC_OscConfig+0xb0>
 80046e8:	4b69      	ldr	r3, [pc, #420]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a68      	ldr	r2, [pc, #416]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b66      	ldr	r3, [pc, #408]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a65      	ldr	r2, [pc, #404]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d013      	beq.n	8004730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fe fcfc 	bl	8003104 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004710:	f7fe fcf8 	bl	8003104 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b64      	cmp	r3, #100	; 0x64
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e207      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b5b      	ldr	r3, [pc, #364]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f0      	beq.n	8004710 <HAL_RCC_OscConfig+0xc0>
 800472e:	e014      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe fce8 	bl	8003104 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004738:	f7fe fce4 	bl	8003104 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1f3      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	4b51      	ldr	r3, [pc, #324]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0xe8>
 8004756:	e000      	b.n	800475a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d063      	beq.n	800482e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004766:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00b      	beq.n	800478a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b47      	ldr	r3, [pc, #284]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800477a:	2b08      	cmp	r3, #8
 800477c:	d11c      	bne.n	80047b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477e:	4b44      	ldr	r3, [pc, #272]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d116      	bne.n	80047b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <HAL_RCC_OscConfig+0x152>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e1c7      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	4b3b      	ldr	r3, [pc, #236]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4937      	ldr	r1, [pc, #220]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b6:	e03a      	b.n	800482e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c0:	4b34      	ldr	r3, [pc, #208]	; (8004894 <HAL_RCC_OscConfig+0x244>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fe fc9d 	bl	8003104 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ce:	f7fe fc99 	bl	8003104 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e1a8      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	4b2b      	ldr	r3, [pc, #172]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ec:	4b28      	ldr	r3, [pc, #160]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4925      	ldr	r1, [pc, #148]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
 8004800:	e015      	b.n	800482e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCC_OscConfig+0x244>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fe fc7c 	bl	8003104 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004810:	f7fe fc78 	bl	8003104 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e187      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d036      	beq.n	80048a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <HAL_RCC_OscConfig+0x248>)
 8004844:	2201      	movs	r2, #1
 8004846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fe fc5c 	bl	8003104 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004850:	f7fe fc58 	bl	8003104 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e167      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCC_OscConfig+0x240>)
 8004864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x200>
 800486e:	e01b      	b.n	80048a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <HAL_RCC_OscConfig+0x248>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004876:	f7fe fc45 	bl	8003104 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487c:	e00e      	b.n	800489c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487e:	f7fe fc41 	bl	8003104 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d907      	bls.n	800489c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e150      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
 8004890:	40023800 	.word	0x40023800
 8004894:	42470000 	.word	0x42470000
 8004898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489c:	4b88      	ldr	r3, [pc, #544]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 800489e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ea      	bne.n	800487e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8097 	beq.w	80049e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b6:	2300      	movs	r3, #0
 80048b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ba:	4b81      	ldr	r3, [pc, #516]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	4b7d      	ldr	r3, [pc, #500]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4a7c      	ldr	r2, [pc, #496]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80048d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d4:	6413      	str	r3, [r2, #64]	; 0x40
 80048d6:	4b7a      	ldr	r3, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e2:	2301      	movs	r3, #1
 80048e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e6:	4b77      	ldr	r3, [pc, #476]	; (8004ac4 <HAL_RCC_OscConfig+0x474>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d118      	bne.n	8004924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f2:	4b74      	ldr	r3, [pc, #464]	; (8004ac4 <HAL_RCC_OscConfig+0x474>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a73      	ldr	r2, [pc, #460]	; (8004ac4 <HAL_RCC_OscConfig+0x474>)
 80048f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fe:	f7fe fc01 	bl	8003104 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004906:	f7fe fbfd 	bl	8003104 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e10c      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004918:	4b6a      	ldr	r3, [pc, #424]	; (8004ac4 <HAL_RCC_OscConfig+0x474>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d106      	bne.n	800493a <HAL_RCC_OscConfig+0x2ea>
 800492c:	4b64      	ldr	r3, [pc, #400]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004930:	4a63      	ldr	r2, [pc, #396]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	6713      	str	r3, [r2, #112]	; 0x70
 8004938:	e01c      	b.n	8004974 <HAL_RCC_OscConfig+0x324>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b05      	cmp	r3, #5
 8004940:	d10c      	bne.n	800495c <HAL_RCC_OscConfig+0x30c>
 8004942:	4b5f      	ldr	r3, [pc, #380]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	4a5e      	ldr	r2, [pc, #376]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6713      	str	r3, [r2, #112]	; 0x70
 800494e:	4b5c      	ldr	r3, [pc, #368]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004952:	4a5b      	ldr	r2, [pc, #364]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004954:	f043 0301 	orr.w	r3, r3, #1
 8004958:	6713      	str	r3, [r2, #112]	; 0x70
 800495a:	e00b      	b.n	8004974 <HAL_RCC_OscConfig+0x324>
 800495c:	4b58      	ldr	r3, [pc, #352]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a57      	ldr	r2, [pc, #348]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a54      	ldr	r2, [pc, #336]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 800496e:	f023 0304 	bic.w	r3, r3, #4
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7fe fbc2 	bl	8003104 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004982:	e00a      	b.n	800499a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004984:	f7fe fbbe 	bl	8003104 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0cb      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0ee      	beq.n	8004984 <HAL_RCC_OscConfig+0x334>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a8:	f7fe fbac 	bl	8003104 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ae:	e00a      	b.n	80049c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7fe fba8 	bl	8003104 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e0b5      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1ee      	bne.n	80049b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	4a38      	ldr	r2, [pc, #224]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80049de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a1 	beq.w	8004b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ee:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d05c      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d141      	bne.n	8004a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a02:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <HAL_RCC_OscConfig+0x478>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fe fb7c 	bl	8003104 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fe fb78 	bl	8003104 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e087      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	019b      	lsls	r3, r3, #6
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	3b01      	subs	r3, #1
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	491b      	ldr	r1, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a58:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <HAL_RCC_OscConfig+0x478>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5e:	f7fe fb51 	bl	8003104 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fe fb4d 	bl	8003104 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e05c      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x416>
 8004a84:	e054      	b.n	8004b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <HAL_RCC_OscConfig+0x478>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fb3a 	bl	8003104 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fe fb36 	bl	8003104 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e045      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x444>
 8004ab2:	e03d      	b.n	8004b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e038      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x4ec>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d028      	beq.n	8004b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d121      	bne.n	8004b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d11a      	bne.n	8004b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d111      	bne.n	8004b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	3b01      	subs	r3, #1
 8004b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800

08004b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0cc      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b54:	4b68      	ldr	r3, [pc, #416]	; (8004cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d90c      	bls.n	8004b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b63      	ldr	r3, [pc, #396]	; (8004cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0b8      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b94:	4b59      	ldr	r3, [pc, #356]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	4a58      	ldr	r2, [pc, #352]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bac:	4b53      	ldr	r3, [pc, #332]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a52      	ldr	r2, [pc, #328]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb8:	4b50      	ldr	r3, [pc, #320]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	494d      	ldr	r1, [pc, #308]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d044      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d107      	bne.n	8004bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bde:	4b47      	ldr	r3, [pc, #284]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d119      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e07f      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfe:	4b3f      	ldr	r3, [pc, #252]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e06f      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0e:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e067      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1e:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f023 0203 	bic.w	r2, r3, #3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	4934      	ldr	r1, [pc, #208]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c30:	f7fe fa68 	bl	8003104 <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c38:	f7fe fa64 	bl	8003104 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e04f      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4e:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 020c 	and.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d1eb      	bne.n	8004c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d20c      	bcs.n	8004c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e032      	b.n	8004cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c94:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4916      	ldr	r1, [pc, #88]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	490e      	ldr	r1, [pc, #56]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc6:	f000 f821 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	490a      	ldr	r1, [pc, #40]	; (8004d00 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd8:	5ccb      	ldrb	r3, [r1, r3]
 8004cda:	fa22 f303 	lsr.w	r3, r2, r3
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe f9c8 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023c00 	.word	0x40023c00
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	0800a988 	.word	0x0800a988
 8004d04:	2000000c 	.word	0x2000000c
 8004d08:	20000010 	.word	0x20000010

08004d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d10:	b094      	sub	sp, #80	; 0x50
 8004d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	647b      	str	r3, [r7, #68]	; 0x44
 8004d18:	2300      	movs	r3, #0
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d24:	4b79      	ldr	r3, [pc, #484]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d00d      	beq.n	8004d4c <HAL_RCC_GetSysClockFreq+0x40>
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	f200 80e1 	bhi.w	8004ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x34>
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d003      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d3e:	e0db      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d40:	4b73      	ldr	r3, [pc, #460]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d44:	e0db      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d46:	4b73      	ldr	r3, [pc, #460]	; (8004f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d4a:	e0d8      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d4c:	4b6f      	ldr	r3, [pc, #444]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d56:	4b6d      	ldr	r3, [pc, #436]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d063      	beq.n	8004e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d62:	4b6a      	ldr	r3, [pc, #424]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	2200      	movs	r2, #0
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	633b      	str	r3, [r7, #48]	; 0x30
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d7e:	4622      	mov	r2, r4
 8004d80:	462b      	mov	r3, r5
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	0159      	lsls	r1, r3, #5
 8004d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d90:	0150      	lsls	r0, r2, #5
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4621      	mov	r1, r4
 8004d98:	1a51      	subs	r1, r2, r1
 8004d9a:	6139      	str	r1, [r7, #16]
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004db0:	4659      	mov	r1, fp
 8004db2:	018b      	lsls	r3, r1, #6
 8004db4:	4651      	mov	r1, sl
 8004db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dba:	4651      	mov	r1, sl
 8004dbc:	018a      	lsls	r2, r1, #6
 8004dbe:	4651      	mov	r1, sl
 8004dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dde:	4690      	mov	r8, r2
 8004de0:	4699      	mov	r9, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	eb18 0303 	adds.w	r3, r8, r3
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	462b      	mov	r3, r5
 8004dec:	eb49 0303 	adc.w	r3, r9, r3
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dfe:	4629      	mov	r1, r5
 8004e00:	024b      	lsls	r3, r1, #9
 8004e02:	4621      	mov	r1, r4
 8004e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e08:	4621      	mov	r1, r4
 8004e0a:	024a      	lsls	r2, r1, #9
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e12:	2200      	movs	r2, #0
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e1c:	f7fb fe26 	bl	8000a6c <__aeabi_uldivmod>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4613      	mov	r3, r2
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e28:	e058      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	2200      	movs	r2, #0
 8004e32:	4618      	mov	r0, r3
 8004e34:	4611      	mov	r1, r2
 8004e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e3a:	623b      	str	r3, [r7, #32]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	f04f 0000 	mov.w	r0, #0
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	0159      	lsls	r1, r3, #5
 8004e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e56:	0150      	lsls	r0, r2, #5
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e62:	4649      	mov	r1, r9
 8004e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e80:	eb63 050b 	sbc.w	r5, r3, fp
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	00eb      	lsls	r3, r5, #3
 8004e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e92:	00e2      	lsls	r2, r4, #3
 8004e94:	4614      	mov	r4, r2
 8004e96:	461d      	mov	r5, r3
 8004e98:	4643      	mov	r3, r8
 8004e9a:	18e3      	adds	r3, r4, r3
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	eb45 0303 	adc.w	r3, r5, r3
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	028b      	lsls	r3, r1, #10
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	028a      	lsls	r2, r1, #10
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	61fa      	str	r2, [r7, #28]
 8004ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed0:	f7fb fdcc 	bl	8000a6c <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4613      	mov	r3, r2
 8004eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ef6:	e002      	b.n	8004efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8004efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3750      	adds	r7, #80	; 0x50
 8004f04:	46bd      	mov	sp, r7
 8004f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	00f42400 	.word	0x00f42400
 8004f14:	007a1200 	.word	0x007a1200

08004f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f1c:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	2000000c 	.word	0x2000000c

08004f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f34:	f7ff fff0 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	0a9b      	lsrs	r3, r3, #10
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	4903      	ldr	r1, [pc, #12]	; (8004f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f46:	5ccb      	ldrb	r3, [r1, r3]
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40023800 	.word	0x40023800
 8004f54:	0800a998 	.word	0x0800a998

08004f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f5c:	f7ff ffdc 	bl	8004f18 <HAL_RCC_GetHCLKFreq>
 8004f60:	4602      	mov	r2, r0
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	0b5b      	lsrs	r3, r3, #13
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	4903      	ldr	r1, [pc, #12]	; (8004f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	0800a998 	.word	0x0800a998

08004f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e07b      	b.n	800508a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d108      	bne.n	8004fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa2:	d009      	beq.n	8004fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
 8004faa:	e005      	b.n	8004fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fd fe46 	bl	8002c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	ea42 0103 	orr.w	r1, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	f003 0104 	and.w	r1, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0210 	and.w	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b088      	sub	sp, #32
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_SPI_Transmit+0x22>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e126      	b.n	8005302 <HAL_SPI_Transmit+0x270>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050bc:	f7fe f822 	bl	8003104 <HAL_GetTick>
 80050c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
 80050d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050d6:	e10b      	b.n	80052f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_SPI_Transmit+0x52>
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d102      	bne.n	80050ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050e8:	e102      	b.n	80052f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2203      	movs	r2, #3
 80050ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	88fa      	ldrh	r2, [r7, #6]
 8005102:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005130:	d10f      	bne.n	8005152 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005140:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005150:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d007      	beq.n	8005170 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005178:	d14b      	bne.n	8005212 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0xf6>
 8005182:	8afb      	ldrh	r3, [r7, #22]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d13e      	bne.n	8005206 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	1c9a      	adds	r2, r3, #2
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051ac:	e02b      	b.n	8005206 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d112      	bne.n	80051e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	881a      	ldrh	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	1c9a      	adds	r2, r3, #2
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	86da      	strh	r2, [r3, #54]	; 0x36
 80051e0:	e011      	b.n	8005206 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e2:	f7fd ff8f 	bl	8003104 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d803      	bhi.n	80051fa <HAL_SPI_Transmit+0x168>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_Transmit+0x16e>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005204:	e074      	b.n	80052f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1ce      	bne.n	80051ae <HAL_SPI_Transmit+0x11c>
 8005210:	e04c      	b.n	80052ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_SPI_Transmit+0x18e>
 800521a:	8afb      	ldrh	r3, [r7, #22]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d140      	bne.n	80052a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	7812      	ldrb	r2, [r2, #0]
 800522c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005246:	e02c      	b.n	80052a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d113      	bne.n	800527e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	330c      	adds	r3, #12
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	86da      	strh	r2, [r3, #54]	; 0x36
 800527c:	e011      	b.n	80052a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527e:	f7fd ff41 	bl	8003104 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d803      	bhi.n	8005296 <HAL_SPI_Transmit+0x204>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d102      	bne.n	800529c <HAL_SPI_Transmit+0x20a>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052a0:	e026      	b.n	80052f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1cd      	bne.n	8005248 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f8b3 	bl	800541c <SPI_EndRxTxTransaction>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	77fb      	strb	r3, [r7, #31]
 80052ec:	e000      	b.n	80052f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80052ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005300:	7ffb      	ldrb	r3, [r7, #31]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800531c:	f7fd fef2 	bl	8003104 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800532c:	f7fd feea 	bl	8003104 <HAL_GetTick>
 8005330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	015b      	lsls	r3, r3, #5
 8005338:	0d1b      	lsrs	r3, r3, #20
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	e054      	b.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d050      	beq.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800534c:	f7fd feda 	bl	8003104 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	429a      	cmp	r2, r3
 800535a:	d902      	bls.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13d      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d111      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d004      	beq.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538e:	d107      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d10f      	bne.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e017      	b.n	800540e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d19b      	bne.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	2000000c 	.word	0x2000000c

0800541c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <SPI_EndRxTxTransaction+0x7c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1b      	ldr	r2, [pc, #108]	; (800549c <SPI_EndRxTxTransaction+0x80>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0d5b      	lsrs	r3, r3, #21
 8005434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d112      	bne.n	800546e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ff5a 	bl	800530c <SPI_WaitFlagStateUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e00f      	b.n	800548e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3b01      	subs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d0f2      	beq.n	800546e <SPI_EndRxTxTransaction+0x52>
 8005488:	e000      	b.n	800548c <SPI_EndRxTxTransaction+0x70>
        break;
 800548a:	bf00      	nop
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	2000000c 	.word	0x2000000c
 800549c:	165e9f81 	.word	0x165e9f81

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e041      	b.n	8005536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd fc14 	bl	8002cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fca8 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e04e      	b.n	80055f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a23      	ldr	r2, [pc, #140]	; (8005604 <HAL_TIM_Base_Start_IT+0xc4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d022      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d01d      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_TIM_Base_Start_IT+0xc8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d018      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_TIM_Base_Start_IT+0xcc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIM_Base_Start_IT+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1b      	ldr	r2, [pc, #108]	; (8005614 <HAL_TIM_Base_Start_IT+0xd4>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a19      	ldr	r2, [pc, #100]	; (8005618 <HAL_TIM_Base_Start_IT+0xd8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x80>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a18      	ldr	r2, [pc, #96]	; (800561c <HAL_TIM_Base_Start_IT+0xdc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d111      	bne.n	80055e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d010      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e2:	e007      	b.n	80055f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40010400 	.word	0x40010400
 8005618:	40014000 	.word	0x40014000
 800561c:	40001800 	.word	0x40001800

08005620 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10f      	bne.n	8005668 <HAL_TIM_Base_Stop_IT+0x48>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	f240 4344 	movw	r3, #1092	; 0x444
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <HAL_TIM_Base_Stop_IT+0x48>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e041      	b.n	8005714 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f839 	bl	800571c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f000 fbb9 	bl	8005e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_TIM_PWM_Start+0x24>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e022      	b.n	800579a <HAL_TIM_PWM_Start+0x6a>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b04      	cmp	r3, #4
 8005758:	d109      	bne.n	800576e <HAL_TIM_PWM_Start+0x3e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e015      	b.n	800579a <HAL_TIM_PWM_Start+0x6a>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x58>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e008      	b.n	800579a <HAL_TIM_PWM_Start+0x6a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07c      	b.n	800589c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0x82>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b0:	e013      	b.n	80057da <HAL_TIM_PWM_Start+0xaa>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x92>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	e00b      	b.n	80057da <HAL_TIM_PWM_Start+0xaa>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d0:	e003      	b.n	80057da <HAL_TIM_PWM_Start+0xaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2201      	movs	r2, #1
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fe10 	bl	8006408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <HAL_TIM_PWM_Start+0x174>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_TIM_PWM_Start+0xcc>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <HAL_TIM_PWM_Start+0x178>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <HAL_TIM_PWM_Start+0xd0>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_TIM_PWM_Start+0xd2>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <HAL_TIM_PWM_Start+0x174>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d022      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d01d      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <HAL_TIM_PWM_Start+0x17c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1d      	ldr	r2, [pc, #116]	; (80058b0 <HAL_TIM_PWM_Start+0x180>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_TIM_PWM_Start+0x184>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_TIM_PWM_Start+0x178>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_TIM_PWM_Start+0x188>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a16      	ldr	r2, [pc, #88]	; (80058bc <HAL_TIM_PWM_Start+0x18c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d111      	bne.n	800588a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d010      	beq.n	800589a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005888:	e007      	b.n	800589a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40001800 	.word	0x40001800

080058c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0202 	mvn.w	r2, #2
 80058ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa77 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa69 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa7a 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b04      	cmp	r3, #4
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b04      	cmp	r3, #4
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0204 	mvn.w	r2, #4
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa4d 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fa3f 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fa50 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b08      	cmp	r3, #8
 800597c:	d122      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b08      	cmp	r3, #8
 800598a:	d11b      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0208 	mvn.w	r2, #8
 8005994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2204      	movs	r2, #4
 800599a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fa23 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 80059b0:	e005      	b.n	80059be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa15 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa26 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d122      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0310 	and.w	r3, r3, #16
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d11b      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0210 	mvn.w	r2, #16
 80059e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2208      	movs	r2, #8
 80059ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9f9 	bl	8005df6 <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9eb 	bl	8005de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f9fc 	bl	8005e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10e      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d107      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0201 	mvn.w	r2, #1
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc ffa2 	bl	8002988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d10e      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	d107      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fdca 	bl	8006604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d10e      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b40      	cmp	r3, #64	; 0x40
 8005a8a:	d107      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f9c1 	bl	8005e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0320 	and.w	r3, r3, #32
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0220 	mvn.w	r2, #32
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fd94 	bl	80065f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0ae      	b.n	8005c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	f200 809f 	bhi.w	8005c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b39 	.word	0x08005b39
 8005b08:	08005c3d 	.word	0x08005c3d
 8005b0c:	08005c3d 	.word	0x08005c3d
 8005b10:	08005c3d 	.word	0x08005c3d
 8005b14:	08005b79 	.word	0x08005b79
 8005b18:	08005c3d 	.word	0x08005c3d
 8005b1c:	08005c3d 	.word	0x08005c3d
 8005b20:	08005c3d 	.word	0x08005c3d
 8005b24:	08005bbb 	.word	0x08005bbb
 8005b28:	08005c3d 	.word	0x08005c3d
 8005b2c:	08005c3d 	.word	0x08005c3d
 8005b30:	08005c3d 	.word	0x08005c3d
 8005b34:	08005bfb 	.word	0x08005bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fa18 	bl	8005f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
      break;
 8005b76:	e064      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fa68 	bl	8006054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	619a      	str	r2, [r3, #24]
      break;
 8005bb8:	e043      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fabd 	bl	8006140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0208 	orr.w	r2, r2, #8
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0204 	bic.w	r2, r2, #4
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	61da      	str	r2, [r3, #28]
      break;
 8005bf8:	e023      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fb11 	bl	8006228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	021a      	lsls	r2, r3, #8
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	61da      	str	r2, [r3, #28]
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIM_ConfigClockSource+0x1c>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e0b4      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x186>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca8:	d03e      	beq.n	8005d28 <HAL_TIM_ConfigClockSource+0xd4>
 8005caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cae:	f200 8087 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	f000 8086 	beq.w	8005dc6 <HAL_TIM_ConfigClockSource+0x172>
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbe:	d87f      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b70      	cmp	r3, #112	; 0x70
 8005cc2:	d01a      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0xa6>
 8005cc4:	2b70      	cmp	r3, #112	; 0x70
 8005cc6:	d87b      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b60      	cmp	r3, #96	; 0x60
 8005cca:	d050      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x11a>
 8005ccc:	2b60      	cmp	r3, #96	; 0x60
 8005cce:	d877      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b50      	cmp	r3, #80	; 0x50
 8005cd2:	d03c      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0xfa>
 8005cd4:	2b50      	cmp	r3, #80	; 0x50
 8005cd6:	d873      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b40      	cmp	r3, #64	; 0x40
 8005cda:	d058      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x13a>
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d86f      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b30      	cmp	r3, #48	; 0x30
 8005ce2:	d064      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b30      	cmp	r3, #48	; 0x30
 8005ce6:	d86b      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d060      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d867      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d05c      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x15a>
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d05a      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x15a>
 8005cf8:	e062      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f000 fb5d 	bl	80063c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	609a      	str	r2, [r3, #8]
      break;
 8005d26:	e04f      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6899      	ldr	r1, [r3, #8]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f000 fb46 	bl	80063c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d4a:	609a      	str	r2, [r3, #8]
      break;
 8005d4c:	e03c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 faba 	bl	80062d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2150      	movs	r1, #80	; 0x50
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fb13 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e02c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 fad9 	bl	8006332 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2160      	movs	r1, #96	; 0x60
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fb03 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e01c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fa9a 	bl	80062d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2140      	movs	r1, #64	; 0x40
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 faf3 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005dac:	e00c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 faea 	bl	8006392 <TIM_ITRx_SetConfig>
      break;
 8005dbe:	e003      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e000      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a40      	ldr	r2, [pc, #256]	; (8005f48 <TIM_Base_SetConfig+0x114>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e52:	d00f      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a3d      	ldr	r2, [pc, #244]	; (8005f4c <TIM_Base_SetConfig+0x118>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00b      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a3c      	ldr	r2, [pc, #240]	; (8005f50 <TIM_Base_SetConfig+0x11c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d007      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a3b      	ldr	r2, [pc, #236]	; (8005f54 <TIM_Base_SetConfig+0x120>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d003      	beq.n	8005e74 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a3a      	ldr	r2, [pc, #232]	; (8005f58 <TIM_Base_SetConfig+0x124>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2f      	ldr	r2, [pc, #188]	; (8005f48 <TIM_Base_SetConfig+0x114>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d02b      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d027      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <TIM_Base_SetConfig+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d023      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <TIM_Base_SetConfig+0x11c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01f      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2a      	ldr	r2, [pc, #168]	; (8005f54 <TIM_Base_SetConfig+0x120>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01b      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a29      	ldr	r2, [pc, #164]	; (8005f58 <TIM_Base_SetConfig+0x124>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d017      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a28      	ldr	r2, [pc, #160]	; (8005f5c <TIM_Base_SetConfig+0x128>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a27      	ldr	r2, [pc, #156]	; (8005f60 <TIM_Base_SetConfig+0x12c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a26      	ldr	r2, [pc, #152]	; (8005f64 <TIM_Base_SetConfig+0x130>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <TIM_Base_SetConfig+0x134>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <TIM_Base_SetConfig+0x138>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a23      	ldr	r2, [pc, #140]	; (8005f70 <TIM_Base_SetConfig+0x13c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d108      	bne.n	8005ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <TIM_Base_SetConfig+0x114>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <TIM_Base_SetConfig+0xf8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <TIM_Base_SetConfig+0x124>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d103      	bne.n	8005f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	615a      	str	r2, [r3, #20]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40010000 	.word	0x40010000
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40010400 	.word	0x40010400
 8005f5c:	40014000 	.word	0x40014000
 8005f60:	40014400 	.word	0x40014400
 8005f64:	40014800 	.word	0x40014800
 8005f68:	40001800 	.word	0x40001800
 8005f6c:	40001c00 	.word	0x40001c00
 8005f70:	40002000 	.word	0x40002000

08005f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0302 	bic.w	r3, r3, #2
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a20      	ldr	r2, [pc, #128]	; (800604c <TIM_OC1_SetConfig+0xd8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d003      	beq.n	8005fd8 <TIM_OC1_SetConfig+0x64>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <TIM_OC1_SetConfig+0xdc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d10c      	bne.n	8005ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f023 0308 	bic.w	r3, r3, #8
 8005fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 0304 	bic.w	r3, r3, #4
 8005ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <TIM_OC1_SetConfig+0xd8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC1_SetConfig+0x8e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <TIM_OC1_SetConfig+0xdc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d111      	bne.n	8006026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	621a      	str	r2, [r3, #32]
}
 8006040:	bf00      	nop
 8006042:	371c      	adds	r7, #28
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40010000 	.word	0x40010000
 8006050:	40010400 	.word	0x40010400

08006054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0210 	bic.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a22      	ldr	r2, [pc, #136]	; (8006138 <TIM_OC2_SetConfig+0xe4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_OC2_SetConfig+0x68>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a21      	ldr	r2, [pc, #132]	; (800613c <TIM_OC2_SetConfig+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d10d      	bne.n	80060d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a17      	ldr	r2, [pc, #92]	; (8006138 <TIM_OC2_SetConfig+0xe4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_OC2_SetConfig+0x94>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a16      	ldr	r2, [pc, #88]	; (800613c <TIM_OC2_SetConfig+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d113      	bne.n	8006110 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	621a      	str	r2, [r3, #32]
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0303 	bic.w	r3, r3, #3
 8006176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a21      	ldr	r2, [pc, #132]	; (8006220 <TIM_OC3_SetConfig+0xe0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC3_SetConfig+0x66>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a20      	ldr	r2, [pc, #128]	; (8006224 <TIM_OC3_SetConfig+0xe4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10d      	bne.n	80061c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a16      	ldr	r2, [pc, #88]	; (8006220 <TIM_OC3_SetConfig+0xe0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_OC3_SetConfig+0x92>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a15      	ldr	r2, [pc, #84]	; (8006224 <TIM_OC3_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d113      	bne.n	80061fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	621a      	str	r2, [r3, #32]
}
 8006214:	bf00      	nop
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40010000 	.word	0x40010000
 8006224:	40010400 	.word	0x40010400

08006228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	031b      	lsls	r3, r3, #12
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a12      	ldr	r2, [pc, #72]	; (80062cc <TIM_OC4_SetConfig+0xa4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_OC4_SetConfig+0x68>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <TIM_OC4_SetConfig+0xa8>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d109      	bne.n	80062a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	019b      	lsls	r3, r3, #6
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400

080062d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f023 030a 	bic.w	r3, r3, #10
 8006310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f023 0210 	bic.w	r2, r3, #16
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800635c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	031b      	lsls	r3, r3, #12
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800636e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	621a      	str	r2, [r3, #32]
}
 8006386:	bf00      	nop
 8006388:	371c      	adds	r7, #28
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f043 0307 	orr.w	r3, r3, #7
 80063b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	021a      	lsls	r2, r3, #8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2201      	movs	r2, #1
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1a      	ldr	r2, [r3, #32]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	43db      	mvns	r3, r3
 800642a:	401a      	ands	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6a1a      	ldr	r2, [r3, #32]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	431a      	orrs	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	621a      	str	r2, [r3, #32]
}
 8006446:	bf00      	nop
 8006448:	371c      	adds	r7, #28
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
	...

08006454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006468:	2302      	movs	r3, #2
 800646a:	e05a      	b.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a21      	ldr	r2, [pc, #132]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d01d      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a18      	ldr	r2, [pc, #96]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a17      	ldr	r2, [pc, #92]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10c      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4313      	orrs	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40014000 	.word	0x40014000
 8006548:	40001800 	.word	0x40001800

0800654c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006564:	2302      	movs	r3, #2
 8006566:	e03d      	b.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e03f      	b.n	80066aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fc fbf6 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800665a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f929 	bl	80068b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695a      	ldr	r2, [r3, #20]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b08a      	sub	sp, #40	; 0x28
 80066b6:	af02      	add	r7, sp, #8
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d17c      	bne.n	80067cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_UART_Transmit+0x2c>
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e075      	b.n	80067ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_UART_Transmit+0x3e>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e06e      	b.n	80067ce <HAL_UART_Transmit+0x11c>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2221      	movs	r2, #33	; 0x21
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006706:	f7fc fcfd 	bl	8003104 <HAL_GetTick>
 800670a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006720:	d108      	bne.n	8006734 <HAL_UART_Transmit+0x82>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e003      	b.n	800673c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006744:	e02a      	b.n	800679c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2180      	movs	r1, #128	; 0x80
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f840 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e036      	b.n	80067ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006774:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	3302      	adds	r3, #2
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	e007      	b.n	800678e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006792:	b29b      	uxth	r3, r3
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1cf      	bne.n	8006746 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2140      	movs	r1, #64	; 0x40
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f810 	bl	80067d6 <UART_WaitOnFlagUntilTimeout>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e006      	b.n	80067ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e000      	b.n	80067ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067cc:	2302      	movs	r3, #2
  }
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3720      	adds	r7, #32
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b090      	sub	sp, #64	; 0x40
 80067da:	af00      	add	r7, sp, #0
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e6:	e050      	b.n	800688a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ee:	d04c      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f6:	f7fc fc85 	bl	8003104 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006802:	429a      	cmp	r2, r3
 8006804:	d241      	bcs.n	800688a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006826:	637a      	str	r2, [r7, #52]	; 0x34
 8006828:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682e:	e841 2300 	strex	r3, r2, [r1]
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d1e5      	bne.n	8006806 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	e853 3f00 	ldrex	r3, [r3]
 8006848:	613b      	str	r3, [r7, #16]
   return(result);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f023 0301 	bic.w	r3, r3, #1
 8006850:	63bb      	str	r3, [r7, #56]	; 0x38
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3314      	adds	r3, #20
 8006858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800685a:	623a      	str	r2, [r7, #32]
 800685c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	69f9      	ldr	r1, [r7, #28]
 8006860:	6a3a      	ldr	r2, [r7, #32]
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	61bb      	str	r3, [r7, #24]
   return(result);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e5      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e00f      	b.n	80068aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4013      	ands	r3, r2
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	bf0c      	ite	eq
 800689a:	2301      	moveq	r3, #1
 800689c:	2300      	movne	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d09f      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3740      	adds	r7, #64	; 0x40
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b8:	b0c0      	sub	sp, #256	; 0x100
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	ea40 0301 	orr.w	r3, r0, r1
 80068dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800690c:	f021 010c 	bic.w	r1, r1, #12
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800691a:	430b      	orrs	r3, r1
 800691c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	6999      	ldr	r1, [r3, #24]
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	ea40 0301 	orr.w	r3, r0, r1
 800693a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b8f      	ldr	r3, [pc, #572]	; (8006b80 <UART_SetConfig+0x2cc>)
 8006944:	429a      	cmp	r2, r3
 8006946:	d005      	beq.n	8006954 <UART_SetConfig+0xa0>
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b8d      	ldr	r3, [pc, #564]	; (8006b84 <UART_SetConfig+0x2d0>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d104      	bne.n	800695e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006954:	f7fe fb00 	bl	8004f58 <HAL_RCC_GetPCLK2Freq>
 8006958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800695c:	e003      	b.n	8006966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800695e:	f7fe fae7 	bl	8004f30 <HAL_RCC_GetPCLK1Freq>
 8006962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006970:	f040 810c 	bne.w	8006b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006978:	2200      	movs	r2, #0
 800697a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800697e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006986:	4622      	mov	r2, r4
 8006988:	462b      	mov	r3, r5
 800698a:	1891      	adds	r1, r2, r2
 800698c:	65b9      	str	r1, [r7, #88]	; 0x58
 800698e:	415b      	adcs	r3, r3
 8006990:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006996:	4621      	mov	r1, r4
 8006998:	eb12 0801 	adds.w	r8, r2, r1
 800699c:	4629      	mov	r1, r5
 800699e:	eb43 0901 	adc.w	r9, r3, r1
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069b6:	4690      	mov	r8, r2
 80069b8:	4699      	mov	r9, r3
 80069ba:	4623      	mov	r3, r4
 80069bc:	eb18 0303 	adds.w	r3, r8, r3
 80069c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069c4:	462b      	mov	r3, r5
 80069c6:	eb49 0303 	adc.w	r3, r9, r3
 80069ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069e2:	460b      	mov	r3, r1
 80069e4:	18db      	adds	r3, r3, r3
 80069e6:	653b      	str	r3, [r7, #80]	; 0x50
 80069e8:	4613      	mov	r3, r2
 80069ea:	eb42 0303 	adc.w	r3, r2, r3
 80069ee:	657b      	str	r3, [r7, #84]	; 0x54
 80069f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069f8:	f7fa f838 	bl	8000a6c <__aeabi_uldivmod>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4b61      	ldr	r3, [pc, #388]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006a02:	fba3 2302 	umull	r2, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	011c      	lsls	r4, r3, #4
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	1891      	adds	r1, r2, r2
 8006a22:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a24:	415b      	adcs	r3, r3
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a32:	4649      	mov	r1, r9
 8006a34:	eb43 0b01 	adc.w	fp, r3, r1
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a4c:	4692      	mov	sl, r2
 8006a4e:	469b      	mov	fp, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	eb1a 0303 	adds.w	r3, sl, r3
 8006a56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	18db      	adds	r3, r3, r3
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7e:	4613      	mov	r3, r2
 8006a80:	eb42 0303 	adc.w	r3, r2, r3
 8006a84:	647b      	str	r3, [r7, #68]	; 0x44
 8006a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a8e:	f7f9 ffed 	bl	8000a6c <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	4b3b      	ldr	r3, [pc, #236]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	2264      	movs	r2, #100	; 0x64
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	1acb      	subs	r3, r1, r3
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aae:	4b36      	ldr	r3, [pc, #216]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006abc:	441c      	add	r4, r3
 8006abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	1851      	adds	r1, r2, r1
 8006ae4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	414b      	adcs	r3, r1
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006af8:	4659      	mov	r1, fp
 8006afa:	00cb      	lsls	r3, r1, #3
 8006afc:	4651      	mov	r1, sl
 8006afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b02:	4651      	mov	r1, sl
 8006b04:	00ca      	lsls	r2, r1, #3
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b14:	464b      	mov	r3, r9
 8006b16:	460a      	mov	r2, r1
 8006b18:	eb42 0303 	adc.w	r3, r2, r3
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b34:	460b      	mov	r3, r1
 8006b36:	18db      	adds	r3, r3, r3
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b4a:	f7f9 ff8f 	bl	8000a6c <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	; 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	3332      	adds	r3, #50	; 0x32
 8006b66:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <UART_SetConfig+0x2d4>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 0207 	and.w	r2, r3, #7
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4422      	add	r2, r4
 8006b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b7c:	e105      	b.n	8006d8a <UART_SetConfig+0x4d6>
 8006b7e:	bf00      	nop
 8006b80:	40011000 	.word	0x40011000
 8006b84:	40011400 	.word	0x40011400
 8006b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	1891      	adds	r1, r2, r2
 8006ba4:	6239      	str	r1, [r7, #32]
 8006ba6:	415b      	adcs	r3, r3
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bae:	4641      	mov	r1, r8
 8006bb0:	1854      	adds	r4, r2, r1
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	eb43 0501 	adc.w	r5, r3, r1
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	00eb      	lsls	r3, r5, #3
 8006bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc6:	00e2      	lsls	r2, r4, #3
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	4643      	mov	r3, r8
 8006bce:	18e3      	adds	r3, r4, r3
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	eb45 0303 	adc.w	r3, r5, r3
 8006bda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	4621      	mov	r1, r4
 8006c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c04:	4621      	mov	r1, r4
 8006c06:	008a      	lsls	r2, r1, #2
 8006c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c0c:	f7f9 ff2e 	bl	8000a6c <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4b60      	ldr	r3, [pc, #384]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006c16:	fba3 2302 	umull	r2, r3, r3, r2
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	011c      	lsls	r4, r3, #4
 8006c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	1891      	adds	r1, r2, r2
 8006c36:	61b9      	str	r1, [r7, #24]
 8006c38:	415b      	adcs	r3, r3
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c40:	4641      	mov	r1, r8
 8006c42:	1851      	adds	r1, r2, r1
 8006c44:	6139      	str	r1, [r7, #16]
 8006c46:	4649      	mov	r1, r9
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c58:	4659      	mov	r1, fp
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4651      	mov	r1, sl
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c74:	464b      	mov	r3, r9
 8006c76:	460a      	mov	r2, r1
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c98:	4649      	mov	r1, r9
 8006c9a:	008b      	lsls	r3, r1, #2
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	008a      	lsls	r2, r1, #2
 8006ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006caa:	f7f9 fedf 	bl	8000a6c <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb8:	095b      	lsrs	r3, r3, #5
 8006cba:	2164      	movs	r1, #100	; 0x64
 8006cbc:	fb01 f303 	mul.w	r3, r1, r3
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	3332      	adds	r3, #50	; 0x32
 8006cc6:	4a34      	ldr	r2, [pc, #208]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	095b      	lsrs	r3, r3, #5
 8006cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cd2:	441c      	add	r4, r3
 8006cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd8:	2200      	movs	r2, #0
 8006cda:	673b      	str	r3, [r7, #112]	; 0x70
 8006cdc:	677a      	str	r2, [r7, #116]	; 0x74
 8006cde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ce2:	4642      	mov	r2, r8
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	1891      	adds	r1, r2, r2
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	415b      	adcs	r3, r3
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	1851      	adds	r1, r2, r1
 8006cf6:	6039      	str	r1, [r7, #0]
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	414b      	adcs	r3, r1
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d0a:	4659      	mov	r1, fp
 8006d0c:	00cb      	lsls	r3, r1, #3
 8006d0e:	4651      	mov	r1, sl
 8006d10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d14:	4651      	mov	r1, sl
 8006d16:	00ca      	lsls	r2, r1, #3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	4642      	mov	r2, r8
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d24:	464b      	mov	r3, r9
 8006d26:	460a      	mov	r2, r1
 8006d28:	eb42 0303 	adc.w	r3, r2, r3
 8006d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	663b      	str	r3, [r7, #96]	; 0x60
 8006d38:	667a      	str	r2, [r7, #100]	; 0x64
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d46:	4649      	mov	r1, r9
 8006d48:	008b      	lsls	r3, r1, #2
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d50:	4641      	mov	r1, r8
 8006d52:	008a      	lsls	r2, r1, #2
 8006d54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d58:	f7f9 fe88 	bl	8000a6c <__aeabi_uldivmod>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006d62:	fba3 1302 	umull	r1, r3, r3, r2
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2164      	movs	r1, #100	; 0x64
 8006d6a:	fb01 f303 	mul.w	r3, r1, r3
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	011b      	lsls	r3, r3, #4
 8006d72:	3332      	adds	r3, #50	; 0x32
 8006d74:	4a08      	ldr	r2, [pc, #32]	; (8006d98 <UART_SetConfig+0x4e4>)
 8006d76:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7a:	095b      	lsrs	r3, r3, #5
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4422      	add	r2, r4
 8006d88:	609a      	str	r2, [r3, #8]
}
 8006d8a:	bf00      	nop
 8006d8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d90:	46bd      	mov	sp, r7
 8006d92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d96:	bf00      	nop
 8006d98:	51eb851f 	.word	0x51eb851f

08006d9c <__errno>:
 8006d9c:	4b01      	ldr	r3, [pc, #4]	; (8006da4 <__errno+0x8>)
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20000018 	.word	0x20000018

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	4d0d      	ldr	r5, [pc, #52]	; (8006de0 <__libc_init_array+0x38>)
 8006dac:	4c0d      	ldr	r4, [pc, #52]	; (8006de4 <__libc_init_array+0x3c>)
 8006dae:	1b64      	subs	r4, r4, r5
 8006db0:	10a4      	asrs	r4, r4, #2
 8006db2:	2600      	movs	r6, #0
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	4d0b      	ldr	r5, [pc, #44]	; (8006de8 <__libc_init_array+0x40>)
 8006dba:	4c0c      	ldr	r4, [pc, #48]	; (8006dec <__libc_init_array+0x44>)
 8006dbc:	f000 fc8e 	bl	80076dc <_init>
 8006dc0:	1b64      	subs	r4, r4, r5
 8006dc2:	10a4      	asrs	r4, r4, #2
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	0800a9dc 	.word	0x0800a9dc
 8006de4:	0800a9dc 	.word	0x0800a9dc
 8006de8:	0800a9dc 	.word	0x0800a9dc
 8006dec:	0800a9e0 	.word	0x0800a9e0

08006df0 <memset>:
 8006df0:	4402      	add	r2, r0
 8006df2:	4603      	mov	r3, r0
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d100      	bne.n	8006dfa <memset+0xa>
 8006df8:	4770      	bx	lr
 8006dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dfe:	e7f9      	b.n	8006df4 <memset+0x4>

08006e00 <siprintf>:
 8006e00:	b40e      	push	{r1, r2, r3}
 8006e02:	b500      	push	{lr}
 8006e04:	b09c      	sub	sp, #112	; 0x70
 8006e06:	ab1d      	add	r3, sp, #116	; 0x74
 8006e08:	9002      	str	r0, [sp, #8]
 8006e0a:	9006      	str	r0, [sp, #24]
 8006e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <siprintf+0x38>)
 8006e12:	9107      	str	r1, [sp, #28]
 8006e14:	9104      	str	r1, [sp, #16]
 8006e16:	4909      	ldr	r1, [pc, #36]	; (8006e3c <siprintf+0x3c>)
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	9105      	str	r1, [sp, #20]
 8006e1e:	6800      	ldr	r0, [r0, #0]
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	a902      	add	r1, sp, #8
 8006e24:	f000 f868 	bl	8006ef8 <_svfiprintf_r>
 8006e28:	9b02      	ldr	r3, [sp, #8]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	b01c      	add	sp, #112	; 0x70
 8006e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	20000018 	.word	0x20000018
 8006e3c:	ffff0208 	.word	0xffff0208

08006e40 <__ssputs_r>:
 8006e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	688e      	ldr	r6, [r1, #8]
 8006e46:	429e      	cmp	r6, r3
 8006e48:	4682      	mov	sl, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	4690      	mov	r8, r2
 8006e4e:	461f      	mov	r7, r3
 8006e50:	d838      	bhi.n	8006ec4 <__ssputs_r+0x84>
 8006e52:	898a      	ldrh	r2, [r1, #12]
 8006e54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e58:	d032      	beq.n	8006ec0 <__ssputs_r+0x80>
 8006e5a:	6825      	ldr	r5, [r4, #0]
 8006e5c:	6909      	ldr	r1, [r1, #16]
 8006e5e:	eba5 0901 	sub.w	r9, r5, r1
 8006e62:	6965      	ldr	r5, [r4, #20]
 8006e64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	444b      	add	r3, r9
 8006e70:	106d      	asrs	r5, r5, #1
 8006e72:	429d      	cmp	r5, r3
 8006e74:	bf38      	it	cc
 8006e76:	461d      	movcc	r5, r3
 8006e78:	0553      	lsls	r3, r2, #21
 8006e7a:	d531      	bpl.n	8006ee0 <__ssputs_r+0xa0>
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	f000 fb63 	bl	8007548 <_malloc_r>
 8006e82:	4606      	mov	r6, r0
 8006e84:	b950      	cbnz	r0, 8006e9c <__ssputs_r+0x5c>
 8006e86:	230c      	movs	r3, #12
 8006e88:	f8ca 3000 	str.w	r3, [sl]
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9c:	6921      	ldr	r1, [r4, #16]
 8006e9e:	464a      	mov	r2, r9
 8006ea0:	f000 fabe 	bl	8007420 <memcpy>
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	81a3      	strh	r3, [r4, #12]
 8006eb0:	6126      	str	r6, [r4, #16]
 8006eb2:	6165      	str	r5, [r4, #20]
 8006eb4:	444e      	add	r6, r9
 8006eb6:	eba5 0509 	sub.w	r5, r5, r9
 8006eba:	6026      	str	r6, [r4, #0]
 8006ebc:	60a5      	str	r5, [r4, #8]
 8006ebe:	463e      	mov	r6, r7
 8006ec0:	42be      	cmp	r6, r7
 8006ec2:	d900      	bls.n	8006ec6 <__ssputs_r+0x86>
 8006ec4:	463e      	mov	r6, r7
 8006ec6:	6820      	ldr	r0, [r4, #0]
 8006ec8:	4632      	mov	r2, r6
 8006eca:	4641      	mov	r1, r8
 8006ecc:	f000 fab6 	bl	800743c <memmove>
 8006ed0:	68a3      	ldr	r3, [r4, #8]
 8006ed2:	1b9b      	subs	r3, r3, r6
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	4433      	add	r3, r6
 8006eda:	6023      	str	r3, [r4, #0]
 8006edc:	2000      	movs	r0, #0
 8006ede:	e7db      	b.n	8006e98 <__ssputs_r+0x58>
 8006ee0:	462a      	mov	r2, r5
 8006ee2:	f000 fba5 	bl	8007630 <_realloc_r>
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1e1      	bne.n	8006eb0 <__ssputs_r+0x70>
 8006eec:	6921      	ldr	r1, [r4, #16]
 8006eee:	4650      	mov	r0, sl
 8006ef0:	f000 fabe 	bl	8007470 <_free_r>
 8006ef4:	e7c7      	b.n	8006e86 <__ssputs_r+0x46>
	...

08006ef8 <_svfiprintf_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	4698      	mov	r8, r3
 8006efe:	898b      	ldrh	r3, [r1, #12]
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	b09d      	sub	sp, #116	; 0x74
 8006f04:	4607      	mov	r7, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	4614      	mov	r4, r2
 8006f0a:	d50e      	bpl.n	8006f2a <_svfiprintf_r+0x32>
 8006f0c:	690b      	ldr	r3, [r1, #16]
 8006f0e:	b963      	cbnz	r3, 8006f2a <_svfiprintf_r+0x32>
 8006f10:	2140      	movs	r1, #64	; 0x40
 8006f12:	f000 fb19 	bl	8007548 <_malloc_r>
 8006f16:	6028      	str	r0, [r5, #0]
 8006f18:	6128      	str	r0, [r5, #16]
 8006f1a:	b920      	cbnz	r0, 8006f26 <_svfiprintf_r+0x2e>
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	e0d1      	b.n	80070ca <_svfiprintf_r+0x1d2>
 8006f26:	2340      	movs	r3, #64	; 0x40
 8006f28:	616b      	str	r3, [r5, #20]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2e:	2320      	movs	r3, #32
 8006f30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f38:	2330      	movs	r3, #48	; 0x30
 8006f3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80070e4 <_svfiprintf_r+0x1ec>
 8006f3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f42:	f04f 0901 	mov.w	r9, #1
 8006f46:	4623      	mov	r3, r4
 8006f48:	469a      	mov	sl, r3
 8006f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f4e:	b10a      	cbz	r2, 8006f54 <_svfiprintf_r+0x5c>
 8006f50:	2a25      	cmp	r2, #37	; 0x25
 8006f52:	d1f9      	bne.n	8006f48 <_svfiprintf_r+0x50>
 8006f54:	ebba 0b04 	subs.w	fp, sl, r4
 8006f58:	d00b      	beq.n	8006f72 <_svfiprintf_r+0x7a>
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4638      	mov	r0, r7
 8006f62:	f7ff ff6d 	bl	8006e40 <__ssputs_r>
 8006f66:	3001      	adds	r0, #1
 8006f68:	f000 80aa 	beq.w	80070c0 <_svfiprintf_r+0x1c8>
 8006f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f6e:	445a      	add	r2, fp
 8006f70:	9209      	str	r2, [sp, #36]	; 0x24
 8006f72:	f89a 3000 	ldrb.w	r3, [sl]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80a2 	beq.w	80070c0 <_svfiprintf_r+0x1c8>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f86:	f10a 0a01 	add.w	sl, sl, #1
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	9307      	str	r3, [sp, #28]
 8006f8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f92:	931a      	str	r3, [sp, #104]	; 0x68
 8006f94:	4654      	mov	r4, sl
 8006f96:	2205      	movs	r2, #5
 8006f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9c:	4851      	ldr	r0, [pc, #324]	; (80070e4 <_svfiprintf_r+0x1ec>)
 8006f9e:	f7f9 f91f 	bl	80001e0 <memchr>
 8006fa2:	9a04      	ldr	r2, [sp, #16]
 8006fa4:	b9d8      	cbnz	r0, 8006fde <_svfiprintf_r+0xe6>
 8006fa6:	06d0      	lsls	r0, r2, #27
 8006fa8:	bf44      	itt	mi
 8006faa:	2320      	movmi	r3, #32
 8006fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb0:	0711      	lsls	r1, r2, #28
 8006fb2:	bf44      	itt	mi
 8006fb4:	232b      	movmi	r3, #43	; 0x2b
 8006fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fba:	f89a 3000 	ldrb.w	r3, [sl]
 8006fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc0:	d015      	beq.n	8006fee <_svfiprintf_r+0xf6>
 8006fc2:	9a07      	ldr	r2, [sp, #28]
 8006fc4:	4654      	mov	r4, sl
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f04f 0c0a 	mov.w	ip, #10
 8006fcc:	4621      	mov	r1, r4
 8006fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd2:	3b30      	subs	r3, #48	; 0x30
 8006fd4:	2b09      	cmp	r3, #9
 8006fd6:	d94e      	bls.n	8007076 <_svfiprintf_r+0x17e>
 8006fd8:	b1b0      	cbz	r0, 8007008 <_svfiprintf_r+0x110>
 8006fda:	9207      	str	r2, [sp, #28]
 8006fdc:	e014      	b.n	8007008 <_svfiprintf_r+0x110>
 8006fde:	eba0 0308 	sub.w	r3, r0, r8
 8006fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	46a2      	mov	sl, r4
 8006fec:	e7d2      	b.n	8006f94 <_svfiprintf_r+0x9c>
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	1d19      	adds	r1, r3, #4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	9103      	str	r1, [sp, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfbb      	ittet	lt
 8006ffa:	425b      	neglt	r3, r3
 8006ffc:	f042 0202 	orrlt.w	r2, r2, #2
 8007000:	9307      	strge	r3, [sp, #28]
 8007002:	9307      	strlt	r3, [sp, #28]
 8007004:	bfb8      	it	lt
 8007006:	9204      	strlt	r2, [sp, #16]
 8007008:	7823      	ldrb	r3, [r4, #0]
 800700a:	2b2e      	cmp	r3, #46	; 0x2e
 800700c:	d10c      	bne.n	8007028 <_svfiprintf_r+0x130>
 800700e:	7863      	ldrb	r3, [r4, #1]
 8007010:	2b2a      	cmp	r3, #42	; 0x2a
 8007012:	d135      	bne.n	8007080 <_svfiprintf_r+0x188>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	1d1a      	adds	r2, r3, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	9203      	str	r2, [sp, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	bfb8      	it	lt
 8007020:	f04f 33ff 	movlt.w	r3, #4294967295
 8007024:	3402      	adds	r4, #2
 8007026:	9305      	str	r3, [sp, #20]
 8007028:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80070f4 <_svfiprintf_r+0x1fc>
 800702c:	7821      	ldrb	r1, [r4, #0]
 800702e:	2203      	movs	r2, #3
 8007030:	4650      	mov	r0, sl
 8007032:	f7f9 f8d5 	bl	80001e0 <memchr>
 8007036:	b140      	cbz	r0, 800704a <_svfiprintf_r+0x152>
 8007038:	2340      	movs	r3, #64	; 0x40
 800703a:	eba0 000a 	sub.w	r0, r0, sl
 800703e:	fa03 f000 	lsl.w	r0, r3, r0
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	4303      	orrs	r3, r0
 8007046:	3401      	adds	r4, #1
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704e:	4826      	ldr	r0, [pc, #152]	; (80070e8 <_svfiprintf_r+0x1f0>)
 8007050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007054:	2206      	movs	r2, #6
 8007056:	f7f9 f8c3 	bl	80001e0 <memchr>
 800705a:	2800      	cmp	r0, #0
 800705c:	d038      	beq.n	80070d0 <_svfiprintf_r+0x1d8>
 800705e:	4b23      	ldr	r3, [pc, #140]	; (80070ec <_svfiprintf_r+0x1f4>)
 8007060:	bb1b      	cbnz	r3, 80070aa <_svfiprintf_r+0x1b2>
 8007062:	9b03      	ldr	r3, [sp, #12]
 8007064:	3307      	adds	r3, #7
 8007066:	f023 0307 	bic.w	r3, r3, #7
 800706a:	3308      	adds	r3, #8
 800706c:	9303      	str	r3, [sp, #12]
 800706e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007070:	4433      	add	r3, r6
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	e767      	b.n	8006f46 <_svfiprintf_r+0x4e>
 8007076:	fb0c 3202 	mla	r2, ip, r2, r3
 800707a:	460c      	mov	r4, r1
 800707c:	2001      	movs	r0, #1
 800707e:	e7a5      	b.n	8006fcc <_svfiprintf_r+0xd4>
 8007080:	2300      	movs	r3, #0
 8007082:	3401      	adds	r4, #1
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	4619      	mov	r1, r3
 8007088:	f04f 0c0a 	mov.w	ip, #10
 800708c:	4620      	mov	r0, r4
 800708e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007092:	3a30      	subs	r2, #48	; 0x30
 8007094:	2a09      	cmp	r2, #9
 8007096:	d903      	bls.n	80070a0 <_svfiprintf_r+0x1a8>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0c5      	beq.n	8007028 <_svfiprintf_r+0x130>
 800709c:	9105      	str	r1, [sp, #20]
 800709e:	e7c3      	b.n	8007028 <_svfiprintf_r+0x130>
 80070a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80070a4:	4604      	mov	r4, r0
 80070a6:	2301      	movs	r3, #1
 80070a8:	e7f0      	b.n	800708c <_svfiprintf_r+0x194>
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	462a      	mov	r2, r5
 80070b0:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <_svfiprintf_r+0x1f8>)
 80070b2:	a904      	add	r1, sp, #16
 80070b4:	4638      	mov	r0, r7
 80070b6:	f3af 8000 	nop.w
 80070ba:	1c42      	adds	r2, r0, #1
 80070bc:	4606      	mov	r6, r0
 80070be:	d1d6      	bne.n	800706e <_svfiprintf_r+0x176>
 80070c0:	89ab      	ldrh	r3, [r5, #12]
 80070c2:	065b      	lsls	r3, r3, #25
 80070c4:	f53f af2c 	bmi.w	8006f20 <_svfiprintf_r+0x28>
 80070c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ca:	b01d      	add	sp, #116	; 0x74
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d0:	ab03      	add	r3, sp, #12
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	462a      	mov	r2, r5
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <_svfiprintf_r+0x1f8>)
 80070d8:	a904      	add	r1, sp, #16
 80070da:	4638      	mov	r0, r7
 80070dc:	f000 f87a 	bl	80071d4 <_printf_i>
 80070e0:	e7eb      	b.n	80070ba <_svfiprintf_r+0x1c2>
 80070e2:	bf00      	nop
 80070e4:	0800a9a0 	.word	0x0800a9a0
 80070e8:	0800a9aa 	.word	0x0800a9aa
 80070ec:	00000000 	.word	0x00000000
 80070f0:	08006e41 	.word	0x08006e41
 80070f4:	0800a9a6 	.word	0x0800a9a6

080070f8 <_printf_common>:
 80070f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	4616      	mov	r6, r2
 80070fe:	4699      	mov	r9, r3
 8007100:	688a      	ldr	r2, [r1, #8]
 8007102:	690b      	ldr	r3, [r1, #16]
 8007104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007108:	4293      	cmp	r3, r2
 800710a:	bfb8      	it	lt
 800710c:	4613      	movlt	r3, r2
 800710e:	6033      	str	r3, [r6, #0]
 8007110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007114:	4607      	mov	r7, r0
 8007116:	460c      	mov	r4, r1
 8007118:	b10a      	cbz	r2, 800711e <_printf_common+0x26>
 800711a:	3301      	adds	r3, #1
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	0699      	lsls	r1, r3, #26
 8007122:	bf42      	ittt	mi
 8007124:	6833      	ldrmi	r3, [r6, #0]
 8007126:	3302      	addmi	r3, #2
 8007128:	6033      	strmi	r3, [r6, #0]
 800712a:	6825      	ldr	r5, [r4, #0]
 800712c:	f015 0506 	ands.w	r5, r5, #6
 8007130:	d106      	bne.n	8007140 <_printf_common+0x48>
 8007132:	f104 0a19 	add.w	sl, r4, #25
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	6832      	ldr	r2, [r6, #0]
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	42ab      	cmp	r3, r5
 800713e:	dc26      	bgt.n	800718e <_printf_common+0x96>
 8007140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007144:	1e13      	subs	r3, r2, #0
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	bf18      	it	ne
 800714a:	2301      	movne	r3, #1
 800714c:	0692      	lsls	r2, r2, #26
 800714e:	d42b      	bmi.n	80071a8 <_printf_common+0xb0>
 8007150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007154:	4649      	mov	r1, r9
 8007156:	4638      	mov	r0, r7
 8007158:	47c0      	blx	r8
 800715a:	3001      	adds	r0, #1
 800715c:	d01e      	beq.n	800719c <_printf_common+0xa4>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	68e5      	ldr	r5, [r4, #12]
 8007162:	6832      	ldr	r2, [r6, #0]
 8007164:	f003 0306 	and.w	r3, r3, #6
 8007168:	2b04      	cmp	r3, #4
 800716a:	bf08      	it	eq
 800716c:	1aad      	subeq	r5, r5, r2
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	bf0c      	ite	eq
 8007174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007178:	2500      	movne	r5, #0
 800717a:	4293      	cmp	r3, r2
 800717c:	bfc4      	itt	gt
 800717e:	1a9b      	subgt	r3, r3, r2
 8007180:	18ed      	addgt	r5, r5, r3
 8007182:	2600      	movs	r6, #0
 8007184:	341a      	adds	r4, #26
 8007186:	42b5      	cmp	r5, r6
 8007188:	d11a      	bne.n	80071c0 <_printf_common+0xc8>
 800718a:	2000      	movs	r0, #0
 800718c:	e008      	b.n	80071a0 <_printf_common+0xa8>
 800718e:	2301      	movs	r3, #1
 8007190:	4652      	mov	r2, sl
 8007192:	4649      	mov	r1, r9
 8007194:	4638      	mov	r0, r7
 8007196:	47c0      	blx	r8
 8007198:	3001      	adds	r0, #1
 800719a:	d103      	bne.n	80071a4 <_printf_common+0xac>
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a4:	3501      	adds	r5, #1
 80071a6:	e7c6      	b.n	8007136 <_printf_common+0x3e>
 80071a8:	18e1      	adds	r1, r4, r3
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	2030      	movs	r0, #48	; 0x30
 80071ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071b2:	4422      	add	r2, r4
 80071b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071bc:	3302      	adds	r3, #2
 80071be:	e7c7      	b.n	8007150 <_printf_common+0x58>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4622      	mov	r2, r4
 80071c4:	4649      	mov	r1, r9
 80071c6:	4638      	mov	r0, r7
 80071c8:	47c0      	blx	r8
 80071ca:	3001      	adds	r0, #1
 80071cc:	d0e6      	beq.n	800719c <_printf_common+0xa4>
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7d9      	b.n	8007186 <_printf_common+0x8e>
	...

080071d4 <_printf_i>:
 80071d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	7e0f      	ldrb	r7, [r1, #24]
 80071da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071dc:	2f78      	cmp	r7, #120	; 0x78
 80071de:	4691      	mov	r9, r2
 80071e0:	4680      	mov	r8, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	469a      	mov	sl, r3
 80071e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ea:	d807      	bhi.n	80071fc <_printf_i+0x28>
 80071ec:	2f62      	cmp	r7, #98	; 0x62
 80071ee:	d80a      	bhi.n	8007206 <_printf_i+0x32>
 80071f0:	2f00      	cmp	r7, #0
 80071f2:	f000 80d8 	beq.w	80073a6 <_printf_i+0x1d2>
 80071f6:	2f58      	cmp	r7, #88	; 0x58
 80071f8:	f000 80a3 	beq.w	8007342 <_printf_i+0x16e>
 80071fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007204:	e03a      	b.n	800727c <_printf_i+0xa8>
 8007206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800720a:	2b15      	cmp	r3, #21
 800720c:	d8f6      	bhi.n	80071fc <_printf_i+0x28>
 800720e:	a101      	add	r1, pc, #4	; (adr r1, 8007214 <_printf_i+0x40>)
 8007210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007214:	0800726d 	.word	0x0800726d
 8007218:	08007281 	.word	0x08007281
 800721c:	080071fd 	.word	0x080071fd
 8007220:	080071fd 	.word	0x080071fd
 8007224:	080071fd 	.word	0x080071fd
 8007228:	080071fd 	.word	0x080071fd
 800722c:	08007281 	.word	0x08007281
 8007230:	080071fd 	.word	0x080071fd
 8007234:	080071fd 	.word	0x080071fd
 8007238:	080071fd 	.word	0x080071fd
 800723c:	080071fd 	.word	0x080071fd
 8007240:	0800738d 	.word	0x0800738d
 8007244:	080072b1 	.word	0x080072b1
 8007248:	0800736f 	.word	0x0800736f
 800724c:	080071fd 	.word	0x080071fd
 8007250:	080071fd 	.word	0x080071fd
 8007254:	080073af 	.word	0x080073af
 8007258:	080071fd 	.word	0x080071fd
 800725c:	080072b1 	.word	0x080072b1
 8007260:	080071fd 	.word	0x080071fd
 8007264:	080071fd 	.word	0x080071fd
 8007268:	08007377 	.word	0x08007377
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	602a      	str	r2, [r5, #0]
 8007274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800727c:	2301      	movs	r3, #1
 800727e:	e0a3      	b.n	80073c8 <_printf_i+0x1f4>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	6829      	ldr	r1, [r5, #0]
 8007284:	0606      	lsls	r6, r0, #24
 8007286:	f101 0304 	add.w	r3, r1, #4
 800728a:	d50a      	bpl.n	80072a2 <_printf_i+0xce>
 800728c:	680e      	ldr	r6, [r1, #0]
 800728e:	602b      	str	r3, [r5, #0]
 8007290:	2e00      	cmp	r6, #0
 8007292:	da03      	bge.n	800729c <_printf_i+0xc8>
 8007294:	232d      	movs	r3, #45	; 0x2d
 8007296:	4276      	negs	r6, r6
 8007298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800729c:	485e      	ldr	r0, [pc, #376]	; (8007418 <_printf_i+0x244>)
 800729e:	230a      	movs	r3, #10
 80072a0:	e019      	b.n	80072d6 <_printf_i+0x102>
 80072a2:	680e      	ldr	r6, [r1, #0]
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072aa:	bf18      	it	ne
 80072ac:	b236      	sxthne	r6, r6
 80072ae:	e7ef      	b.n	8007290 <_printf_i+0xbc>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	6820      	ldr	r0, [r4, #0]
 80072b4:	1d19      	adds	r1, r3, #4
 80072b6:	6029      	str	r1, [r5, #0]
 80072b8:	0601      	lsls	r1, r0, #24
 80072ba:	d501      	bpl.n	80072c0 <_printf_i+0xec>
 80072bc:	681e      	ldr	r6, [r3, #0]
 80072be:	e002      	b.n	80072c6 <_printf_i+0xf2>
 80072c0:	0646      	lsls	r6, r0, #25
 80072c2:	d5fb      	bpl.n	80072bc <_printf_i+0xe8>
 80072c4:	881e      	ldrh	r6, [r3, #0]
 80072c6:	4854      	ldr	r0, [pc, #336]	; (8007418 <_printf_i+0x244>)
 80072c8:	2f6f      	cmp	r7, #111	; 0x6f
 80072ca:	bf0c      	ite	eq
 80072cc:	2308      	moveq	r3, #8
 80072ce:	230a      	movne	r3, #10
 80072d0:	2100      	movs	r1, #0
 80072d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072d6:	6865      	ldr	r5, [r4, #4]
 80072d8:	60a5      	str	r5, [r4, #8]
 80072da:	2d00      	cmp	r5, #0
 80072dc:	bfa2      	ittt	ge
 80072de:	6821      	ldrge	r1, [r4, #0]
 80072e0:	f021 0104 	bicge.w	r1, r1, #4
 80072e4:	6021      	strge	r1, [r4, #0]
 80072e6:	b90e      	cbnz	r6, 80072ec <_printf_i+0x118>
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	d04d      	beq.n	8007388 <_printf_i+0x1b4>
 80072ec:	4615      	mov	r5, r2
 80072ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80072f2:	fb03 6711 	mls	r7, r3, r1, r6
 80072f6:	5dc7      	ldrb	r7, [r0, r7]
 80072f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072fc:	4637      	mov	r7, r6
 80072fe:	42bb      	cmp	r3, r7
 8007300:	460e      	mov	r6, r1
 8007302:	d9f4      	bls.n	80072ee <_printf_i+0x11a>
 8007304:	2b08      	cmp	r3, #8
 8007306:	d10b      	bne.n	8007320 <_printf_i+0x14c>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	07de      	lsls	r6, r3, #31
 800730c:	d508      	bpl.n	8007320 <_printf_i+0x14c>
 800730e:	6923      	ldr	r3, [r4, #16]
 8007310:	6861      	ldr	r1, [r4, #4]
 8007312:	4299      	cmp	r1, r3
 8007314:	bfde      	ittt	le
 8007316:	2330      	movle	r3, #48	; 0x30
 8007318:	f805 3c01 	strble.w	r3, [r5, #-1]
 800731c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007320:	1b52      	subs	r2, r2, r5
 8007322:	6122      	str	r2, [r4, #16]
 8007324:	f8cd a000 	str.w	sl, [sp]
 8007328:	464b      	mov	r3, r9
 800732a:	aa03      	add	r2, sp, #12
 800732c:	4621      	mov	r1, r4
 800732e:	4640      	mov	r0, r8
 8007330:	f7ff fee2 	bl	80070f8 <_printf_common>
 8007334:	3001      	adds	r0, #1
 8007336:	d14c      	bne.n	80073d2 <_printf_i+0x1fe>
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	b004      	add	sp, #16
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	4835      	ldr	r0, [pc, #212]	; (8007418 <_printf_i+0x244>)
 8007344:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007348:	6829      	ldr	r1, [r5, #0]
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007350:	6029      	str	r1, [r5, #0]
 8007352:	061d      	lsls	r5, r3, #24
 8007354:	d514      	bpl.n	8007380 <_printf_i+0x1ac>
 8007356:	07df      	lsls	r7, r3, #31
 8007358:	bf44      	itt	mi
 800735a:	f043 0320 	orrmi.w	r3, r3, #32
 800735e:	6023      	strmi	r3, [r4, #0]
 8007360:	b91e      	cbnz	r6, 800736a <_printf_i+0x196>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	f023 0320 	bic.w	r3, r3, #32
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	2310      	movs	r3, #16
 800736c:	e7b0      	b.n	80072d0 <_printf_i+0xfc>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	f043 0320 	orr.w	r3, r3, #32
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	2378      	movs	r3, #120	; 0x78
 8007378:	4828      	ldr	r0, [pc, #160]	; (800741c <_printf_i+0x248>)
 800737a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800737e:	e7e3      	b.n	8007348 <_printf_i+0x174>
 8007380:	0659      	lsls	r1, r3, #25
 8007382:	bf48      	it	mi
 8007384:	b2b6      	uxthmi	r6, r6
 8007386:	e7e6      	b.n	8007356 <_printf_i+0x182>
 8007388:	4615      	mov	r5, r2
 800738a:	e7bb      	b.n	8007304 <_printf_i+0x130>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	6826      	ldr	r6, [r4, #0]
 8007390:	6961      	ldr	r1, [r4, #20]
 8007392:	1d18      	adds	r0, r3, #4
 8007394:	6028      	str	r0, [r5, #0]
 8007396:	0635      	lsls	r5, r6, #24
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	d501      	bpl.n	80073a0 <_printf_i+0x1cc>
 800739c:	6019      	str	r1, [r3, #0]
 800739e:	e002      	b.n	80073a6 <_printf_i+0x1d2>
 80073a0:	0670      	lsls	r0, r6, #25
 80073a2:	d5fb      	bpl.n	800739c <_printf_i+0x1c8>
 80073a4:	8019      	strh	r1, [r3, #0]
 80073a6:	2300      	movs	r3, #0
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	4615      	mov	r5, r2
 80073ac:	e7ba      	b.n	8007324 <_printf_i+0x150>
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	1d1a      	adds	r2, r3, #4
 80073b2:	602a      	str	r2, [r5, #0]
 80073b4:	681d      	ldr	r5, [r3, #0]
 80073b6:	6862      	ldr	r2, [r4, #4]
 80073b8:	2100      	movs	r1, #0
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f8 ff10 	bl	80001e0 <memchr>
 80073c0:	b108      	cbz	r0, 80073c6 <_printf_i+0x1f2>
 80073c2:	1b40      	subs	r0, r0, r5
 80073c4:	6060      	str	r0, [r4, #4]
 80073c6:	6863      	ldr	r3, [r4, #4]
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	2300      	movs	r3, #0
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d0:	e7a8      	b.n	8007324 <_printf_i+0x150>
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	462a      	mov	r2, r5
 80073d6:	4649      	mov	r1, r9
 80073d8:	4640      	mov	r0, r8
 80073da:	47d0      	blx	sl
 80073dc:	3001      	adds	r0, #1
 80073de:	d0ab      	beq.n	8007338 <_printf_i+0x164>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	079b      	lsls	r3, r3, #30
 80073e4:	d413      	bmi.n	800740e <_printf_i+0x23a>
 80073e6:	68e0      	ldr	r0, [r4, #12]
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	4298      	cmp	r0, r3
 80073ec:	bfb8      	it	lt
 80073ee:	4618      	movlt	r0, r3
 80073f0:	e7a4      	b.n	800733c <_printf_i+0x168>
 80073f2:	2301      	movs	r3, #1
 80073f4:	4632      	mov	r2, r6
 80073f6:	4649      	mov	r1, r9
 80073f8:	4640      	mov	r0, r8
 80073fa:	47d0      	blx	sl
 80073fc:	3001      	adds	r0, #1
 80073fe:	d09b      	beq.n	8007338 <_printf_i+0x164>
 8007400:	3501      	adds	r5, #1
 8007402:	68e3      	ldr	r3, [r4, #12]
 8007404:	9903      	ldr	r1, [sp, #12]
 8007406:	1a5b      	subs	r3, r3, r1
 8007408:	42ab      	cmp	r3, r5
 800740a:	dcf2      	bgt.n	80073f2 <_printf_i+0x21e>
 800740c:	e7eb      	b.n	80073e6 <_printf_i+0x212>
 800740e:	2500      	movs	r5, #0
 8007410:	f104 0619 	add.w	r6, r4, #25
 8007414:	e7f5      	b.n	8007402 <_printf_i+0x22e>
 8007416:	bf00      	nop
 8007418:	0800a9b1 	.word	0x0800a9b1
 800741c:	0800a9c2 	.word	0x0800a9c2

08007420 <memcpy>:
 8007420:	440a      	add	r2, r1
 8007422:	4291      	cmp	r1, r2
 8007424:	f100 33ff 	add.w	r3, r0, #4294967295
 8007428:	d100      	bne.n	800742c <memcpy+0xc>
 800742a:	4770      	bx	lr
 800742c:	b510      	push	{r4, lr}
 800742e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007436:	4291      	cmp	r1, r2
 8007438:	d1f9      	bne.n	800742e <memcpy+0xe>
 800743a:	bd10      	pop	{r4, pc}

0800743c <memmove>:
 800743c:	4288      	cmp	r0, r1
 800743e:	b510      	push	{r4, lr}
 8007440:	eb01 0402 	add.w	r4, r1, r2
 8007444:	d902      	bls.n	800744c <memmove+0x10>
 8007446:	4284      	cmp	r4, r0
 8007448:	4623      	mov	r3, r4
 800744a:	d807      	bhi.n	800745c <memmove+0x20>
 800744c:	1e43      	subs	r3, r0, #1
 800744e:	42a1      	cmp	r1, r4
 8007450:	d008      	beq.n	8007464 <memmove+0x28>
 8007452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800745a:	e7f8      	b.n	800744e <memmove+0x12>
 800745c:	4402      	add	r2, r0
 800745e:	4601      	mov	r1, r0
 8007460:	428a      	cmp	r2, r1
 8007462:	d100      	bne.n	8007466 <memmove+0x2a>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800746a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800746e:	e7f7      	b.n	8007460 <memmove+0x24>

08007470 <_free_r>:
 8007470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007472:	2900      	cmp	r1, #0
 8007474:	d044      	beq.n	8007500 <_free_r+0x90>
 8007476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747a:	9001      	str	r0, [sp, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f1a1 0404 	sub.w	r4, r1, #4
 8007482:	bfb8      	it	lt
 8007484:	18e4      	addlt	r4, r4, r3
 8007486:	f000 f913 	bl	80076b0 <__malloc_lock>
 800748a:	4a1e      	ldr	r2, [pc, #120]	; (8007504 <_free_r+0x94>)
 800748c:	9801      	ldr	r0, [sp, #4]
 800748e:	6813      	ldr	r3, [r2, #0]
 8007490:	b933      	cbnz	r3, 80074a0 <_free_r+0x30>
 8007492:	6063      	str	r3, [r4, #4]
 8007494:	6014      	str	r4, [r2, #0]
 8007496:	b003      	add	sp, #12
 8007498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800749c:	f000 b90e 	b.w	80076bc <__malloc_unlock>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d908      	bls.n	80074b6 <_free_r+0x46>
 80074a4:	6825      	ldr	r5, [r4, #0]
 80074a6:	1961      	adds	r1, r4, r5
 80074a8:	428b      	cmp	r3, r1
 80074aa:	bf01      	itttt	eq
 80074ac:	6819      	ldreq	r1, [r3, #0]
 80074ae:	685b      	ldreq	r3, [r3, #4]
 80074b0:	1949      	addeq	r1, r1, r5
 80074b2:	6021      	streq	r1, [r4, #0]
 80074b4:	e7ed      	b.n	8007492 <_free_r+0x22>
 80074b6:	461a      	mov	r2, r3
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b10b      	cbz	r3, 80074c0 <_free_r+0x50>
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d9fa      	bls.n	80074b6 <_free_r+0x46>
 80074c0:	6811      	ldr	r1, [r2, #0]
 80074c2:	1855      	adds	r5, r2, r1
 80074c4:	42a5      	cmp	r5, r4
 80074c6:	d10b      	bne.n	80074e0 <_free_r+0x70>
 80074c8:	6824      	ldr	r4, [r4, #0]
 80074ca:	4421      	add	r1, r4
 80074cc:	1854      	adds	r4, r2, r1
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	d1e0      	bne.n	8007496 <_free_r+0x26>
 80074d4:	681c      	ldr	r4, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	6053      	str	r3, [r2, #4]
 80074da:	4421      	add	r1, r4
 80074dc:	6011      	str	r1, [r2, #0]
 80074de:	e7da      	b.n	8007496 <_free_r+0x26>
 80074e0:	d902      	bls.n	80074e8 <_free_r+0x78>
 80074e2:	230c      	movs	r3, #12
 80074e4:	6003      	str	r3, [r0, #0]
 80074e6:	e7d6      	b.n	8007496 <_free_r+0x26>
 80074e8:	6825      	ldr	r5, [r4, #0]
 80074ea:	1961      	adds	r1, r4, r5
 80074ec:	428b      	cmp	r3, r1
 80074ee:	bf04      	itt	eq
 80074f0:	6819      	ldreq	r1, [r3, #0]
 80074f2:	685b      	ldreq	r3, [r3, #4]
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	bf04      	itt	eq
 80074f8:	1949      	addeq	r1, r1, r5
 80074fa:	6021      	streq	r1, [r4, #0]
 80074fc:	6054      	str	r4, [r2, #4]
 80074fe:	e7ca      	b.n	8007496 <_free_r+0x26>
 8007500:	b003      	add	sp, #12
 8007502:	bd30      	pop	{r4, r5, pc}
 8007504:	20000290 	.word	0x20000290

08007508 <sbrk_aligned>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	4e0e      	ldr	r6, [pc, #56]	; (8007544 <sbrk_aligned+0x3c>)
 800750c:	460c      	mov	r4, r1
 800750e:	6831      	ldr	r1, [r6, #0]
 8007510:	4605      	mov	r5, r0
 8007512:	b911      	cbnz	r1, 800751a <sbrk_aligned+0x12>
 8007514:	f000 f8bc 	bl	8007690 <_sbrk_r>
 8007518:	6030      	str	r0, [r6, #0]
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f000 f8b7 	bl	8007690 <_sbrk_r>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	d00a      	beq.n	800753c <sbrk_aligned+0x34>
 8007526:	1cc4      	adds	r4, r0, #3
 8007528:	f024 0403 	bic.w	r4, r4, #3
 800752c:	42a0      	cmp	r0, r4
 800752e:	d007      	beq.n	8007540 <sbrk_aligned+0x38>
 8007530:	1a21      	subs	r1, r4, r0
 8007532:	4628      	mov	r0, r5
 8007534:	f000 f8ac 	bl	8007690 <_sbrk_r>
 8007538:	3001      	adds	r0, #1
 800753a:	d101      	bne.n	8007540 <sbrk_aligned+0x38>
 800753c:	f04f 34ff 	mov.w	r4, #4294967295
 8007540:	4620      	mov	r0, r4
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	20000294 	.word	0x20000294

08007548 <_malloc_r>:
 8007548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754c:	1ccd      	adds	r5, r1, #3
 800754e:	f025 0503 	bic.w	r5, r5, #3
 8007552:	3508      	adds	r5, #8
 8007554:	2d0c      	cmp	r5, #12
 8007556:	bf38      	it	cc
 8007558:	250c      	movcc	r5, #12
 800755a:	2d00      	cmp	r5, #0
 800755c:	4607      	mov	r7, r0
 800755e:	db01      	blt.n	8007564 <_malloc_r+0x1c>
 8007560:	42a9      	cmp	r1, r5
 8007562:	d905      	bls.n	8007570 <_malloc_r+0x28>
 8007564:	230c      	movs	r3, #12
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	2600      	movs	r6, #0
 800756a:	4630      	mov	r0, r6
 800756c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007570:	4e2e      	ldr	r6, [pc, #184]	; (800762c <_malloc_r+0xe4>)
 8007572:	f000 f89d 	bl	80076b0 <__malloc_lock>
 8007576:	6833      	ldr	r3, [r6, #0]
 8007578:	461c      	mov	r4, r3
 800757a:	bb34      	cbnz	r4, 80075ca <_malloc_r+0x82>
 800757c:	4629      	mov	r1, r5
 800757e:	4638      	mov	r0, r7
 8007580:	f7ff ffc2 	bl	8007508 <sbrk_aligned>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	4604      	mov	r4, r0
 8007588:	d14d      	bne.n	8007626 <_malloc_r+0xde>
 800758a:	6834      	ldr	r4, [r6, #0]
 800758c:	4626      	mov	r6, r4
 800758e:	2e00      	cmp	r6, #0
 8007590:	d140      	bne.n	8007614 <_malloc_r+0xcc>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	4631      	mov	r1, r6
 8007596:	4638      	mov	r0, r7
 8007598:	eb04 0803 	add.w	r8, r4, r3
 800759c:	f000 f878 	bl	8007690 <_sbrk_r>
 80075a0:	4580      	cmp	r8, r0
 80075a2:	d13a      	bne.n	800761a <_malloc_r+0xd2>
 80075a4:	6821      	ldr	r1, [r4, #0]
 80075a6:	3503      	adds	r5, #3
 80075a8:	1a6d      	subs	r5, r5, r1
 80075aa:	f025 0503 	bic.w	r5, r5, #3
 80075ae:	3508      	adds	r5, #8
 80075b0:	2d0c      	cmp	r5, #12
 80075b2:	bf38      	it	cc
 80075b4:	250c      	movcc	r5, #12
 80075b6:	4629      	mov	r1, r5
 80075b8:	4638      	mov	r0, r7
 80075ba:	f7ff ffa5 	bl	8007508 <sbrk_aligned>
 80075be:	3001      	adds	r0, #1
 80075c0:	d02b      	beq.n	800761a <_malloc_r+0xd2>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	442b      	add	r3, r5
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	e00e      	b.n	80075e8 <_malloc_r+0xa0>
 80075ca:	6822      	ldr	r2, [r4, #0]
 80075cc:	1b52      	subs	r2, r2, r5
 80075ce:	d41e      	bmi.n	800760e <_malloc_r+0xc6>
 80075d0:	2a0b      	cmp	r2, #11
 80075d2:	d916      	bls.n	8007602 <_malloc_r+0xba>
 80075d4:	1961      	adds	r1, r4, r5
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	6025      	str	r5, [r4, #0]
 80075da:	bf18      	it	ne
 80075dc:	6059      	strne	r1, [r3, #4]
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	bf08      	it	eq
 80075e2:	6031      	streq	r1, [r6, #0]
 80075e4:	5162      	str	r2, [r4, r5]
 80075e6:	604b      	str	r3, [r1, #4]
 80075e8:	4638      	mov	r0, r7
 80075ea:	f104 060b 	add.w	r6, r4, #11
 80075ee:	f000 f865 	bl	80076bc <__malloc_unlock>
 80075f2:	f026 0607 	bic.w	r6, r6, #7
 80075f6:	1d23      	adds	r3, r4, #4
 80075f8:	1af2      	subs	r2, r6, r3
 80075fa:	d0b6      	beq.n	800756a <_malloc_r+0x22>
 80075fc:	1b9b      	subs	r3, r3, r6
 80075fe:	50a3      	str	r3, [r4, r2]
 8007600:	e7b3      	b.n	800756a <_malloc_r+0x22>
 8007602:	6862      	ldr	r2, [r4, #4]
 8007604:	42a3      	cmp	r3, r4
 8007606:	bf0c      	ite	eq
 8007608:	6032      	streq	r2, [r6, #0]
 800760a:	605a      	strne	r2, [r3, #4]
 800760c:	e7ec      	b.n	80075e8 <_malloc_r+0xa0>
 800760e:	4623      	mov	r3, r4
 8007610:	6864      	ldr	r4, [r4, #4]
 8007612:	e7b2      	b.n	800757a <_malloc_r+0x32>
 8007614:	4634      	mov	r4, r6
 8007616:	6876      	ldr	r6, [r6, #4]
 8007618:	e7b9      	b.n	800758e <_malloc_r+0x46>
 800761a:	230c      	movs	r3, #12
 800761c:	603b      	str	r3, [r7, #0]
 800761e:	4638      	mov	r0, r7
 8007620:	f000 f84c 	bl	80076bc <__malloc_unlock>
 8007624:	e7a1      	b.n	800756a <_malloc_r+0x22>
 8007626:	6025      	str	r5, [r4, #0]
 8007628:	e7de      	b.n	80075e8 <_malloc_r+0xa0>
 800762a:	bf00      	nop
 800762c:	20000290 	.word	0x20000290

08007630 <_realloc_r>:
 8007630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007634:	4680      	mov	r8, r0
 8007636:	4614      	mov	r4, r2
 8007638:	460e      	mov	r6, r1
 800763a:	b921      	cbnz	r1, 8007646 <_realloc_r+0x16>
 800763c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007640:	4611      	mov	r1, r2
 8007642:	f7ff bf81 	b.w	8007548 <_malloc_r>
 8007646:	b92a      	cbnz	r2, 8007654 <_realloc_r+0x24>
 8007648:	f7ff ff12 	bl	8007470 <_free_r>
 800764c:	4625      	mov	r5, r4
 800764e:	4628      	mov	r0, r5
 8007650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007654:	f000 f838 	bl	80076c8 <_malloc_usable_size_r>
 8007658:	4284      	cmp	r4, r0
 800765a:	4607      	mov	r7, r0
 800765c:	d802      	bhi.n	8007664 <_realloc_r+0x34>
 800765e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007662:	d812      	bhi.n	800768a <_realloc_r+0x5a>
 8007664:	4621      	mov	r1, r4
 8007666:	4640      	mov	r0, r8
 8007668:	f7ff ff6e 	bl	8007548 <_malloc_r>
 800766c:	4605      	mov	r5, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d0ed      	beq.n	800764e <_realloc_r+0x1e>
 8007672:	42bc      	cmp	r4, r7
 8007674:	4622      	mov	r2, r4
 8007676:	4631      	mov	r1, r6
 8007678:	bf28      	it	cs
 800767a:	463a      	movcs	r2, r7
 800767c:	f7ff fed0 	bl	8007420 <memcpy>
 8007680:	4631      	mov	r1, r6
 8007682:	4640      	mov	r0, r8
 8007684:	f7ff fef4 	bl	8007470 <_free_r>
 8007688:	e7e1      	b.n	800764e <_realloc_r+0x1e>
 800768a:	4635      	mov	r5, r6
 800768c:	e7df      	b.n	800764e <_realloc_r+0x1e>
	...

08007690 <_sbrk_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d06      	ldr	r5, [pc, #24]	; (80076ac <_sbrk_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4604      	mov	r4, r0
 8007698:	4608      	mov	r0, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	f7fb fc5a 	bl	8002f54 <_sbrk>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_sbrk_r+0x1a>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_sbrk_r+0x1a>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20000298 	.word	0x20000298

080076b0 <__malloc_lock>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__malloc_lock+0x8>)
 80076b2:	f000 b811 	b.w	80076d8 <__retarget_lock_acquire_recursive>
 80076b6:	bf00      	nop
 80076b8:	2000029c 	.word	0x2000029c

080076bc <__malloc_unlock>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__malloc_unlock+0x8>)
 80076be:	f000 b80c 	b.w	80076da <__retarget_lock_release_recursive>
 80076c2:	bf00      	nop
 80076c4:	2000029c 	.word	0x2000029c

080076c8 <_malloc_usable_size_r>:
 80076c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076cc:	1f18      	subs	r0, r3, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bfbc      	itt	lt
 80076d2:	580b      	ldrlt	r3, [r1, r0]
 80076d4:	18c0      	addlt	r0, r0, r3
 80076d6:	4770      	bx	lr

080076d8 <__retarget_lock_acquire_recursive>:
 80076d8:	4770      	bx	lr

080076da <__retarget_lock_release_recursive>:
 80076da:	4770      	bx	lr

080076dc <_init>:
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	bf00      	nop
 80076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e2:	bc08      	pop	{r3}
 80076e4:	469e      	mov	lr, r3
 80076e6:	4770      	bx	lr

080076e8 <_fini>:
 80076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ea:	bf00      	nop
 80076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ee:	bc08      	pop	{r3}
 80076f0:	469e      	mov	lr, r3
 80076f2:	4770      	bx	lr
