
Screen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000325c  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e2c  08006e2c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006e2c  08006e2c  00016e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e34  08006e34  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e34  08006e34  00016e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e38  08006e38  00016e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000000e4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b112  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a57  00000000  00000000  0002b156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002cbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000888  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f74  00000000  00000000  0002dd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b49b  00000000  00000000  0004ecfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c58f7  00000000  00000000  0005a197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011fa8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024fc  00000000  00000000  0011fae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003bb8 	.word	0x08003bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003bb8 	.word	0x08003bb8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80004dc:	b490      	push	{r4, r7}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4604      	mov	r4, r0
 80004e4:	4608      	mov	r0, r1
 80004e6:	4611      	mov	r1, r2
 80004e8:	461a      	mov	r2, r3
 80004ea:	4623      	mov	r3, r4
 80004ec:	80fb      	strh	r3, [r7, #6]
 80004ee:	4603      	mov	r3, r0
 80004f0:	80bb      	strh	r3, [r7, #4]
 80004f2:	460b      	mov	r3, r1
 80004f4:	807b      	strh	r3, [r7, #2]
 80004f6:	4613      	mov	r3, r2
 80004f8:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 80004fa:	4a17      	ldr	r2, [pc, #92]	; (8000558 <Paint_NewImage+0x7c>)
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <Paint_NewImage+0x7c>)
 8000502:	88bb      	ldrh	r3, [r7, #4]
 8000504:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <Paint_NewImage+0x7c>)
 8000508:	883b      	ldrh	r3, [r7, #0]
 800050a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <Paint_NewImage+0x7c>)
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <Paint_NewImage+0x7c>)
 8000514:	88bb      	ldrh	r3, [r7, #4]
 8000516:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
   
    Paint.Rotate = Rotate;
 8000518:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <Paint_NewImage+0x7c>)
 800051a:	887b      	ldrh	r3, [r7, #2]
 800051c:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <Paint_NewImage+0x7c>)
 8000520:	2200      	movs	r2, #0
 8000522:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <Paint_NewImage+0x54>
 800052a:	887b      	ldrh	r3, [r7, #2]
 800052c:	2bb4      	cmp	r3, #180	; 0xb4
 800052e:	d106      	bne.n	800053e <Paint_NewImage+0x62>
        Paint.Width = Width;
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <Paint_NewImage+0x7c>)
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000536:	4a08      	ldr	r2, [pc, #32]	; (8000558 <Paint_NewImage+0x7c>)
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	80d3      	strh	r3, [r2, #6]
 800053c:	e006      	b.n	800054c <Paint_NewImage+0x70>
    } else {
        Paint.Width = Height;
 800053e:	4a06      	ldr	r2, [pc, #24]	; (8000558 <Paint_NewImage+0x7c>)
 8000540:	88bb      	ldrh	r3, [r7, #4]
 8000542:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <Paint_NewImage+0x7c>)
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	80d3      	strh	r3, [r2, #6]
    }
}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bc90      	pop	{r4, r7}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000030 	.word	0x20000030

0800055c <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <Paint_SetClearFuntion+0x1c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000004c 	.word	0x2000004c

0800057c <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <Paint_SetDisplayFuntion+0x1c>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000048 	.word	0x20000048

0800059c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	460b      	mov	r3, r1
 80005a8:	80bb      	strh	r3, [r7, #4]
 80005aa:	4613      	mov	r3, r2
 80005ac:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80005ae:	4b4f      	ldr	r3, [pc, #316]	; (80006ec <Paint_SetPixel+0x150>)
 80005b0:	889b      	ldrh	r3, [r3, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	88fa      	ldrh	r2, [r7, #6]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	f200 808d 	bhi.w	80006d6 <Paint_SetPixel+0x13a>
 80005bc:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <Paint_SetPixel+0x150>)
 80005be:	88db      	ldrh	r3, [r3, #6]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	88ba      	ldrh	r2, [r7, #4]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	f200 8086 	bhi.w	80006d6 <Paint_SetPixel+0x13a>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80005ca:	4b48      	ldr	r3, [pc, #288]	; (80006ec <Paint_SetPixel+0x150>)
 80005cc:	89db      	ldrh	r3, [r3, #14]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80005d4:	d02c      	beq.n	8000630 <Paint_SetPixel+0x94>
 80005d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80005da:	dc7e      	bgt.n	80006da <Paint_SetPixel+0x13e>
 80005dc:	2bb4      	cmp	r3, #180	; 0xb4
 80005de:	d016      	beq.n	800060e <Paint_SetPixel+0x72>
 80005e0:	2bb4      	cmp	r3, #180	; 0xb4
 80005e2:	dc7a      	bgt.n	80006da <Paint_SetPixel+0x13e>
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d002      	beq.n	80005ee <Paint_SetPixel+0x52>
 80005e8:	2b5a      	cmp	r3, #90	; 0x5a
 80005ea:	d005      	beq.n	80005f8 <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 80005ec:	e075      	b.n	80006da <Paint_SetPixel+0x13e>
        X = Xpoint;
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	81bb      	strh	r3, [r7, #12]
        break;
 80005f6:	e026      	b.n	8000646 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 80005f8:	4b3c      	ldr	r3, [pc, #240]	; (80006ec <Paint_SetPixel+0x150>)
 80005fa:	891b      	ldrh	r3, [r3, #8]
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	88bb      	ldrh	r3, [r7, #4]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	b29b      	uxth	r3, r3
 8000604:	3b01      	subs	r3, #1
 8000606:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	81bb      	strh	r3, [r7, #12]
        break;
 800060c:	e01b      	b.n	8000646 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 800060e:	4b37      	ldr	r3, [pc, #220]	; (80006ec <Paint_SetPixel+0x150>)
 8000610:	891b      	ldrh	r3, [r3, #8]
 8000612:	b29a      	uxth	r2, r3
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	b29b      	uxth	r3, r3
 800061a:	3b01      	subs	r3, #1
 800061c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800061e:	4b33      	ldr	r3, [pc, #204]	; (80006ec <Paint_SetPixel+0x150>)
 8000620:	895b      	ldrh	r3, [r3, #10]
 8000622:	b29a      	uxth	r2, r3
 8000624:	88bb      	ldrh	r3, [r7, #4]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	b29b      	uxth	r3, r3
 800062a:	3b01      	subs	r3, #1
 800062c:	81bb      	strh	r3, [r7, #12]
        break;
 800062e:	e00a      	b.n	8000646 <Paint_SetPixel+0xaa>
        X = Ypoint;
 8000630:	88bb      	ldrh	r3, [r7, #4]
 8000632:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <Paint_SetPixel+0x150>)
 8000636:	895b      	ldrh	r3, [r3, #10]
 8000638:	b29a      	uxth	r2, r3
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	3b01      	subs	r3, #1
 8000642:	81bb      	strh	r3, [r7, #12]
        break;
 8000644:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <Paint_SetPixel+0x150>)
 8000648:	8a1b      	ldrh	r3, [r3, #16]
 800064a:	b29b      	uxth	r3, r3
 800064c:	2b03      	cmp	r3, #3
 800064e:	d846      	bhi.n	80006de <Paint_SetPixel+0x142>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <Paint_SetPixel+0xbc>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	080006af 	.word	0x080006af
 800065c:	08000669 	.word	0x08000669
 8000660:	0800067b 	.word	0x0800067b
 8000664:	0800068d 	.word	0x0800068d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <Paint_SetPixel+0x150>)
 800066a:	891b      	ldrh	r3, [r3, #8]
 800066c:	b29a      	uxth	r2, r3
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	b29b      	uxth	r3, r3
 8000674:	3b01      	subs	r3, #1
 8000676:	81fb      	strh	r3, [r7, #14]
        break;
 8000678:	e01a      	b.n	80006b0 <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <Paint_SetPixel+0x150>)
 800067c:	895b      	ldrh	r3, [r3, #10]
 800067e:	b29a      	uxth	r2, r3
 8000680:	89bb      	ldrh	r3, [r7, #12]
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	3b01      	subs	r3, #1
 8000688:	81bb      	strh	r3, [r7, #12]
        break;
 800068a:	e011      	b.n	80006b0 <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <Paint_SetPixel+0x150>)
 800068e:	891b      	ldrh	r3, [r3, #8]
 8000690:	b29a      	uxth	r2, r3
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b29b      	uxth	r3, r3
 8000698:	3b01      	subs	r3, #1
 800069a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <Paint_SetPixel+0x150>)
 800069e:	895b      	ldrh	r3, [r3, #10]
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	89bb      	ldrh	r3, [r7, #12]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	3b01      	subs	r3, #1
 80006aa:	81bb      	strh	r3, [r7, #12]
        break;
 80006ac:	e000      	b.n	80006b0 <Paint_SetPixel+0x114>
        break;
 80006ae:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <Paint_SetPixel+0x150>)
 80006b2:	891b      	ldrh	r3, [r3, #8]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	89fa      	ldrh	r2, [r7, #14]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d812      	bhi.n	80006e2 <Paint_SetPixel+0x146>
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <Paint_SetPixel+0x150>)
 80006be:	895b      	ldrh	r3, [r3, #10]
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	89ba      	ldrh	r2, [r7, #12]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d80c      	bhi.n	80006e2 <Paint_SetPixel+0x146>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <Paint_SetPixel+0x154>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	887a      	ldrh	r2, [r7, #2]
 80006ce:	89b9      	ldrh	r1, [r7, #12]
 80006d0:	89f8      	ldrh	r0, [r7, #14]
 80006d2:	4798      	blx	r3
 80006d4:	e006      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006d6:	bf00      	nop
 80006d8:	e004      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006da:	bf00      	nop
 80006dc:	e002      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006de:	bf00      	nop
 80006e0:	e000      	b.n	80006e4 <Paint_SetPixel+0x148>
        return;
 80006e2:	bf00      	nop
}
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000030 	.word	0x20000030
 80006f0:	20000048 	.word	0x20000048

080006f4 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <Paint_Clear+0x1c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	4610      	mov	r0, r2
 8000706:	4798      	blx	r3
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000004c 	.word	0x2000004c

08000714 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4604      	mov	r4, r0
 800071c:	4608      	mov	r0, r1
 800071e:	4611      	mov	r1, r2
 8000720:	461a      	mov	r2, r3
 8000722:	4623      	mov	r3, r4
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	4603      	mov	r3, r0
 8000728:	80bb      	strh	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	807b      	strh	r3, [r7, #2]
 800072e:	4613      	mov	r3, r2
 8000730:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <Paint_DrawPoint+0x12c>)
 8000734:	889b      	ldrh	r3, [r3, #4]
 8000736:	b29b      	uxth	r3, r3
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	429a      	cmp	r2, r3
 800073c:	d87b      	bhi.n	8000836 <Paint_DrawPoint+0x122>
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <Paint_DrawPoint+0x12c>)
 8000740:	88db      	ldrh	r3, [r3, #6]
 8000742:	b29b      	uxth	r3, r3
 8000744:	88ba      	ldrh	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d875      	bhi.n	8000836 <Paint_DrawPoint+0x122>
        //Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 800074a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d144      	bne.n	80007dc <Paint_DrawPoint+0xc8>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8000752:	2300      	movs	r3, #0
 8000754:	81fb      	strh	r3, [r7, #14]
 8000756:	e039      	b.n	80007cc <Paint_DrawPoint+0xb8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8000758:	2300      	movs	r3, #0
 800075a:	81bb      	strh	r3, [r7, #12]
 800075c:	e029      	b.n	80007b2 <Paint_DrawPoint+0x9e>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800075e:	88fa      	ldrh	r2, [r7, #6]
 8000760:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000764:	441a      	add	r2, r3
 8000766:	787b      	ldrb	r3, [r7, #1]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	db28      	blt.n	80007c0 <Paint_DrawPoint+0xac>
 800076e:	88ba      	ldrh	r2, [r7, #4]
 8000770:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000774:	441a      	add	r2, r3
 8000776:	787b      	ldrb	r3, [r7, #1]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	db20      	blt.n	80007c0 <Paint_DrawPoint+0xac>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800077e:	89fa      	ldrh	r2, [r7, #14]
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	4413      	add	r3, r2
 8000784:	b29a      	uxth	r2, r3
 8000786:	787b      	ldrb	r3, [r7, #1]
 8000788:	b29b      	uxth	r3, r3
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	b298      	uxth	r0, r3
 800078e:	89ba      	ldrh	r2, [r7, #12]
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	4413      	add	r3, r2
 8000794:	b29a      	uxth	r2, r3
 8000796:	787b      	ldrb	r3, [r7, #1]
 8000798:	b29b      	uxth	r3, r3
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	887a      	ldrh	r2, [r7, #2]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f7ff fefb 	bl	800059c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 80007a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	81bb      	strh	r3, [r7, #12]
 80007b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80007b6:	787b      	ldrb	r3, [r7, #1]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	3b01      	subs	r3, #1
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbce      	blt.n	800075e <Paint_DrawPoint+0x4a>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80007c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	81fb      	strh	r3, [r7, #14]
 80007cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80007d0:	787b      	ldrb	r3, [r7, #1]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	3b01      	subs	r3, #1
 80007d6:	429a      	cmp	r2, r3
 80007d8:	dbbe      	blt.n	8000758 <Paint_DrawPoint+0x44>
 80007da:	e02d      	b.n	8000838 <Paint_DrawPoint+0x124>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	81fb      	strh	r3, [r7, #14]
 80007e0:	e023      	b.n	800082a <Paint_DrawPoint+0x116>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	81bb      	strh	r3, [r7, #12]
 80007e6:	e015      	b.n	8000814 <Paint_DrawPoint+0x100>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 80007e8:	89fa      	ldrh	r2, [r7, #14]
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	4413      	add	r3, r2
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b298      	uxth	r0, r3
 80007f4:	89ba      	ldrh	r2, [r7, #12]
 80007f6:	88bb      	ldrh	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b29b      	uxth	r3, r3
 8000800:	887a      	ldrh	r2, [r7, #2]
 8000802:	4619      	mov	r1, r3
 8000804:	f7ff feca 	bl	800059c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 8000808:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800080c:	b29b      	uxth	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	81bb      	strh	r3, [r7, #12]
 8000814:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbe4      	blt.n	80007e8 <Paint_DrawPoint+0xd4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800081e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000822:	b29b      	uxth	r3, r3
 8000824:	3301      	adds	r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	81fb      	strh	r3, [r7, #14]
 800082a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800082e:	787b      	ldrb	r3, [r7, #1]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbd6      	blt.n	80007e2 <Paint_DrawPoint+0xce>
 8000834:	e000      	b.n	8000838 <Paint_DrawPoint+0x124>
        return;
 8000836:	bf00      	nop
            }
        }
    }
}
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	20000030 	.word	0x20000030

08000844 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08d      	sub	sp, #52	; 0x34
 8000848:	af02      	add	r7, sp, #8
 800084a:	4604      	mov	r4, r0
 800084c:	4608      	mov	r0, r1
 800084e:	4611      	mov	r1, r2
 8000850:	461a      	mov	r2, r3
 8000852:	4623      	mov	r3, r4
 8000854:	80fb      	strh	r3, [r7, #6]
 8000856:	4603      	mov	r3, r0
 8000858:	80bb      	strh	r3, [r7, #4]
 800085a:	460b      	mov	r3, r1
 800085c:	807b      	strh	r3, [r7, #2]
 800085e:	4613      	mov	r3, r2
 8000860:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <Paint_DrawLine+0x154>)
 8000864:	889b      	ldrh	r3, [r3, #4]
 8000866:	b29b      	uxth	r3, r3
 8000868:	88fa      	ldrh	r2, [r7, #6]
 800086a:	429a      	cmp	r2, r3
 800086c:	f200 808c 	bhi.w	8000988 <Paint_DrawLine+0x144>
 8000870:	4b49      	ldr	r3, [pc, #292]	; (8000998 <Paint_DrawLine+0x154>)
 8000872:	88db      	ldrh	r3, [r3, #6]
 8000874:	b29b      	uxth	r3, r3
 8000876:	88ba      	ldrh	r2, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	f200 8085 	bhi.w	8000988 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <Paint_DrawLine+0x154>)
 8000880:	889b      	ldrh	r3, [r3, #4]
 8000882:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8000884:	887a      	ldrh	r2, [r7, #2]
 8000886:	429a      	cmp	r2, r3
 8000888:	d87e      	bhi.n	8000988 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <Paint_DrawLine+0x154>)
 800088c:	88db      	ldrh	r3, [r3, #6]
 800088e:	b29b      	uxth	r3, r3
 8000890:	883a      	ldrh	r2, [r7, #0]
 8000892:	429a      	cmp	r2, r3
 8000894:	d878      	bhi.n	8000988 <Paint_DrawLine+0x144>
        //Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800089e:	887a      	ldrh	r2, [r7, #2]
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	bfb8      	it	lt
 80008a8:	425b      	neglt	r3, r3
 80008aa:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 80008ac:	883a      	ldrh	r2, [r7, #0]
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	1ad3      	subs	r3, r2, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bfb8      	it	lt
 80008b6:	425b      	neglt	r3, r3
 80008b8:	425b      	negs	r3, r3
 80008ba:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 80008bc:	88fa      	ldrh	r2, [r7, #6]
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d201      	bcs.n	80008c8 <Paint_DrawLine+0x84>
 80008c4:	2301      	movs	r3, #1
 80008c6:	e001      	b.n	80008cc <Paint_DrawLine+0x88>
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 80008ce:	88ba      	ldrh	r2, [r7, #4]
 80008d0:	883b      	ldrh	r3, [r7, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d201      	bcs.n	80008da <Paint_DrawLine+0x96>
 80008d6:	2301      	movs	r3, #1
 80008d8:	e001      	b.n	80008de <Paint_DrawLine+0x9a>
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
 80008de:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	4413      	add	r3, r2
 80008e6:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 80008ec:	7ffb      	ldrb	r3, [r7, #31]
 80008ee:	3301      	adds	r3, #1
 80008f0:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 80008f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d118      	bne.n	800092c <Paint_DrawLine+0xe8>
 80008fa:	7ffa      	ldrb	r2, [r7, #31]
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <Paint_DrawLine+0x158>)
 80008fe:	fba3 1302 	umull	r1, r3, r3, r2
 8000902:	0859      	lsrs	r1, r3, #1
 8000904:	460b      	mov	r3, r1
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	440b      	add	r3, r1
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d10c      	bne.n	800092c <Paint_DrawLine+0xe8>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 8000912:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000916:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000918:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800091a:	2201      	movs	r2, #1
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000922:	f7ff fef7 	bl	8000714 <Paint_DrawPoint>
            Dotted_Len = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	77fb      	strb	r3, [r7, #31]
 800092a:	e008      	b.n	800093e <Paint_DrawLine+0xfa>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800092c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000930:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000932:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8000934:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8000936:	2401      	movs	r4, #1
 8000938:	9400      	str	r4, [sp, #0]
 800093a:	f7ff feeb 	bl	8000714 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	dc0c      	bgt.n	8000962 <Paint_DrawLine+0x11e>
            if (Xpoint == Xend)
 8000948:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	429a      	cmp	r2, r3
 800094e:	d01d      	beq.n	800098c <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 8000950:	6a3a      	ldr	r2, [r7, #32]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	4413      	add	r3, r2
 8000956:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	b29a      	uxth	r2, r3
 800095c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800095e:	4413      	add	r3, r2
 8000960:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbbf      	blt.n	80008ec <Paint_DrawLine+0xa8>
            if (Ypoint == Yend)
 800096c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800096e:	883b      	ldrh	r3, [r7, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d00d      	beq.n	8000990 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 8000974:	6a3a      	ldr	r2, [r7, #32]
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	4413      	add	r3, r2
 800097a:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	b29a      	uxth	r2, r3
 8000980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000982:	4413      	add	r3, r2
 8000984:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 8000986:	e7b1      	b.n	80008ec <Paint_DrawLine+0xa8>
        return;
 8000988:	bf00      	nop
 800098a:	e002      	b.n	8000992 <Paint_DrawLine+0x14e>
                break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <Paint_DrawLine+0x14e>
                break;
 8000990:	bf00      	nop
        }
    }
}
 8000992:	372c      	adds	r7, #44	; 0x2c
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000030 	.word	0x20000030
 800099c:	aaaaaaab 	.word	0xaaaaaaab

080009a0 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b087      	sub	sp, #28
 80009a4:	af02      	add	r7, sp, #8
 80009a6:	4604      	mov	r4, r0
 80009a8:	4608      	mov	r0, r1
 80009aa:	4611      	mov	r1, r2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4623      	mov	r3, r4
 80009b0:	80fb      	strh	r3, [r7, #6]
 80009b2:	4603      	mov	r3, r0
 80009b4:	80bb      	strh	r3, [r7, #4]
 80009b6:	460b      	mov	r3, r1
 80009b8:	807b      	strh	r3, [r7, #2]
 80009ba:	4613      	mov	r3, r2
 80009bc:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 80009be:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <Paint_DrawCircle+0x1bc>)
 80009c0:	889b      	ldrh	r3, [r3, #4]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	88fa      	ldrh	r2, [r7, #6]
 80009c6:	429a      	cmp	r2, r3
 80009c8:	f200 8172 	bhi.w	8000cb0 <Paint_DrawCircle+0x310>
 80009cc:	4b63      	ldr	r3, [pc, #396]	; (8000b5c <Paint_DrawCircle+0x1bc>)
 80009ce:	88db      	ldrh	r3, [r3, #6]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	f080 816b 	bcs.w	8000cb0 <Paint_DrawCircle+0x310>
        return;
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	f1c3 0303 	rsb	r3, r3, #3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 80009f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	f040 8153 	bne.w	8000ca0 <Paint_DrawCircle+0x300>
        while (XCurrent <= YCurrent ) { //Realistic circles
 80009fa:	e0a6      	b.n	8000b4a <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	813b      	strh	r3, [r7, #8]
 8000a00:	e075      	b.n	8000aee <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 8000a02:	89fa      	ldrh	r2, [r7, #14]
 8000a04:	88fb      	ldrh	r3, [r7, #6]
 8000a06:	4413      	add	r3, r2
 8000a08:	b298      	uxth	r0, r3
 8000a0a:	893a      	ldrh	r2, [r7, #8]
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b299      	uxth	r1, r3
 8000a12:	883a      	ldrh	r2, [r7, #0]
 8000a14:	2301      	movs	r3, #1
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	f7ff fe7b 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 8000a1e:	89fb      	ldrh	r3, [r7, #14]
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b298      	uxth	r0, r3
 8000a26:	893a      	ldrh	r2, [r7, #8]
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b299      	uxth	r1, r3
 8000a2e:	883a      	ldrh	r2, [r7, #0]
 8000a30:	2301      	movs	r3, #1
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	f7ff fe6d 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 8000a3a:	893b      	ldrh	r3, [r7, #8]
 8000a3c:	88fa      	ldrh	r2, [r7, #6]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	b298      	uxth	r0, r3
 8000a42:	89fa      	ldrh	r2, [r7, #14]
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	b299      	uxth	r1, r3
 8000a4a:	883a      	ldrh	r2, [r7, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	f7ff fe5f 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 8000a56:	893b      	ldrh	r3, [r7, #8]
 8000a58:	88fa      	ldrh	r2, [r7, #6]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	b298      	uxth	r0, r3
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	88ba      	ldrh	r2, [r7, #4]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	b299      	uxth	r1, r3
 8000a66:	883a      	ldrh	r2, [r7, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f7ff fe51 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	88fa      	ldrh	r2, [r7, #6]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b298      	uxth	r0, r3
 8000a7a:	893b      	ldrh	r3, [r7, #8]
 8000a7c:	88ba      	ldrh	r2, [r7, #4]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b299      	uxth	r1, r3
 8000a82:	883a      	ldrh	r2, [r7, #0]
 8000a84:	2301      	movs	r3, #1
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f7ff fe43 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 8000a8e:	89fa      	ldrh	r2, [r7, #14]
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4413      	add	r3, r2
 8000a94:	b298      	uxth	r0, r3
 8000a96:	893b      	ldrh	r3, [r7, #8]
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	883a      	ldrh	r2, [r7, #0]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f7ff fe35 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 8000aaa:	893a      	ldrh	r2, [r7, #8]
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b298      	uxth	r0, r3
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	88ba      	ldrh	r2, [r7, #4]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	b299      	uxth	r1, r3
 8000aba:	883a      	ldrh	r2, [r7, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f7ff fe27 	bl	8000714 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 8000ac6:	893a      	ldrh	r2, [r7, #8]
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	4413      	add	r3, r2
 8000acc:	b298      	uxth	r0, r3
 8000ace:	89fa      	ldrh	r2, [r7, #14]
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b299      	uxth	r1, r3
 8000ad6:	883a      	ldrh	r2, [r7, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	f7ff fe19 	bl	8000714 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 8000ae2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	813b      	strh	r3, [r7, #8]
 8000aee:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000af2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dd83      	ble.n	8000a02 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 8000afa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da09      	bge.n	8000b16 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 8000b02:	89fb      	ldrh	r3, [r7, #14]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	3306      	adds	r3, #6
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	817b      	strh	r3, [r7, #10]
 8000b14:	e013      	b.n	8000b3e <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000b16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	897b      	ldrh	r3, [r7, #10]
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	330a      	adds	r3, #10
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8000b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8000b3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3301      	adds	r3, #1
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 8000b4a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	f77f af52 	ble.w	80009fc <Paint_DrawCircle+0x5c>
 8000b58:	e0ab      	b.n	8000cb2 <Paint_DrawCircle+0x312>
 8000b5a:	bf00      	nop
 8000b5c:	20000030 	.word	0x20000030
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 8000b60:	89fa      	ldrh	r2, [r7, #14]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4413      	add	r3, r2
 8000b66:	b298      	uxth	r0, r3
 8000b68:	89ba      	ldrh	r2, [r7, #12]
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b299      	uxth	r1, r3
 8000b70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b74:	883a      	ldrh	r2, [r7, #0]
 8000b76:	2401      	movs	r4, #1
 8000b78:	9400      	str	r4, [sp, #0]
 8000b7a:	f7ff fdcb 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 8000b7e:	89fb      	ldrh	r3, [r7, #14]
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b298      	uxth	r0, r3
 8000b86:	89ba      	ldrh	r2, [r7, #12]
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b299      	uxth	r1, r3
 8000b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b92:	883a      	ldrh	r2, [r7, #0]
 8000b94:	2401      	movs	r4, #1
 8000b96:	9400      	str	r4, [sp, #0]
 8000b98:	f7ff fdbc 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 8000b9c:	89bb      	ldrh	r3, [r7, #12]
 8000b9e:	88fa      	ldrh	r2, [r7, #6]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	89fa      	ldrh	r2, [r7, #14]
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b299      	uxth	r1, r3
 8000bac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb0:	883a      	ldrh	r2, [r7, #0]
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	9400      	str	r4, [sp, #0]
 8000bb6:	f7ff fdad 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 8000bba:	89bb      	ldrh	r3, [r7, #12]
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	88ba      	ldrh	r2, [r7, #4]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	b299      	uxth	r1, r3
 8000bca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	2401      	movs	r4, #1
 8000bd2:	9400      	str	r4, [sp, #0]
 8000bd4:	f7ff fd9e 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	88fa      	ldrh	r2, [r7, #6]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	b298      	uxth	r0, r3
 8000be0:	89bb      	ldrh	r3, [r7, #12]
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	b299      	uxth	r1, r3
 8000be8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bec:	883a      	ldrh	r2, [r7, #0]
 8000bee:	2401      	movs	r4, #1
 8000bf0:	9400      	str	r4, [sp, #0]
 8000bf2:	f7ff fd8f 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 8000bf6:	89fa      	ldrh	r2, [r7, #14]
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	89bb      	ldrh	r3, [r7, #12]
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	b299      	uxth	r1, r3
 8000c06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c0a:	883a      	ldrh	r2, [r7, #0]
 8000c0c:	2401      	movs	r4, #1
 8000c0e:	9400      	str	r4, [sp, #0]
 8000c10:	f7ff fd80 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 8000c14:	89ba      	ldrh	r2, [r7, #12]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4413      	add	r3, r2
 8000c1a:	b298      	uxth	r0, r3
 8000c1c:	89fb      	ldrh	r3, [r7, #14]
 8000c1e:	88ba      	ldrh	r2, [r7, #4]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b299      	uxth	r1, r3
 8000c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c28:	883a      	ldrh	r2, [r7, #0]
 8000c2a:	2401      	movs	r4, #1
 8000c2c:	9400      	str	r4, [sp, #0]
 8000c2e:	f7ff fd71 	bl	8000714 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 8000c32:	89ba      	ldrh	r2, [r7, #12]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4413      	add	r3, r2
 8000c38:	b298      	uxth	r0, r3
 8000c3a:	89fa      	ldrh	r2, [r7, #14]
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	b299      	uxth	r1, r3
 8000c42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c46:	883a      	ldrh	r2, [r7, #0]
 8000c48:	2401      	movs	r4, #1
 8000c4a:	9400      	str	r4, [sp, #0]
 8000c4c:	f7ff fd62 	bl	8000714 <Paint_DrawPoint>

            if (Esp < 0 )
 8000c50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da09      	bge.n	8000c6c <Paint_DrawCircle+0x2cc>
                Esp += 4 * XCurrent + 6;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	897b      	ldrh	r3, [r7, #10]
 8000c60:	4413      	add	r3, r2
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	3306      	adds	r3, #6
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	817b      	strh	r3, [r7, #10]
 8000c6a:	e013      	b.n	8000c94 <Paint_DrawCircle+0x2f4>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8000c6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	897b      	ldrh	r3, [r7, #10]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	330a      	adds	r3, #10
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 8000c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 8000c94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 8000ca0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ca4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	f77f af59 	ble.w	8000b60 <Paint_DrawCircle+0x1c0>
 8000cae:	e000      	b.n	8000cb2 <Paint_DrawCircle+0x312>
        return;
 8000cb0:	bf00      	nop
        }
    }
}
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}

08000cb8 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	81fb      	strh	r3, [r7, #14]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	81bb      	strh	r3, [r7, #12]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000ccc:	4b4e      	ldr	r3, [pc, #312]	; (8000e08 <Paint_DrawChar+0x150>)
 8000cce:	889b      	ldrh	r3, [r3, #4]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	89fa      	ldrh	r2, [r7, #14]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f200 8092 	bhi.w	8000dfe <Paint_DrawChar+0x146>
 8000cda:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <Paint_DrawChar+0x150>)
 8000cdc:	88db      	ldrh	r3, [r3, #6]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	89ba      	ldrh	r2, [r7, #12]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	f200 808b 	bhi.w	8000dfe <Paint_DrawChar+0x146>
        //Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	3b20      	subs	r3, #32
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	88d2      	ldrh	r2, [r2, #6]
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	8892      	ldrh	r2, [r2, #4]
 8000cf8:	08d2      	lsrs	r2, r2, #3
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	8892      	ldrh	r2, [r2, #4]
 8000d02:	f002 0207 	and.w	r2, r2, #7
 8000d06:	b292      	uxth	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	bf14      	ite	ne
 8000d0c:	2201      	movne	r2, #1
 8000d0e:	2200      	moveq	r2, #0
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440a      	add	r2, r1
 8000d14:	fb02 f303 	mul.w	r3, r2, r3
 8000d18:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	4413      	add	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	83fb      	strh	r3, [r7, #30]
 8000d28:	e063      	b.n	8000df2 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	83bb      	strh	r3, [r7, #28]
 8000d2e:	e04e      	b.n	8000dce <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8000d30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d118      	bne.n	8000d6c <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	8bbb      	ldrh	r3, [r7, #28]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	fa42 f303 	asr.w	r3, r2, r3
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d031      	beq.n	8000db6 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000d52:	89fa      	ldrh	r2, [r7, #14]
 8000d54:	8bbb      	ldrh	r3, [r7, #28]
 8000d56:	4413      	add	r3, r2
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	89ba      	ldrh	r2, [r7, #12]
 8000d5c:	8bfb      	ldrh	r3, [r7, #30]
 8000d5e:	4413      	add	r3, r2
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	f7ff fc19 	bl	800059c <Paint_SetPixel>
 8000d6a:	e024      	b.n	8000db6 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	8bbb      	ldrh	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	2280      	movs	r2, #128	; 0x80
 8000d7a:	fa42 f303 	asr.w	r3, r2, r3
 8000d7e:	400b      	ands	r3, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00c      	beq.n	8000d9e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000d84:	89fa      	ldrh	r2, [r7, #14]
 8000d86:	8bbb      	ldrh	r3, [r7, #28]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b298      	uxth	r0, r3
 8000d8c:	89ba      	ldrh	r2, [r7, #12]
 8000d8e:	8bfb      	ldrh	r3, [r7, #30]
 8000d90:	4413      	add	r3, r2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff fc00 	bl	800059c <Paint_SetPixel>
 8000d9c:	e00b      	b.n	8000db6 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	8bbb      	ldrh	r3, [r7, #28]
 8000da2:	4413      	add	r3, r2
 8000da4:	b298      	uxth	r0, r3
 8000da6:	89ba      	ldrh	r2, [r7, #12]
 8000da8:	8bfb      	ldrh	r3, [r7, #30]
 8000daa:	4413      	add	r3, r2
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff fbf3 	bl	800059c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8000db6:	8bbb      	ldrh	r3, [r7, #28]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	d102      	bne.n	8000dc8 <Paint_DrawChar+0x110>
                ptr++;
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8000dc8:	8bbb      	ldrh	r3, [r7, #28]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	83bb      	strh	r3, [r7, #28]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	889b      	ldrh	r3, [r3, #4]
 8000dd2:	8bba      	ldrh	r2, [r7, #28]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d3ab      	bcc.n	8000d30 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	889b      	ldrh	r3, [r3, #4]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <Paint_DrawChar+0x134>
            ptr++;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3301      	adds	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8000dec:	8bfb      	ldrh	r3, [r7, #30]
 8000dee:	3301      	adds	r3, #1
 8000df0:	83fb      	strh	r3, [r7, #30]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	88db      	ldrh	r3, [r3, #6]
 8000df6:	8bfa      	ldrh	r2, [r7, #30]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d396      	bcc.n	8000d2a <Paint_DrawChar+0x72>
 8000dfc:	e000      	b.n	8000e00 <Paint_DrawChar+0x148>
        return;
 8000dfe:	bf00      	nop
    }// Write all
}
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000030 	.word	0x20000030

08000e0c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	60ba      	str	r2, [r7, #8]
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4603      	mov	r3, r0
 8000e18:	81fb      	strh	r3, [r7, #14]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e28:	889b      	ldrh	r3, [r3, #4]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	89fa      	ldrh	r2, [r7, #14]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d83b      	bhi.n	8000eaa <Paint_DrawString_EN+0x9e>
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e34:	88db      	ldrh	r3, [r3, #6]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	89ba      	ldrh	r2, [r7, #12]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d835      	bhi.n	8000eaa <Paint_DrawString_EN+0x9e>
        //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8000e3e:	e02f      	b.n	8000ea0 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8000e40:	8afb      	ldrh	r3, [r7, #22]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	8892      	ldrh	r2, [r2, #4]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e4a:	8892      	ldrh	r2, [r2, #4]
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	dd06      	ble.n	8000e60 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8000e52:	89fb      	ldrh	r3, [r7, #14]
 8000e54:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	88da      	ldrh	r2, [r3, #6]
 8000e5a:	8abb      	ldrh	r3, [r7, #20]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8000e60:	8abb      	ldrh	r3, [r7, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	88d2      	ldrh	r2, [r2, #6]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <Paint_DrawString_EN+0xa8>)
 8000e6a:	88d2      	ldrh	r2, [r2, #6]
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	dd03      	ble.n	8000e7a <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8000e72:	89fb      	ldrh	r3, [r7, #14]
 8000e74:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8000e76:	89bb      	ldrh	r3, [r7, #12]
 8000e78:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	781a      	ldrb	r2, [r3, #0]
 8000e7e:	8ab9      	ldrh	r1, [r7, #20]
 8000e80:	8af8      	ldrh	r0, [r7, #22]
 8000e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	8c3b      	ldrh	r3, [r7, #32]
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f7ff ff14 	bl	8000cb8 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3301      	adds	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	889a      	ldrh	r2, [r3, #4]
 8000e9a:	8afb      	ldrh	r3, [r7, #22]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1cb      	bne.n	8000e40 <Paint_DrawString_EN+0x34>
 8000ea8:	e000      	b.n	8000eac <Paint_DrawString_EN+0xa0>
        return;
 8000eaa:	bf00      	nop
    }
}
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000030 	.word	0x20000030

08000eb8 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	817b      	strh	r3, [r7, #10]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	813b      	strh	r3, [r7, #8]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	e049      	b.n	8000f6c <Paint_DrawImage+0xb4>
			for(i = 0; i < W_Image; i++){
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e03f      	b.n	8000f5e <Paint_DrawImage+0xa6>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8000ede:	897a      	ldrh	r2, [r7, #10]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <Paint_DrawImage+0xc8>)
 8000ee6:	8912      	ldrh	r2, [r2, #8]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	da34      	bge.n	8000f58 <Paint_DrawImage+0xa0>
 8000eee:	893a      	ldrh	r2, [r7, #8]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <Paint_DrawImage+0xc8>)
 8000ef6:	8952      	ldrh	r2, [r2, #10]
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	4293      	cmp	r3, r2
 8000efc:	da2c      	bge.n	8000f58 <Paint_DrawImage+0xa0>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	897b      	ldrh	r3, [r7, #10]
 8000f04:	4413      	add	r3, r2
 8000f06:	b298      	uxth	r0, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	893b      	ldrh	r3, [r7, #8]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29c      	uxth	r4, r3
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	fb02 f303 	mul.w	r3, r2, r3
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	3301      	adds	r3, #1
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	fb01 f303 	mul.w	r3, r1, r3
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	440b      	add	r3, r1
 8000f42:	68f9      	ldr	r1, [r7, #12]
 8000f44:	440b      	add	r3, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	4621      	mov	r1, r4
 8000f54:	f7ff fb22 	bl	800059c <Paint_SetPixel>
			for(i = 0; i < W_Image; i++){
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dbbb      	blt.n	8000ede <Paint_DrawImage+0x26>
		for(j = 0; j < H_Image; j++){
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dbb1      	blt.n	8000ed8 <Paint_DrawImage+0x20>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000030 	.word	0x20000030

08000f84 <Module_Init>:
/******************************************************************************
function :	Start hardware
parameter:
******************************************************************************/
int Module_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <Module_Init+0x34>)
 8000f8e:	f001 fae3 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2110      	movs	r1, #16
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <Module_Init+0x38>)
 8000f98:	f001 fade 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <Module_Init+0x38>)
 8000fa2:	f001 fad9 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2102      	movs	r1, #2
 8000faa:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <Module_Init+0x34>)
 8000fac:	f001 fad4 	bl	8002558 <HAL_GPIO_WritePin>
	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020400 	.word	0x40020400
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <Module_Exit>:
/******************************************************************************
function :	Exit hardware
parameter:
******************************************************************************/
void Module_Exit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <Module_Exit+0x30>)
 8000fca:	f001 fac5 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <Module_Exit+0x30>)
 8000fd4:	f001 fac0 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <Module_Exit+0x34>)
 8000fde:	f001 fabb 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <Module_Exit+0x34>)
 8000fe8:	f001 fab6 	bl	8002558 <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <LCD_1IN28_Reset+0x38>)
 8001002:	f001 faa9 	bl	8002558 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001006:	2064      	movs	r0, #100	; 0x64
 8001008:	f001 f800 	bl	800200c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <LCD_1IN28_Reset+0x38>)
 8001012:	f001 faa1 	bl	8002558 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f000 fff8 	bl	800200c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800101c:	2201      	movs	r2, #1
 800101e:	2101      	movs	r1, #1
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <LCD_1IN28_Reset+0x38>)
 8001022:	f001 fa99 	bl	8002558 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f000 fff0 	bl	800200c <HAL_Delay>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40020400 	.word	0x40020400

08001034 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2120      	movs	r1, #32
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <LCD_1IN28_SendCommand+0x40>)
 8001044:	f001 fa88 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2110      	movs	r1, #16
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <LCD_1IN28_SendCommand+0x40>)
 800104e:	f001 fa83 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Reg, 1, 500);
 8001052:	1df9      	adds	r1, r7, #7
 8001054:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001058:	2201      	movs	r2, #1
 800105a:	4807      	ldr	r0, [pc, #28]	; (8001078 <LCD_1IN28_SendCommand+0x44>)
 800105c:	f001 ffb7 	bl	8002fce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <LCD_1IN28_SendCommand+0x40>)
 8001066:	f001 fa77 	bl	8002558 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40020800 	.word	0x40020800
 8001078:	20000058 	.word	0x20000058

0800107c <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2120      	movs	r1, #32
 800108a:	480c      	ldr	r0, [pc, #48]	; (80010bc <LCD_1IN28_SendData_8Bit+0x40>)
 800108c:	f001 fa64 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	4809      	ldr	r0, [pc, #36]	; (80010bc <LCD_1IN28_SendData_8Bit+0x40>)
 8001096:	f001 fa5f 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 800109a:	1df9      	adds	r1, r7, #7
 800109c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010a0:	2201      	movs	r2, #1
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <LCD_1IN28_SendData_8Bit+0x44>)
 80010a4:	f001 ff93 	bl	8002fce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <LCD_1IN28_SendData_8Bit+0x40>)
 80010ae:	f001 fa53 	bl	8002558 <HAL_GPIO_WritePin>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020800 	.word	0x40020800
 80010c0:	20000058 	.word	0x20000058

080010c4 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
	uint8_t data1 = Data >> 8;
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	480f      	ldr	r0, [pc, #60]	; (800111c <LCD_1IN28_SendData_16Bit+0x58>)
 80010de:	f001 fa3b 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <LCD_1IN28_SendData_16Bit+0x58>)
 80010e8:	f001 fa36 	bl	8002558 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data1, 1, 500);
 80010ec:	f107 010f 	add.w	r1, r7, #15
 80010f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f4:	2201      	movs	r2, #1
 80010f6:	480a      	ldr	r0, [pc, #40]	; (8001120 <LCD_1IN28_SendData_16Bit+0x5c>)
 80010f8:	f001 ff69 	bl	8002fce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 80010fc:	1db9      	adds	r1, r7, #6
 80010fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001102:	2201      	movs	r2, #1
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <LCD_1IN28_SendData_16Bit+0x5c>)
 8001106:	f001 ff62 	bl	8002fce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2110      	movs	r1, #16
 800110e:	4803      	ldr	r0, [pc, #12]	; (800111c <LCD_1IN28_SendData_16Bit+0x58>)
 8001110:	f001 fa22 	bl	8002558 <HAL_GPIO_WritePin>
}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020800 	.word	0x40020800
 8001120:	20000058 	.word	0x20000058

08001124 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0xEF);
 8001128:	20ef      	movs	r0, #239	; 0xef
 800112a:	f7ff ff83 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800112e:	20eb      	movs	r0, #235	; 0xeb
 8001130:	f7ff ff80 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001134:	2014      	movs	r0, #20
 8001136:	f7ff ffa1 	bl	800107c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xFE);
 800113a:	20fe      	movs	r0, #254	; 0xfe
 800113c:	f7ff ff7a 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 8001140:	20ef      	movs	r0, #239	; 0xef
 8001142:	f7ff ff77 	bl	8001034 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8001146:	20eb      	movs	r0, #235	; 0xeb
 8001148:	f7ff ff74 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 800114c:	2014      	movs	r0, #20
 800114e:	f7ff ff95 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 8001152:	2084      	movs	r0, #132	; 0x84
 8001154:	f7ff ff6e 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8001158:	2040      	movs	r0, #64	; 0x40
 800115a:	f7ff ff8f 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 800115e:	2085      	movs	r0, #133	; 0x85
 8001160:	f7ff ff68 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001164:	20ff      	movs	r0, #255	; 0xff
 8001166:	f7ff ff89 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 800116a:	2086      	movs	r0, #134	; 0x86
 800116c:	f7ff ff62 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001170:	20ff      	movs	r0, #255	; 0xff
 8001172:	f7ff ff83 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8001176:	2087      	movs	r0, #135	; 0x87
 8001178:	f7ff ff5c 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 800117c:	20ff      	movs	r0, #255	; 0xff
 800117e:	f7ff ff7d 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 8001182:	2088      	movs	r0, #136	; 0x88
 8001184:	f7ff ff56 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001188:	200a      	movs	r0, #10
 800118a:	f7ff ff77 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 800118e:	2089      	movs	r0, #137	; 0x89
 8001190:	f7ff ff50 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8001194:	2021      	movs	r0, #33	; 0x21
 8001196:	f7ff ff71 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 800119a:	208a      	movs	r0, #138	; 0x8a
 800119c:	f7ff ff4a 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff6b 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 80011a6:	208b      	movs	r0, #139	; 0x8b
 80011a8:	f7ff ff44 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 80011ac:	2080      	movs	r0, #128	; 0x80
 80011ae:	f7ff ff65 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 80011b2:	208c      	movs	r0, #140	; 0x8c
 80011b4:	f7ff ff3e 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff ff5f 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 80011be:	208d      	movs	r0, #141	; 0x8d
 80011c0:	f7ff ff38 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ff59 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 80011ca:	208e      	movs	r0, #142	; 0x8e
 80011cc:	f7ff ff32 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80011d0:	20ff      	movs	r0, #255	; 0xff
 80011d2:	f7ff ff53 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 80011d6:	208f      	movs	r0, #143	; 0x8f
 80011d8:	f7ff ff2c 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80011dc:	20ff      	movs	r0, #255	; 0xff
 80011de:	f7ff ff4d 	bl	800107c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80011e2:	20b6      	movs	r0, #182	; 0xb6
 80011e4:	f7ff ff26 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff ff47 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80011ee:	2020      	movs	r0, #32
 80011f0:	f7ff ff44 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80011f4:	2036      	movs	r0, #54	; 0x36
 80011f6:	f7ff ff1d 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 80011fa:	2008      	movs	r0, #8
 80011fc:	f7ff ff3e 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 8001200:	203a      	movs	r0, #58	; 0x3a
 8001202:	f7ff ff17 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 8001206:	2005      	movs	r0, #5
 8001208:	f7ff ff38 	bl	800107c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 800120c:	2090      	movs	r0, #144	; 0x90
 800120e:	f7ff ff11 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 8001212:	2008      	movs	r0, #8
 8001214:	f7ff ff32 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001218:	2008      	movs	r0, #8
 800121a:	f7ff ff2f 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 800121e:	2008      	movs	r0, #8
 8001220:	f7ff ff2c 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001224:	2008      	movs	r0, #8
 8001226:	f7ff ff29 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 800122a:	20bd      	movs	r0, #189	; 0xbd
 800122c:	f7ff ff02 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 8001230:	2006      	movs	r0, #6
 8001232:	f7ff ff23 	bl	800107c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8001236:	20bc      	movs	r0, #188	; 0xbc
 8001238:	f7ff fefc 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ff1d 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 8001242:	20ff      	movs	r0, #255	; 0xff
 8001244:	f7ff fef6 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001248:	2060      	movs	r0, #96	; 0x60
 800124a:	f7ff ff17 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff ff14 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001254:	2004      	movs	r0, #4
 8001256:	f7ff ff11 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 800125a:	20c3      	movs	r0, #195	; 0xc3
 800125c:	f7ff feea 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001260:	2013      	movs	r0, #19
 8001262:	f7ff ff0b 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8001266:	20c4      	movs	r0, #196	; 0xc4
 8001268:	f7ff fee4 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 800126c:	2013      	movs	r0, #19
 800126e:	f7ff ff05 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 8001272:	20c9      	movs	r0, #201	; 0xc9
 8001274:	f7ff fede 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001278:	2022      	movs	r0, #34	; 0x22
 800127a:	f7ff feff 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 800127e:	20be      	movs	r0, #190	; 0xbe
 8001280:	f7ff fed8 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8001284:	2011      	movs	r0, #17
 8001286:	f7ff fef9 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 800128a:	20e1      	movs	r0, #225	; 0xe1
 800128c:	f7ff fed2 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 8001290:	2010      	movs	r0, #16
 8001292:	f7ff fef3 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001296:	200e      	movs	r0, #14
 8001298:	f7ff fef0 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 800129c:	20df      	movs	r0, #223	; 0xdf
 800129e:	f7ff fec9 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 80012a2:	2021      	movs	r0, #33	; 0x21
 80012a4:	f7ff feea 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 80012a8:	200c      	movs	r0, #12
 80012aa:	f7ff fee7 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 80012ae:	2002      	movs	r0, #2
 80012b0:	f7ff fee4 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 80012b4:	20f0      	movs	r0, #240	; 0xf0
 80012b6:	f7ff febd 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 80012ba:	2045      	movs	r0, #69	; 0x45
 80012bc:	f7ff fede 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80012c0:	2009      	movs	r0, #9
 80012c2:	f7ff fedb 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80012c6:	2008      	movs	r0, #8
 80012c8:	f7ff fed8 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80012cc:	2008      	movs	r0, #8
 80012ce:	f7ff fed5 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 80012d2:	2026      	movs	r0, #38	; 0x26
 80012d4:	f7ff fed2 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80012d8:	202a      	movs	r0, #42	; 0x2a
 80012da:	f7ff fecf 	bl	800107c <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 80012de:	20f1      	movs	r0, #241	; 0xf1
 80012e0:	f7ff fea8 	bl	8001034 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80012e4:	2043      	movs	r0, #67	; 0x43
 80012e6:	f7ff fec9 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80012ea:	2070      	movs	r0, #112	; 0x70
 80012ec:	f7ff fec6 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80012f0:	2072      	movs	r0, #114	; 0x72
 80012f2:	f7ff fec3 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80012f6:	2036      	movs	r0, #54	; 0x36
 80012f8:	f7ff fec0 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 80012fc:	2037      	movs	r0, #55	; 0x37
 80012fe:	f7ff febd 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001302:	206f      	movs	r0, #111	; 0x6f
 8001304:	f7ff feba 	bl	800107c <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 8001308:	20f2      	movs	r0, #242	; 0xf2
 800130a:	f7ff fe93 	bl	8001034 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 800130e:	2045      	movs	r0, #69	; 0x45
 8001310:	f7ff feb4 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 8001314:	2009      	movs	r0, #9
 8001316:	f7ff feb1 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 800131a:	2008      	movs	r0, #8
 800131c:	f7ff feae 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 8001320:	2008      	movs	r0, #8
 8001322:	f7ff feab 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001326:	2026      	movs	r0, #38	; 0x26
 8001328:	f7ff fea8 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 800132c:	202a      	movs	r0, #42	; 0x2a
 800132e:	f7ff fea5 	bl	800107c <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 8001332:	20f3      	movs	r0, #243	; 0xf3
 8001334:	f7ff fe7e 	bl	8001034 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001338:	2043      	movs	r0, #67	; 0x43
 800133a:	f7ff fe9f 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 800133e:	2070      	movs	r0, #112	; 0x70
 8001340:	f7ff fe9c 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001344:	2072      	movs	r0, #114	; 0x72
 8001346:	f7ff fe99 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 800134a:	2036      	movs	r0, #54	; 0x36
 800134c:	f7ff fe96 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 8001350:	2037      	movs	r0, #55	; 0x37
 8001352:	f7ff fe93 	bl	800107c <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001356:	206f      	movs	r0, #111	; 0x6f
 8001358:	f7ff fe90 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 800135c:	20ed      	movs	r0, #237	; 0xed
 800135e:	f7ff fe69 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 8001362:	201b      	movs	r0, #27
 8001364:	f7ff fe8a 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001368:	200b      	movs	r0, #11
 800136a:	f7ff fe87 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 800136e:	20ae      	movs	r0, #174	; 0xae
 8001370:	f7ff fe60 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001374:	2077      	movs	r0, #119	; 0x77
 8001376:	f7ff fe81 	bl	800107c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 800137a:	20cd      	movs	r0, #205	; 0xcd
 800137c:	f7ff fe5a 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 8001380:	2063      	movs	r0, #99	; 0x63
 8001382:	f7ff fe7b 	bl	800107c <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8001386:	2070      	movs	r0, #112	; 0x70
 8001388:	f7ff fe54 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 800138c:	2007      	movs	r0, #7
 800138e:	f7ff fe75 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001392:	2007      	movs	r0, #7
 8001394:	f7ff fe72 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff fe6f 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 800139e:	200e      	movs	r0, #14
 80013a0:	f7ff fe6c 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 80013a4:	200f      	movs	r0, #15
 80013a6:	f7ff fe69 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 80013aa:	2009      	movs	r0, #9
 80013ac:	f7ff fe66 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 80013b0:	2007      	movs	r0, #7
 80013b2:	f7ff fe63 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80013b6:	2008      	movs	r0, #8
 80013b8:	f7ff fe60 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 80013bc:	2003      	movs	r0, #3
 80013be:	f7ff fe5d 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 80013c2:	20e8      	movs	r0, #232	; 0xe8
 80013c4:	f7ff fe36 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 80013c8:	2034      	movs	r0, #52	; 0x34
 80013ca:	f7ff fe57 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 80013ce:	2062      	movs	r0, #98	; 0x62
 80013d0:	f7ff fe30 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80013d4:	2018      	movs	r0, #24
 80013d6:	f7ff fe51 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80013da:	200d      	movs	r0, #13
 80013dc:	f7ff fe4e 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80013e0:	2071      	movs	r0, #113	; 0x71
 80013e2:	f7ff fe4b 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 80013e6:	20ed      	movs	r0, #237	; 0xed
 80013e8:	f7ff fe48 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80013ec:	2070      	movs	r0, #112	; 0x70
 80013ee:	f7ff fe45 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80013f2:	2070      	movs	r0, #112	; 0x70
 80013f4:	f7ff fe42 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80013f8:	2018      	movs	r0, #24
 80013fa:	f7ff fe3f 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff fe3c 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001404:	2071      	movs	r0, #113	; 0x71
 8001406:	f7ff fe39 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 800140a:	20ef      	movs	r0, #239	; 0xef
 800140c:	f7ff fe36 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001410:	2070      	movs	r0, #112	; 0x70
 8001412:	f7ff fe33 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001416:	2070      	movs	r0, #112	; 0x70
 8001418:	f7ff fe30 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 800141c:	2063      	movs	r0, #99	; 0x63
 800141e:	f7ff fe09 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 8001422:	2018      	movs	r0, #24
 8001424:	f7ff fe2a 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001428:	2011      	movs	r0, #17
 800142a:	f7ff fe27 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800142e:	2071      	movs	r0, #113	; 0x71
 8001430:	f7ff fe24 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001434:	20f1      	movs	r0, #241	; 0xf1
 8001436:	f7ff fe21 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800143a:	2070      	movs	r0, #112	; 0x70
 800143c:	f7ff fe1e 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001440:	2070      	movs	r0, #112	; 0x70
 8001442:	f7ff fe1b 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001446:	2018      	movs	r0, #24
 8001448:	f7ff fe18 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 800144c:	2013      	movs	r0, #19
 800144e:	f7ff fe15 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 8001452:	2071      	movs	r0, #113	; 0x71
 8001454:	f7ff fe12 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001458:	20f3      	movs	r0, #243	; 0xf3
 800145a:	f7ff fe0f 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800145e:	2070      	movs	r0, #112	; 0x70
 8001460:	f7ff fe0c 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001464:	2070      	movs	r0, #112	; 0x70
 8001466:	f7ff fe09 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f7ff fde2 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 8001470:	2028      	movs	r0, #40	; 0x28
 8001472:	f7ff fe03 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001476:	2029      	movs	r0, #41	; 0x29
 8001478:	f7ff fe00 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 800147c:	20f1      	movs	r0, #241	; 0xf1
 800147e:	f7ff fdfd 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff fdfa 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001488:	20f1      	movs	r0, #241	; 0xf1
 800148a:	f7ff fdf7 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fdf4 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001494:	2007      	movs	r0, #7
 8001496:	f7ff fdf1 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 800149a:	2066      	movs	r0, #102	; 0x66
 800149c:	f7ff fdca 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 80014a0:	203c      	movs	r0, #60	; 0x3c
 80014a2:	f7ff fdeb 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fde8 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 80014ac:	20cd      	movs	r0, #205	; 0xcd
 80014ae:	f7ff fde5 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 80014b2:	2067      	movs	r0, #103	; 0x67
 80014b4:	f7ff fde2 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80014b8:	2045      	movs	r0, #69	; 0x45
 80014ba:	f7ff fddf 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 80014be:	2045      	movs	r0, #69	; 0x45
 80014c0:	f7ff fddc 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80014c4:	2010      	movs	r0, #16
 80014c6:	f7ff fdd9 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fdd6 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff fdd3 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fdd0 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80014dc:	2067      	movs	r0, #103	; 0x67
 80014de:	f7ff fda9 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fdca 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80014e8:	203c      	movs	r0, #60	; 0x3c
 80014ea:	f7ff fdc7 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff fdc4 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fdc1 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff fdbe 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fdbb 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 8001506:	2054      	movs	r0, #84	; 0x54
 8001508:	f7ff fdb8 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 800150c:	2010      	movs	r0, #16
 800150e:	f7ff fdb5 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 8001512:	2032      	movs	r0, #50	; 0x32
 8001514:	f7ff fdb2 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 8001518:	2098      	movs	r0, #152	; 0x98
 800151a:	f7ff fdaf 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 800151e:	2074      	movs	r0, #116	; 0x74
 8001520:	f7ff fd88 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8001524:	2010      	movs	r0, #16
 8001526:	f7ff fda9 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 800152a:	2085      	movs	r0, #133	; 0x85
 800152c:	f7ff fda6 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 8001530:	2080      	movs	r0, #128	; 0x80
 8001532:	f7ff fda3 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fda0 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff fd9d 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 8001542:	204e      	movs	r0, #78	; 0x4e
 8001544:	f7ff fd9a 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fd97 	bl	800107c <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0x98);
 800154e:	2098      	movs	r0, #152	; 0x98
 8001550:	f7ff fd70 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001554:	203e      	movs	r0, #62	; 0x3e
 8001556:	f7ff fd91 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800155a:	2007      	movs	r0, #7
 800155c:	f7ff fd8e 	bl	800107c <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 8001560:	2035      	movs	r0, #53	; 0x35
 8001562:	f7ff fd67 	bl	8001034 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001566:	2021      	movs	r0, #33	; 0x21
 8001568:	f7ff fd64 	bl	8001034 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 800156c:	2011      	movs	r0, #17
 800156e:	f7ff fd61 	bl	8001034 <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 8001572:	2078      	movs	r0, #120	; 0x78
 8001574:	f000 fd4a 	bl	800200c <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001578:	2029      	movs	r0, #41	; 0x29
 800157a:	f7ff fd5b 	bl	8001034 <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 800157e:	2014      	movs	r0, #20
 8001580:	f000 fd44 	bl	800200c <HAL_Delay>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <LCD_1IN28_SetAttributes+0x54>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001598:	2308      	movs	r3, #8
 800159a:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d108      	bne.n	80015b4 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <LCD_1IN28_SetAttributes+0x54>)
 80015a4:	22f0      	movs	r2, #240	; 0xf0
 80015a6:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <LCD_1IN28_SetAttributes+0x54>)
 80015aa:	22f0      	movs	r2, #240	; 0xf0
 80015ac:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 80015ae:	23c8      	movs	r3, #200	; 0xc8
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e007      	b.n	80015c4 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <LCD_1IN28_SetAttributes+0x54>)
 80015b6:	22f0      	movs	r2, #240	; 0xf0
 80015b8:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <LCD_1IN28_SetAttributes+0x54>)
 80015bc:	22f0      	movs	r2, #240	; 0xf0
 80015be:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 80015c0:	2368      	movs	r3, #104	; 0x68
 80015c2:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80015c4:	2036      	movs	r0, #54	; 0x36
 80015c6:	f7ff fd35 	bl	8001034 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fd55 	bl	800107c <LCD_1IN28_SendData_8Bit>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000050 	.word	0x20000050

080015e0 <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80015ea:	f7ff fd05 	bl	8000ff8 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ffc9 	bl	8001588 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80015f6:	f7ff fd95 	bl	8001124 <LCD_1IN28_InitReg>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 8001602:	b590      	push	{r4, r7, lr}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	4604      	mov	r4, r0
 800160a:	4608      	mov	r0, r1
 800160c:	4611      	mov	r1, r2
 800160e:	461a      	mov	r2, r3
 8001610:	4623      	mov	r3, r4
 8001612:	80fb      	strh	r3, [r7, #6]
 8001614:	4603      	mov	r3, r0
 8001616:	80bb      	strh	r3, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 8001620:	202a      	movs	r0, #42	; 0x2a
 8001622:	f7ff fd07 	bl	8001034 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fd28 	bl	800107c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fd23 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fd20 	bl	800107c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fd1b 	bl	800107c <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8001646:	202b      	movs	r0, #43	; 0x2b
 8001648:	f7ff fcf4 	bl	8001034 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fd15 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 8001652:	88bb      	ldrh	r3, [r7, #4]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fd10 	bl	800107c <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fd0d 	bl	800107c <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 8001662:	883b      	ldrh	r3, [r7, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd08 	bl	800107c <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 800166c:	202c      	movs	r0, #44	; 0x2c
 800166e:	f7ff fce1 	bl	8001034 <LCD_1IN28_SendCommand>
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bd90      	pop	{r4, r7, pc}

0800167a <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8001684:	23ef      	movs	r3, #239	; 0xef
 8001686:	22ef      	movs	r2, #239	; 0xef
 8001688:	2100      	movs	r1, #0
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff ffb9 	bl	8001602 <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 8001690:	2300      	movs	r3, #0
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	e00f      	b.n	80016b6 <LCD_1IN28_Clear+0x3c>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001696:	2300      	movs	r3, #0
 8001698:	81bb      	strh	r3, [r7, #12]
 800169a:	e006      	b.n	80016aa <LCD_1IN28_Clear+0x30>
			LCD_1IN28_SendData_16Bit(Color);
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fd10 	bl	80010c4 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 80016a4:	89bb      	ldrh	r3, [r7, #12]
 80016a6:	3301      	adds	r3, #1
 80016a8:	81bb      	strh	r3, [r7, #12]
 80016aa:	89bb      	ldrh	r3, [r7, #12]
 80016ac:	2bef      	cmp	r3, #239	; 0xef
 80016ae:	d9f5      	bls.n	800169c <LCD_1IN28_Clear+0x22>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 80016b0:	89fb      	ldrh	r3, [r7, #14]
 80016b2:	3301      	adds	r3, #1
 80016b4:	81fb      	strh	r3, [r7, #14]
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	2bef      	cmp	r3, #239	; 0xef
 80016ba:	d9ec      	bls.n	8001696 <LCD_1IN28_Clear+0x1c>
		}
	 }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	80fb      	strh	r3, [r7, #6]
 80016d0:	460b      	mov	r3, r1
 80016d2:	80bb      	strh	r3, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 80016d8:	88bb      	ldrh	r3, [r7, #4]
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	88b9      	ldrh	r1, [r7, #4]
 80016de:	88f8      	ldrh	r0, [r7, #6]
 80016e0:	f7ff ff8f 	bl	8001602 <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fcec 	bl	80010c4 <LCD_1IN28_SendData_16Bit>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b08d      	sub	sp, #52	; 0x34
 80016f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f000 fc15 	bl	8001f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f8bf 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f000 f987 	bl	8001a14 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001706:	f000 f925 	bl	8001954 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800170a:	f000 f959 	bl	80019c0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  strcpy((char*)buf, "Screen Demo\r\n");
 800170e:	463b      	mov	r3, r7
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <main+0x170>)
 8001712:	461c      	mov	r4, r3
 8001714:	4613      	mov	r3, r2
 8001716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001718:	c407      	stmia	r4!, {r0, r1, r2}
 800171a:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800171c:	463b      	mov	r3, r7
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fd52 	bl	80001c8 <strlen>
 8001724:	4603      	mov	r3, r0
 8001726:	b29a      	uxth	r2, r3
 8001728:	4639      	mov	r1, r7
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <main+0x174>)
 8001730:	f001 fea1 	bl	8003476 <HAL_UART_Transmit>
	  Module_Init();
 8001734:	f7ff fc26 	bl	8000f84 <Module_Init>

	//printf("LCD_1IN28_ Init and Clear...\r\n");
	  LCD_1IN28_Init(VERTICAL);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff ff51 	bl	80015e0 <LCD_1IN28_Init>
	  LCD_1IN28_Clear(BLACK);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff ff9b 	bl	800167a <LCD_1IN28_Clear>

	//printf("Paint_NewImage\r\n");
	  Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8001744:	2300      	movs	r3, #0
 8001746:	2200      	movs	r2, #0
 8001748:	21f0      	movs	r1, #240	; 0xf0
 800174a:	20f0      	movs	r0, #240	; 0xf0
 800174c:	f7fe fec6 	bl	80004dc <Paint_NewImage>

	//printf("Set Clear and Display Funtion\r\n");
	  Paint_SetClearFuntion(LCD_1IN28_Clear);
 8001750:	4846      	ldr	r0, [pc, #280]	; (800186c <main+0x178>)
 8001752:	f7fe ff03 	bl	800055c <Paint_SetClearFuntion>
	  Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8001756:	4846      	ldr	r0, [pc, #280]	; (8001870 <main+0x17c>)
 8001758:	f7fe ff10 	bl	800057c <Paint_SetDisplayFuntion>

	//printf("Paint_Clear\r\n");
	  Paint_Clear(BLACK);
 800175c:	2000      	movs	r0, #0
 800175e:	f7fe ffc9 	bl	80006f4 <Paint_Clear>
	  HAL_Delay(100);
 8001762:	2064      	movs	r0, #100	; 0x64
 8001764:	f000 fc52 	bl	800200c <HAL_Delay>

	//printf("drawing...\r\n");

	  Paint_DrawCircle(120,120, 120, BLUE ,DOT_PIXEL_2X2,DRAW_FILL_EMPTY);
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	231f      	movs	r3, #31
 8001772:	2278      	movs	r2, #120	; 0x78
 8001774:	2178      	movs	r1, #120	; 0x78
 8001776:	2078      	movs	r0, #120	; 0x78
 8001778:	f7ff f912 	bl	80009a0 <Paint_DrawCircle>
	  Paint_DrawLine  (120, 0, 120, 12,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 800177c:	2300      	movs	r3, #0
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2304      	movs	r3, #4
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	230c      	movs	r3, #12
 800178c:	2278      	movs	r2, #120	; 0x78
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	; 0x78
 8001792:	f7ff f857 	bl	8000844 <Paint_DrawLine>
	  Paint_DrawLine  (120, 228, 120, 240,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 8001796:	2300      	movs	r3, #0
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	2304      	movs	r3, #4
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	23f0      	movs	r3, #240	; 0xf0
 80017a6:	2278      	movs	r2, #120	; 0x78
 80017a8:	21e4      	movs	r1, #228	; 0xe4
 80017aa:	2078      	movs	r0, #120	; 0x78
 80017ac:	f7ff f84a 	bl	8000844 <Paint_DrawLine>
	  Paint_DrawLine  (0, 120, 12, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80017b0:	2300      	movs	r3, #0
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2304      	movs	r3, #4
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2378      	movs	r3, #120	; 0x78
 80017c0:	220c      	movs	r2, #12
 80017c2:	2178      	movs	r1, #120	; 0x78
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff f83d 	bl	8000844 <Paint_DrawLine>
	  Paint_DrawLine  (228, 120, 240, 120,GREEN ,DOT_PIXEL_4X4,LINE_STYLE_SOLID);
 80017ca:	2300      	movs	r3, #0
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2304      	movs	r3, #4
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2378      	movs	r3, #120	; 0x78
 80017da:	22f0      	movs	r2, #240	; 0xf0
 80017dc:	2178      	movs	r1, #120	; 0x78
 80017de:	20e4      	movs	r0, #228	; 0xe4
 80017e0:	f7ff f830 	bl	8000844 <Paint_DrawLine>

	  Paint_DrawImage(gImage_70X70, 85, 25, 70, 70);
 80017e4:	2346      	movs	r3, #70	; 0x46
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2346      	movs	r3, #70	; 0x46
 80017ea:	2219      	movs	r2, #25
 80017ec:	2155      	movs	r1, #85	; 0x55
 80017ee:	4821      	ldr	r0, [pc, #132]	; (8001874 <main+0x180>)
 80017f0:	f7ff fb62 	bl	8000eb8 <Paint_DrawImage>
	  Paint_DrawString_EN(123, 123, "WAVESHARE",&Font16,  BLACK, GREEN);
 80017f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	2300      	movs	r3, #0
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <main+0x184>)
 8001800:	4a1e      	ldr	r2, [pc, #120]	; (800187c <main+0x188>)
 8001802:	217b      	movs	r1, #123	; 0x7b
 8001804:	207b      	movs	r0, #123	; 0x7b
 8001806:	f7ff fb01 	bl	8000e0c <Paint_DrawString_EN>

	  Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 800180a:	2300      	movs	r3, #0
 800180c:	9302      	str	r3, [sp, #8]
 800180e:	2303      	movs	r3, #3
 8001810:	9301      	str	r3, [sp, #4]
 8001812:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	2346      	movs	r3, #70	; 0x46
 800181a:	2246      	movs	r2, #70	; 0x46
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	2078      	movs	r0, #120	; 0x78
 8001820:	f7ff f810 	bl	8000844 <Paint_DrawLine>
	  Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
 8001824:	2300      	movs	r3, #0
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2303      	movs	r3, #3
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	231f      	movs	r3, #31
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2340      	movs	r3, #64	; 0x40
 8001832:	22b0      	movs	r2, #176	; 0xb0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	2078      	movs	r0, #120	; 0x78
 8001838:	f7ff f804 	bl	8000844 <Paint_DrawLine>
	  Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);
 800183c:	2300      	movs	r3, #0
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2302      	movs	r3, #2
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	23d2      	movs	r3, #210	; 0xd2
 800184c:	2278      	movs	r2, #120	; 0x78
 800184e:	2178      	movs	r1, #120	; 0x78
 8001850:	2078      	movs	r0, #120	; 0x78
 8001852:	f7fe fff7 	bl	8000844 <Paint_DrawLine>
	  HAL_Delay(1000);
 8001856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185a:	f000 fbd7 	bl	800200c <HAL_Delay>

	//printf("quit...\r\n");
	  Module_Exit();
 800185e:	f7ff fbaf 	bl	8000fc0 <Module_Exit>
	  strcpy((char*)buf, "Screen Demo\r\n");
 8001862:	e754      	b.n	800170e <main+0x1a>
 8001864:	08003bd0 	.word	0x08003bd0
 8001868:	200000b0 	.word	0x200000b0
 800186c:	0800167b 	.word	0x0800167b
 8001870:	080016c7 	.word	0x080016c7
 8001874:	080047cc 	.word	0x080047cc
 8001878:	20000000 	.word	0x20000000
 800187c:	08003be0 	.word	0x08003be0

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b094      	sub	sp, #80	; 0x50
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0320 	add.w	r3, r7, #32
 800188a:	2230      	movs	r2, #48	; 0x30
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f002 f98a 	bl	8003ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <SystemClock_Config+0xcc>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <SystemClock_Config+0xcc>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <SystemClock_Config+0xcc>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <SystemClock_Config+0xd0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a21      	ldr	r2, [pc, #132]	; (8001950 <SystemClock_Config+0xd0>)
 80018ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <SystemClock_Config+0xd0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018dc:	2302      	movs	r3, #2
 80018de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e4:	2310      	movs	r3, #16
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e8:	2302      	movs	r3, #2
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018f0:	2308      	movs	r3, #8
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80018f4:	2332      	movs	r3, #50	; 0x32
 80018f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018fc:	2307      	movs	r3, #7
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0320 	add.w	r3, r7, #32
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fe41 	bl	800258c <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001910:	f000 f9e6 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001914:	230f      	movs	r3, #15
 8001916:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001918:	2302      	movs	r3, #2
 800191a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001920:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f001 f8a2 	bl	8002a7c <HAL_RCC_ClockConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800193e:	f000 f9cf 	bl	8001ce0 <Error_Handler>
  }
}
 8001942:	bf00      	nop
 8001944:	3750      	adds	r7, #80	; 0x50
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40007000 	.word	0x40007000

08001954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_SPI1_Init+0x64>)
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <MX_SPI1_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_SPI1_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001988:	2218      	movs	r2, #24
 800198a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_SPI1_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_SPI1_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI1_Init+0x64>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_SPI1_Init+0x64>)
 80019a6:	f001 fa89 	bl	8002ebc <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b0:	f000 f996 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000058 	.word	0x20000058
 80019bc:	40013000 	.word	0x40013000

080019c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_USART2_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f8:	f001 fcf0 	bl	80033dc <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f000 f96d 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200000b0 	.word	0x200000b0
 8001a10:	40004400 	.word	0x40004400

08001a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08c      	sub	sp, #48	; 0x30
 8001a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4ba6      	ldr	r3, [pc, #664]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4aa5      	ldr	r2, [pc, #660]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4ba3      	ldr	r3, [pc, #652]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b9f      	ldr	r3, [pc, #636]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a9e      	ldr	r2, [pc, #632]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a97      	ldr	r2, [pc, #604]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	4b91      	ldr	r3, [pc, #580]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a90      	ldr	r2, [pc, #576]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b8e      	ldr	r3, [pc, #568]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a89      	ldr	r2, [pc, #548]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b87      	ldr	r3, [pc, #540]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	4b83      	ldr	r3, [pc, #524]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a82      	ldr	r2, [pc, #520]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <MX_GPIO_Init+0x2b4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	487d      	ldr	r0, [pc, #500]	; (8001ccc <MX_GPIO_Init+0x2b8>)
 8001ad8:	f000 fd3e 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2101      	movs	r1, #1
 8001ae0:	487b      	ldr	r0, [pc, #492]	; (8001cd0 <MX_GPIO_Init+0x2bc>)
 8001ae2:	f000 fd39 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Screen_Pin|DC_Screen_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2130      	movs	r1, #48	; 0x30
 8001aea:	4879      	ldr	r0, [pc, #484]	; (8001cd0 <MX_GPIO_Init+0x2bc>)
 8001aec:	f000 fd34 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Screen_Pin|BL_Screen_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2103      	movs	r1, #3
 8001af4:	4877      	ldr	r0, [pc, #476]	; (8001cd4 <MX_GPIO_Init+0x2c0>)
 8001af6:	f000 fd2f 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001afa:	2200      	movs	r2, #0
 8001afc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b00:	4875      	ldr	r0, [pc, #468]	; (8001cd8 <MX_GPIO_Init+0x2c4>)
 8001b02:	f000 fd29 	bl	8002558 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b06:	2308      	movs	r3, #8
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	486b      	ldr	r0, [pc, #428]	; (8001ccc <MX_GPIO_Init+0x2b8>)
 8001b1e:	f000 fb7f 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_Screen_Pin DC_Screen_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_Screen_Pin|DC_Screen_Pin;
 8001b22:	2331      	movs	r3, #49	; 0x31
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4865      	ldr	r0, [pc, #404]	; (8001cd0 <MX_GPIO_Init+0x2bc>)
 8001b3a:	f000 fb71 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b3e:	2308      	movs	r3, #8
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4e:	2305      	movs	r3, #5
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	485d      	ldr	r0, [pc, #372]	; (8001cd0 <MX_GPIO_Init+0x2bc>)
 8001b5a:	f000 fb61 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	485a      	ldr	r0, [pc, #360]	; (8001cdc <MX_GPIO_Init+0x2c8>)
 8001b74:	f000 fb54 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b78:	2310      	movs	r3, #16
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4852      	ldr	r0, [pc, #328]	; (8001cdc <MX_GPIO_Init+0x2c8>)
 8001b94:	f000 fb44 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Screen_Pin BL_Screen_Pin */
  GPIO_InitStruct.Pin = RST_Screen_Pin|BL_Screen_Pin;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4619      	mov	r1, r3
 8001bae:	4849      	ldr	r0, [pc, #292]	; (8001cd4 <MX_GPIO_Init+0x2c0>)
 8001bb0:	f000 fb36 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4843      	ldr	r0, [pc, #268]	; (8001cd4 <MX_GPIO_Init+0x2c0>)
 8001bc8:	f000 fb2a 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bde:	2305      	movs	r3, #5
 8001be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	483a      	ldr	r0, [pc, #232]	; (8001cd4 <MX_GPIO_Init+0x2c0>)
 8001bea:	f000 fb19 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001bee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001bf2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	4834      	ldr	r0, [pc, #208]	; (8001cd8 <MX_GPIO_Init+0x2c4>)
 8001c08:	f000 fb0a 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c1e:	2306      	movs	r3, #6
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4829      	ldr	r0, [pc, #164]	; (8001cd0 <MX_GPIO_Init+0x2bc>)
 8001c2a:	f000 faf9 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	4826      	ldr	r0, [pc, #152]	; (8001cdc <MX_GPIO_Init+0x2c8>)
 8001c44:	f000 faec 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c48:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	481d      	ldr	r0, [pc, #116]	; (8001cdc <MX_GPIO_Init+0x2c8>)
 8001c66:	f000 fadb 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c6a:	2320      	movs	r3, #32
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4816      	ldr	r0, [pc, #88]	; (8001cd8 <MX_GPIO_Init+0x2c4>)
 8001c7e:	f000 facf 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c82:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c88:	2312      	movs	r3, #18
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c94:	2304      	movs	r3, #4
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <MX_GPIO_Init+0x2c0>)
 8001ca0:	f000 fabe 	bl	8002220 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ca8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <MX_GPIO_Init+0x2b8>)
 8001cba:	f000 fab1 	bl	8002220 <HAL_GPIO_Init>

}
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020c00 	.word	0x40020c00
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_MspInit+0x4c>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_MspInit+0x4c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d2a:	2007      	movs	r0, #7
 8001d2c:	f000 fa44 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_SPI_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12b      	bne.n	8001db6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d96:	23e0      	movs	r3, #224	; 0xe0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001da6:	2305      	movs	r3, #5
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_SPI_MspInit+0x8c>)
 8001db2:	f000 fa35 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40013000 	.word	0x40013000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000

08001dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	; 0x28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_UART_MspInit+0x84>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d12b      	bne.n	8001e46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_UART_MspInit+0x88>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_UART_MspInit+0x88>)
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_UART_MspInit+0x88>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_UART_MspInit+0x88>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_UART_MspInit+0x88>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_UART_MspInit+0x88>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e26:	230c      	movs	r3, #12
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e36:	2307      	movs	r3, #7
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <HAL_UART_MspInit+0x8c>)
 8001e42:	f000 f9ed 	bl	8002220 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40004400 	.word	0x40004400
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f890 	bl	8001fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eda:	490e      	ldr	r1, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001edc:	4a0e      	ldr	r2, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef0:	4c0b      	ldr	r4, [pc, #44]	; (8001f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001efe:	f7ff ffd7 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f02:	f001 fe2d 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7ff fbf5 	bl	80016f4 <main>
  bx  lr    
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001f18:	08006e3c 	.word	0x08006e3c
  ldr r2, =_sbss
 8001f1c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001f20:	200000f8 	.word	0x200000f8

08001f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_Init+0x40>)
 8001f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <HAL_Init+0x40>)
 8001f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_Init+0x40>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f50:	2003      	movs	r0, #3
 8001f52:	f000 f931 	bl	80021b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f000 f808 	bl	8001f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5c:	f7ff fec6 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023c00 	.word	0x40023c00

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x54>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_InitTick+0x58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f93b 	bl	8002206 <HAL_SYSTICK_Config>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00e      	b.n	8001fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d80a      	bhi.n	8001fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f000 f911 	bl	80021ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <HAL_InitTick+0x5c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000010 	.word	0x20000010
 8001fc8:	2000000c 	.word	0x2000000c

08001fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_IncTick+0x24>)
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000010 	.word	0x20000010
 8001ff0:	200000f4 	.word	0x200000f4

08001ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <HAL_GetTick+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	200000f4 	.word	0x200000f4

0800200c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002014:	f7ff ffee 	bl	8001ff4 <HAL_GetTick>
 8002018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d005      	beq.n	8002032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_Delay+0x44>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002032:	bf00      	nop
 8002034:	f7ff ffde 	bl	8001ff4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	429a      	cmp	r2, r3
 8002042:	d8f7      	bhi.n	8002034 <HAL_Delay+0x28>
  {
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000010 	.word	0x20000010

08002054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002070:	4013      	ands	r3, r2
 8002072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800207c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002086:	4a04      	ldr	r2, [pc, #16]	; (8002098 <__NVIC_SetPriorityGrouping+0x44>)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	60d3      	str	r3, [r2, #12]
}
 800208c:	bf00      	nop
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_GetPriorityGrouping+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	f003 0307 	and.w	r3, r3, #7
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002184:	d301      	bcc.n	800218a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002186:	2301      	movs	r3, #1
 8002188:	e00f      	b.n	80021aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800218a:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <SysTick_Config+0x40>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002192:	210f      	movs	r1, #15
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f7ff ff8e 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x40>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x40>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff47 	bl	8002054 <__NVIC_SetPriorityGrouping>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e0:	f7ff ff5c 	bl	800209c <__NVIC_GetPriorityGrouping>
 80021e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	6978      	ldr	r0, [r7, #20]
 80021ec:	f7ff ff8e 	bl	800210c <NVIC_EncodePriority>
 80021f0:	4602      	mov	r2, r0
 80021f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff5d 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ffb0 	bl	8002174 <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	e16b      	b.n	8002514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	f040 815a 	bne.w	800250e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d005      	beq.n	8002272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226e:	2b02      	cmp	r3, #2
 8002270:	d130      	bne.n	80022d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a8:	2201      	movs	r2, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 0201 	and.w	r2, r3, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	2203      	movs	r2, #3
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d123      	bne.n	8002364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	220f      	movs	r2, #15
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 0203 	and.w	r2, r3, #3
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80b4 	beq.w	800250e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a5f      	ldr	r2, [pc, #380]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_GPIO_Init+0x30c>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023c2:	4a5b      	ldr	r2, [pc, #364]	; (8002530 <HAL_GPIO_Init+0x310>)
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	3302      	adds	r3, #2
 80023ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	220f      	movs	r2, #15
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a52      	ldr	r2, [pc, #328]	; (8002534 <HAL_GPIO_Init+0x314>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d02b      	beq.n	8002446 <HAL_GPIO_Init+0x226>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a51      	ldr	r2, [pc, #324]	; (8002538 <HAL_GPIO_Init+0x318>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d025      	beq.n	8002442 <HAL_GPIO_Init+0x222>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a50      	ldr	r2, [pc, #320]	; (800253c <HAL_GPIO_Init+0x31c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01f      	beq.n	800243e <HAL_GPIO_Init+0x21e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4f      	ldr	r2, [pc, #316]	; (8002540 <HAL_GPIO_Init+0x320>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d019      	beq.n	800243a <HAL_GPIO_Init+0x21a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4e      	ldr	r2, [pc, #312]	; (8002544 <HAL_GPIO_Init+0x324>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <HAL_GPIO_Init+0x216>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4d      	ldr	r2, [pc, #308]	; (8002548 <HAL_GPIO_Init+0x328>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00d      	beq.n	8002432 <HAL_GPIO_Init+0x212>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_GPIO_Init+0x32c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <HAL_GPIO_Init+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_GPIO_Init+0x330>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_GPIO_Init+0x20a>
 8002426:	2307      	movs	r3, #7
 8002428:	e00e      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242a:	2308      	movs	r3, #8
 800242c:	e00c      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800242e:	2306      	movs	r3, #6
 8002430:	e00a      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002432:	2305      	movs	r3, #5
 8002434:	e008      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002436:	2304      	movs	r3, #4
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243a:	2303      	movs	r3, #3
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x228>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x228>
 8002446:	2300      	movs	r3, #0
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002458:	4935      	ldr	r1, [pc, #212]	; (8002530 <HAL_GPIO_Init+0x310>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_GPIO_Init+0x334>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_GPIO_Init+0x334>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_GPIO_Init+0x334>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_GPIO_Init+0x334>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3301      	adds	r3, #1
 8002512:	61fb      	str	r3, [r7, #28]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	f67f ae90 	bls.w	800223c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	40013800 	.word	0x40013800
 8002534:	40020000 	.word	0x40020000
 8002538:	40020400 	.word	0x40020400
 800253c:	40020800 	.word	0x40020800
 8002540:	40020c00 	.word	0x40020c00
 8002544:	40021000 	.word	0x40021000
 8002548:	40021400 	.word	0x40021400
 800254c:	40021800 	.word	0x40021800
 8002550:	40021c00 	.word	0x40021c00
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002574:	e003      	b.n	800257e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e267      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d075      	beq.n	8002696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	4b88      	ldr	r3, [pc, #544]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d00c      	beq.n	80025d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4b85      	ldr	r3, [pc, #532]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ce:	d10b      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05b      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d157      	bne.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e242      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x74>
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0x98>
 800260a:	4b70      	ldr	r3, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6f      	ldr	r2, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6c      	ldr	r2, [pc, #432]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xb0>
 8002624:	4b69      	ldr	r3, [pc, #420]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a68      	ldr	r2, [pc, #416]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fcd6 	bl	8001ff4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264c:	f7ff fcd2 	bl	8001ff4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e207      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xc0>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff fcc2 	bl	8001ff4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002674:	f7ff fcbe 	bl	8001ff4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	; 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1f3      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	4b51      	ldr	r3, [pc, #324]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d11c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e1c7      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f2:	e03a      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x244>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff fc77 	bl	8001ff4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270a:	f7ff fc73 	bl	8001ff4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1a8      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4925      	ldr	r1, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
 800273c:	e015      	b.n	800276a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <HAL_RCC_OscConfig+0x244>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff fc56 	bl	8001ff4 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7ff fc52 	bl	8001ff4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e187      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d036      	beq.n	80027e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <HAL_RCC_OscConfig+0x248>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002784:	f7ff fc36 	bl	8001ff4 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278c:	f7ff fc32 	bl	8001ff4 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e167      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x240>)
 80027a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x200>
 80027aa:	e01b      	b.n	80027e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_OscConfig+0x248>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fc1f 	bl	8001ff4 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e00e      	b.n	80027d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7ff fc1b 	bl	8001ff4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d907      	bls.n	80027d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e150      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470000 	.word	0x42470000
 80027d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80027da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ea      	bne.n	80027ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8097 	beq.w	8002920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f6:	4b81      	ldr	r3, [pc, #516]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a7c      	ldr	r2, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b7a      	ldr	r3, [pc, #488]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002822:	4b77      	ldr	r3, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282e:	4b74      	ldr	r3, [pc, #464]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a73      	ldr	r2, [pc, #460]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7ff fbdb 	bl	8001ff4 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7ff fbd7 	bl	8001ff4 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e10c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x474>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x2ea>
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a63      	ldr	r2, [pc, #396]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	e01c      	b.n	80028b0 <HAL_RCC_OscConfig+0x324>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b05      	cmp	r3, #5
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x30c>
 800287e:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a5e      	ldr	r2, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	e00b      	b.n	80028b0 <HAL_RCC_OscConfig+0x324>
 8002898:	4b58      	ldr	r3, [pc, #352]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	4b55      	ldr	r3, [pc, #340]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a54      	ldr	r2, [pc, #336]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7ff fb9c 	bl	8001ff4 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7ff fb98 	bl	8001ff4 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0cb      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <HAL_RCC_OscConfig+0x334>
 80028e2:	e014      	b.n	800290e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7ff fb86 	bl	8001ff4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7ff fb82 	bl	8001ff4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e0b5      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002902:	4b3e      	ldr	r3, [pc, #248]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ee      	bne.n	80028ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002914:	4b39      	ldr	r3, [pc, #228]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a38      	ldr	r2, [pc, #224]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800291a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a1 	beq.w	8002a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292a:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	d05c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d141      	bne.n	80029c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff fb56 	bl	8001ff4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff fb52 	bl	8001ff4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e087      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b27      	ldr	r3, [pc, #156]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	061b      	lsls	r3, r3, #24
 800298e:	491b      	ldr	r1, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002994:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <HAL_RCC_OscConfig+0x478>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7ff fb2b 	bl	8001ff4 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7ff fb27 	bl	8001ff4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e05c      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x416>
 80029c0:	e054      	b.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_RCC_OscConfig+0x478>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c8:	f7ff fb14 	bl	8001ff4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d0:	f7ff fb10 	bl	8001ff4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e045      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_OscConfig+0x470>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x444>
 80029ee:	e03d      	b.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e038      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000
 8002a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCC_OscConfig+0x4ec>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d028      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d121      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d11a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	3b01      	subs	r3, #1
 8002a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800

08002a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0cc      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d90c      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d044      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d119      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e06f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4a:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e067      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	4b37      	ldr	r3, [pc, #220]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 0203 	bic.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4934      	ldr	r1, [pc, #208]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b6c:	f7ff fa42 	bl	8001ff4 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b74:	f7ff fa3e 	bl	8001ff4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e04f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 020c 	and.w	r2, r3, #12
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d1eb      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d20c      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f821 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	490a      	ldr	r1, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x1c0>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f9a2 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08006e14 	.word	0x08006e14
 8002c40:	20000008 	.word	0x20000008
 8002c44:	2000000c 	.word	0x2000000c

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c4c:	b094      	sub	sp, #80	; 0x50
 8002c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	647b      	str	r3, [r7, #68]	; 0x44
 8002c54:	2300      	movs	r3, #0
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c58:	2300      	movs	r3, #0
 8002c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c60:	4b79      	ldr	r3, [pc, #484]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x40>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	f200 80e1 	bhi.w	8002e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x34>
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7a:	e0db      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c80:	e0db      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c82:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c86:	e0d8      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d063      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cba:	4622      	mov	r2, r4
 8002cbc:	462b      	mov	r3, r5
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	0159      	lsls	r1, r3, #5
 8002cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ccc:	0150      	lsls	r0, r2, #5
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	1a51      	subs	r1, r2, r1
 8002cd6:	6139      	str	r1, [r7, #16]
 8002cd8:	4629      	mov	r1, r5
 8002cda:	eb63 0301 	sbc.w	r3, r3, r1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cec:	4659      	mov	r1, fp
 8002cee:	018b      	lsls	r3, r1, #6
 8002cf0:	4651      	mov	r1, sl
 8002cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf6:	4651      	mov	r1, sl
 8002cf8:	018a      	lsls	r2, r1, #6
 8002cfa:	4651      	mov	r1, sl
 8002cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8002d00:	4659      	mov	r1, fp
 8002d02:	eb63 0901 	sbc.w	r9, r3, r1
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1a:	4690      	mov	r8, r2
 8002d1c:	4699      	mov	r9, r3
 8002d1e:	4623      	mov	r3, r4
 8002d20:	eb18 0303 	adds.w	r3, r8, r3
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	462b      	mov	r3, r5
 8002d28:	eb49 0303 	adc.w	r3, r9, r3
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	024b      	lsls	r3, r1, #9
 8002d3e:	4621      	mov	r1, r4
 8002d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d44:	4621      	mov	r1, r4
 8002d46:	024a      	lsls	r2, r1, #9
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	2200      	movs	r2, #0
 8002d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d58:	f7fd fa3e 	bl	80001d8 <__aeabi_uldivmod>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4613      	mov	r3, r2
 8002d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d64:	e058      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4611      	mov	r1, r2
 8002d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d76:	623b      	str	r3, [r7, #32]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d80:	4642      	mov	r2, r8
 8002d82:	464b      	mov	r3, r9
 8002d84:	f04f 0000 	mov.w	r0, #0
 8002d88:	f04f 0100 	mov.w	r1, #0
 8002d8c:	0159      	lsls	r1, r3, #5
 8002d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d92:	0150      	lsls	r0, r2, #5
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4641      	mov	r1, r8
 8002d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d9e:	4649      	mov	r1, r9
 8002da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002db8:	ebb2 040a 	subs.w	r4, r2, sl
 8002dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	00eb      	lsls	r3, r5, #3
 8002dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dce:	00e2      	lsls	r2, r4, #3
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	4643      	mov	r3, r8
 8002dd6:	18e3      	adds	r3, r4, r3
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	464b      	mov	r3, r9
 8002ddc:	eb45 0303 	adc.w	r3, r5, r3
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dee:	4629      	mov	r1, r5
 8002df0:	028b      	lsls	r3, r1, #10
 8002df2:	4621      	mov	r1, r4
 8002df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df8:	4621      	mov	r1, r4
 8002dfa:	028a      	lsls	r2, r1, #10
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e02:	2200      	movs	r2, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	61fa      	str	r2, [r7, #28]
 8002e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0c:	f7fd f9e4 	bl	80001d8 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4613      	mov	r3, r2
 8002e16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	0c1b      	lsrs	r3, r3, #16
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3750      	adds	r7, #80	; 0x50
 8002e40:	46bd      	mov	sp, r7
 8002e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	007a1200 	.word	0x007a1200

08002e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e70:	f7ff fff0 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0a9b      	lsrs	r3, r3, #10
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4903      	ldr	r1, [pc, #12]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	08006e24 	.word	0x08006e24

08002e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e98:	f7ff ffdc 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0b5b      	lsrs	r3, r3, #13
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08006e24 	.word	0x08006e24

08002ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07b      	b.n	8002fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ede:	d009      	beq.n	8002ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
 8002ee6:	e005      	b.n	8002ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fe ff14 	bl	8001d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	0c1b      	lsrs	r3, r3, #16
 8002f92:	f003 0104 	and.w	r1, r3, #4
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f003 0210 	and.w	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b088      	sub	sp, #32
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	603b      	str	r3, [r7, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_SPI_Transmit+0x22>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e126      	b.n	800323e <HAL_SPI_Transmit+0x270>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff8:	f7fe fffc 	bl	8001ff4 <HAL_GetTick>
 8002ffc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d002      	beq.n	8003014 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800300e:	2302      	movs	r3, #2
 8003010:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003012:	e10b      	b.n	800322c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_SPI_Transmit+0x52>
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003024:	e102      	b.n	800322c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306c:	d10f      	bne.n	800308e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800307c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d007      	beq.n	80030ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b4:	d14b      	bne.n	800314e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_SPI_Transmit+0xf6>
 80030be:	8afb      	ldrh	r3, [r7, #22]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d13e      	bne.n	8003142 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030e8:	e02b      	b.n	8003142 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d112      	bne.n	800311e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	881a      	ldrh	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	1c9a      	adds	r2, r3, #2
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	86da      	strh	r2, [r3, #54]	; 0x36
 800311c:	e011      	b.n	8003142 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800311e:	f7fe ff69 	bl	8001ff4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d803      	bhi.n	8003136 <HAL_SPI_Transmit+0x168>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d102      	bne.n	800313c <HAL_SPI_Transmit+0x16e>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003140:	e074      	b.n	800322c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ce      	bne.n	80030ea <HAL_SPI_Transmit+0x11c>
 800314c:	e04c      	b.n	80031e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_SPI_Transmit+0x18e>
 8003156:	8afb      	ldrh	r3, [r7, #22]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d140      	bne.n	80031de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	330c      	adds	r3, #12
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003182:	e02c      	b.n	80031de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b02      	cmp	r3, #2
 8003190:	d113      	bne.n	80031ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80031b8:	e011      	b.n	80031de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ba:	f7fe ff1b 	bl	8001ff4 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d803      	bhi.n	80031d2 <HAL_SPI_Transmit+0x204>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_Transmit+0x20a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031dc:	e026      	b.n	800322c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1cd      	bne.n	8003184 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f8b3 	bl	8003358 <SPI_EndRxTxTransaction>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	77fb      	strb	r3, [r7, #31]
 8003228:	e000      	b.n	800322c <HAL_SPI_Transmit+0x25e>
  }

error:
 800322a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800323c:	7ffb      	ldrb	r3, [r7, #31]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003258:	f7fe fecc 	bl	8001ff4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	4413      	add	r3, r2
 8003266:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003268:	f7fe fec4 	bl	8001ff4 <HAL_GetTick>
 800326c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800326e:	4b39      	ldr	r3, [pc, #228]	; (8003354 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	015b      	lsls	r3, r3, #5
 8003274:	0d1b      	lsrs	r3, r3, #20
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	fb02 f303 	mul.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800327e:	e054      	b.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d050      	beq.n	800332a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003288:	f7fe feb4 	bl	8001ff4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	429a      	cmp	r2, r3
 8003296:	d902      	bls.n	800329e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d13d      	bne.n	800331a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b6:	d111      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d004      	beq.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d107      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e4:	d10f      	bne.n	8003306 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e017      	b.n	800334a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b01      	subs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	429a      	cmp	r2, r3
 8003346:	d19b      	bne.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000008 	.word	0x20000008

08003358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003364:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <SPI_EndRxTxTransaction+0x7c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <SPI_EndRxTxTransaction+0x80>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0d5b      	lsrs	r3, r3, #21
 8003370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003374:	fb02 f303 	mul.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003382:	d112      	bne.n	80033aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2200      	movs	r2, #0
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff ff5a 	bl	8003248 <SPI_WaitFlagStateUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e00f      	b.n	80033ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c0:	2b80      	cmp	r3, #128	; 0x80
 80033c2:	d0f2      	beq.n	80033aa <SPI_EndRxTxTransaction+0x52>
 80033c4:	e000      	b.n	80033c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80033c6:	bf00      	nop
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000008 	.word	0x20000008
 80033d8:	165e9f81 	.word	0x165e9f81

080033dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e03f      	b.n	800346e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fe fce2 	bl	8001dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f929 	bl	8003678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b08a      	sub	sp, #40	; 0x28
 800347a:	af02      	add	r7, sp, #8
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	603b      	str	r3, [r7, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b20      	cmp	r3, #32
 8003494:	d17c      	bne.n	8003590 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_UART_Transmit+0x2c>
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e075      	b.n	8003592 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_UART_Transmit+0x3e>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e06e      	b.n	8003592 <HAL_UART_Transmit+0x11c>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2221      	movs	r2, #33	; 0x21
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ca:	f7fe fd93 	bl	8001ff4 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e4:	d108      	bne.n	80034f8 <HAL_UART_Transmit+0x82>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d104      	bne.n	80034f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e003      	b.n	8003500 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003508:	e02a      	b.n	8003560 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2200      	movs	r2, #0
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f840 	bl	800359a <UART_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e036      	b.n	8003592 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003538:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	3302      	adds	r3, #2
 800353e:	61bb      	str	r3, [r7, #24]
 8003540:	e007      	b.n	8003552 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	3301      	adds	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1cf      	bne.n	800350a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2200      	movs	r2, #0
 8003572:	2140      	movs	r1, #64	; 0x40
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f810 	bl	800359a <UART_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e006      	b.n	8003592 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	e000      	b.n	8003592 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b090      	sub	sp, #64	; 0x40
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4613      	mov	r3, r2
 80035a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035aa:	e050      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b2:	d04c      	beq.n	800364e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <UART_WaitOnFlagUntilTimeout+0x30>
 80035ba:	f7fe fd1b 	bl	8001ff4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d241      	bcs.n	800364e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ea:	637a      	str	r2, [r7, #52]	; 0x34
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e5      	bne.n	80035ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	613b      	str	r3, [r7, #16]
   return(result);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3314      	adds	r3, #20
 800361c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800361e:	623a      	str	r2, [r7, #32]
 8003620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	69f9      	ldr	r1, [r7, #28]
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	61bb      	str	r3, [r7, #24]
   return(result);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e5      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e00f      	b.n	800366e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	429a      	cmp	r2, r3
 800366a:	d09f      	beq.n	80035ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3740      	adds	r7, #64	; 0x40
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367c:	b0c0      	sub	sp, #256	; 0x100
 800367e:	af00      	add	r7, sp, #0
 8003680:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	ea40 0301 	orr.w	r3, r0, r1
 80036a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036d0:	f021 010c 	bic.w	r1, r1, #12
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036de:	430b      	orrs	r3, r1
 80036e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	6999      	ldr	r1, [r3, #24]
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	ea40 0301 	orr.w	r3, r0, r1
 80036fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4b8f      	ldr	r3, [pc, #572]	; (8003944 <UART_SetConfig+0x2cc>)
 8003708:	429a      	cmp	r2, r3
 800370a:	d005      	beq.n	8003718 <UART_SetConfig+0xa0>
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b8d      	ldr	r3, [pc, #564]	; (8003948 <UART_SetConfig+0x2d0>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003718:	f7ff fbbc 	bl	8002e94 <HAL_RCC_GetPCLK2Freq>
 800371c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003720:	e003      	b.n	800372a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7ff fba3 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8003726:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	f040 810c 	bne.w	8003950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373c:	2200      	movs	r2, #0
 800373e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003742:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	1891      	adds	r1, r2, r2
 8003750:	65b9      	str	r1, [r7, #88]	; 0x58
 8003752:	415b      	adcs	r3, r3
 8003754:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800375a:	4621      	mov	r1, r4
 800375c:	eb12 0801 	adds.w	r8, r2, r1
 8003760:	4629      	mov	r1, r5
 8003762:	eb43 0901 	adc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003788:	462b      	mov	r3, r5
 800378a:	eb49 0303 	adc.w	r3, r9, r3
 800378e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800379e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037a6:	460b      	mov	r3, r1
 80037a8:	18db      	adds	r3, r3, r3
 80037aa:	653b      	str	r3, [r7, #80]	; 0x50
 80037ac:	4613      	mov	r3, r2
 80037ae:	eb42 0303 	adc.w	r3, r2, r3
 80037b2:	657b      	str	r3, [r7, #84]	; 0x54
 80037b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037bc:	f7fc fd0c 	bl	80001d8 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4b61      	ldr	r3, [pc, #388]	; (800394c <UART_SetConfig+0x2d4>)
 80037c6:	fba3 2302 	umull	r2, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	011c      	lsls	r4, r3, #4
 80037ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d2:	2200      	movs	r2, #0
 80037d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	1891      	adds	r1, r2, r2
 80037e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e8:	415b      	adcs	r3, r3
 80037ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037f0:	4641      	mov	r1, r8
 80037f2:	eb12 0a01 	adds.w	sl, r2, r1
 80037f6:	4649      	mov	r1, r9
 80037f8:	eb43 0b01 	adc.w	fp, r3, r1
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800380c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003810:	4692      	mov	sl, r2
 8003812:	469b      	mov	fp, r3
 8003814:	4643      	mov	r3, r8
 8003816:	eb1a 0303 	adds.w	r3, sl, r3
 800381a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800381e:	464b      	mov	r3, r9
 8003820:	eb4b 0303 	adc.w	r3, fp, r3
 8003824:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003834:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800383c:	460b      	mov	r3, r1
 800383e:	18db      	adds	r3, r3, r3
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
 8003842:	4613      	mov	r3, r2
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	647b      	str	r3, [r7, #68]	; 0x44
 800384a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800384e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003852:	f7fc fcc1 	bl	80001d8 <__aeabi_uldivmod>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4611      	mov	r1, r2
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <UART_SetConfig+0x2d4>)
 800385e:	fba3 2301 	umull	r2, r3, r3, r1
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2264      	movs	r2, #100	; 0x64
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	1acb      	subs	r3, r1, r3
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003872:	4b36      	ldr	r3, [pc, #216]	; (800394c <UART_SetConfig+0x2d4>)
 8003874:	fba3 2302 	umull	r2, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003880:	441c      	add	r4, r3
 8003882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003886:	2200      	movs	r2, #0
 8003888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800388c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003894:	4642      	mov	r2, r8
 8003896:	464b      	mov	r3, r9
 8003898:	1891      	adds	r1, r2, r2
 800389a:	63b9      	str	r1, [r7, #56]	; 0x38
 800389c:	415b      	adcs	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a4:	4641      	mov	r1, r8
 80038a6:	1851      	adds	r1, r2, r1
 80038a8:	6339      	str	r1, [r7, #48]	; 0x30
 80038aa:	4649      	mov	r1, r9
 80038ac:	414b      	adcs	r3, r1
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038bc:	4659      	mov	r1, fp
 80038be:	00cb      	lsls	r3, r1, #3
 80038c0:	4651      	mov	r1, sl
 80038c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c6:	4651      	mov	r1, sl
 80038c8:	00ca      	lsls	r2, r1, #3
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	4603      	mov	r3, r0
 80038d0:	4642      	mov	r2, r8
 80038d2:	189b      	adds	r3, r3, r2
 80038d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038f8:	460b      	mov	r3, r1
 80038fa:	18db      	adds	r3, r3, r3
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	4613      	mov	r3, r2
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800390e:	f7fc fc63 	bl	80001d8 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4b0d      	ldr	r3, [pc, #52]	; (800394c <UART_SetConfig+0x2d4>)
 8003918:	fba3 1302 	umull	r1, r3, r3, r2
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	3332      	adds	r3, #50	; 0x32
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <UART_SetConfig+0x2d4>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	f003 0207 	and.w	r2, r3, #7
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4422      	add	r2, r4
 800393e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003940:	e105      	b.n	8003b4e <UART_SetConfig+0x4d6>
 8003942:	bf00      	nop
 8003944:	40011000 	.word	0x40011000
 8003948:	40011400 	.word	0x40011400
 800394c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800395a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800395e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003962:	4642      	mov	r2, r8
 8003964:	464b      	mov	r3, r9
 8003966:	1891      	adds	r1, r2, r2
 8003968:	6239      	str	r1, [r7, #32]
 800396a:	415b      	adcs	r3, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
 800396e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003972:	4641      	mov	r1, r8
 8003974:	1854      	adds	r4, r2, r1
 8003976:	4649      	mov	r1, r9
 8003978:	eb43 0501 	adc.w	r5, r3, r1
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	00eb      	lsls	r3, r5, #3
 8003986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800398a:	00e2      	lsls	r2, r4, #3
 800398c:	4614      	mov	r4, r2
 800398e:	461d      	mov	r5, r3
 8003990:	4643      	mov	r3, r8
 8003992:	18e3      	adds	r3, r4, r3
 8003994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003998:	464b      	mov	r3, r9
 800399a:	eb45 0303 	adc.w	r3, r5, r3
 800399e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039be:	4629      	mov	r1, r5
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c8:	4621      	mov	r1, r4
 80039ca:	008a      	lsls	r2, r1, #2
 80039cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039d0:	f7fc fc02 	bl	80001d8 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <UART_SetConfig+0x4e4>)
 80039da:	fba3 2302 	umull	r2, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	011c      	lsls	r4, r3, #4
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	61b9      	str	r1, [r7, #24]
 80039fc:	415b      	adcs	r3, r3
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a04:	4641      	mov	r1, r8
 8003a06:	1851      	adds	r1, r2, r1
 8003a08:	6139      	str	r1, [r7, #16]
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	414b      	adcs	r3, r1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	00cb      	lsls	r3, r1, #3
 8003a20:	4651      	mov	r1, sl
 8003a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a26:	4651      	mov	r1, sl
 8003a28:	00ca      	lsls	r2, r1, #3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4642      	mov	r2, r8
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a38:	464b      	mov	r3, r9
 8003a3a:	460a      	mov	r2, r1
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	008b      	lsls	r3, r1, #2
 8003a60:	4641      	mov	r1, r8
 8003a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a66:	4641      	mov	r1, r8
 8003a68:	008a      	lsls	r2, r1, #2
 8003a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a6e:	f7fc fbb3 	bl	80001d8 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a96:	441c      	add	r4, r3
 8003a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003aa0:	677a      	str	r2, [r7, #116]	; 0x74
 8003aa2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aa6:	4642      	mov	r2, r8
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	1891      	adds	r1, r2, r2
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	415b      	adcs	r3, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	1851      	adds	r1, r2, r1
 8003aba:	6039      	str	r1, [r7, #0]
 8003abc:	4649      	mov	r1, r9
 8003abe:	414b      	adcs	r3, r1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ace:	4659      	mov	r1, fp
 8003ad0:	00cb      	lsls	r3, r1, #3
 8003ad2:	4651      	mov	r1, sl
 8003ad4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad8:	4651      	mov	r1, sl
 8003ada:	00ca      	lsls	r2, r1, #3
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4642      	mov	r2, r8
 8003ae4:	189b      	adds	r3, r3, r2
 8003ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae8:	464b      	mov	r3, r9
 8003aea:	460a      	mov	r2, r1
 8003aec:	eb42 0303 	adc.w	r3, r2, r3
 8003af0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	663b      	str	r3, [r7, #96]	; 0x60
 8003afc:	667a      	str	r2, [r7, #100]	; 0x64
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	008b      	lsls	r3, r1, #2
 8003b0e:	4641      	mov	r1, r8
 8003b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b14:	4641      	mov	r1, r8
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b1c:	f7fc fb5c 	bl	80001d8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003b26:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2164      	movs	r1, #100	; 0x64
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <UART_SetConfig+0x4e4>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4422      	add	r2, r4
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	bf00      	nop
 8003b50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5a:	bf00      	nop
 8003b5c:	51eb851f 	.word	0x51eb851f

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	; (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	; (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	; (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	; (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f820 	bl	8003bb8 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08006e34 	.word	0x08006e34
 8003b9c:	08006e34 	.word	0x08006e34
 8003ba0:	08006e34 	.word	0x08006e34
 8003ba4:	08006e38 	.word	0x08006e38

08003ba8 <memset>:
 8003ba8:	4402      	add	r2, r0
 8003baa:	4603      	mov	r3, r0
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d100      	bne.n	8003bb2 <memset+0xa>
 8003bb0:	4770      	bx	lr
 8003bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb6:	e7f9      	b.n	8003bac <memset+0x4>

08003bb8 <_init>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	bf00      	nop
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

08003bc4 <_fini>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr
