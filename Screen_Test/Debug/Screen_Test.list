
Screen_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007988  08007988  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007990  08007990  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007994  08007994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000228  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001364a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d7  00000000  00000000  000336f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00035ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010c8  00000000  00000000  00036c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022699  00000000  00000000  00037d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b58  00000000  00000000  0005a3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b26  00000000  00000000  0006ef29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fa4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005098  00000000  00000000  0013faa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cfc 	.word	0x08006cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006cfc 	.word	0x08006cfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000d60:	b490      	push	{r4, r7}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4623      	mov	r3, r4
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	4603      	mov	r3, r0
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	807b      	strh	r3, [r7, #2]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <Paint_NewImage+0x7c>)
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <Paint_NewImage+0x7c>)
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <Paint_NewImage+0x7c>)
 8000d8c:	883b      	ldrh	r3, [r7, #0]
 8000d8e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <Paint_NewImage+0x7c>)
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <Paint_NewImage+0x7c>)
 8000d98:	88bb      	ldrh	r3, [r7, #4]
 8000d9a:	8293      	strh	r3, [r2, #20]
    //printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
   
    Paint.Rotate = Rotate;
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <Paint_NewImage+0x7c>)
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <Paint_NewImage+0x7c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <Paint_NewImage+0x54>
 8000dae:	887b      	ldrh	r3, [r7, #2]
 8000db0:	2bb4      	cmp	r3, #180	; 0xb4
 8000db2:	d106      	bne.n	8000dc2 <Paint_NewImage+0x62>
        Paint.Width = Width;
 8000db4:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <Paint_NewImage+0x7c>)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <Paint_NewImage+0x7c>)
 8000dbc:	88bb      	ldrh	r3, [r7, #4]
 8000dbe:	80d3      	strh	r3, [r2, #6]
 8000dc0:	e006      	b.n	8000dd0 <Paint_NewImage+0x70>
    } else {
        Paint.Width = Height;
 8000dc2:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <Paint_NewImage+0x7c>)
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <Paint_NewImage+0x7c>)
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	80d3      	strh	r3, [r2, #6]
    }
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc90      	pop	{r4, r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000098 	.word	0x20000098

08000de0 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <Paint_SetClearFuntion+0x1c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000b4 	.word	0x200000b4

08000e00 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <Paint_SetDisplayFuntion+0x1c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	200000b0 	.word	0x200000b0

08000e20 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	80bb      	strh	r3, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000e32:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <Paint_SetPixel+0x150>)
 8000e34:	889b      	ldrh	r3, [r3, #4]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 808d 	bhi.w	8000f5a <Paint_SetPixel+0x13a>
 8000e40:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <Paint_SetPixel+0x150>)
 8000e42:	88db      	ldrh	r3, [r3, #6]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f200 8086 	bhi.w	8000f5a <Paint_SetPixel+0x13a>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8000e4e:	4b48      	ldr	r3, [pc, #288]	; (8000f70 <Paint_SetPixel+0x150>)
 8000e50:	89db      	ldrh	r3, [r3, #14]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000e58:	d02c      	beq.n	8000eb4 <Paint_SetPixel+0x94>
 8000e5a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000e5e:	dc7e      	bgt.n	8000f5e <Paint_SetPixel+0x13e>
 8000e60:	2bb4      	cmp	r3, #180	; 0xb4
 8000e62:	d016      	beq.n	8000e92 <Paint_SetPixel+0x72>
 8000e64:	2bb4      	cmp	r3, #180	; 0xb4
 8000e66:	dc7a      	bgt.n	8000f5e <Paint_SetPixel+0x13e>
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <Paint_SetPixel+0x52>
 8000e6c:	2b5a      	cmp	r3, #90	; 0x5a
 8000e6e:	d005      	beq.n	8000e7c <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8000e70:	e075      	b.n	8000f5e <Paint_SetPixel+0x13e>
        X = Xpoint;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	81bb      	strh	r3, [r7, #12]
        break;
 8000e7a:	e026      	b.n	8000eca <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8000e7c:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <Paint_SetPixel+0x150>)
 8000e7e:	891b      	ldrh	r3, [r3, #8]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	81bb      	strh	r3, [r7, #12]
        break;
 8000e90:	e01b      	b.n	8000eca <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 8000e92:	4b37      	ldr	r3, [pc, #220]	; (8000f70 <Paint_SetPixel+0x150>)
 8000e94:	891b      	ldrh	r3, [r3, #8]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <Paint_SetPixel+0x150>)
 8000ea4:	895b      	ldrh	r3, [r3, #10]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	81bb      	strh	r3, [r7, #12]
        break;
 8000eb2:	e00a      	b.n	8000eca <Paint_SetPixel+0xaa>
        X = Ypoint;
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <Paint_SetPixel+0x150>)
 8000eba:	895b      	ldrh	r3, [r3, #10]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	81bb      	strh	r3, [r7, #12]
        break;
 8000ec8:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <Paint_SetPixel+0x150>)
 8000ecc:	8a1b      	ldrh	r3, [r3, #16]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d846      	bhi.n	8000f62 <Paint_SetPixel+0x142>
 8000ed4:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <Paint_SetPixel+0xbc>)
 8000ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eda:	bf00      	nop
 8000edc:	08000f33 	.word	0x08000f33
 8000ee0:	08000eed 	.word	0x08000eed
 8000ee4:	08000eff 	.word	0x08000eff
 8000ee8:	08000f11 	.word	0x08000f11
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <Paint_SetPixel+0x150>)
 8000eee:	891b      	ldrh	r3, [r3, #8]
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	81fb      	strh	r3, [r7, #14]
        break;
 8000efc:	e01a      	b.n	8000f34 <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <Paint_SetPixel+0x150>)
 8000f00:	895b      	ldrh	r3, [r3, #10]
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	89bb      	ldrh	r3, [r7, #12]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	81bb      	strh	r3, [r7, #12]
        break;
 8000f0e:	e011      	b.n	8000f34 <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <Paint_SetPixel+0x150>)
 8000f12:	891b      	ldrh	r3, [r3, #8]
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	89fb      	ldrh	r3, [r7, #14]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <Paint_SetPixel+0x150>)
 8000f22:	895b      	ldrh	r3, [r3, #10]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	89bb      	ldrh	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	81bb      	strh	r3, [r7, #12]
        break;
 8000f30:	e000      	b.n	8000f34 <Paint_SetPixel+0x114>
        break;
 8000f32:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <Paint_SetPixel+0x150>)
 8000f36:	891b      	ldrh	r3, [r3, #8]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	89fa      	ldrh	r2, [r7, #14]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d812      	bhi.n	8000f66 <Paint_SetPixel+0x146>
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <Paint_SetPixel+0x150>)
 8000f42:	895b      	ldrh	r3, [r3, #10]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	89ba      	ldrh	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d80c      	bhi.n	8000f66 <Paint_SetPixel+0x146>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <Paint_SetPixel+0x154>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	89b9      	ldrh	r1, [r7, #12]
 8000f54:	89f8      	ldrh	r0, [r7, #14]
 8000f56:	4798      	blx	r3
 8000f58:	e006      	b.n	8000f68 <Paint_SetPixel+0x148>
        return;
 8000f5a:	bf00      	nop
 8000f5c:	e004      	b.n	8000f68 <Paint_SetPixel+0x148>
        return;
 8000f5e:	bf00      	nop
 8000f60:	e002      	b.n	8000f68 <Paint_SetPixel+0x148>
        return;
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <Paint_SetPixel+0x148>
        return;
 8000f66:	bf00      	nop
}
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000098 	.word	0x20000098
 8000f74:	200000b0 	.word	0x200000b0

08000f78 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <Paint_Clear+0x1c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	88fa      	ldrh	r2, [r7, #6]
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4798      	blx	r3
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200000b4 	.word	0x200000b4

08000f98 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	81fb      	strh	r3, [r7, #14]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	81bb      	strh	r3, [r7, #12]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8000fac:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <Paint_DrawChar+0x150>)
 8000fae:	889b      	ldrh	r3, [r3, #4]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	89fa      	ldrh	r2, [r7, #14]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f200 8092 	bhi.w	80010de <Paint_DrawChar+0x146>
 8000fba:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <Paint_DrawChar+0x150>)
 8000fbc:	88db      	ldrh	r3, [r3, #6]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	89ba      	ldrh	r2, [r7, #12]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	f200 808b 	bhi.w	80010de <Paint_DrawChar+0x146>
        //Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000fc8:	7afb      	ldrb	r3, [r7, #11]
 8000fca:	3b20      	subs	r3, #32
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	88d2      	ldrh	r2, [r2, #6]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	8892      	ldrh	r2, [r2, #4]
 8000fd8:	08d2      	lsrs	r2, r2, #3
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	4611      	mov	r1, r2
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	8892      	ldrh	r2, [r2, #4]
 8000fe2:	f002 0207 	and.w	r2, r2, #7
 8000fe6:	b292      	uxth	r2, r2
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	bf14      	ite	ne
 8000fec:	2201      	movne	r2, #1
 8000fee:	2200      	moveq	r2, #0
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440a      	add	r2, r1
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	4413      	add	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 8001004:	2300      	movs	r3, #0
 8001006:	83fb      	strh	r3, [r7, #30]
 8001008:	e063      	b.n	80010d2 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800100a:	2300      	movs	r3, #0
 800100c:	83bb      	strh	r3, [r7, #28]
 800100e:	e04e      	b.n	80010ae <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001010:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001016:	4293      	cmp	r3, r2
 8001018:	d118      	bne.n	800104c <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	8bbb      	ldrh	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	fa42 f303 	asr.w	r3, r2, r3
 800102c:	400b      	ands	r3, r1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d031      	beq.n	8001096 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001032:	89fa      	ldrh	r2, [r7, #14]
 8001034:	8bbb      	ldrh	r3, [r7, #28]
 8001036:	4413      	add	r3, r2
 8001038:	b298      	uxth	r0, r3
 800103a:	89ba      	ldrh	r2, [r7, #12]
 800103c:	8bfb      	ldrh	r3, [r7, #30]
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff feeb 	bl	8000e20 <Paint_SetPixel>
 800104a:	e024      	b.n	8001096 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	8bbb      	ldrh	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	fa42 f303 	asr.w	r3, r2, r3
 800105e:	400b      	ands	r3, r1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00c      	beq.n	800107e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001064:	89fa      	ldrh	r2, [r7, #14]
 8001066:	8bbb      	ldrh	r3, [r7, #28]
 8001068:	4413      	add	r3, r2
 800106a:	b298      	uxth	r0, r3
 800106c:	89ba      	ldrh	r2, [r7, #12]
 800106e:	8bfb      	ldrh	r3, [r7, #30]
 8001070:	4413      	add	r3, r2
 8001072:	b29b      	uxth	r3, r3
 8001074:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fed2 	bl	8000e20 <Paint_SetPixel>
 800107c:	e00b      	b.n	8001096 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800107e:	89fa      	ldrh	r2, [r7, #14]
 8001080:	8bbb      	ldrh	r3, [r7, #28]
 8001082:	4413      	add	r3, r2
 8001084:	b298      	uxth	r0, r3
 8001086:	89ba      	ldrh	r2, [r7, #12]
 8001088:	8bfb      	ldrh	r3, [r7, #30]
 800108a:	4413      	add	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001090:	4619      	mov	r1, r3
 8001092:	f7ff fec5 	bl	8000e20 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001096:	8bbb      	ldrh	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	b29b      	uxth	r3, r3
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d102      	bne.n	80010a8 <Paint_DrawChar+0x110>
                ptr++;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80010a8:	8bbb      	ldrh	r3, [r7, #28]
 80010aa:	3301      	adds	r3, #1
 80010ac:	83bb      	strh	r3, [r7, #28]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	889b      	ldrh	r3, [r3, #4]
 80010b2:	8bba      	ldrh	r2, [r7, #28]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3ab      	bcc.n	8001010 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	889b      	ldrh	r3, [r3, #4]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <Paint_DrawChar+0x134>
            ptr++;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	3301      	adds	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80010cc:	8bfb      	ldrh	r3, [r7, #30]
 80010ce:	3301      	adds	r3, #1
 80010d0:	83fb      	strh	r3, [r7, #30]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	88db      	ldrh	r3, [r3, #6]
 80010d6:	8bfa      	ldrh	r2, [r7, #30]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d396      	bcc.n	800100a <Paint_DrawChar+0x72>
 80010dc:	e000      	b.n	80010e0 <Paint_DrawChar+0x148>
        return;
 80010de:	bf00      	nop
    }// Write all
}
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000098 	.word	0x20000098

080010ec <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4603      	mov	r3, r0
 80010f8:	81fb      	strh	r3, [r7, #14]
 80010fa:	460b      	mov	r3, r1
 80010fc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80010fe:	89fb      	ldrh	r3, [r7, #14]
 8001100:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 8001102:	89bb      	ldrh	r3, [r7, #12]
 8001104:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <Paint_DrawString_EN+0xa8>)
 8001108:	889b      	ldrh	r3, [r3, #4]
 800110a:	b29b      	uxth	r3, r3
 800110c:	89fa      	ldrh	r2, [r7, #14]
 800110e:	429a      	cmp	r2, r3
 8001110:	d83b      	bhi.n	800118a <Paint_DrawString_EN+0x9e>
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <Paint_DrawString_EN+0xa8>)
 8001114:	88db      	ldrh	r3, [r3, #6]
 8001116:	b29b      	uxth	r3, r3
 8001118:	89ba      	ldrh	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d835      	bhi.n	800118a <Paint_DrawString_EN+0x9e>
        //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 800111e:	e02f      	b.n	8001180 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	8892      	ldrh	r2, [r2, #4]
 8001126:	4413      	add	r3, r2
 8001128:	4a1a      	ldr	r2, [pc, #104]	; (8001194 <Paint_DrawString_EN+0xa8>)
 800112a:	8892      	ldrh	r2, [r2, #4]
 800112c:	b292      	uxth	r2, r2
 800112e:	4293      	cmp	r3, r2
 8001130:	dd06      	ble.n	8001140 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8001132:	89fb      	ldrh	r3, [r7, #14]
 8001134:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	88da      	ldrh	r2, [r3, #6]
 800113a:	8abb      	ldrh	r3, [r7, #20]
 800113c:	4413      	add	r3, r2
 800113e:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001140:	8abb      	ldrh	r3, [r7, #20]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	88d2      	ldrh	r2, [r2, #6]
 8001146:	4413      	add	r3, r2
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <Paint_DrawString_EN+0xa8>)
 800114a:	88d2      	ldrh	r2, [r2, #6]
 800114c:	b292      	uxth	r2, r2
 800114e:	4293      	cmp	r3, r2
 8001150:	dd03      	ble.n	800115a <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001156:	89bb      	ldrh	r3, [r7, #12]
 8001158:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	8ab9      	ldrh	r1, [r7, #20]
 8001160:	8af8      	ldrh	r0, [r7, #22]
 8001162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	8c3b      	ldrh	r3, [r7, #32]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f7ff ff14 	bl	8000f98 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	889a      	ldrh	r2, [r3, #4]
 800117a:	8afb      	ldrh	r3, [r7, #22]
 800117c:	4413      	add	r3, r2
 800117e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1cb      	bne.n	8001120 <Paint_DrawString_EN+0x34>
 8001188:	e000      	b.n	800118c <Paint_DrawString_EN+0xa0>
        return;
 800118a:	bf00      	nop
    }
}
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000098 	.word	0x20000098

08001198 <Module_Init>:
/******************************************************************************
function :	Start hardware
parameter:
******************************************************************************/
int Module_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <Module_Init+0x34>)
 80011a2:	f001 fe9d 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2110      	movs	r1, #16
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <Module_Init+0x38>)
 80011ac:	f001 fe98 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2120      	movs	r1, #32
 80011b4:	4806      	ldr	r0, [pc, #24]	; (80011d0 <Module_Init+0x38>)
 80011b6:	f001 fe93 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2102      	movs	r1, #2
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <Module_Init+0x34>)
 80011c0:	f001 fe8e 	bl	8002ee0 <HAL_GPIO_WritePin>
	return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020800 	.word	0x40020800

080011d4 <LCD_1IN28_Reset>:
/******************************************************************************
function :	Hardware reset
parameter:
******************************************************************************/
static void LCD_1IN28_Reset(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2101      	movs	r1, #1
 80011dc:	480b      	ldr	r0, [pc, #44]	; (800120c <LCD_1IN28_Reset+0x38>)
 80011de:	f001 fe7f 	bl	8002ee0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80011e2:	2064      	movs	r0, #100	; 0x64
 80011e4:	f001 fbaa 	bl	800293c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2101      	movs	r1, #1
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <LCD_1IN28_Reset+0x38>)
 80011ee:	f001 fe77 	bl	8002ee0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f001 fba2 	bl	800293c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <LCD_1IN28_Reset+0x38>)
 80011fe:	f001 fe6f 	bl	8002ee0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f001 fb9a 	bl	800293c <HAL_Delay>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40020400 	.word	0x40020400

08001210 <LCD_1IN28_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void LCD_1IN28_SendCommand(UBYTE Reg)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2120      	movs	r1, #32
 800121e:	480c      	ldr	r0, [pc, #48]	; (8001250 <LCD_1IN28_SendCommand+0x40>)
 8001220:	f001 fe5e 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2110      	movs	r1, #16
 8001228:	4809      	ldr	r0, [pc, #36]	; (8001250 <LCD_1IN28_SendCommand+0x40>)
 800122a:	f001 fe59 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Reg, 1, 500);
 800122e:	1df9      	adds	r1, r7, #7
 8001230:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001234:	2201      	movs	r2, #1
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <LCD_1IN28_SendCommand+0x44>)
 8001238:	f003 fb3b 	bl	80048b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2110      	movs	r1, #16
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <LCD_1IN28_SendCommand+0x40>)
 8001242:	f001 fe4d 	bl	8002ee0 <HAL_GPIO_WritePin>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40020800 	.word	0x40020800
 8001254:	20000114 	.word	0x20000114

08001258 <LCD_1IN28_SendData_8Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_8Bit(UBYTE Data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	2120      	movs	r1, #32
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <LCD_1IN28_SendData_8Bit+0x40>)
 8001268:	f001 fe3a 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2110      	movs	r1, #16
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <LCD_1IN28_SendData_8Bit+0x40>)
 8001272:	f001 fe35 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 8001276:	1df9      	adds	r1, r7, #7
 8001278:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127c:	2201      	movs	r2, #1
 800127e:	4807      	ldr	r0, [pc, #28]	; (800129c <LCD_1IN28_SendData_8Bit+0x44>)
 8001280:	f003 fb17 	bl	80048b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2110      	movs	r1, #16
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <LCD_1IN28_SendData_8Bit+0x40>)
 800128a:	f001 fe29 	bl	8002ee0 <HAL_GPIO_WritePin>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020800 	.word	0x40020800
 800129c:	20000114 	.word	0x20000114

080012a0 <LCD_1IN28_SendData_16Bit>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void LCD_1IN28_SendData_16Bit(UWORD Data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	80fb      	strh	r3, [r7, #6]
	uint8_t data1 = Data >> 8;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2120      	movs	r1, #32
 80012b8:	480f      	ldr	r0, [pc, #60]	; (80012f8 <LCD_1IN28_SendData_16Bit+0x58>)
 80012ba:	f001 fe11 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2110      	movs	r1, #16
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LCD_1IN28_SendData_16Bit+0x58>)
 80012c4:	f001 fe0c 	bl	8002ee0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&data1, 1, 500);
 80012c8:	f107 010f 	add.w	r1, r7, #15
 80012cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012d0:	2201      	movs	r2, #1
 80012d2:	480a      	ldr	r0, [pc, #40]	; (80012fc <LCD_1IN28_SendData_16Bit+0x5c>)
 80012d4:	f003 faed 	bl	80048b2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 500);
 80012d8:	1db9      	adds	r1, r7, #6
 80012da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012de:	2201      	movs	r2, #1
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <LCD_1IN28_SendData_16Bit+0x5c>)
 80012e2:	f003 fae6 	bl	80048b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2110      	movs	r1, #16
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <LCD_1IN28_SendData_16Bit+0x58>)
 80012ec:	f001 fdf8 	bl	8002ee0 <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40020800 	.word	0x40020800
 80012fc:	20000114 	.word	0x20000114

08001300 <LCD_1IN28_InitReg>:
/******************************************************************************
function :	Initialize the lcd register
parameter:
******************************************************************************/
static void LCD_1IN28_InitReg(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	LCD_1IN28_SendCommand(0xEF);
 8001304:	20ef      	movs	r0, #239	; 0xef
 8001306:	f7ff ff83 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEB);
 800130a:	20eb      	movs	r0, #235	; 0xeb
 800130c:	f7ff ff80 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001310:	2014      	movs	r0, #20
 8001312:	f7ff ffa1 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xFE);
 8001316:	20fe      	movs	r0, #254	; 0xfe
 8001318:	f7ff ff7a 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0xEF); 
 800131c:	20ef      	movs	r0, #239	; 0xef
 800131e:	f7ff ff77 	bl	8001210 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0xEB);	
 8001322:	20eb      	movs	r0, #235	; 0xeb
 8001324:	f7ff ff74 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x14); 
 8001328:	2014      	movs	r0, #20
 800132a:	f7ff ff95 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x84);			
 800132e:	2084      	movs	r0, #132	; 0x84
 8001330:	f7ff ff6e 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x40); 
 8001334:	2040      	movs	r0, #64	; 0x40
 8001336:	f7ff ff8f 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x85);			
 800133a:	2085      	movs	r0, #133	; 0x85
 800133c:	f7ff ff68 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 8001340:	20ff      	movs	r0, #255	; 0xff
 8001342:	f7ff ff89 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x86);			
 8001346:	2086      	movs	r0, #134	; 0x86
 8001348:	f7ff ff62 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 800134c:	20ff      	movs	r0, #255	; 0xff
 800134e:	f7ff ff83 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x87);			
 8001352:	2087      	movs	r0, #135	; 0x87
 8001354:	f7ff ff5c 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF);
 8001358:	20ff      	movs	r0, #255	; 0xff
 800135a:	f7ff ff7d 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x88);			
 800135e:	2088      	movs	r0, #136	; 0x88
 8001360:	f7ff ff56 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x0A);
 8001364:	200a      	movs	r0, #10
 8001366:	f7ff ff77 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x89);			
 800136a:	2089      	movs	r0, #137	; 0x89
 800136c:	f7ff ff50 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21); 
 8001370:	2021      	movs	r0, #33	; 0x21
 8001372:	f7ff ff71 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8A);			
 8001376:	208a      	movs	r0, #138	; 0x8a
 8001378:	f7ff ff4a 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00); 
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ff6b 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8B);			
 8001382:	208b      	movs	r0, #139	; 0x8b
 8001384:	f7ff ff44 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x80); 
 8001388:	2080      	movs	r0, #128	; 0x80
 800138a:	f7ff ff65 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8C);			
 800138e:	208c      	movs	r0, #140	; 0x8c
 8001390:	f7ff ff3e 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff ff5f 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8D);			
 800139a:	208d      	movs	r0, #141	; 0x8d
 800139c:	f7ff ff38 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x01); 
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff59 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8E);			
 80013a6:	208e      	movs	r0, #142	; 0x8e
 80013a8:	f7ff ff32 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80013ac:	20ff      	movs	r0, #255	; 0xff
 80013ae:	f7ff ff53 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x8F);			
 80013b2:	208f      	movs	r0, #143	; 0x8f
 80013b4:	f7ff ff2c 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0xFF); 
 80013b8:	20ff      	movs	r0, #255	; 0xff
 80013ba:	f7ff ff4d 	bl	8001258 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0xB6);
 80013be:	20b6      	movs	r0, #182	; 0xb6
 80013c0:	f7ff ff26 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff ff47 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x20);
 80013ca:	2020      	movs	r0, #32
 80013cc:	f7ff ff44 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x36);
 80013d0:	2036      	movs	r0, #54	; 0x36
 80013d2:	f7ff ff1d 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);//Set as vertical screen
 80013d6:	2008      	movs	r0, #8
 80013d8:	f7ff ff3e 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x3A);			
 80013dc:	203a      	movs	r0, #58	; 0x3a
 80013de:	f7ff ff17 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x05); 
 80013e2:	2005      	movs	r0, #5
 80013e4:	f7ff ff38 	bl	8001258 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x90);			
 80013e8:	2090      	movs	r0, #144	; 0x90
 80013ea:	f7ff ff11 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x08);
 80013ee:	2008      	movs	r0, #8
 80013f0:	f7ff ff32 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80013f4:	2008      	movs	r0, #8
 80013f6:	f7ff ff2f 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80013fa:	2008      	movs	r0, #8
 80013fc:	f7ff ff2c 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08); 
 8001400:	2008      	movs	r0, #8
 8001402:	f7ff ff29 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBD);			
 8001406:	20bd      	movs	r0, #189	; 0xbd
 8001408:	f7ff ff02 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x06);
 800140c:	2006      	movs	r0, #6
 800140e:	f7ff ff23 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xBC);			
 8001412:	20bc      	movs	r0, #188	; 0xbc
 8001414:	f7ff fefc 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);	
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff ff1d 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xFF);			
 800141e:	20ff      	movs	r0, #255	; 0xff
 8001420:	f7ff fef6 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x60);
 8001424:	2060      	movs	r0, #96	; 0x60
 8001426:	f7ff ff17 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff14 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001430:	2004      	movs	r0, #4
 8001432:	f7ff ff11 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC3);			
 8001436:	20c3      	movs	r0, #195	; 0xc3
 8001438:	f7ff feea 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 800143c:	2013      	movs	r0, #19
 800143e:	f7ff ff0b 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendCommand(0xC4);			
 8001442:	20c4      	movs	r0, #196	; 0xc4
 8001444:	f7ff fee4 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x13);
 8001448:	2013      	movs	r0, #19
 800144a:	f7ff ff05 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xC9);			
 800144e:	20c9      	movs	r0, #201	; 0xc9
 8001450:	f7ff fede 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x22);
 8001454:	2022      	movs	r0, #34	; 0x22
 8001456:	f7ff feff 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xBE);			
 800145a:	20be      	movs	r0, #190	; 0xbe
 800145c:	f7ff fed8 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x11); 
 8001460:	2011      	movs	r0, #17
 8001462:	f7ff fef9 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE1);			
 8001466:	20e1      	movs	r0, #225	; 0xe1
 8001468:	f7ff fed2 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);
 800146c:	2010      	movs	r0, #16
 800146e:	f7ff fef3 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E);
 8001472:	200e      	movs	r0, #14
 8001474:	f7ff fef0 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xDF);			
 8001478:	20df      	movs	r0, #223	; 0xdf
 800147a:	f7ff fec9 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x21);
 800147e:	2021      	movs	r0, #33	; 0x21
 8001480:	f7ff feea 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0c);
 8001484:	200c      	movs	r0, #12
 8001486:	f7ff fee7 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x02);
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff fee4 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xF0);   
 8001490:	20f0      	movs	r0, #240	; 0xf0
 8001492:	f7ff febd 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x45);
 8001496:	2045      	movs	r0, #69	; 0x45
 8001498:	f7ff fede 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 800149c:	2009      	movs	r0, #9
 800149e:	f7ff fedb 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80014a2:	2008      	movs	r0, #8
 80014a4:	f7ff fed8 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 80014a8:	2008      	movs	r0, #8
 80014aa:	f7ff fed5 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x26);
 80014ae:	2026      	movs	r0, #38	; 0x26
 80014b0:	f7ff fed2 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 80014b4:	202a      	movs	r0, #42	; 0x2a
 80014b6:	f7ff fecf 	bl	8001258 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF1);    
 80014ba:	20f1      	movs	r0, #241	; 0xf1
 80014bc:	f7ff fea8 	bl	8001210 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 80014c0:	2043      	movs	r0, #67	; 0x43
 80014c2:	f7ff fec9 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 80014c6:	2070      	movs	r0, #112	; 0x70
 80014c8:	f7ff fec6 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 80014cc:	2072      	movs	r0, #114	; 0x72
 80014ce:	f7ff fec3 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 80014d2:	2036      	movs	r0, #54	; 0x36
 80014d4:	f7ff fec0 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37);  
 80014d8:	2037      	movs	r0, #55	; 0x37
 80014da:	f7ff febd 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 80014de:	206f      	movs	r0, #111	; 0x6f
 80014e0:	f7ff feba 	bl	8001258 <LCD_1IN28_SendData_8Bit>


 	LCD_1IN28_SendCommand(0xF2);   
 80014e4:	20f2      	movs	r0, #242	; 0xf2
 80014e6:	f7ff fe93 	bl	8001210 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x45);
 80014ea:	2045      	movs	r0, #69	; 0x45
 80014ec:	f7ff feb4 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x09);
 80014f0:	2009      	movs	r0, #9
 80014f2:	f7ff feb1 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 80014f6:	2008      	movs	r0, #8
 80014f8:	f7ff feae 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x08);
 80014fc:	2008      	movs	r0, #8
 80014fe:	f7ff feab 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x26);
 8001502:	2026      	movs	r0, #38	; 0x26
 8001504:	f7ff fea8 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x2A);
 8001508:	202a      	movs	r0, #42	; 0x2a
 800150a:	f7ff fea5 	bl	8001258 <LCD_1IN28_SendData_8Bit>

 	LCD_1IN28_SendCommand(0xF3);   
 800150e:	20f3      	movs	r0, #243	; 0xf3
 8001510:	f7ff fe7e 	bl	8001210 <LCD_1IN28_SendCommand>
 	LCD_1IN28_SendData_8Bit(0x43);
 8001514:	2043      	movs	r0, #67	; 0x43
 8001516:	f7ff fe9f 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x70);
 800151a:	2070      	movs	r0, #112	; 0x70
 800151c:	f7ff fe9c 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x72);
 8001520:	2072      	movs	r0, #114	; 0x72
 8001522:	f7ff fe99 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x36);
 8001526:	2036      	movs	r0, #54	; 0x36
 8001528:	f7ff fe96 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x37); 
 800152c:	2037      	movs	r0, #55	; 0x37
 800152e:	f7ff fe93 	bl	8001258 <LCD_1IN28_SendData_8Bit>
 	LCD_1IN28_SendData_8Bit(0x6F);
 8001532:	206f      	movs	r0, #111	; 0x6f
 8001534:	f7ff fe90 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xED);	
 8001538:	20ed      	movs	r0, #237	; 0xed
 800153a:	f7ff fe69 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x1B); 
 800153e:	201b      	movs	r0, #27
 8001540:	f7ff fe8a 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0B); 
 8001544:	200b      	movs	r0, #11
 8001546:	f7ff fe87 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xAE);			
 800154a:	20ae      	movs	r0, #174	; 0xae
 800154c:	f7ff fe60 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x77);
 8001550:	2077      	movs	r0, #119	; 0x77
 8001552:	f7ff fe81 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0xCD);			
 8001556:	20cd      	movs	r0, #205	; 0xcd
 8001558:	f7ff fe5a 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x63);		
 800155c:	2063      	movs	r0, #99	; 0x63
 800155e:	f7ff fe7b 	bl	8001258 <LCD_1IN28_SendData_8Bit>


	LCD_1IN28_SendCommand(0x70);			
 8001562:	2070      	movs	r0, #112	; 0x70
 8001564:	f7ff fe54 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x07);
 8001568:	2007      	movs	r0, #7
 800156a:	f7ff fe75 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800156e:	2007      	movs	r0, #7
 8001570:	f7ff fe72 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x04);
 8001574:	2004      	movs	r0, #4
 8001576:	f7ff fe6f 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0E); 
 800157a:	200e      	movs	r0, #14
 800157c:	f7ff fe6c 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F); 
 8001580:	200f      	movs	r0, #15
 8001582:	f7ff fe69 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x09);
 8001586:	2009      	movs	r0, #9
 8001588:	f7ff fe66 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 800158c:	2007      	movs	r0, #7
 800158e:	f7ff fe63 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x08);
 8001592:	2008      	movs	r0, #8
 8001594:	f7ff fe60 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x03);
 8001598:	2003      	movs	r0, #3
 800159a:	f7ff fe5d 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0xE8);			
 800159e:	20e8      	movs	r0, #232	; 0xe8
 80015a0:	f7ff fe36 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x34);
 80015a4:	2034      	movs	r0, #52	; 0x34
 80015a6:	f7ff fe57 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x62);			
 80015aa:	2062      	movs	r0, #98	; 0x62
 80015ac:	f7ff fe30 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80015b0:	2018      	movs	r0, #24
 80015b2:	f7ff fe51 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0D);
 80015b6:	200d      	movs	r0, #13
 80015b8:	f7ff fe4e 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80015bc:	2071      	movs	r0, #113	; 0x71
 80015be:	f7ff fe4b 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xED);
 80015c2:	20ed      	movs	r0, #237	; 0xed
 80015c4:	f7ff fe48 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80015c8:	2070      	movs	r0, #112	; 0x70
 80015ca:	f7ff fe45 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80015ce:	2070      	movs	r0, #112	; 0x70
 80015d0:	f7ff fe42 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 80015d4:	2018      	movs	r0, #24
 80015d6:	f7ff fe3f 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x0F);
 80015da:	200f      	movs	r0, #15
 80015dc:	f7ff fe3c 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 80015e0:	2071      	movs	r0, #113	; 0x71
 80015e2:	f7ff fe39 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xEF);
 80015e6:	20ef      	movs	r0, #239	; 0xef
 80015e8:	f7ff fe36 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 80015ec:	2070      	movs	r0, #112	; 0x70
 80015ee:	f7ff fe33 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 80015f2:	2070      	movs	r0, #112	; 0x70
 80015f4:	f7ff fe30 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x63);			
 80015f8:	2063      	movs	r0, #99	; 0x63
 80015fa:	f7ff fe09 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x18);
 80015fe:	2018      	movs	r0, #24
 8001600:	f7ff fe2a 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x11);
 8001604:	2011      	movs	r0, #17
 8001606:	f7ff fe27 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800160a:	2071      	movs	r0, #113	; 0x71
 800160c:	f7ff fe24 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001610:	20f1      	movs	r0, #241	; 0xf1
 8001612:	f7ff fe21 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 8001616:	2070      	movs	r0, #112	; 0x70
 8001618:	f7ff fe1e 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 800161c:	2070      	movs	r0, #112	; 0x70
 800161e:	f7ff fe1b 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x18);
 8001622:	2018      	movs	r0, #24
 8001624:	f7ff fe18 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x13);
 8001628:	2013      	movs	r0, #19
 800162a:	f7ff fe15 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x71);
 800162e:	2071      	movs	r0, #113	; 0x71
 8001630:	f7ff fe12 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF3);
 8001634:	20f3      	movs	r0, #243	; 0xf3
 8001636:	f7ff fe0f 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70); 
 800163a:	2070      	movs	r0, #112	; 0x70
 800163c:	f7ff fe0c 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x70);
 8001640:	2070      	movs	r0, #112	; 0x70
 8001642:	f7ff fe09 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x64);			
 8001646:	2064      	movs	r0, #100	; 0x64
 8001648:	f7ff fde2 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x28);
 800164c:	2028      	movs	r0, #40	; 0x28
 800164e:	f7ff fe03 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x29);
 8001652:	2029      	movs	r0, #41	; 0x29
 8001654:	f7ff fe00 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001658:	20f1      	movs	r0, #241	; 0xf1
 800165a:	f7ff fdfd 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff fdfa 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xF1);
 8001664:	20f1      	movs	r0, #241	; 0xf1
 8001666:	f7ff fdf7 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff fdf4 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001670:	2007      	movs	r0, #7
 8001672:	f7ff fdf1 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x66);			
 8001676:	2066      	movs	r0, #102	; 0x66
 8001678:	f7ff fdca 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3C);
 800167c:	203c      	movs	r0, #60	; 0x3c
 800167e:	f7ff fdeb 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff fde8 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0xCD);
 8001688:	20cd      	movs	r0, #205	; 0xcd
 800168a:	f7ff fde5 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x67);
 800168e:	2067      	movs	r0, #103	; 0x67
 8001690:	f7ff fde2 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 8001694:	2045      	movs	r0, #69	; 0x45
 8001696:	f7ff fddf 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x45);
 800169a:	2045      	movs	r0, #69	; 0x45
 800169c:	f7ff fddc 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80016a0:	2010      	movs	r0, #16
 80016a2:	f7ff fdd9 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fdd6 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fdd3 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fdd0 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x67);			
 80016b8:	2067      	movs	r0, #103	; 0x67
 80016ba:	f7ff fda9 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x00);
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff fdca 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x3C);
 80016c4:	203c      	movs	r0, #60	; 0x3c
 80016c6:	f7ff fdc7 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fdc4 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fdc1 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fdbe 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x01);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fdbb 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x54);
 80016e2:	2054      	movs	r0, #84	; 0x54
 80016e4:	f7ff fdb8 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x10);
 80016e8:	2010      	movs	r0, #16
 80016ea:	f7ff fdb5 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x32);
 80016ee:	2032      	movs	r0, #50	; 0x32
 80016f0:	f7ff fdb2 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x98);
 80016f4:	2098      	movs	r0, #152	; 0x98
 80016f6:	f7ff fdaf 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x74);			
 80016fa:	2074      	movs	r0, #116	; 0x74
 80016fc:	f7ff fd88 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x10);	
 8001700:	2010      	movs	r0, #16
 8001702:	f7ff fda9 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x85);	
 8001706:	2085      	movs	r0, #133	; 0x85
 8001708:	f7ff fda6 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x80);
 800170c:	2080      	movs	r0, #128	; 0x80
 800170e:	f7ff fda3 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff fda0 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00); 
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fd9d 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x4E);
 800171e:	204e      	movs	r0, #78	; 0x4e
 8001720:	f7ff fd9a 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);					
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fd97 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	
	LCD_1IN28_SendCommand(0x98);
 800172a:	2098      	movs	r0, #152	; 0x98
 800172c:	f7ff fd70 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendData_8Bit(0x3e);
 8001730:	203e      	movs	r0, #62	; 0x3e
 8001732:	f7ff fd91 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x07);
 8001736:	2007      	movs	r0, #7
 8001738:	f7ff fd8e 	bl	8001258 <LCD_1IN28_SendData_8Bit>

	LCD_1IN28_SendCommand(0x35);	
 800173c:	2035      	movs	r0, #53	; 0x35
 800173e:	f7ff fd67 	bl	8001210 <LCD_1IN28_SendCommand>
	LCD_1IN28_SendCommand(0x21);
 8001742:	2021      	movs	r0, #33	; 0x21
 8001744:	f7ff fd64 	bl	8001210 <LCD_1IN28_SendCommand>

	LCD_1IN28_SendCommand(0x11);
 8001748:	2011      	movs	r0, #17
 800174a:	f7ff fd61 	bl	8001210 <LCD_1IN28_SendCommand>
	HAL_Delay(120);
 800174e:	2078      	movs	r0, #120	; 0x78
 8001750:	f001 f8f4 	bl	800293c <HAL_Delay>
	LCD_1IN28_SendCommand(0x29);
 8001754:	2029      	movs	r0, #41	; 0x29
 8001756:	f7ff fd5b 	bl	8001210 <LCD_1IN28_SendCommand>
	HAL_Delay(20);
 800175a:	2014      	movs	r0, #20
 800175c:	f001 f8ee 	bl	800293c <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <LCD_1IN28_SetAttributes>:
function:	Set the resolution and scanning method of the screen
parameter:
		Scan_dir:   Scan direction
********************************************************************************/
static void LCD_1IN28_SetAttributes(UBYTE Scan_dir)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    LCD_1IN28.SCAN_DIR = Scan_dir;
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <LCD_1IN28_SetAttributes+0x54>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	7113      	strb	r3, [r2, #4]
    UBYTE MemoryAccessReg = 0x08;
 8001774:	2308      	movs	r3, #8
 8001776:	73fb      	strb	r3, [r7, #15]

    //Get GRAM and LCD width and height
    if(Scan_dir == HORIZONTAL) {
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <LCD_1IN28_SetAttributes+0x2c>
        LCD_1IN28.HEIGHT	= LCD_1IN28_HEIGHT;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <LCD_1IN28_SetAttributes+0x54>)
 8001780:	22f0      	movs	r2, #240	; 0xf0
 8001782:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_WIDTH;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <LCD_1IN28_SetAttributes+0x54>)
 8001786:	22f0      	movs	r2, #240	; 0xf0
 8001788:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0XC8;
 800178a:	23c8      	movs	r3, #200	; 0xc8
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e007      	b.n	80017a0 <LCD_1IN28_SetAttributes+0x3c>
    } else {
        LCD_1IN28.HEIGHT	= LCD_1IN28_WIDTH;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <LCD_1IN28_SetAttributes+0x54>)
 8001792:	22f0      	movs	r2, #240	; 0xf0
 8001794:	805a      	strh	r2, [r3, #2]
        LCD_1IN28.WIDTH   = LCD_1IN28_HEIGHT;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <LCD_1IN28_SetAttributes+0x54>)
 8001798:	22f0      	movs	r2, #240	; 0xf0
 800179a:	801a      	strh	r2, [r3, #0]
        MemoryAccessReg = 0X68;
 800179c:	2368      	movs	r3, #104	; 0x68
 800179e:	73fb      	strb	r3, [r7, #15]
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN28_SendCommand(0x36); //MX, MY, RGB mode
 80017a0:	2036      	movs	r0, #54	; 0x36
 80017a2:	f7ff fd35 	bl	8001210 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(MemoryAccessReg);	//0x08 set RGB
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd55 	bl	8001258 <LCD_1IN28_SendData_8Bit>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200000b8 	.word	0x200000b8

080017bc <LCD_1IN28_Init>:
/********************************************************************************
function :	Initialize the lcd
parameter:
********************************************************************************/
void LCD_1IN28_Init(UBYTE Scan_dir)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN28_Reset();
 80017c6:	f7ff fd05 	bl	80011d4 <LCD_1IN28_Reset>

    //Set the resolution and scanning method of the screen
    LCD_1IN28_SetAttributes(Scan_dir);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ffc9 	bl	8001764 <LCD_1IN28_SetAttributes>
    
    //Set the initialization register
    LCD_1IN28_InitReg();
 80017d2:	f7ff fd95 	bl	8001300 <LCD_1IN28_InitReg>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <LCD_1IN28_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN28_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 80017de:	b590      	push	{r4, r7, lr}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4604      	mov	r4, r0
 80017e6:	4608      	mov	r0, r1
 80017e8:	4611      	mov	r1, r2
 80017ea:	461a      	mov	r2, r3
 80017ec:	4623      	mov	r3, r4
 80017ee:	80fb      	strh	r3, [r7, #6]
 80017f0:	4603      	mov	r3, r0
 80017f2:	80bb      	strh	r3, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	803b      	strh	r3, [r7, #0]
    //set the X coordinates
    LCD_1IN28_SendCommand(0x2A);
 80017fc:	202a      	movs	r0, #42	; 0x2a
 80017fe:	f7ff fd07 	bl	8001210 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fd28 	bl	8001258 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xstart);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fd23 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fd20 	bl	8001258 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Xend);
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fd1b 	bl	8001258 <LCD_1IN28_SendData_8Bit>

    //set the Y coordinates
    LCD_1IN28_SendCommand(0x2B);
 8001822:	202b      	movs	r0, #43	; 0x2b
 8001824:	f7ff fcf4 	bl	8001210 <LCD_1IN28_SendCommand>
    LCD_1IN28_SendData_8Bit(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fd15 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(Ystart);
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fd10 	bl	8001258 <LCD_1IN28_SendData_8Bit>
	LCD_1IN28_SendData_8Bit(0x00);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fd0d 	bl	8001258 <LCD_1IN28_SendData_8Bit>
    LCD_1IN28_SendData_8Bit(Yend);
 800183e:	883b      	ldrh	r3, [r7, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fd08 	bl	8001258 <LCD_1IN28_SendData_8Bit>

    LCD_1IN28_SendCommand(0X2C);
 8001848:	202c      	movs	r0, #44	; 0x2c
 800184a:	f7ff fce1 	bl	8001210 <LCD_1IN28_SendCommand>
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}

08001856 <LCD_1IN28_Clear>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void LCD_1IN28_Clear(UWORD Color)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN28_SetWindows(0, 0, LCD_1IN28_WIDTH-1, LCD_1IN28_HEIGHT-1);
 8001860:	23ef      	movs	r3, #239	; 0xef
 8001862:	22ef      	movs	r2, #239	; 0xef
 8001864:	2100      	movs	r1, #0
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff ffb9 	bl	80017de <LCD_1IN28_SetWindows>

	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800186c:	2300      	movs	r3, #0
 800186e:	81fb      	strh	r3, [r7, #14]
 8001870:	e00f      	b.n	8001892 <LCD_1IN28_Clear+0x3c>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001872:	2300      	movs	r3, #0
 8001874:	81bb      	strh	r3, [r7, #12]
 8001876:	e006      	b.n	8001886 <LCD_1IN28_Clear+0x30>
			LCD_1IN28_SendData_16Bit(Color);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fd10 	bl	80012a0 <LCD_1IN28_SendData_16Bit>
		for(j = 0; j < LCD_1IN28_HEIGHT; j++){
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	81bb      	strh	r3, [r7, #12]
 8001886:	89bb      	ldrh	r3, [r7, #12]
 8001888:	2bef      	cmp	r3, #239	; 0xef
 800188a:	d9f5      	bls.n	8001878 <LCD_1IN28_Clear+0x22>
	for(i = 0; i < LCD_1IN28_WIDTH; i++){
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	3301      	adds	r3, #1
 8001890:	81fb      	strh	r3, [r7, #14]
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	2bef      	cmp	r3, #239	; 0xef
 8001896:	d9ec      	bls.n	8001872 <LCD_1IN28_Clear+0x1c>
		}
	 }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <LCD_1IN28_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_1IN28_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	80fb      	strh	r3, [r7, #6]
 80018ac:	460b      	mov	r3, r1
 80018ae:	80bb      	strh	r3, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	807b      	strh	r3, [r7, #2]
	LCD_1IN28_SetWindows(x,y,x,y);
 80018b4:	88bb      	ldrh	r3, [r7, #4]
 80018b6:	88fa      	ldrh	r2, [r7, #6]
 80018b8:	88b9      	ldrh	r1, [r7, #4]
 80018ba:	88f8      	ldrh	r0, [r7, #6]
 80018bc:	f7ff ff8f 	bl	80017de <LCD_1IN28_SetWindows>
	LCD_1IN28_SendData_16Bit(Color); 	    
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fcec 	bl	80012a0 <LCD_1IN28_SendData_16Bit>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f000 ffbf 	bl	8002858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f997 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 fbb5 	bl	800204c <MX_GPIO_Init>
  MX_SPI1_Init();
 80018e2:	f000 fa2b 	bl	8001d3c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80018e6:	f000 fb87 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018ea:	f000 fa5d 	bl	8001da8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80018ee:	f000 fafb 	bl	8001ee8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80018f2:	f000 f9f5 	bl	8001ce0 <MX_I2C1_Init>
  MX_TIM9_Init();
 80018f6:	f000 fb45 	bl	8001f84 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef ret;
  uint8_t buf[30];
  uint32_t temp = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t dT = 0, TEMP = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24

  TIM1->CCR1 = 20;
 8001906:	4bae      	ldr	r3, [pc, #696]	; (8001bc0 <main+0x2f0>)
 8001908:	2214      	movs	r2, #20
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800190c:	2100      	movs	r1, #0
 800190e:	48ad      	ldr	r0, [pc, #692]	; (8001bc4 <main+0x2f4>)
 8001910:	f003 fb1e 	bl	8004f50 <HAL_TIM_PWM_Start>

  buf[0] = BARO_RESET;
 8001914:	231e      	movs	r3, #30
 8001916:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001918:	23ee      	movs	r3, #238	; 0xee
 800191a:	b299      	uxth	r1, r3
 800191c:	1d3a      	adds	r2, r7, #4
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	48a8      	ldr	r0, [pc, #672]	; (8001bc8 <main+0x2f8>)
 8001928:	f001 fc50 	bl	80031cc <HAL_I2C_Master_Transmit>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (ret != HAL_OK){
 8001932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <main+0x78>
	  strcpy((char*)buf, "Error TX_1\r\n");
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4aa3      	ldr	r2, [pc, #652]	; (8001bcc <main+0x2fc>)
 800193e:	461c      	mov	r4, r3
 8001940:	4613      	mov	r3, r2
 8001942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001944:	c407      	stmia	r4!, {r0, r1, r2}
 8001946:	7023      	strb	r3, [r4, #0]
  }
  HAL_Delay(50);
 8001948:	2032      	movs	r0, #50	; 0x32
 800194a:	f000 fff7 	bl	800293c <HAL_Delay>

  buf[0] = BARO_PROM_ADDR | BARO_C5;
 800194e:	22a0      	movs	r2, #160	; 0xa0
 8001950:	230a      	movs	r3, #10
 8001952:	4313      	orrs	r3, r2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001958:	23ee      	movs	r3, #238	; 0xee
 800195a:	b299      	uxth	r1, r3
 800195c:	1d3a      	adds	r2, r7, #4
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2301      	movs	r3, #1
 8001966:	4898      	ldr	r0, [pc, #608]	; (8001bc8 <main+0x2f8>)
 8001968:	f001 fc30 	bl	80031cc <HAL_I2C_Master_Transmit>
 800196c:	4603      	mov	r3, r0
 800196e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (ret != HAL_OK){
 8001972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <main+0xba>
	  strcpy((char*)buf, "Error TX_1e\r\n");
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4a94      	ldr	r2, [pc, #592]	; (8001bd0 <main+0x300>)
 800197e:	461c      	mov	r4, r3
 8001980:	4613      	mov	r3, r2
 8001982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001984:	c407      	stmia	r4!, {r0, r1, r2}
 8001986:	8023      	strh	r3, [r4, #0]
 8001988:	e023      	b.n	80019d2 <main+0x102>
  }else{
	  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 800198a:	23ee      	movs	r3, #238	; 0xee
 800198c:	b299      	uxth	r1, r3
 800198e:	1d3a      	adds	r2, r7, #4
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2302      	movs	r3, #2
 8001998:	488b      	ldr	r0, [pc, #556]	; (8001bc8 <main+0x2f8>)
 800199a:	f001 fd15 	bl	80033c8 <HAL_I2C_Master_Receive>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  if (ret != HAL_OK){
 80019a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <main+0xee>
		  strcpy((char*)buf, "Error Rx\r\n");
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4a89      	ldr	r2, [pc, #548]	; (8001bd4 <main+0x304>)
 80019b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b2:	c303      	stmia	r3!, {r0, r1}
 80019b4:	801a      	strh	r2, [r3, #0]
 80019b6:	3302      	adds	r3, #2
 80019b8:	0c12      	lsrs	r2, r2, #16
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e009      	b.n	80019d2 <main+0x102>
	  } else {
		  C5 = ((buf[0] << 8) | buf[1]);
 80019be:	793b      	ldrb	r3, [r7, #4]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	797b      	ldrb	r3, [r7, #5]
 80019c6:	b21b      	sxth	r3, r3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b82      	ldr	r3, [pc, #520]	; (8001bd8 <main+0x308>)
 80019d0:	801a      	strh	r2, [r3, #0]
	  }
  }
  HAL_Delay(50);
 80019d2:	2032      	movs	r0, #50	; 0x32
 80019d4:	f000 ffb2 	bl	800293c <HAL_Delay>

  buf[0] = BARO_PROM_ADDR | BARO_C6;
 80019d8:	22a0      	movs	r2, #160	; 0xa0
 80019da:	230c      	movs	r3, #12
 80019dc:	4313      	orrs	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	713b      	strb	r3, [r7, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 80019e2:	23ee      	movs	r3, #238	; 0xee
 80019e4:	b299      	uxth	r1, r3
 80019e6:	1d3a      	adds	r2, r7, #4
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	4875      	ldr	r0, [pc, #468]	; (8001bc8 <main+0x2f8>)
 80019f2:	f001 fbeb 	bl	80031cc <HAL_I2C_Master_Transmit>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (ret != HAL_OK){
 80019fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <main+0x144>
		strcpy((char*)buf, "Error TX_1f\r\n");
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4a75      	ldr	r2, [pc, #468]	; (8001bdc <main+0x30c>)
 8001a08:	461c      	mov	r4, r3
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a0e:	c407      	stmia	r4!, {r0, r1, r2}
 8001a10:	8023      	strh	r3, [r4, #0]
 8001a12:	e023      	b.n	8001a5c <main+0x18c>
	}else{
		  ret = HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 2, HAL_MAX_DELAY);
 8001a14:	23ee      	movs	r3, #238	; 0xee
 8001a16:	b299      	uxth	r1, r3
 8001a18:	1d3a      	adds	r2, r7, #4
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2302      	movs	r3, #2
 8001a22:	4869      	ldr	r0, [pc, #420]	; (8001bc8 <main+0x2f8>)
 8001a24:	f001 fcd0 	bl	80033c8 <HAL_I2C_Master_Receive>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  if (ret != HAL_OK){
 8001a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <main+0x178>
			  strcpy((char*)buf, "Error Rx\r\n");
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4a66      	ldr	r2, [pc, #408]	; (8001bd4 <main+0x304>)
 8001a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a3c:	c303      	stmia	r3!, {r0, r1}
 8001a3e:	801a      	strh	r2, [r3, #0]
 8001a40:	3302      	adds	r3, #2
 8001a42:	0c12      	lsrs	r2, r2, #16
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	e009      	b.n	8001a5c <main+0x18c>
		  } else {
			  C6 = ((buf[0] << 8) | buf[1]);
 8001a48:	793b      	ldrb	r3, [r7, #4]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	4b61      	ldr	r3, [pc, #388]	; (8001be0 <main+0x310>)
 8001a5a:	801a      	strh	r2, [r3, #0]
		  }
	}
	HAL_Delay(50);
 8001a5c:	2032      	movs	r0, #50	; 0x32
 8001a5e:	f000 ff6d 	bl	800293c <HAL_Delay>

  Module_Init();
 8001a62:	f7ff fb99 	bl	8001198 <Module_Init>

//printf("LCD_1IN28_ Init and Clear...\r\n");
  LCD_1IN28_Init(VERTICAL);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff fea8 	bl	80017bc <LCD_1IN28_Init>
  LCD_1IN28_Clear(BLACK);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fef2 	bl	8001856 <LCD_1IN28_Clear>

//printf("Paint_NewImage\r\n");
  Paint_NewImage(LCD_1IN28_WIDTH,LCD_1IN28_HEIGHT, 0, BLACK);
 8001a72:	2300      	movs	r3, #0
 8001a74:	2200      	movs	r2, #0
 8001a76:	21f0      	movs	r1, #240	; 0xf0
 8001a78:	20f0      	movs	r0, #240	; 0xf0
 8001a7a:	f7ff f971 	bl	8000d60 <Paint_NewImage>

//printf("Set Clear and Display Funtion\r\n");
  Paint_SetClearFuntion(LCD_1IN28_Clear);
 8001a7e:	4859      	ldr	r0, [pc, #356]	; (8001be4 <main+0x314>)
 8001a80:	f7ff f9ae 	bl	8000de0 <Paint_SetClearFuntion>
  Paint_SetDisplayFuntion(LCD_1IN28_DrawPaint);
 8001a84:	4858      	ldr	r0, [pc, #352]	; (8001be8 <main+0x318>)
 8001a86:	f7ff f9bb 	bl	8000e00 <Paint_SetDisplayFuntion>

//printf("Paint_Clear\r\n");
  Paint_Clear(BLACK);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fa74 	bl	8000f78 <Paint_Clear>
  HAL_Delay(100);
 8001a90:	2064      	movs	r0, #100	; 0x64
 8001a92:	f000 ff53 	bl	800293c <HAL_Delay>

  //Paint_DrawLine  (120, 120, 70, 70,YELLOW ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
  //Paint_DrawLine  (120, 120, 176, 64,BLUE ,DOT_PIXEL_3X3,LINE_STYLE_SOLID);
  //Paint_DrawLine  (120, 120, 120, 210,RED ,DOT_PIXEL_2X2,LINE_STYLE_SOLID);

  HAL_TIM_Base_Start_IT(&htim9);
 8001a96:	4855      	ldr	r0, [pc, #340]	; (8001bec <main+0x31c>)
 8001a98:	f003 f962 	bl	8004d60 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (Temp_FLAG == 1){
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <main+0x320>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d1fa      	bne.n	8001a9c <main+0x1cc>
		buf[0] = BARO_CONVERT_TEMP;
 8001aa6:	2358      	movs	r3, #88	; 0x58
 8001aa8:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001aaa:	23ee      	movs	r3, #238	; 0xee
 8001aac:	b299      	uxth	r1, r3
 8001aae:	1d3a      	adds	r2, r7, #4
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4843      	ldr	r0, [pc, #268]	; (8001bc8 <main+0x2f8>)
 8001aba:	f001 fb87 	bl	80031cc <HAL_I2C_Master_Transmit>

		HAL_Delay(15);
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f000 ff3c 	bl	800293c <HAL_Delay>

		// Read temperature value

		buf[0] = ADC_BARO_READ_ADDR;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Master_Transmit(&hi2c1, BARO_ADDR, buf, 1, HAL_MAX_DELAY);
 8001ac8:	23ee      	movs	r3, #238	; 0xee
 8001aca:	b299      	uxth	r1, r3
 8001acc:	1d3a      	adds	r2, r7, #4
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	483c      	ldr	r0, [pc, #240]	; (8001bc8 <main+0x2f8>)
 8001ad8:	f001 fb78 	bl	80031cc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, BARO_ADDR, buf, 3, HAL_MAX_DELAY);
 8001adc:	23ee      	movs	r3, #238	; 0xee
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	1d3a      	adds	r2, r7, #4
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2303      	movs	r3, #3
 8001aea:	4837      	ldr	r0, [pc, #220]	; (8001bc8 <main+0x2f8>)
 8001aec:	f001 fc6c 	bl	80033c8 <HAL_I2C_Master_Receive>
		temp = ((0x00 << 24) | (buf[0] << 16) | (buf[1] << 8) | buf[2]);
 8001af0:	793b      	ldrb	r3, [r7, #4]
 8001af2:	041a      	lsls	r2, r3, #16
 8001af4:	797b      	ldrb	r3, [r7, #5]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	4313      	orrs	r3, r2
 8001afa:	79ba      	ldrb	r2, [r7, #6]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c

		dT = temp - C5*pow(2,8);
 8001b00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b02:	f7fe fcf7 	bl	80004f4 <__aeabi_ui2d>
 8001b06:	4604      	mov	r4, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	4b33      	ldr	r3, [pc, #204]	; (8001bd8 <main+0x308>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fd00 	bl	8000514 <__aeabi_i2d>
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <main+0x324>)
 8001b1a:	f7fe fd65 	bl	80005e8 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4620      	mov	r0, r4
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7fe fba7 	bl	8000278 <__aeabi_dsub>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f7fe ff6b 	bl	8000a0c <__aeabi_d2iz>
 8001b36:	4603      	mov	r3, r0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
		TEMP = 2000 + dT*C6/pow(2,23);
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <main+0x310>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fce4 	bl	8000514 <__aeabi_i2d>
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <main+0x328>)
 8001b52:	f7fe fe73 	bl	800083c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <main+0x32c>)
 8001b64:	f7fe fb8a 	bl	800027c <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe ff4c 	bl	8000a0c <__aeabi_d2iz>
 8001b74:	4603      	mov	r3, r0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24

		sprintf((char*)buf, "%i.%02u C", (int)TEMP/100, (unsigned int)TEMP%100);
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <main+0x330>)
 8001b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b80:	1152      	asrs	r2, r2, #5
 8001b82:	17db      	asrs	r3, r3, #31
 8001b84:	1ad1      	subs	r1, r2, r3
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <main+0x330>)
 8001b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2064      	movs	r0, #100	; 0x64
 8001b92:	fb00 f303 	mul.w	r3, r0, r3
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	1d38      	adds	r0, r7, #4
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	4919      	ldr	r1, [pc, #100]	; (8001c04 <main+0x334>)
 8001b9e:	f004 fc3f 	bl	8006420 <siprintf>
		Paint_DrawString_EN(123, 123+16, (char *) buf, &Font16, BLACK, GREEN);
 8001ba2:	1d3a      	adds	r2, r7, #4
 8001ba4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <main+0x338>)
 8001bb0:	218b      	movs	r1, #139	; 0x8b
 8001bb2:	207b      	movs	r0, #123	; 0x7b
 8001bb4:	f7ff fa9a 	bl	80010ec <Paint_DrawString_EN>
		Temp_FLAG = 0;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <main+0x320>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
	if (Temp_FLAG == 1){
 8001bbe:	e76d      	b.n	8001a9c <main+0x1cc>
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	2000016c 	.word	0x2000016c
 8001bc8:	200000c0 	.word	0x200000c0
 8001bcc:	08006d14 	.word	0x08006d14
 8001bd0:	08006d24 	.word	0x08006d24
 8001bd4:	08006d34 	.word	0x08006d34
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	08006d40 	.word	0x08006d40
 8001be0:	2000000a 	.word	0x2000000a
 8001be4:	08001857 	.word	0x08001857
 8001be8:	080018a3 	.word	0x080018a3
 8001bec:	200001fc 	.word	0x200001fc
 8001bf0:	20000288 	.word	0x20000288
 8001bf4:	40700000 	.word	0x40700000
 8001bf8:	41600000 	.word	0x41600000
 8001bfc:	409f4000 	.word	0x409f4000
 8001c00:	51eb851f 	.word	0x51eb851f
 8001c04:	08006d50 	.word	0x08006d50
 8001c08:	20000000 	.word	0x20000000

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b094      	sub	sp, #80	; 0x50
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	2230      	movs	r2, #48	; 0x30
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fbf8 	bl	8006410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a27      	ldr	r2, [pc, #156]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <SystemClock_Config+0xcc>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <SystemClock_Config+0xd0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c70:	2310      	movs	r3, #16
 8001c72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c74:	2302      	movs	r3, #2
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 f8ed 	bl	8003e70 <HAL_RCC_OscConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c9c:	f000 fb7c 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001cb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fb4e 	bl	8004360 <HAL_RCC_ClockConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cca:	f000 fb65 	bl	8002398 <Error_Handler>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	3750      	adds	r7, #80	; 0x50
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000

08001ce0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <MX_I2C1_Init+0x54>)
 8001ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_I2C1_Init+0x58>)
 8001cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_I2C1_Init+0x50>)
 8001d1e:	f001 f911 	bl	8002f44 <HAL_I2C_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d28:	f000 fb36 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200000c0 	.word	0x200000c0
 8001d34:	40005400 	.word	0x40005400
 8001d38:	000186a0 	.word	0x000186a0

08001d3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <MX_SPI1_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d88:	220a      	movs	r2, #10
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d8e:	f002 fd07 	bl	80047a0 <HAL_SPI_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d98:	f000 fafe 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000114 	.word	0x20000114
 8001da4:	40013000 	.word	0x40013000

08001da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b096      	sub	sp, #88	; 0x58
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2220      	movs	r2, #32
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fb15 	bl	8006410 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001de8:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <MX_TIM1_Init+0x13c>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25-1;
 8001dec:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001dee:	2218      	movs	r2, #24
 8001df0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001df8:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001dfa:	2263      	movs	r2, #99	; 0x63
 8001dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e04:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e10:	4833      	ldr	r0, [pc, #204]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e12:	f002 ff55 	bl	8004cc0 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001e1c:	f000 fabc 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	482c      	ldr	r0, [pc, #176]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e2e:	f003 fb21 	bl	8005474 <HAL_TIM_ConfigClockSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001e38:	f000 faae 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e3c:	4828      	ldr	r0, [pc, #160]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e3e:	f003 f82e 	bl	8004e9e <HAL_TIM_PWM_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001e48:	f000 faa6 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4821      	ldr	r0, [pc, #132]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e5c:	f003 ff0a 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001e66:	f000 fa97 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6a:	2360      	movs	r3, #96	; 0x60
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e90:	f003 fa2e 	bl	80052f0 <HAL_TIM_PWM_ConfigChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001e9a:	f000 fa7d 	bl	8002398 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001ec2:	f003 ff53 	bl	8005d6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ecc:	f000 fa64 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ed0:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001ed2:	f000 fb83 	bl	80025dc <HAL_TIM_MspPostInit>

}
 8001ed6:	bf00      	nop
 8001ed8:	3758      	adds	r7, #88	; 0x58
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000016c 	.word	0x2000016c
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <MX_TIM3_Init+0x98>)
 8001f08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 25000-1;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f0c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001f10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000-1;
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f1a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001f1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f2e:	f002 fec7 	bl	8004cc0 <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f38:	f000 fa2e 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f4a:	f003 fa93 	bl	8005474 <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f54:	f000 fa20 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM3_Init+0x94>)
 8001f66:	f003 fe85 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f000 fa12 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	200001b4 	.word	0x200001b4
 8001f80:	40000400 	.word	0x40000400

08001f84 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001f98:	4a16      	ldr	r2, [pc, #88]	; (8001ff4 <MX_TIM9_Init+0x70>)
 8001f9a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 25000-1;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001f9e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001fa2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 5000-1;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001fac:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fb0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001fc0:	f002 fe7e 	bl	8004cc0 <HAL_TIM_Base_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001fca:	f000 f9e5 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_TIM9_Init+0x6c>)
 8001fda:	f003 fa4b 	bl	8005474 <HAL_TIM_ConfigClockSource>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001fe4:	f000 f9d8 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200001fc 	.word	0x200001fc
 8001ff4:	40014000 	.word	0x40014000

08001ff8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_USART2_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_USART2_UART_Init+0x4c>)
 8002030:	f003 ff02 	bl	8005e38 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800203a:	f000 f9ad 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000244 	.word	0x20000244
 8002048:	40004400 	.word	0x40004400

0800204c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	4ba8      	ldr	r3, [pc, #672]	; (8002308 <MX_GPIO_Init+0x2bc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4aa7      	ldr	r2, [pc, #668]	; (8002308 <MX_GPIO_Init+0x2bc>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4ba5      	ldr	r3, [pc, #660]	; (8002308 <MX_GPIO_Init+0x2bc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	4ba1      	ldr	r3, [pc, #644]	; (8002308 <MX_GPIO_Init+0x2bc>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4aa0      	ldr	r2, [pc, #640]	; (8002308 <MX_GPIO_Init+0x2bc>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b9e      	ldr	r3, [pc, #632]	; (8002308 <MX_GPIO_Init+0x2bc>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b9a      	ldr	r3, [pc, #616]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a99      	ldr	r2, [pc, #612]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b97      	ldr	r3, [pc, #604]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b93      	ldr	r3, [pc, #588]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a92      	ldr	r2, [pc, #584]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b90      	ldr	r3, [pc, #576]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a8b      	ldr	r2, [pc, #556]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b89      	ldr	r3, [pc, #548]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	4b85      	ldr	r3, [pc, #532]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a84      	ldr	r2, [pc, #528]	; (8002308 <MX_GPIO_Init+0x2bc>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b82      	ldr	r3, [pc, #520]	; (8002308 <MX_GPIO_Init+0x2bc>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	2108      	movs	r1, #8
 800210e:	487f      	ldr	r0, [pc, #508]	; (800230c <MX_GPIO_Init+0x2c0>)
 8002110:	f000 fee6 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	2101      	movs	r1, #1
 8002118:	487d      	ldr	r0, [pc, #500]	; (8002310 <MX_GPIO_Init+0x2c4>)
 800211a:	f000 fee1 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Screen_Pin|DC_Screen_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2130      	movs	r1, #48	; 0x30
 8002122:	487b      	ldr	r0, [pc, #492]	; (8002310 <MX_GPIO_Init+0x2c4>)
 8002124:	f000 fedc 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RST_Screen_Pin|BL_Screen_Pin, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2103      	movs	r1, #3
 800212c:	4879      	ldr	r0, [pc, #484]	; (8002314 <MX_GPIO_Init+0x2c8>)
 800212e:	f000 fed7 	bl	8002ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002132:	2200      	movs	r2, #0
 8002134:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002138:	4877      	ldr	r0, [pc, #476]	; (8002318 <MX_GPIO_Init+0x2cc>)
 800213a:	f000 fed1 	bl	8002ee0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800213e:	2308      	movs	r3, #8
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	486d      	ldr	r0, [pc, #436]	; (800230c <MX_GPIO_Init+0x2c0>)
 8002156:	f000 fd27 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_Screen_Pin DC_Screen_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_Screen_Pin|DC_Screen_Pin;
 800215a:	2331      	movs	r3, #49	; 0x31
 800215c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215e:	2301      	movs	r3, #1
 8002160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4867      	ldr	r0, [pc, #412]	; (8002310 <MX_GPIO_Init+0x2c4>)
 8002172:	f000 fd19 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002176:	2308      	movs	r3, #8
 8002178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002186:	2305      	movs	r3, #5
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	485f      	ldr	r0, [pc, #380]	; (8002310 <MX_GPIO_Init+0x2c4>)
 8002192:	f000 fd09 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002196:	2301      	movs	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800219e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	4619      	mov	r1, r3
 80021aa:	485c      	ldr	r0, [pc, #368]	; (800231c <MX_GPIO_Init+0x2d0>)
 80021ac:	f000 fcfc 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80021b0:	2310      	movs	r3, #16
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021c0:	2306      	movs	r3, #6
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4854      	ldr	r0, [pc, #336]	; (800231c <MX_GPIO_Init+0x2d0>)
 80021cc:	f000 fcec 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RST_Screen_Pin BL_Screen_Pin */
  GPIO_InitStruct.Pin = RST_Screen_Pin|BL_Screen_Pin;
 80021d0:	2303      	movs	r3, #3
 80021d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	484b      	ldr	r0, [pc, #300]	; (8002314 <MX_GPIO_Init+0x2c8>)
 80021e8:	f000 fcde 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80021ec:	2304      	movs	r3, #4
 80021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	4619      	mov	r1, r3
 80021fe:	4845      	ldr	r0, [pc, #276]	; (8002314 <MX_GPIO_Init+0x2c8>)
 8002200:	f000 fcd2 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Backlight_Pin */
  GPIO_InitStruct.Pin = Backlight_Pin;
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002208:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800220c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Backlight_GPIO_Port, &GPIO_InitStruct);
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	4619      	mov	r1, r3
 8002218:	483c      	ldr	r0, [pc, #240]	; (800230c <MX_GPIO_Init+0x2c0>)
 800221a:	f000 fcc5 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800221e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002230:	2305      	movs	r3, #5
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4836      	ldr	r0, [pc, #216]	; (8002314 <MX_GPIO_Init+0x2c8>)
 800223c:	f000 fcb4 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002240:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002244:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
 8002248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	482f      	ldr	r0, [pc, #188]	; (8002318 <MX_GPIO_Init+0x2cc>)
 800225a:	f000 fca5 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800225e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002270:	2306      	movs	r3, #6
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	4619      	mov	r1, r3
 800227a:	4825      	ldr	r0, [pc, #148]	; (8002310 <MX_GPIO_Init+0x2c4>)
 800227c:	f000 fc94 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002280:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	4821      	ldr	r0, [pc, #132]	; (800231c <MX_GPIO_Init+0x2d0>)
 8002296:	f000 fc87 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800229a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022ac:	230a      	movs	r3, #10
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	4619      	mov	r1, r3
 80022b6:	4819      	ldr	r0, [pc, #100]	; (800231c <MX_GPIO_Init+0x2d0>)
 80022b8:	f000 fc76 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022bc:	2320      	movs	r3, #32
 80022be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4619      	mov	r1, r3
 80022ce:	4812      	ldr	r0, [pc, #72]	; (8002318 <MX_GPIO_Init+0x2cc>)
 80022d0:	f000 fc6a 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80022d4:	2302      	movs	r3, #2
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80022dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	4808      	ldr	r0, [pc, #32]	; (800230c <MX_GPIO_Init+0x2c0>)
 80022ea:	f000 fc5d 	bl	8002ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2017      	movs	r0, #23
 80022f4:	f000 fc21 	bl	8002b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022f8:	2017      	movs	r0, #23
 80022fa:	f000 fc3a 	bl	8002b72 <HAL_NVIC_EnableIRQ>

}
 80022fe:	bf00      	nop
 8002300:	3730      	adds	r7, #48	; 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40021000 	.word	0x40021000
 8002310:	40020800 	.word	0x40020800
 8002314:	40020400 	.word	0x40020400
 8002318:	40020c00 	.word	0x40020c00
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == Backlight_Pin){
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d109      	bne.n	8002344 <HAL_GPIO_EXTI_Callback+0x24>
		TIM1->CCR1 = 100;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002332:	2264      	movs	r2, #100	; 0x64
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_Base_Start_IT(&htim3);
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <HAL_GPIO_EXTI_Callback+0x30>)
 8002338:	f002 fd12 	bl	8004d60 <HAL_TIM_Base_Start_IT>
		__HAL_TIM_SET_COUNTER(&htim3, 0);
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_GPIO_EXTI_Callback+0x30>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010000 	.word	0x40010000
 8002350:	200001b4 	.word	0x200001b4

08002354 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

	if (htim == &htim3){
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d106      	bne.n	8002372 <HAL_TIM_PeriodElapsedCallback+0x1e>
		TIM1->CCR1 = 20;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002366:	2214      	movs	r2, #20
 8002368:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_Base_Stop_IT(&htim3);
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800236c:	f002 fd68 	bl	8004e40 <HAL_TIM_Base_Stop_IT>

	else if (htim == &htim9){
		Temp_FLAG = 1;
	}

}
 8002370:	e006      	b.n	8002380 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim == &htim9){
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d102      	bne.n	8002380 <HAL_TIM_PeriodElapsedCallback+0x2c>
		Temp_FLAG = 1;
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200001b4 	.word	0x200001b4
 800238c:	40010000 	.word	0x40010000
 8002390:	200001fc 	.word	0x200001fc
 8002394:	20000288 	.word	0x20000288

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <Error_Handler+0x8>
	...

080023a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_MspInit+0x4c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_MspInit+0x4c>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_MspInit+0x4c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_MspInit+0x4c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_MspInit+0x4c>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_MspInit+0x4c>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023e2:	2007      	movs	r0, #7
 80023e4:	f000 fb9e 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800

080023f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_I2C_MspInit+0x84>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d12c      	bne.n	8002470 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_I2C_MspInit+0x88>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_I2C_MspInit+0x88>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <HAL_I2C_MspInit+0x88>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002432:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002438:	2312      	movs	r3, #18
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002444:	2304      	movs	r3, #4
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	480c      	ldr	r0, [pc, #48]	; (8002480 <HAL_I2C_MspInit+0x8c>)
 8002450:	f000 fbaa 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_I2C_MspInit+0x88>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_I2C_MspInit+0x88>)
 800245e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_I2C_MspInit+0x88>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40005400 	.word	0x40005400
 800247c:	40023800 	.word	0x40023800
 8002480:	40020400 	.word	0x40020400

08002484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <HAL_SPI_MspInit+0x84>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d12b      	bne.n	80024fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_SPI_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80024de:	23e0      	movs	r3, #224	; 0xe0
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ee:	2305      	movs	r3, #5
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_SPI_MspInit+0x8c>)
 80024fa:	f000 fb55 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40013000 	.word	0x40013000
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000

08002514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a2a      	ldr	r2, [pc, #168]	; (80025cc <HAL_TIM_Base_MspInit+0xb8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d116      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a28      	ldr	r2, [pc, #160]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2018      	movs	r0, #24
 8002548:	f000 faf7 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800254c:	2018      	movs	r0, #24
 800254e:	f000 fb10 	bl	8002b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002552:	e036      	b.n	80025c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <HAL_TIM_Base_MspInit+0xc0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d116      	bne.n	800258c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201d      	movs	r0, #29
 8002580:	f000 fadb 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002584:	201d      	movs	r0, #29
 8002586:	f000 faf4 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 800258a:	e01a      	b.n	80025c2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM9)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_TIM_Base_MspInit+0xc4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d115      	bne.n	80025c2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6453      	str	r3, [r2, #68]	; 0x44
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_Base_MspInit+0xbc>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2018      	movs	r0, #24
 80025b8:	f000 fabf 	bl	8002b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025bc:	2018      	movs	r0, #24
 80025be:	f000 fad8 	bl	8002b72 <HAL_NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40014000 	.word	0x40014000

080025dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_TIM_MspPostInit+0x68>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11e      	bne.n	800263c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_TIM_MspPostInit+0x6c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a10      	ldr	r2, [pc, #64]	; (8002648 <HAL_TIM_MspPostInit+0x6c>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_TIM_MspPostInit+0x6c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800261a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800262c:	2301      	movs	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	4619      	mov	r1, r3
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <HAL_TIM_MspPostInit+0x70>)
 8002638:	f000 fab6 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40010000 	.word	0x40010000
 8002648:	40023800 	.word	0x40023800
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <HAL_UART_MspInit+0x84>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d12b      	bne.n	80026ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <HAL_UART_MspInit+0x88>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <HAL_UART_MspInit+0x88>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_UART_MspInit+0x88>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_UART_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_UART_MspInit+0x88>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_UART_MspInit+0x88>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026aa:	230c      	movs	r3, #12
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ba:	2307      	movs	r3, #7
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_UART_MspInit+0x8c>)
 80026c6:	f000 fa6f 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026ca:	bf00      	nop
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40004400 	.word	0x40004400
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000

080026e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <NMI_Handler+0x4>

080026e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ea:	e7fe      	b.n	80026ea <HardFault_Handler+0x4>

080026ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <MemManage_Handler+0x4>

080026f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <UsageFault_Handler+0x4>

080026fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272c:	f000 f8e6 	bl	80028fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}

08002734 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Backlight_Pin);
 8002738:	2080      	movs	r0, #128	; 0x80
 800273a:	f000 fbeb 	bl	8002f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002748:	4803      	ldr	r0, [pc, #12]	; (8002758 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800274a:	f002 fcc9 	bl	80050e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8002750:	f002 fcc6 	bl	80050e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	2000016c 	.word	0x2000016c
 800275c:	200001fc 	.word	0x200001fc

08002760 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <TIM3_IRQHandler+0x10>)
 8002766:	f002 fcbb 	bl	80050e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200001b4 	.word	0x200001b4

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f003 fe0a 	bl	80063bc <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20020000 	.word	0x20020000
 80027d4:	00000400 	.word	0x00000400
 80027d8:	2000028c 	.word	0x2000028c
 80027dc:	200002a8 	.word	0x200002a8

080027e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SystemInit+0x20>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <SystemInit+0x20>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002808:	480d      	ldr	r0, [pc, #52]	; (8002840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800280a:	490e      	ldr	r1, [pc, #56]	; (8002844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800280c:	4a0e      	ldr	r2, [pc, #56]	; (8002848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002820:	4c0b      	ldr	r4, [pc, #44]	; (8002850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282e:	f7ff ffd7 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002832:	f003 fdc9 	bl	80063c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002836:	f7ff f84b 	bl	80018d0 <main>
  bx  lr    
 800283a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800283c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002848:	08007998 	.word	0x08007998
  ldr r2, =_sbss
 800284c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002850:	200002a4 	.word	0x200002a4

08002854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_Init+0x40>)
 8002862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_Init+0x40>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_Init+0x40>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_Init+0x40>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 f94f 	bl	8002b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	2000      	movs	r0, #0
 8002888:	f000 f808 	bl	800289c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7ff fd8a 	bl	80023a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x54>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_InitTick+0x58>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4619      	mov	r1, r3
 80028ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f967 	bl	8002b8e <HAL_SYSTICK_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00e      	b.n	80028e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d80a      	bhi.n	80028e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f000 f92f 	bl	8002b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <HAL_InitTick+0x5c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	20000014 	.word	0x20000014
 80028f8:	20000010 	.word	0x20000010

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000014 	.word	0x20000014
 8002920:	20000290 	.word	0x20000290

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000290 	.word	0x20000290

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff ffee 	bl	8002924 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d005      	beq.n	8002962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_Delay+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002962:	bf00      	nop
 8002964:	f7ff ffde 	bl	8002924 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8f7      	bhi.n	8002964 <HAL_Delay+0x28>
  {
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000014 	.word	0x20000014

08002984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	60d3      	str	r3, [r2, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4907      	ldr	r1, [pc, #28]	; (8002a20 <__NVIC_EnableIRQ+0x38>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	; (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	; (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	; 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af0:	d301      	bcc.n	8002af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00f      	b.n	8002b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af6:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <SysTick_Config+0x40>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afe:	210f      	movs	r1, #15
 8002b00:	f04f 30ff 	mov.w	r0, #4294967295
 8002b04:	f7ff ff8e 	bl	8002a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <SysTick_Config+0x40>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <SysTick_Config+0x40>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	e000e010 	.word	0xe000e010

08002b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff29 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4c:	f7ff ff3e 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff8e 	bl	8002a78 <NVIC_EncodePriority>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff5d 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff31 	bl	80029e8 <__NVIC_EnableIRQ>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffa2 	bl	8002ae0 <SysTick_Config>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	e16b      	b.n	8002e9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f040 815a 	bne.w	8002e96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d005      	beq.n	8002bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d130      	bne.n	8002c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	2203      	movs	r2, #3
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c30:	2201      	movs	r2, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 0201 	and.w	r2, r3, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d017      	beq.n	8002c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d123      	bne.n	8002cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	08da      	lsrs	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3208      	adds	r2, #8
 8002cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	220f      	movs	r2, #15
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	08da      	lsrs	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3208      	adds	r2, #8
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b4 	beq.w	8002e96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b60      	ldr	r3, [pc, #384]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a5f      	ldr	r2, [pc, #380]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_GPIO_Init+0x30c>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4a:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <HAL_GPIO_Init+0x310>)
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	3302      	adds	r3, #2
 8002d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	220f      	movs	r2, #15
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a52      	ldr	r2, [pc, #328]	; (8002ebc <HAL_GPIO_Init+0x314>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d02b      	beq.n	8002dce <HAL_GPIO_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a51      	ldr	r2, [pc, #324]	; (8002ec0 <HAL_GPIO_Init+0x318>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d025      	beq.n	8002dca <HAL_GPIO_Init+0x222>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a50      	ldr	r2, [pc, #320]	; (8002ec4 <HAL_GPIO_Init+0x31c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01f      	beq.n	8002dc6 <HAL_GPIO_Init+0x21e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4f      	ldr	r2, [pc, #316]	; (8002ec8 <HAL_GPIO_Init+0x320>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d019      	beq.n	8002dc2 <HAL_GPIO_Init+0x21a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4e      	ldr	r2, [pc, #312]	; (8002ecc <HAL_GPIO_Init+0x324>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_GPIO_Init+0x216>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4d      	ldr	r2, [pc, #308]	; (8002ed0 <HAL_GPIO_Init+0x328>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00d      	beq.n	8002dba <HAL_GPIO_Init+0x212>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <HAL_GPIO_Init+0x32c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <HAL_GPIO_Init+0x20e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4b      	ldr	r2, [pc, #300]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_GPIO_Init+0x20a>
 8002dae:	2307      	movs	r3, #7
 8002db0:	e00e      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002db2:	2308      	movs	r3, #8
 8002db4:	e00c      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002db6:	2306      	movs	r3, #6
 8002db8:	e00a      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dba:	2305      	movs	r3, #5
 8002dbc:	e008      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	e006      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e004      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <HAL_GPIO_Init+0x228>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f002 0203 	and.w	r2, r2, #3
 8002dd6:	0092      	lsls	r2, r2, #2
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de0:	4935      	ldr	r1, [pc, #212]	; (8002eb8 <HAL_GPIO_Init+0x310>)
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a27      	ldr	r2, [pc, #156]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b0f      	cmp	r3, #15
 8002ea0:	f67f ae90 	bls.w	8002bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40020400 	.word	0x40020400
 8002ec4:	40020800 	.word	0x40020800
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40021400 	.word	0x40021400
 8002ed4:	40021800 	.word	0x40021800
 8002ed8:	40021c00 	.word	0x40021c00
 8002edc:	40013c00 	.word	0x40013c00

08002ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
 8002eec:	4613      	mov	r3, r2
 8002eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ef0:	787b      	ldrb	r3, [r7, #1]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ef6:	887a      	ldrh	r2, [r7, #2]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002efc:	e003      	b.n	8002f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	041a      	lsls	r2, r3, #16
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	619a      	str	r2, [r3, #24]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d006      	beq.n	8002f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f2c:	88fb      	ldrh	r3, [r7, #6]
 8002f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f9f4 	bl	8002320 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e12b      	b.n	80031ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fa42 	bl	80023f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	; 0x24
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fa8:	f001 fbd2 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8002fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a81      	ldr	r2, [pc, #516]	; (80031b8 <HAL_I2C_Init+0x274>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d807      	bhi.n	8002fc8 <HAL_I2C_Init+0x84>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a80      	ldr	r2, [pc, #512]	; (80031bc <HAL_I2C_Init+0x278>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	bf94      	ite	ls
 8002fc0:	2301      	movls	r3, #1
 8002fc2:	2300      	movhi	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	e006      	b.n	8002fd6 <HAL_I2C_Init+0x92>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a7d      	ldr	r2, [pc, #500]	; (80031c0 <HAL_I2C_Init+0x27c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	bf94      	ite	ls
 8002fd0:	2301      	movls	r3, #1
 8002fd2:	2300      	movhi	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0e7      	b.n	80031ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a78      	ldr	r2, [pc, #480]	; (80031c4 <HAL_I2C_Init+0x280>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0c9b      	lsrs	r3, r3, #18
 8002fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4a6a      	ldr	r2, [pc, #424]	; (80031b8 <HAL_I2C_Init+0x274>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d802      	bhi.n	8003018 <HAL_I2C_Init+0xd4>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	3301      	adds	r3, #1
 8003016:	e009      	b.n	800302c <HAL_I2C_Init+0xe8>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800301e:	fb02 f303 	mul.w	r3, r2, r3
 8003022:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <HAL_I2C_Init+0x284>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	099b      	lsrs	r3, r3, #6
 800302a:	3301      	adds	r3, #1
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430b      	orrs	r3, r1
 8003032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800303e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	495c      	ldr	r1, [pc, #368]	; (80031b8 <HAL_I2C_Init+0x274>)
 8003048:	428b      	cmp	r3, r1
 800304a:	d819      	bhi.n	8003080 <HAL_I2C_Init+0x13c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1e59      	subs	r1, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fbb1 f3f3 	udiv	r3, r1, r3
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003060:	400b      	ands	r3, r1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_I2C_Init+0x138>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e59      	subs	r1, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fbb1 f3f3 	udiv	r3, r1, r3
 8003074:	3301      	adds	r3, #1
 8003076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307a:	e051      	b.n	8003120 <HAL_I2C_Init+0x1dc>
 800307c:	2304      	movs	r3, #4
 800307e:	e04f      	b.n	8003120 <HAL_I2C_Init+0x1dc>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d111      	bne.n	80030ac <HAL_I2C_Init+0x168>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1e58      	subs	r0, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6859      	ldr	r1, [r3, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	440b      	add	r3, r1
 8003096:	fbb0 f3f3 	udiv	r3, r0, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e012      	b.n	80030d2 <HAL_I2C_Init+0x18e>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	0099      	lsls	r1, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Init+0x196>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e022      	b.n	8003120 <HAL_I2C_Init+0x1dc>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10e      	bne.n	8003100 <HAL_I2C_Init+0x1bc>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1e58      	subs	r0, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	440b      	add	r3, r1
 80030f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fe:	e00f      	b.n	8003120 <HAL_I2C_Init+0x1dc>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	6809      	ldr	r1, [r1, #0]
 8003124:	4313      	orrs	r3, r2
 8003126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69da      	ldr	r2, [r3, #28]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800314e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6911      	ldr	r1, [r2, #16]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68d2      	ldr	r2, [r2, #12]
 800315a:	4311      	orrs	r1, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	430b      	orrs	r3, r1
 8003162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	000186a0 	.word	0x000186a0
 80031bc:	001e847f 	.word	0x001e847f
 80031c0:	003d08ff 	.word	0x003d08ff
 80031c4:	431bde83 	.word	0x431bde83
 80031c8:	10624dd3 	.word	0x10624dd3

080031cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	461a      	mov	r2, r3
 80031d8:	460b      	mov	r3, r1
 80031da:	817b      	strh	r3, [r7, #10]
 80031dc:	4613      	mov	r3, r2
 80031de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff fba0 	bl	8002924 <HAL_GetTick>
 80031e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	f040 80e0 	bne.w	80033b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	2319      	movs	r3, #25
 80031fa:	2201      	movs	r2, #1
 80031fc:	4970      	ldr	r1, [pc, #448]	; (80033c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 fc58 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
 800320c:	e0d3      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_I2C_Master_Transmit+0x50>
 8003218:	2302      	movs	r3, #2
 800321a:	e0cc      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1ea>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d007      	beq.n	8003242 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003250:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2221      	movs	r2, #33	; 0x21
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2210      	movs	r2, #16
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	893a      	ldrh	r2, [r7, #8]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4a50      	ldr	r2, [pc, #320]	; (80033c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003282:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fac2 	bl	8003814 <I2C_MasterRequestWrite>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e08d      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032b0:	e066      	b.n	8003380 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	6a39      	ldr	r1, [r7, #32]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fcd2 	bl	8003c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00d      	beq.n	80032de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d107      	bne.n	80032da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e06b      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d11b      	bne.n	8003354 <HAL_I2C_Master_Transmit+0x188>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d017      	beq.n	8003354 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	6a39      	ldr	r1, [r7, #32]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fcc2 	bl	8003ce2 <I2C_WaitOnBTFFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00d      	beq.n	8003380 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	2b04      	cmp	r3, #4
 800336a:	d107      	bne.n	800337c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e01a      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d194      	bne.n	80032b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
  }
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	00100002 	.word	0x00100002
 80033c4:	ffff0000 	.word	0xffff0000

080033c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af02      	add	r7, sp, #8
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	461a      	mov	r2, r3
 80033d4:	460b      	mov	r3, r1
 80033d6:	817b      	strh	r3, [r7, #10]
 80033d8:	4613      	mov	r3, r2
 80033da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff faa2 	bl	8002924 <HAL_GetTick>
 80033e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	f040 820b 	bne.w	8003806 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2319      	movs	r3, #25
 80033f6:	2201      	movs	r2, #1
 80033f8:	497c      	ldr	r1, [pc, #496]	; (80035ec <HAL_I2C_Master_Receive+0x224>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 fb5a 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
 8003408:	e1fe      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_I2C_Master_Receive+0x50>
 8003414:	2302      	movs	r3, #2
 8003416:	e1f7      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d007      	beq.n	800343e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0201 	orr.w	r2, r2, #1
 800343c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2222      	movs	r2, #34	; 0x22
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2210      	movs	r2, #16
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	893a      	ldrh	r2, [r7, #8]
 800346e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a5c      	ldr	r2, [pc, #368]	; (80035f0 <HAL_I2C_Master_Receive+0x228>)
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003480:	8979      	ldrh	r1, [r7, #10]
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fa46 	bl	8003918 <I2C_MasterRequestRead>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1b8      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	2b00      	cmp	r3, #0
 800349c:	d113      	bne.n	80034c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	623b      	str	r3, [r7, #32]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e18c      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d11b      	bne.n	8003506 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e16c      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	2b02      	cmp	r3, #2
 800350c:	d11b      	bne.n	8003546 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800351c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	e14c      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800356c:	e138      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b03      	cmp	r3, #3
 8003574:	f200 80f1 	bhi.w	800375a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	2b01      	cmp	r3, #1
 800357e:	d123      	bne.n	80035c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fbed 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e139      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c6:	e10b      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d14e      	bne.n	800366e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	2200      	movs	r2, #0
 80035d8:	4906      	ldr	r1, [pc, #24]	; (80035f4 <HAL_I2C_Master_Receive+0x22c>)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fa6a 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e10e      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
 80035ea:	bf00      	nop
 80035ec:	00100002 	.word	0x00100002
 80035f0:	ffff0000 	.word	0xffff0000
 80035f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800366c:	e0b8      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	4966      	ldr	r1, [pc, #408]	; (8003810 <HAL_I2C_Master_Receive+0x448>)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fa1b 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0bf      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d0:	2200      	movs	r2, #0
 80036d2:	494f      	ldr	r1, [pc, #316]	; (8003810 <HAL_I2C_Master_Receive+0x448>)
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f9ed 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e091      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003758:	e042      	b.n	80037e0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 fb00 	bl	8003d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e04c      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d118      	bne.n	80037e0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f47f aec2 	bne.w	800356e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	00010004 	.word	0x00010004

08003814 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d006      	beq.n	800383e <I2C_MasterRequestWrite+0x2a>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d003      	beq.n	800383e <I2C_MasterRequestWrite+0x2a>
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800383c:	d108      	bne.n	8003850 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e00b      	b.n	8003868 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	2b12      	cmp	r3, #18
 8003856:	d107      	bne.n	8003868 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f91d 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800388e:	d103      	bne.n	8003898 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e035      	b.n	8003908 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038a4:	d108      	bne.n	80038b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038b4:	611a      	str	r2, [r3, #16]
 80038b6:	e01b      	b.n	80038f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	11db      	asrs	r3, r3, #7
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 0306 	and.w	r3, r3, #6
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f063 030f 	orn	r3, r3, #15
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	490e      	ldr	r1, [pc, #56]	; (8003910 <I2C_MasterRequestWrite+0xfc>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f943 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e010      	b.n	8003908 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038e6:	897b      	ldrh	r3, [r7, #10]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <I2C_MasterRequestWrite+0x100>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f933 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	00010008 	.word	0x00010008
 8003914:	00010002 	.word	0x00010002

08003918 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	460b      	mov	r3, r1
 8003926:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800393c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d006      	beq.n	8003952 <I2C_MasterRequestRead+0x3a>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d003      	beq.n	8003952 <I2C_MasterRequestRead+0x3a>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003950:	d108      	bne.n	8003964 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e00b      	b.n	800397c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	2b11      	cmp	r3, #17
 800396a:	d107      	bne.n	800397c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f893 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	d103      	bne.n	80039ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e079      	b.n	8003aa4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b8:	d108      	bne.n	80039cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]
 80039ca:	e05f      	b.n	8003a8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039cc:	897b      	ldrh	r3, [r7, #10]
 80039ce:	11db      	asrs	r3, r3, #7
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 0306 	and.w	r3, r3, #6
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f063 030f 	orn	r3, r3, #15
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4930      	ldr	r1, [pc, #192]	; (8003aac <I2C_MasterRequestRead+0x194>)
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 f8b9 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e054      	b.n	8003aa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4929      	ldr	r1, [pc, #164]	; (8003ab0 <I2C_MasterRequestRead+0x198>)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f8a9 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e044      	b.n	8003aa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f831 	bl	8003ab4 <I2C_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a66:	d103      	bne.n	8003a70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e017      	b.n	8003aa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	11db      	asrs	r3, r3, #7
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0306 	and.w	r3, r3, #6
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	f063 030e 	orn	r3, r3, #14
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <I2C_MasterRequestRead+0x198>)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f865 	bl	8003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	00010008 	.word	0x00010008
 8003ab0:	00010002 	.word	0x00010002

08003ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ac4:	e025      	b.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d021      	beq.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe ff29 	bl	8002924 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e023      	b.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10d      	bne.n	8003b38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4013      	ands	r3, r2
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	e00c      	b.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4013      	ands	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf0c      	ite	eq
 8003b4a:	2301      	moveq	r3, #1
 8003b4c:	2300      	movne	r3, #0
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d0b6      	beq.n	8003ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b70:	e051      	b.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b80:	d123      	bne.n	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f043 0204 	orr.w	r2, r3, #4
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e046      	b.n	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d021      	beq.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd2:	f7fe fea7 	bl	8002924 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d302      	bcc.n	8003be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d116      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e020      	b.n	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d10c      	bne.n	8003c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	e00b      	b.n	8003c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf14      	ite	ne
 8003c4c:	2301      	movne	r3, #1
 8003c4e:	2300      	moveq	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d18d      	bne.n	8003b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c6c:	e02d      	b.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f8ce 	bl	8003e10 <I2C_IsAcknowledgeFailed>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e02d      	b.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d021      	beq.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fe4d 	bl	8002924 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d116      	bne.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f043 0220 	orr.w	r2, r3, #32
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e007      	b.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d1ca      	bne.n	8003c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cee:	e02d      	b.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f88d 	bl	8003e10 <I2C_IsAcknowledgeFailed>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e02d      	b.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d021      	beq.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d08:	f7fe fe0c 	bl	8002924 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e007      	b.n	8003d5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d1ca      	bne.n	8003cf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d70:	e042      	b.n	8003df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d119      	bne.n	8003db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e029      	b.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fe fdb6 	bl	8002924 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d116      	bne.n	8003df8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e007      	b.n	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d1b5      	bne.n	8003d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d11b      	bne.n	8003e60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e000      	b.n	8003e62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e267      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d075      	beq.n	8003f7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d00c      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e9a:	4b85      	ldr	r3, [pc, #532]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d112      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea6:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb2:	d10b      	bne.n	8003ecc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb4:	4b7e      	ldr	r3, [pc, #504]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05b      	beq.n	8003f78 <HAL_RCC_OscConfig+0x108>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d157      	bne.n	8003f78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e242      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x74>
 8003ed6:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a75      	ldr	r2, [pc, #468]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	e01d      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eec:	d10c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x98>
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a6f      	ldr	r2, [pc, #444]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b6d      	ldr	r3, [pc, #436]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e00b      	b.n	8003f20 <HAL_RCC_OscConfig+0xb0>
 8003f08:	4b69      	ldr	r3, [pc, #420]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a68      	ldr	r2, [pc, #416]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	4b66      	ldr	r3, [pc, #408]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a65      	ldr	r2, [pc, #404]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d013      	beq.n	8003f50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe fcfc 	bl	8002924 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f30:	f7fe fcf8 	bl	8002924 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	; 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e207      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f42:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0xc0>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7fe fce8 	bl	8002924 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f58:	f7fe fce4 	bl	8002924 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	; 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e1f3      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f0      	bne.n	8003f58 <HAL_RCC_OscConfig+0xe8>
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d063      	beq.n	800404e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f86:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b47      	ldr	r3, [pc, #284]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9e:	4b44      	ldr	r3, [pc, #272]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d116      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	4b41      	ldr	r3, [pc, #260]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x152>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1c7      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4937      	ldr	r1, [pc, #220]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	e03a      	b.n	800404e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe0:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <HAL_RCC_OscConfig+0x244>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fc9d 	bl	8002924 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fe fc99 	bl	8002924 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e1a8      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b28      	ldr	r3, [pc, #160]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4925      	ldr	r1, [pc, #148]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	e015      	b.n	800404e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <HAL_RCC_OscConfig+0x244>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fc7c 	bl	8002924 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004030:	f7fe fc78 	bl	8002924 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e187      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	4b1b      	ldr	r3, [pc, #108]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d036      	beq.n	80040c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004062:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_RCC_OscConfig+0x248>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe fc5c 	bl	8002924 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fe fc58 	bl	8002924 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e167      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_OscConfig+0x240>)
 8004084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x200>
 800408e:	e01b      	b.n	80040c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <HAL_RCC_OscConfig+0x248>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004096:	f7fe fc45 	bl	8002924 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	e00e      	b.n	80040bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409e:	f7fe fc41 	bl	8002924 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d907      	bls.n	80040bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e150      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	42470000 	.word	0x42470000
 80040b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	4b88      	ldr	r3, [pc, #544]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ea      	bne.n	800409e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8097 	beq.w	8004204 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	4b7d      	ldr	r3, [pc, #500]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a7c      	ldr	r2, [pc, #496]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b7a      	ldr	r3, [pc, #488]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b77      	ldr	r3, [pc, #476]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d118      	bne.n	8004144 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004112:	4b74      	ldr	r3, [pc, #464]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a73      	ldr	r2, [pc, #460]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411e:	f7fe fc01 	bl	8002924 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fe fbfd 	bl	8002924 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e10c      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCC_OscConfig+0x474>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d106      	bne.n	800415a <HAL_RCC_OscConfig+0x2ea>
 800414c:	4b64      	ldr	r3, [pc, #400]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	4a63      	ldr	r2, [pc, #396]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	; 0x70
 8004158:	e01c      	b.n	8004194 <HAL_RCC_OscConfig+0x324>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x30c>
 8004162:	4b5f      	ldr	r3, [pc, #380]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	4a5e      	ldr	r2, [pc, #376]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	; 0x70
 800416e:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	4a5b      	ldr	r2, [pc, #364]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6713      	str	r3, [r2, #112]	; 0x70
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0x324>
 800417c:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a57      	ldr	r2, [pc, #348]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	4b55      	ldr	r3, [pc, #340]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4a54      	ldr	r2, [pc, #336]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800418e:	f023 0304 	bic.w	r3, r3, #4
 8004192:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fe fbc2 	bl	8002924 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fe fbbe 	bl	8002924 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0cb      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	4b49      	ldr	r3, [pc, #292]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ee      	beq.n	80041a4 <HAL_RCC_OscConfig+0x334>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c8:	f7fe fbac 	bl	8002924 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fe fba8 	bl	8002924 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0b5      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ee      	bne.n	80041d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	4a38      	ldr	r2, [pc, #224]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004202:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a1 	beq.w	8004350 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420e:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b08      	cmp	r3, #8
 8004218:	d05c      	beq.n	80042d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d141      	bne.n	80042a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <HAL_RCC_OscConfig+0x478>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe fb7c 	bl	8002924 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fe fb78 	bl	8002924 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e087      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	491b      	ldr	r1, [pc, #108]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_RCC_OscConfig+0x478>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7fe fb51 	bl	8002924 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fe fb4d 	bl	8002924 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e05c      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x416>
 80042a4:	e054      	b.n	8004350 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_OscConfig+0x478>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fe fb3a 	bl	8002924 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b4:	f7fe fb36 	bl	8002924 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e045      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_OscConfig+0x470>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x444>
 80042d2:	e03d      	b.n	8004350 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d107      	bne.n	80042ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e038      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40007000 	.word	0x40007000
 80042e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042ec:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_OscConfig+0x4ec>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d028      	beq.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004304:	429a      	cmp	r2, r3
 8004306:	d121      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	429a      	cmp	r2, r3
 8004314:	d11a      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004322:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004324:	4293      	cmp	r3, r2
 8004326:	d111      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	085b      	lsrs	r3, r3, #1
 8004334:	3b01      	subs	r3, #1
 8004336:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800

08004360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0cc      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b68      	ldr	r3, [pc, #416]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d90c      	bls.n	800439c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b63      	ldr	r3, [pc, #396]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d001      	beq.n	800439c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e0b8      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4a58      	ldr	r2, [pc, #352]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a52      	ldr	r2, [pc, #328]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	494d      	ldr	r1, [pc, #308]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d044      	beq.n	8004480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d119      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d003      	beq.n	800441e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441a:	2b03      	cmp	r3, #3
 800441c:	d107      	bne.n	800442e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441e:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e06f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e067      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	4934      	ldr	r1, [pc, #208]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004450:	f7fe fa68 	bl	8002924 <HAL_GetTick>
 8004454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004456:	e00a      	b.n	800446e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004458:	f7fe fa64 	bl	8002924 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f241 3288 	movw	r2, #5000	; 0x1388
 8004466:	4293      	cmp	r3, r2
 8004468:	d901      	bls.n	800446e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e04f      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	4b2b      	ldr	r3, [pc, #172]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 020c 	and.w	r2, r3, #12
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	429a      	cmp	r2, r3
 800447e:	d1eb      	bne.n	8004458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004480:	4b25      	ldr	r3, [pc, #148]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d20c      	bcs.n	80044a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448e:	4b22      	ldr	r3, [pc, #136]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	4b20      	ldr	r3, [pc, #128]	; (8004518 <HAL_RCC_ClockConfig+0x1b8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d001      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e032      	b.n	800450e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4916      	ldr	r1, [pc, #88]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	490e      	ldr	r1, [pc, #56]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044e6:	f000 f821 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044ea:	4602      	mov	r2, r0
 80044ec:	4b0b      	ldr	r3, [pc, #44]	; (800451c <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	490a      	ldr	r1, [pc, #40]	; (8004520 <HAL_RCC_ClockConfig+0x1c0>)
 80044f8:	5ccb      	ldrb	r3, [r1, r3]
 80044fa:	fa22 f303 	lsr.w	r3, r2, r3
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1c4>)
 8004500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x1c8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe f9c8 	bl	800289c <HAL_InitTick>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40023c00 	.word	0x40023c00
 800451c:	40023800 	.word	0x40023800
 8004520:	0800793c 	.word	0x0800793c
 8004524:	2000000c 	.word	0x2000000c
 8004528:	20000010 	.word	0x20000010

0800452c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b094      	sub	sp, #80	; 0x50
 8004532:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	647b      	str	r3, [r7, #68]	; 0x44
 8004538:	2300      	movs	r3, #0
 800453a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800453c:	2300      	movs	r3, #0
 800453e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004544:	4b79      	ldr	r3, [pc, #484]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b08      	cmp	r3, #8
 800454e:	d00d      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x40>
 8004550:	2b08      	cmp	r3, #8
 8004552:	f200 80e1 	bhi.w	8004718 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x34>
 800455a:	2b04      	cmp	r3, #4
 800455c:	d003      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x3a>
 800455e:	e0db      	b.n	8004718 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b73      	ldr	r3, [pc, #460]	; (8004730 <HAL_RCC_GetSysClockFreq+0x204>)
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004564:	e0db      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <HAL_RCC_GetSysClockFreq+0x208>)
 8004568:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800456a:	e0d8      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800456c:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004574:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004576:	4b6d      	ldr	r3, [pc, #436]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004582:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	2200      	movs	r2, #0
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
 800458c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004594:	633b      	str	r3, [r7, #48]	; 0x30
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800459e:	4622      	mov	r2, r4
 80045a0:	462b      	mov	r3, r5
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	0159      	lsls	r1, r3, #5
 80045ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b0:	0150      	lsls	r0, r2, #5
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4621      	mov	r1, r4
 80045b8:	1a51      	subs	r1, r2, r1
 80045ba:	6139      	str	r1, [r7, #16]
 80045bc:	4629      	mov	r1, r5
 80045be:	eb63 0301 	sbc.w	r3, r3, r1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d0:	4659      	mov	r1, fp
 80045d2:	018b      	lsls	r3, r1, #6
 80045d4:	4651      	mov	r1, sl
 80045d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045da:	4651      	mov	r1, sl
 80045dc:	018a      	lsls	r2, r1, #6
 80045de:	4651      	mov	r1, sl
 80045e0:	ebb2 0801 	subs.w	r8, r2, r1
 80045e4:	4659      	mov	r1, fp
 80045e6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045fe:	4690      	mov	r8, r2
 8004600:	4699      	mov	r9, r3
 8004602:	4623      	mov	r3, r4
 8004604:	eb18 0303 	adds.w	r3, r8, r3
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	462b      	mov	r3, r5
 800460c:	eb49 0303 	adc.w	r3, r9, r3
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800461e:	4629      	mov	r1, r5
 8004620:	024b      	lsls	r3, r1, #9
 8004622:	4621      	mov	r1, r4
 8004624:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004628:	4621      	mov	r1, r4
 800462a:	024a      	lsls	r2, r1, #9
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004632:	2200      	movs	r2, #0
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
 8004636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004638:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800463c:	f7fc fa0e 	bl	8000a5c <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004648:	e058      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800464a:	4b38      	ldr	r3, [pc, #224]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	2200      	movs	r2, #0
 8004652:	4618      	mov	r0, r3
 8004654:	4611      	mov	r1, r2
 8004656:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	f04f 0100 	mov.w	r1, #0
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004676:	0150      	lsls	r0, r2, #5
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4641      	mov	r1, r8
 800467e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb63 0b01 	sbc.w	fp, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004694:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004698:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800469c:	ebb2 040a 	subs.w	r4, r2, sl
 80046a0:	eb63 050b 	sbc.w	r5, r3, fp
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	464b      	mov	r3, r9
 80046c0:	eb45 0303 	adc.w	r3, r5, r3
 80046c4:	607b      	str	r3, [r7, #4]
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046d2:	4629      	mov	r1, r5
 80046d4:	028b      	lsls	r3, r1, #10
 80046d6:	4621      	mov	r1, r4
 80046d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046dc:	4621      	mov	r1, r4
 80046de:	028a      	lsls	r2, r1, #10
 80046e0:	4610      	mov	r0, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e6:	2200      	movs	r2, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	61fa      	str	r2, [r7, #28]
 80046ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f0:	f7fc f9b4 	bl	8000a5c <__aeabi_uldivmod>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4613      	mov	r3, r2
 80046fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_GetSysClockFreq+0x200>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	3301      	adds	r3, #1
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800470c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004716:	e002      	b.n	800471e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetSysClockFreq+0x204>)
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800471c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004720:	4618      	mov	r0, r3
 8004722:	3750      	adds	r7, #80	; 0x50
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	00f42400 	.word	0x00f42400
 8004734:	007a1200 	.word	0x007a1200

08004738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b03      	ldr	r3, [pc, #12]	; (800474c <HAL_RCC_GetHCLKFreq+0x14>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c

08004750 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004754:	f7ff fff0 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004758:	4602      	mov	r2, r0
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x20>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	f003 0307 	and.w	r3, r3, #7
 8004764:	4903      	ldr	r1, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004766:	5ccb      	ldrb	r3, [r1, r3]
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800476c:	4618      	mov	r0, r3
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800
 8004774:	0800794c 	.word	0x0800794c

08004778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800477c:	f7ff ffdc 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004780:	4602      	mov	r2, r0
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	0b5b      	lsrs	r3, r3, #13
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	4903      	ldr	r1, [pc, #12]	; (800479c <HAL_RCC_GetPCLK2Freq+0x24>)
 800478e:	5ccb      	ldrb	r3, [r1, r3]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40023800 	.word	0x40023800
 800479c:	0800794c 	.word	0x0800794c

080047a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07b      	b.n	80048aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c2:	d009      	beq.n	80047d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	61da      	str	r2, [r3, #28]
 80047ca:	e005      	b.n	80047d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd fe46 	bl	8002484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	ea42 0103 	orr.w	r1, r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0104 	and.w	r1, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0210 	and.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69da      	ldr	r2, [r3, #28]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b088      	sub	sp, #32
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_SPI_Transmit+0x22>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e126      	b.n	8004b22 <HAL_SPI_Transmit+0x270>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048dc:	f7fe f822 	bl	8002924 <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f6:	e10b      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x52>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004908:	e102      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2203      	movs	r2, #3
 800490e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004950:	d10f      	bne.n	8004972 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004960:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004970:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d007      	beq.n	8004990 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004998:	d14b      	bne.n	8004a32 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_SPI_Transmit+0xf6>
 80049a2:	8afb      	ldrh	r3, [r7, #22]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d13e      	bne.n	8004a26 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049cc:	e02b      	b.n	8004a26 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d112      	bne.n	8004a02 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	881a      	ldrh	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	1c9a      	adds	r2, r3, #2
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a00:	e011      	b.n	8004a26 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fd ff8f 	bl	8002924 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Transmit+0x168>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Transmit+0x16e>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a24:	e074      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1ce      	bne.n	80049ce <HAL_SPI_Transmit+0x11c>
 8004a30:	e04c      	b.n	8004acc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Transmit+0x18e>
 8004a3a:	8afb      	ldrh	r3, [r7, #22]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d140      	bne.n	8004ac2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a66:	e02c      	b.n	8004ac2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d113      	bne.n	8004a9e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	7812      	ldrb	r2, [r2, #0]
 8004a82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a9c:	e011      	b.n	8004ac2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a9e:	f7fd ff41 	bl	8002924 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d803      	bhi.n	8004ab6 <HAL_SPI_Transmit+0x204>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d102      	bne.n	8004abc <HAL_SPI_Transmit+0x20a>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ac0:	e026      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1cd      	bne.n	8004a68 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	6839      	ldr	r1, [r7, #0]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f8b3 	bl	8004c3c <SPI_EndRxTxTransaction>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	77fb      	strb	r3, [r7, #31]
 8004b0c:	e000      	b.n	8004b10 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b3c:	f7fd fef2 	bl	8002924 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b4c:	f7fd feea 	bl	8002924 <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	015b      	lsls	r3, r3, #5
 8004b58:	0d1b      	lsrs	r3, r3, #20
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b62:	e054      	b.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6a:	d050      	beq.n	8004c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b6c:	f7fd feda 	bl	8002924 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d902      	bls.n	8004b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d13d      	bne.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9a:	d111      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba4:	d004      	beq.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bae:	d107      	bne.n	8004bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc8:	d10f      	bne.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e017      	b.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d19b      	bne.n	8004b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <SPI_EndRxTxTransaction+0x7c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <SPI_EndRxTxTransaction+0x80>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	0d5b      	lsrs	r3, r3, #21
 8004c54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c58:	fb02 f303 	mul.w	r3, r2, r3
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c66:	d112      	bne.n	8004c8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2180      	movs	r1, #128	; 0x80
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff ff5a 	bl	8004b2c <SPI_WaitFlagStateUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f043 0220 	orr.w	r2, r3, #32
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e00f      	b.n	8004cae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b80      	cmp	r3, #128	; 0x80
 8004ca6:	d0f2      	beq.n	8004c8e <SPI_EndRxTxTransaction+0x52>
 8004ca8:	e000      	b.n	8004cac <SPI_EndRxTxTransaction+0x70>
        break;
 8004caa:	bf00      	nop
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000000c 	.word	0x2000000c
 8004cbc:	165e9f81 	.word	0x165e9f81

08004cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e041      	b.n	8004d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fd fc14 	bl	8002514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f000 fca8 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e04e      	b.n	8004e16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d022      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d01d      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <HAL_TIM_Base_Start_IT+0xc8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d018      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_TIM_Base_Start_IT+0xcc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00e      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_TIM_Base_Start_IT+0x80>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d111      	bne.n	8004e04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2b06      	cmp	r3, #6
 8004df0:	d010      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0201 	orr.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e02:	e007      	b.n	8004e14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40010000 	.word	0x40010000
 8004e28:	40000400 	.word	0x40000400
 8004e2c:	40000800 	.word	0x40000800
 8004e30:	40000c00 	.word	0x40000c00
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40001800 	.word	0x40001800

08004e40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10f      	bne.n	8004e88 <HAL_TIM_Base_Stop_IT+0x48>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a1a      	ldr	r2, [r3, #32]
 8004e6e:	f240 4344 	movw	r3, #1092	; 0x444
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d107      	bne.n	8004e88 <HAL_TIM_Base_Stop_IT+0x48>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0201 	bic.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e041      	b.n	8004f34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f839 	bl	8004f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2202      	movs	r2, #2
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 fbb9 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start+0x24>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e022      	b.n	8004fba <HAL_TIM_PWM_Start+0x6a>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d109      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x3e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	bf14      	ite	ne
 8004f86:	2301      	movne	r3, #1
 8004f88:	2300      	moveq	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	e015      	b.n	8004fba <HAL_TIM_PWM_Start+0x6a>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d109      	bne.n	8004fa8 <HAL_TIM_PWM_Start+0x58>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e008      	b.n	8004fba <HAL_TIM_PWM_Start+0x6a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	bf14      	ite	ne
 8004fb4:	2301      	movne	r3, #1
 8004fb6:	2300      	moveq	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e07c      	b.n	80050bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0x82>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	e013      	b.n	8004ffa <HAL_TIM_PWM_Start+0xaa>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_PWM_Start+0x92>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe0:	e00b      	b.n	8004ffa <HAL_TIM_PWM_Start+0xaa>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d104      	bne.n	8004ff2 <HAL_TIM_PWM_Start+0xa2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff0:	e003      	b.n	8004ffa <HAL_TIM_PWM_Start+0xaa>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2201      	movs	r2, #1
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fe10 	bl	8005c28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <HAL_TIM_PWM_Start+0x174>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_TIM_PWM_Start+0xcc>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <HAL_TIM_PWM_Start+0x178>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d101      	bne.n	8005020 <HAL_TIM_PWM_Start+0xd0>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_TIM_PWM_Start+0xd2>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_TIM_PWM_Start+0x174>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d022      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005048:	d01d      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_TIM_PWM_Start+0x17c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d018      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <HAL_TIM_PWM_Start+0x180>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d013      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_TIM_PWM_Start+0x184>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00e      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <HAL_TIM_PWM_Start+0x178>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_TIM_PWM_Start+0x188>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d004      	beq.n	8005086 <HAL_TIM_PWM_Start+0x136>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a16      	ldr	r2, [pc, #88]	; (80050dc <HAL_TIM_PWM_Start+0x18c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d111      	bne.n	80050aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b06      	cmp	r3, #6
 8005096:	d010      	beq.n	80050ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f042 0201 	orr.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	e007      	b.n	80050ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40001800 	.word	0x40001800

080050e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d122      	bne.n	800513c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b02      	cmp	r3, #2
 8005102:	d11b      	bne.n	800513c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0202 	mvn.w	r2, #2
 800510c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa77 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fa69 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fa7a 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b04      	cmp	r3, #4
 8005148:	d122      	bne.n	8005190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b04      	cmp	r3, #4
 8005156:	d11b      	bne.n	8005190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0204 	mvn.w	r2, #4
 8005160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa4d 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa3f 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fa50 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b08      	cmp	r3, #8
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0208 	mvn.w	r2, #8
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2204      	movs	r2, #4
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa23 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa15 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fa26 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0210 	mvn.w	r2, #16
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2208      	movs	r2, #8
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f9f9 	bl	8005616 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9eb 	bl	8005602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9fc 	bl	800562a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0201 	mvn.w	r2, #1
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fd f878 	bl	8002354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b80      	cmp	r3, #128	; 0x80
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b80      	cmp	r3, #128	; 0x80
 800527e:	d107      	bne.n	8005290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fdca 	bl	8005e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b40      	cmp	r3, #64	; 0x40
 800529c:	d10e      	bne.n	80052bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d107      	bne.n	80052bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f9c1 	bl	800563e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d10e      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d107      	bne.n	80052e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0220 	mvn.w	r2, #32
 80052e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fd94 	bl	8005e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530a:	2302      	movs	r3, #2
 800530c:	e0ae      	b.n	800546c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b0c      	cmp	r3, #12
 800531a:	f200 809f 	bhi.w	800545c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005359 	.word	0x08005359
 8005328:	0800545d 	.word	0x0800545d
 800532c:	0800545d 	.word	0x0800545d
 8005330:	0800545d 	.word	0x0800545d
 8005334:	08005399 	.word	0x08005399
 8005338:	0800545d 	.word	0x0800545d
 800533c:	0800545d 	.word	0x0800545d
 8005340:	0800545d 	.word	0x0800545d
 8005344:	080053db 	.word	0x080053db
 8005348:	0800545d 	.word	0x0800545d
 800534c:	0800545d 	.word	0x0800545d
 8005350:	0800545d 	.word	0x0800545d
 8005354:	0800541b 	.word	0x0800541b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68b9      	ldr	r1, [r7, #8]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fa18 	bl	8005794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0204 	bic.w	r2, r2, #4
 8005382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6999      	ldr	r1, [r3, #24]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	619a      	str	r2, [r3, #24]
      break;
 8005396:	e064      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fa68 	bl	8005874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6999      	ldr	r1, [r3, #24]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]
      break;
 80053d8:	e043      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fabd 	bl	8005960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0208 	orr.w	r2, r2, #8
 80053f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0204 	bic.w	r2, r2, #4
 8005404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69d9      	ldr	r1, [r3, #28]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	61da      	str	r2, [r3, #28]
      break;
 8005418:	e023      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 fb11 	bl	8005a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69da      	ldr	r2, [r3, #28]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69d9      	ldr	r1, [r3, #28]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	021a      	lsls	r2, r3, #8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	61da      	str	r2, [r3, #28]
      break;
 800545a:	e002      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	75fb      	strb	r3, [r7, #23]
      break;
 8005460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546a:	7dfb      	ldrb	r3, [r7, #23]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIM_ConfigClockSource+0x1c>
 800548c:	2302      	movs	r3, #2
 800548e:	e0b4      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x186>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054c8:	d03e      	beq.n	8005548 <HAL_TIM_ConfigClockSource+0xd4>
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ce:	f200 8087 	bhi.w	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	f000 8086 	beq.w	80055e6 <HAL_TIM_ConfigClockSource+0x172>
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d87f      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e0:	2b70      	cmp	r3, #112	; 0x70
 80054e2:	d01a      	beq.n	800551a <HAL_TIM_ConfigClockSource+0xa6>
 80054e4:	2b70      	cmp	r3, #112	; 0x70
 80054e6:	d87b      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e8:	2b60      	cmp	r3, #96	; 0x60
 80054ea:	d050      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x11a>
 80054ec:	2b60      	cmp	r3, #96	; 0x60
 80054ee:	d877      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f0:	2b50      	cmp	r3, #80	; 0x50
 80054f2:	d03c      	beq.n	800556e <HAL_TIM_ConfigClockSource+0xfa>
 80054f4:	2b50      	cmp	r3, #80	; 0x50
 80054f6:	d873      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d058      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x13a>
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d86f      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005500:	2b30      	cmp	r3, #48	; 0x30
 8005502:	d064      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x15a>
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d86b      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b20      	cmp	r3, #32
 800550a:	d060      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x15a>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d867      	bhi.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d05c      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x15a>
 8005514:	2b10      	cmp	r3, #16
 8005516:	d05a      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	e062      	b.n	80055e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6899      	ldr	r1, [r3, #8]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f000 fb5d 	bl	8005be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800553c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	609a      	str	r2, [r3, #8]
      break;
 8005546:	e04f      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f000 fb46 	bl	8005be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556a:	609a      	str	r2, [r3, #8]
      break;
 800556c:	e03c      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	f000 faba 	bl	8005af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2150      	movs	r1, #80	; 0x50
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fb13 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 800558c:	e02c      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 fad9 	bl	8005b52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2160      	movs	r1, #96	; 0x60
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fb03 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e01c      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 fa9a 	bl	8005af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2140      	movs	r1, #64	; 0x40
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 faf3 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e00c      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f000 faea 	bl	8005bb2 <TIM_ITRx_SetConfig>
      break;
 80055de:	e003      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
      break;
 80055e4:	e000      	b.n	80055e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a40      	ldr	r2, [pc, #256]	; (8005768 <TIM_Base_SetConfig+0x114>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d00f      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3d      	ldr	r2, [pc, #244]	; (800576c <TIM_Base_SetConfig+0x118>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a3c      	ldr	r2, [pc, #240]	; (8005770 <TIM_Base_SetConfig+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a3b      	ldr	r2, [pc, #236]	; (8005774 <TIM_Base_SetConfig+0x120>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a3a      	ldr	r2, [pc, #232]	; (8005778 <TIM_Base_SetConfig+0x124>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <TIM_Base_SetConfig+0x114>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d02b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d027      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2c      	ldr	r2, [pc, #176]	; (800576c <TIM_Base_SetConfig+0x118>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d023      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2b      	ldr	r2, [pc, #172]	; (8005770 <TIM_Base_SetConfig+0x11c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <TIM_Base_SetConfig+0x120>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a29      	ldr	r2, [pc, #164]	; (8005778 <TIM_Base_SetConfig+0x124>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d017      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a28      	ldr	r2, [pc, #160]	; (800577c <TIM_Base_SetConfig+0x128>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <TIM_Base_SetConfig+0x12c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00f      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a26      	ldr	r2, [pc, #152]	; (8005784 <TIM_Base_SetConfig+0x130>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00b      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a25      	ldr	r2, [pc, #148]	; (8005788 <TIM_Base_SetConfig+0x134>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d007      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a24      	ldr	r2, [pc, #144]	; (800578c <TIM_Base_SetConfig+0x138>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <TIM_Base_SetConfig+0x13c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d108      	bne.n	8005718 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <TIM_Base_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_Base_SetConfig+0xf8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0c      	ldr	r2, [pc, #48]	; (8005778 <TIM_Base_SetConfig+0x124>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000
 800576c:	40000400 	.word	0x40000400
 8005770:	40000800 	.word	0x40000800
 8005774:	40000c00 	.word	0x40000c00
 8005778:	40010400 	.word	0x40010400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40001800 	.word	0x40001800
 800578c:	40001c00 	.word	0x40001c00
 8005790:	40002000 	.word	0x40002000

08005794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 0302 	bic.w	r3, r3, #2
 80057dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a20      	ldr	r2, [pc, #128]	; (800586c <TIM_OC1_SetConfig+0xd8>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC1_SetConfig+0x64>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a1f      	ldr	r2, [pc, #124]	; (8005870 <TIM_OC1_SetConfig+0xdc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10c      	bne.n	8005812 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0308 	bic.w	r3, r3, #8
 80057fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 0304 	bic.w	r3, r3, #4
 8005810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a15      	ldr	r2, [pc, #84]	; (800586c <TIM_OC1_SetConfig+0xd8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d003      	beq.n	8005822 <TIM_OC1_SetConfig+0x8e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <TIM_OC1_SetConfig+0xdc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d111      	bne.n	8005846 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	621a      	str	r2, [r3, #32]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr
 800586c:	40010000 	.word	0x40010000
 8005870:	40010400 	.word	0x40010400

08005874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0210 	bic.w	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f023 0320 	bic.w	r3, r3, #32
 80058be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a22      	ldr	r2, [pc, #136]	; (8005958 <TIM_OC2_SetConfig+0xe4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_OC2_SetConfig+0x68>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a21      	ldr	r2, [pc, #132]	; (800595c <TIM_OC2_SetConfig+0xe8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d10d      	bne.n	80058f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <TIM_OC2_SetConfig+0xe4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC2_SetConfig+0x94>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a16      	ldr	r2, [pc, #88]	; (800595c <TIM_OC2_SetConfig+0xe8>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d113      	bne.n	8005930 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800590e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40010000 	.word	0x40010000
 800595c:	40010400 	.word	0x40010400

08005960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <TIM_OC3_SetConfig+0xe0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d003      	beq.n	80059c6 <TIM_OC3_SetConfig+0x66>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a20      	ldr	r2, [pc, #128]	; (8005a44 <TIM_OC3_SetConfig+0xe4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d10d      	bne.n	80059e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <TIM_OC3_SetConfig+0xe0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_OC3_SetConfig+0x92>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <TIM_OC3_SetConfig+0xe4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d113      	bne.n	8005a1a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40010400 	.word	0x40010400

08005a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b087      	sub	sp, #28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	031b      	lsls	r3, r3, #12
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <TIM_OC4_SetConfig+0xa4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x68>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <TIM_OC4_SetConfig+0xa8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d109      	bne.n	8005ac4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	40010000 	.word	0x40010000
 8005af0:	40010400 	.word	0x40010400

08005af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 030a 	bic.w	r3, r3, #10
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b087      	sub	sp, #28
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0210 	bic.w	r2, r3, #16
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f043 0307 	orr.w	r3, r3, #7
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	609a      	str	r2, [r3, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	021a      	lsls	r2, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	609a      	str	r2, [r3, #8]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1a      	ldr	r2, [r3, #32]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a1a      	ldr	r2, [r3, #32]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e05a      	b.n	8005d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a21      	ldr	r2, [pc, #132]	; (8005d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d022      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d01d      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	; (8005d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d013      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1a      	ldr	r2, [pc, #104]	; (8005d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a15      	ldr	r2, [pc, #84]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10c      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40010400 	.word	0x40010400
 8005d64:	40014000 	.word	0x40014000
 8005d68:	40001800 	.word	0x40001800

08005d6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d101      	bne.n	8005d88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d84:	2302      	movs	r3, #2
 8005d86:	e03d      	b.n	8005e04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e03f      	b.n	8005eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fc fbf6 	bl	8002650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2224      	movs	r2, #36	; 0x24
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f829 	bl	8005ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68da      	ldr	r2, [r3, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed8:	b0c0      	sub	sp, #256	; 0x100
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef0:	68d9      	ldr	r1, [r3, #12]
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	ea40 0301 	orr.w	r3, r0, r1
 8005efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f2c:	f021 010c 	bic.w	r1, r1, #12
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	6999      	ldr	r1, [r3, #24]
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	ea40 0301 	orr.w	r3, r0, r1
 8005f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b8f      	ldr	r3, [pc, #572]	; (80061a0 <UART_SetConfig+0x2cc>)
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d005      	beq.n	8005f74 <UART_SetConfig+0xa0>
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	4b8d      	ldr	r3, [pc, #564]	; (80061a4 <UART_SetConfig+0x2d0>)
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d104      	bne.n	8005f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f74:	f7fe fc00 	bl	8004778 <HAL_RCC_GetPCLK2Freq>
 8005f78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f7c:	e003      	b.n	8005f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f7e:	f7fe fbe7 	bl	8004750 <HAL_RCC_GetPCLK1Freq>
 8005f82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f90:	f040 810c 	bne.w	80061ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fa6:	4622      	mov	r2, r4
 8005fa8:	462b      	mov	r3, r5
 8005faa:	1891      	adds	r1, r2, r2
 8005fac:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fae:	415b      	adcs	r3, r3
 8005fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	eb12 0801 	adds.w	r8, r2, r1
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	eb43 0901 	adc.w	r9, r3, r1
 8005fc2:	f04f 0200 	mov.w	r2, #0
 8005fc6:	f04f 0300 	mov.w	r3, #0
 8005fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fd6:	4690      	mov	r8, r2
 8005fd8:	4699      	mov	r9, r3
 8005fda:	4623      	mov	r3, r4
 8005fdc:	eb18 0303 	adds.w	r3, r8, r3
 8005fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	eb49 0303 	adc.w	r3, r9, r3
 8005fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006002:	460b      	mov	r3, r1
 8006004:	18db      	adds	r3, r3, r3
 8006006:	653b      	str	r3, [r7, #80]	; 0x50
 8006008:	4613      	mov	r3, r2
 800600a:	eb42 0303 	adc.w	r3, r2, r3
 800600e:	657b      	str	r3, [r7, #84]	; 0x54
 8006010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006018:	f7fa fd20 	bl	8000a5c <__aeabi_uldivmod>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4b61      	ldr	r3, [pc, #388]	; (80061a8 <UART_SetConfig+0x2d4>)
 8006022:	fba3 2302 	umull	r2, r3, r3, r2
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	011c      	lsls	r4, r3, #4
 800602a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602e:	2200      	movs	r2, #0
 8006030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006034:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800603c:	4642      	mov	r2, r8
 800603e:	464b      	mov	r3, r9
 8006040:	1891      	adds	r1, r2, r2
 8006042:	64b9      	str	r1, [r7, #72]	; 0x48
 8006044:	415b      	adcs	r3, r3
 8006046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800604c:	4641      	mov	r1, r8
 800604e:	eb12 0a01 	adds.w	sl, r2, r1
 8006052:	4649      	mov	r1, r9
 8006054:	eb43 0b01 	adc.w	fp, r3, r1
 8006058:	f04f 0200 	mov.w	r2, #0
 800605c:	f04f 0300 	mov.w	r3, #0
 8006060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800606c:	4692      	mov	sl, r2
 800606e:	469b      	mov	fp, r3
 8006070:	4643      	mov	r3, r8
 8006072:	eb1a 0303 	adds.w	r3, sl, r3
 8006076:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800607a:	464b      	mov	r3, r9
 800607c:	eb4b 0303 	adc.w	r3, fp, r3
 8006080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006090:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006098:	460b      	mov	r3, r1
 800609a:	18db      	adds	r3, r3, r3
 800609c:	643b      	str	r3, [r7, #64]	; 0x40
 800609e:	4613      	mov	r3, r2
 80060a0:	eb42 0303 	adc.w	r3, r2, r3
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
 80060a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060ae:	f7fa fcd5 	bl	8000a5c <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4611      	mov	r1, r2
 80060b8:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <UART_SetConfig+0x2d4>)
 80060ba:	fba3 2301 	umull	r2, r3, r3, r1
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2264      	movs	r2, #100	; 0x64
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	1acb      	subs	r3, r1, r3
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060ce:	4b36      	ldr	r3, [pc, #216]	; (80061a8 <UART_SetConfig+0x2d4>)
 80060d0:	fba3 2302 	umull	r2, r3, r3, r2
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060dc:	441c      	add	r4, r3
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060f0:	4642      	mov	r2, r8
 80060f2:	464b      	mov	r3, r9
 80060f4:	1891      	adds	r1, r2, r2
 80060f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80060f8:	415b      	adcs	r3, r3
 80060fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006100:	4641      	mov	r1, r8
 8006102:	1851      	adds	r1, r2, r1
 8006104:	6339      	str	r1, [r7, #48]	; 0x30
 8006106:	4649      	mov	r1, r9
 8006108:	414b      	adcs	r3, r1
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006118:	4659      	mov	r1, fp
 800611a:	00cb      	lsls	r3, r1, #3
 800611c:	4651      	mov	r1, sl
 800611e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006122:	4651      	mov	r1, sl
 8006124:	00ca      	lsls	r2, r1, #3
 8006126:	4610      	mov	r0, r2
 8006128:	4619      	mov	r1, r3
 800612a:	4603      	mov	r3, r0
 800612c:	4642      	mov	r2, r8
 800612e:	189b      	adds	r3, r3, r2
 8006130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006134:	464b      	mov	r3, r9
 8006136:	460a      	mov	r2, r1
 8006138:	eb42 0303 	adc.w	r3, r2, r3
 800613c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800614c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006154:	460b      	mov	r3, r1
 8006156:	18db      	adds	r3, r3, r3
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 800615a:	4613      	mov	r3, r2
 800615c:	eb42 0303 	adc.w	r3, r2, r3
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800616a:	f7fa fc77 	bl	8000a5c <__aeabi_uldivmod>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <UART_SetConfig+0x2d4>)
 8006174:	fba3 1302 	umull	r1, r3, r3, r2
 8006178:	095b      	lsrs	r3, r3, #5
 800617a:	2164      	movs	r1, #100	; 0x64
 800617c:	fb01 f303 	mul.w	r3, r1, r3
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	00db      	lsls	r3, r3, #3
 8006184:	3332      	adds	r3, #50	; 0x32
 8006186:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <UART_SetConfig+0x2d4>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	f003 0207 	and.w	r2, r3, #7
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4422      	add	r2, r4
 800619a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800619c:	e105      	b.n	80063aa <UART_SetConfig+0x4d6>
 800619e:	bf00      	nop
 80061a0:	40011000 	.word	0x40011000
 80061a4:	40011400 	.word	0x40011400
 80061a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061be:	4642      	mov	r2, r8
 80061c0:	464b      	mov	r3, r9
 80061c2:	1891      	adds	r1, r2, r2
 80061c4:	6239      	str	r1, [r7, #32]
 80061c6:	415b      	adcs	r3, r3
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ce:	4641      	mov	r1, r8
 80061d0:	1854      	adds	r4, r2, r1
 80061d2:	4649      	mov	r1, r9
 80061d4:	eb43 0501 	adc.w	r5, r3, r1
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	00eb      	lsls	r3, r5, #3
 80061e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061e6:	00e2      	lsls	r2, r4, #3
 80061e8:	4614      	mov	r4, r2
 80061ea:	461d      	mov	r5, r3
 80061ec:	4643      	mov	r3, r8
 80061ee:	18e3      	adds	r3, r4, r3
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061f4:	464b      	mov	r3, r9
 80061f6:	eb45 0303 	adc.w	r3, r5, r3
 80061fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800620a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800621a:	4629      	mov	r1, r5
 800621c:	008b      	lsls	r3, r1, #2
 800621e:	4621      	mov	r1, r4
 8006220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006224:	4621      	mov	r1, r4
 8006226:	008a      	lsls	r2, r1, #2
 8006228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800622c:	f7fa fc16 	bl	8000a5c <__aeabi_uldivmod>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	4b60      	ldr	r3, [pc, #384]	; (80063b8 <UART_SetConfig+0x4e4>)
 8006236:	fba3 2302 	umull	r2, r3, r3, r2
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	011c      	lsls	r4, r3, #4
 800623e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006242:	2200      	movs	r2, #0
 8006244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006248:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800624c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006250:	4642      	mov	r2, r8
 8006252:	464b      	mov	r3, r9
 8006254:	1891      	adds	r1, r2, r2
 8006256:	61b9      	str	r1, [r7, #24]
 8006258:	415b      	adcs	r3, r3
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006260:	4641      	mov	r1, r8
 8006262:	1851      	adds	r1, r2, r1
 8006264:	6139      	str	r1, [r7, #16]
 8006266:	4649      	mov	r1, r9
 8006268:	414b      	adcs	r3, r1
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006278:	4659      	mov	r1, fp
 800627a:	00cb      	lsls	r3, r1, #3
 800627c:	4651      	mov	r1, sl
 800627e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006282:	4651      	mov	r1, sl
 8006284:	00ca      	lsls	r2, r1, #3
 8006286:	4610      	mov	r0, r2
 8006288:	4619      	mov	r1, r3
 800628a:	4603      	mov	r3, r0
 800628c:	4642      	mov	r2, r8
 800628e:	189b      	adds	r3, r3, r2
 8006290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006294:	464b      	mov	r3, r9
 8006296:	460a      	mov	r2, r1
 8006298:	eb42 0303 	adc.w	r3, r2, r3
 800629c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80062aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062b8:	4649      	mov	r1, r9
 80062ba:	008b      	lsls	r3, r1, #2
 80062bc:	4641      	mov	r1, r8
 80062be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c2:	4641      	mov	r1, r8
 80062c4:	008a      	lsls	r2, r1, #2
 80062c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062ca:	f7fa fbc7 	bl	8000a5c <__aeabi_uldivmod>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <UART_SetConfig+0x4e4>)
 80062d4:	fba3 1302 	umull	r1, r3, r3, r2
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	2164      	movs	r1, #100	; 0x64
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	3332      	adds	r3, #50	; 0x32
 80062e6:	4a34      	ldr	r2, [pc, #208]	; (80063b8 <UART_SetConfig+0x4e4>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062f2:	441c      	add	r4, r3
 80062f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f8:	2200      	movs	r2, #0
 80062fa:	673b      	str	r3, [r7, #112]	; 0x70
 80062fc:	677a      	str	r2, [r7, #116]	; 0x74
 80062fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006302:	4642      	mov	r2, r8
 8006304:	464b      	mov	r3, r9
 8006306:	1891      	adds	r1, r2, r2
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	415b      	adcs	r3, r3
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006312:	4641      	mov	r1, r8
 8006314:	1851      	adds	r1, r2, r1
 8006316:	6039      	str	r1, [r7, #0]
 8006318:	4649      	mov	r1, r9
 800631a:	414b      	adcs	r3, r1
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800632a:	4659      	mov	r1, fp
 800632c:	00cb      	lsls	r3, r1, #3
 800632e:	4651      	mov	r1, sl
 8006330:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006334:	4651      	mov	r1, sl
 8006336:	00ca      	lsls	r2, r1, #3
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	4603      	mov	r3, r0
 800633e:	4642      	mov	r2, r8
 8006340:	189b      	adds	r3, r3, r2
 8006342:	66bb      	str	r3, [r7, #104]	; 0x68
 8006344:	464b      	mov	r3, r9
 8006346:	460a      	mov	r2, r1
 8006348:	eb42 0303 	adc.w	r3, r2, r3
 800634c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	663b      	str	r3, [r7, #96]	; 0x60
 8006358:	667a      	str	r2, [r7, #100]	; 0x64
 800635a:	f04f 0200 	mov.w	r2, #0
 800635e:	f04f 0300 	mov.w	r3, #0
 8006362:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006366:	4649      	mov	r1, r9
 8006368:	008b      	lsls	r3, r1, #2
 800636a:	4641      	mov	r1, r8
 800636c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006370:	4641      	mov	r1, r8
 8006372:	008a      	lsls	r2, r1, #2
 8006374:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006378:	f7fa fb70 	bl	8000a5c <__aeabi_uldivmod>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <UART_SetConfig+0x4e4>)
 8006382:	fba3 1302 	umull	r1, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2164      	movs	r1, #100	; 0x64
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	; 0x32
 8006394:	4a08      	ldr	r2, [pc, #32]	; (80063b8 <UART_SetConfig+0x4e4>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4422      	add	r2, r4
 80063a8:	609a      	str	r2, [r3, #8]
}
 80063aa:	bf00      	nop
 80063ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063b0:	46bd      	mov	sp, r7
 80063b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b6:	bf00      	nop
 80063b8:	51eb851f 	.word	0x51eb851f

080063bc <__errno>:
 80063bc:	4b01      	ldr	r3, [pc, #4]	; (80063c4 <__errno+0x8>)
 80063be:	6818      	ldr	r0, [r3, #0]
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	20000018 	.word	0x20000018

080063c8 <__libc_init_array>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	4d0d      	ldr	r5, [pc, #52]	; (8006400 <__libc_init_array+0x38>)
 80063cc:	4c0d      	ldr	r4, [pc, #52]	; (8006404 <__libc_init_array+0x3c>)
 80063ce:	1b64      	subs	r4, r4, r5
 80063d0:	10a4      	asrs	r4, r4, #2
 80063d2:	2600      	movs	r6, #0
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	d109      	bne.n	80063ec <__libc_init_array+0x24>
 80063d8:	4d0b      	ldr	r5, [pc, #44]	; (8006408 <__libc_init_array+0x40>)
 80063da:	4c0c      	ldr	r4, [pc, #48]	; (800640c <__libc_init_array+0x44>)
 80063dc:	f000 fc8e 	bl	8006cfc <_init>
 80063e0:	1b64      	subs	r4, r4, r5
 80063e2:	10a4      	asrs	r4, r4, #2
 80063e4:	2600      	movs	r6, #0
 80063e6:	42a6      	cmp	r6, r4
 80063e8:	d105      	bne.n	80063f6 <__libc_init_array+0x2e>
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f0:	4798      	blx	r3
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7ee      	b.n	80063d4 <__libc_init_array+0xc>
 80063f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063fa:	4798      	blx	r3
 80063fc:	3601      	adds	r6, #1
 80063fe:	e7f2      	b.n	80063e6 <__libc_init_array+0x1e>
 8006400:	08007990 	.word	0x08007990
 8006404:	08007990 	.word	0x08007990
 8006408:	08007990 	.word	0x08007990
 800640c:	08007994 	.word	0x08007994

08006410 <memset>:
 8006410:	4402      	add	r2, r0
 8006412:	4603      	mov	r3, r0
 8006414:	4293      	cmp	r3, r2
 8006416:	d100      	bne.n	800641a <memset+0xa>
 8006418:	4770      	bx	lr
 800641a:	f803 1b01 	strb.w	r1, [r3], #1
 800641e:	e7f9      	b.n	8006414 <memset+0x4>

08006420 <siprintf>:
 8006420:	b40e      	push	{r1, r2, r3}
 8006422:	b500      	push	{lr}
 8006424:	b09c      	sub	sp, #112	; 0x70
 8006426:	ab1d      	add	r3, sp, #116	; 0x74
 8006428:	9002      	str	r0, [sp, #8]
 800642a:	9006      	str	r0, [sp, #24]
 800642c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006430:	4809      	ldr	r0, [pc, #36]	; (8006458 <siprintf+0x38>)
 8006432:	9107      	str	r1, [sp, #28]
 8006434:	9104      	str	r1, [sp, #16]
 8006436:	4909      	ldr	r1, [pc, #36]	; (800645c <siprintf+0x3c>)
 8006438:	f853 2b04 	ldr.w	r2, [r3], #4
 800643c:	9105      	str	r1, [sp, #20]
 800643e:	6800      	ldr	r0, [r0, #0]
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	a902      	add	r1, sp, #8
 8006444:	f000 f868 	bl	8006518 <_svfiprintf_r>
 8006448:	9b02      	ldr	r3, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	b01c      	add	sp, #112	; 0x70
 8006450:	f85d eb04 	ldr.w	lr, [sp], #4
 8006454:	b003      	add	sp, #12
 8006456:	4770      	bx	lr
 8006458:	20000018 	.word	0x20000018
 800645c:	ffff0208 	.word	0xffff0208

08006460 <__ssputs_r>:
 8006460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	688e      	ldr	r6, [r1, #8]
 8006466:	429e      	cmp	r6, r3
 8006468:	4682      	mov	sl, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4690      	mov	r8, r2
 800646e:	461f      	mov	r7, r3
 8006470:	d838      	bhi.n	80064e4 <__ssputs_r+0x84>
 8006472:	898a      	ldrh	r2, [r1, #12]
 8006474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006478:	d032      	beq.n	80064e0 <__ssputs_r+0x80>
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	6909      	ldr	r1, [r1, #16]
 800647e:	eba5 0901 	sub.w	r9, r5, r1
 8006482:	6965      	ldr	r5, [r4, #20]
 8006484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800648c:	3301      	adds	r3, #1
 800648e:	444b      	add	r3, r9
 8006490:	106d      	asrs	r5, r5, #1
 8006492:	429d      	cmp	r5, r3
 8006494:	bf38      	it	cc
 8006496:	461d      	movcc	r5, r3
 8006498:	0553      	lsls	r3, r2, #21
 800649a:	d531      	bpl.n	8006500 <__ssputs_r+0xa0>
 800649c:	4629      	mov	r1, r5
 800649e:	f000 fb63 	bl	8006b68 <_malloc_r>
 80064a2:	4606      	mov	r6, r0
 80064a4:	b950      	cbnz	r0, 80064bc <__ssputs_r+0x5c>
 80064a6:	230c      	movs	r3, #12
 80064a8:	f8ca 3000 	str.w	r3, [sl]
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	6921      	ldr	r1, [r4, #16]
 80064be:	464a      	mov	r2, r9
 80064c0:	f000 fabe 	bl	8006a40 <memcpy>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	6126      	str	r6, [r4, #16]
 80064d2:	6165      	str	r5, [r4, #20]
 80064d4:	444e      	add	r6, r9
 80064d6:	eba5 0509 	sub.w	r5, r5, r9
 80064da:	6026      	str	r6, [r4, #0]
 80064dc:	60a5      	str	r5, [r4, #8]
 80064de:	463e      	mov	r6, r7
 80064e0:	42be      	cmp	r6, r7
 80064e2:	d900      	bls.n	80064e6 <__ssputs_r+0x86>
 80064e4:	463e      	mov	r6, r7
 80064e6:	6820      	ldr	r0, [r4, #0]
 80064e8:	4632      	mov	r2, r6
 80064ea:	4641      	mov	r1, r8
 80064ec:	f000 fab6 	bl	8006a5c <memmove>
 80064f0:	68a3      	ldr	r3, [r4, #8]
 80064f2:	1b9b      	subs	r3, r3, r6
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	4433      	add	r3, r6
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7db      	b.n	80064b8 <__ssputs_r+0x58>
 8006500:	462a      	mov	r2, r5
 8006502:	f000 fba5 	bl	8006c50 <_realloc_r>
 8006506:	4606      	mov	r6, r0
 8006508:	2800      	cmp	r0, #0
 800650a:	d1e1      	bne.n	80064d0 <__ssputs_r+0x70>
 800650c:	6921      	ldr	r1, [r4, #16]
 800650e:	4650      	mov	r0, sl
 8006510:	f000 fabe 	bl	8006a90 <_free_r>
 8006514:	e7c7      	b.n	80064a6 <__ssputs_r+0x46>
	...

08006518 <_svfiprintf_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	4698      	mov	r8, r3
 800651e:	898b      	ldrh	r3, [r1, #12]
 8006520:	061b      	lsls	r3, r3, #24
 8006522:	b09d      	sub	sp, #116	; 0x74
 8006524:	4607      	mov	r7, r0
 8006526:	460d      	mov	r5, r1
 8006528:	4614      	mov	r4, r2
 800652a:	d50e      	bpl.n	800654a <_svfiprintf_r+0x32>
 800652c:	690b      	ldr	r3, [r1, #16]
 800652e:	b963      	cbnz	r3, 800654a <_svfiprintf_r+0x32>
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	f000 fb19 	bl	8006b68 <_malloc_r>
 8006536:	6028      	str	r0, [r5, #0]
 8006538:	6128      	str	r0, [r5, #16]
 800653a:	b920      	cbnz	r0, 8006546 <_svfiprintf_r+0x2e>
 800653c:	230c      	movs	r3, #12
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e0d1      	b.n	80066ea <_svfiprintf_r+0x1d2>
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	616b      	str	r3, [r5, #20]
 800654a:	2300      	movs	r3, #0
 800654c:	9309      	str	r3, [sp, #36]	; 0x24
 800654e:	2320      	movs	r3, #32
 8006550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006554:	f8cd 800c 	str.w	r8, [sp, #12]
 8006558:	2330      	movs	r3, #48	; 0x30
 800655a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006704 <_svfiprintf_r+0x1ec>
 800655e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006562:	f04f 0901 	mov.w	r9, #1
 8006566:	4623      	mov	r3, r4
 8006568:	469a      	mov	sl, r3
 800656a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656e:	b10a      	cbz	r2, 8006574 <_svfiprintf_r+0x5c>
 8006570:	2a25      	cmp	r2, #37	; 0x25
 8006572:	d1f9      	bne.n	8006568 <_svfiprintf_r+0x50>
 8006574:	ebba 0b04 	subs.w	fp, sl, r4
 8006578:	d00b      	beq.n	8006592 <_svfiprintf_r+0x7a>
 800657a:	465b      	mov	r3, fp
 800657c:	4622      	mov	r2, r4
 800657e:	4629      	mov	r1, r5
 8006580:	4638      	mov	r0, r7
 8006582:	f7ff ff6d 	bl	8006460 <__ssputs_r>
 8006586:	3001      	adds	r0, #1
 8006588:	f000 80aa 	beq.w	80066e0 <_svfiprintf_r+0x1c8>
 800658c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658e:	445a      	add	r2, fp
 8006590:	9209      	str	r2, [sp, #36]	; 0x24
 8006592:	f89a 3000 	ldrb.w	r3, [sl]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80a2 	beq.w	80066e0 <_svfiprintf_r+0x1c8>
 800659c:	2300      	movs	r3, #0
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a6:	f10a 0a01 	add.w	sl, sl, #1
 80065aa:	9304      	str	r3, [sp, #16]
 80065ac:	9307      	str	r3, [sp, #28]
 80065ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b2:	931a      	str	r3, [sp, #104]	; 0x68
 80065b4:	4654      	mov	r4, sl
 80065b6:	2205      	movs	r2, #5
 80065b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065bc:	4851      	ldr	r0, [pc, #324]	; (8006704 <_svfiprintf_r+0x1ec>)
 80065be:	f7f9 fe07 	bl	80001d0 <memchr>
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	b9d8      	cbnz	r0, 80065fe <_svfiprintf_r+0xe6>
 80065c6:	06d0      	lsls	r0, r2, #27
 80065c8:	bf44      	itt	mi
 80065ca:	2320      	movmi	r3, #32
 80065cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d0:	0711      	lsls	r1, r2, #28
 80065d2:	bf44      	itt	mi
 80065d4:	232b      	movmi	r3, #43	; 0x2b
 80065d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065da:	f89a 3000 	ldrb.w	r3, [sl]
 80065de:	2b2a      	cmp	r3, #42	; 0x2a
 80065e0:	d015      	beq.n	800660e <_svfiprintf_r+0xf6>
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	4654      	mov	r4, sl
 80065e6:	2000      	movs	r0, #0
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4621      	mov	r1, r4
 80065ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f2:	3b30      	subs	r3, #48	; 0x30
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d94e      	bls.n	8006696 <_svfiprintf_r+0x17e>
 80065f8:	b1b0      	cbz	r0, 8006628 <_svfiprintf_r+0x110>
 80065fa:	9207      	str	r2, [sp, #28]
 80065fc:	e014      	b.n	8006628 <_svfiprintf_r+0x110>
 80065fe:	eba0 0308 	sub.w	r3, r0, r8
 8006602:	fa09 f303 	lsl.w	r3, r9, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	46a2      	mov	sl, r4
 800660c:	e7d2      	b.n	80065b4 <_svfiprintf_r+0x9c>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	1d19      	adds	r1, r3, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	9103      	str	r1, [sp, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfbb      	ittet	lt
 800661a:	425b      	neglt	r3, r3
 800661c:	f042 0202 	orrlt.w	r2, r2, #2
 8006620:	9307      	strge	r3, [sp, #28]
 8006622:	9307      	strlt	r3, [sp, #28]
 8006624:	bfb8      	it	lt
 8006626:	9204      	strlt	r2, [sp, #16]
 8006628:	7823      	ldrb	r3, [r4, #0]
 800662a:	2b2e      	cmp	r3, #46	; 0x2e
 800662c:	d10c      	bne.n	8006648 <_svfiprintf_r+0x130>
 800662e:	7863      	ldrb	r3, [r4, #1]
 8006630:	2b2a      	cmp	r3, #42	; 0x2a
 8006632:	d135      	bne.n	80066a0 <_svfiprintf_r+0x188>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	9203      	str	r2, [sp, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb8      	it	lt
 8006640:	f04f 33ff 	movlt.w	r3, #4294967295
 8006644:	3402      	adds	r4, #2
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006714 <_svfiprintf_r+0x1fc>
 800664c:	7821      	ldrb	r1, [r4, #0]
 800664e:	2203      	movs	r2, #3
 8006650:	4650      	mov	r0, sl
 8006652:	f7f9 fdbd 	bl	80001d0 <memchr>
 8006656:	b140      	cbz	r0, 800666a <_svfiprintf_r+0x152>
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	eba0 000a 	sub.w	r0, r0, sl
 800665e:	fa03 f000 	lsl.w	r0, r3, r0
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	4303      	orrs	r3, r0
 8006666:	3401      	adds	r4, #1
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666e:	4826      	ldr	r0, [pc, #152]	; (8006708 <_svfiprintf_r+0x1f0>)
 8006670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006674:	2206      	movs	r2, #6
 8006676:	f7f9 fdab 	bl	80001d0 <memchr>
 800667a:	2800      	cmp	r0, #0
 800667c:	d038      	beq.n	80066f0 <_svfiprintf_r+0x1d8>
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <_svfiprintf_r+0x1f4>)
 8006680:	bb1b      	cbnz	r3, 80066ca <_svfiprintf_r+0x1b2>
 8006682:	9b03      	ldr	r3, [sp, #12]
 8006684:	3307      	adds	r3, #7
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	3308      	adds	r3, #8
 800668c:	9303      	str	r3, [sp, #12]
 800668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006690:	4433      	add	r3, r6
 8006692:	9309      	str	r3, [sp, #36]	; 0x24
 8006694:	e767      	b.n	8006566 <_svfiprintf_r+0x4e>
 8006696:	fb0c 3202 	mla	r2, ip, r2, r3
 800669a:	460c      	mov	r4, r1
 800669c:	2001      	movs	r0, #1
 800669e:	e7a5      	b.n	80065ec <_svfiprintf_r+0xd4>
 80066a0:	2300      	movs	r3, #0
 80066a2:	3401      	adds	r4, #1
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	4619      	mov	r1, r3
 80066a8:	f04f 0c0a 	mov.w	ip, #10
 80066ac:	4620      	mov	r0, r4
 80066ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b2:	3a30      	subs	r2, #48	; 0x30
 80066b4:	2a09      	cmp	r2, #9
 80066b6:	d903      	bls.n	80066c0 <_svfiprintf_r+0x1a8>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0c5      	beq.n	8006648 <_svfiprintf_r+0x130>
 80066bc:	9105      	str	r1, [sp, #20]
 80066be:	e7c3      	b.n	8006648 <_svfiprintf_r+0x130>
 80066c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c4:	4604      	mov	r4, r0
 80066c6:	2301      	movs	r3, #1
 80066c8:	e7f0      	b.n	80066ac <_svfiprintf_r+0x194>
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	462a      	mov	r2, r5
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <_svfiprintf_r+0x1f8>)
 80066d2:	a904      	add	r1, sp, #16
 80066d4:	4638      	mov	r0, r7
 80066d6:	f3af 8000 	nop.w
 80066da:	1c42      	adds	r2, r0, #1
 80066dc:	4606      	mov	r6, r0
 80066de:	d1d6      	bne.n	800668e <_svfiprintf_r+0x176>
 80066e0:	89ab      	ldrh	r3, [r5, #12]
 80066e2:	065b      	lsls	r3, r3, #25
 80066e4:	f53f af2c 	bmi.w	8006540 <_svfiprintf_r+0x28>
 80066e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ea:	b01d      	add	sp, #116	; 0x74
 80066ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f0:	ab03      	add	r3, sp, #12
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	462a      	mov	r2, r5
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <_svfiprintf_r+0x1f8>)
 80066f8:	a904      	add	r1, sp, #16
 80066fa:	4638      	mov	r0, r7
 80066fc:	f000 f87a 	bl	80067f4 <_printf_i>
 8006700:	e7eb      	b.n	80066da <_svfiprintf_r+0x1c2>
 8006702:	bf00      	nop
 8006704:	08007954 	.word	0x08007954
 8006708:	0800795e 	.word	0x0800795e
 800670c:	00000000 	.word	0x00000000
 8006710:	08006461 	.word	0x08006461
 8006714:	0800795a 	.word	0x0800795a

08006718 <_printf_common>:
 8006718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	4616      	mov	r6, r2
 800671e:	4699      	mov	r9, r3
 8006720:	688a      	ldr	r2, [r1, #8]
 8006722:	690b      	ldr	r3, [r1, #16]
 8006724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006728:	4293      	cmp	r3, r2
 800672a:	bfb8      	it	lt
 800672c:	4613      	movlt	r3, r2
 800672e:	6033      	str	r3, [r6, #0]
 8006730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006734:	4607      	mov	r7, r0
 8006736:	460c      	mov	r4, r1
 8006738:	b10a      	cbz	r2, 800673e <_printf_common+0x26>
 800673a:	3301      	adds	r3, #1
 800673c:	6033      	str	r3, [r6, #0]
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	0699      	lsls	r1, r3, #26
 8006742:	bf42      	ittt	mi
 8006744:	6833      	ldrmi	r3, [r6, #0]
 8006746:	3302      	addmi	r3, #2
 8006748:	6033      	strmi	r3, [r6, #0]
 800674a:	6825      	ldr	r5, [r4, #0]
 800674c:	f015 0506 	ands.w	r5, r5, #6
 8006750:	d106      	bne.n	8006760 <_printf_common+0x48>
 8006752:	f104 0a19 	add.w	sl, r4, #25
 8006756:	68e3      	ldr	r3, [r4, #12]
 8006758:	6832      	ldr	r2, [r6, #0]
 800675a:	1a9b      	subs	r3, r3, r2
 800675c:	42ab      	cmp	r3, r5
 800675e:	dc26      	bgt.n	80067ae <_printf_common+0x96>
 8006760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006764:	1e13      	subs	r3, r2, #0
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	bf18      	it	ne
 800676a:	2301      	movne	r3, #1
 800676c:	0692      	lsls	r2, r2, #26
 800676e:	d42b      	bmi.n	80067c8 <_printf_common+0xb0>
 8006770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006774:	4649      	mov	r1, r9
 8006776:	4638      	mov	r0, r7
 8006778:	47c0      	blx	r8
 800677a:	3001      	adds	r0, #1
 800677c:	d01e      	beq.n	80067bc <_printf_common+0xa4>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	68e5      	ldr	r5, [r4, #12]
 8006782:	6832      	ldr	r2, [r6, #0]
 8006784:	f003 0306 	and.w	r3, r3, #6
 8006788:	2b04      	cmp	r3, #4
 800678a:	bf08      	it	eq
 800678c:	1aad      	subeq	r5, r5, r2
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	6922      	ldr	r2, [r4, #16]
 8006792:	bf0c      	ite	eq
 8006794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006798:	2500      	movne	r5, #0
 800679a:	4293      	cmp	r3, r2
 800679c:	bfc4      	itt	gt
 800679e:	1a9b      	subgt	r3, r3, r2
 80067a0:	18ed      	addgt	r5, r5, r3
 80067a2:	2600      	movs	r6, #0
 80067a4:	341a      	adds	r4, #26
 80067a6:	42b5      	cmp	r5, r6
 80067a8:	d11a      	bne.n	80067e0 <_printf_common+0xc8>
 80067aa:	2000      	movs	r0, #0
 80067ac:	e008      	b.n	80067c0 <_printf_common+0xa8>
 80067ae:	2301      	movs	r3, #1
 80067b0:	4652      	mov	r2, sl
 80067b2:	4649      	mov	r1, r9
 80067b4:	4638      	mov	r0, r7
 80067b6:	47c0      	blx	r8
 80067b8:	3001      	adds	r0, #1
 80067ba:	d103      	bne.n	80067c4 <_printf_common+0xac>
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c4:	3501      	adds	r5, #1
 80067c6:	e7c6      	b.n	8006756 <_printf_common+0x3e>
 80067c8:	18e1      	adds	r1, r4, r3
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	2030      	movs	r0, #48	; 0x30
 80067ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067d2:	4422      	add	r2, r4
 80067d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067dc:	3302      	adds	r3, #2
 80067de:	e7c7      	b.n	8006770 <_printf_common+0x58>
 80067e0:	2301      	movs	r3, #1
 80067e2:	4622      	mov	r2, r4
 80067e4:	4649      	mov	r1, r9
 80067e6:	4638      	mov	r0, r7
 80067e8:	47c0      	blx	r8
 80067ea:	3001      	adds	r0, #1
 80067ec:	d0e6      	beq.n	80067bc <_printf_common+0xa4>
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7d9      	b.n	80067a6 <_printf_common+0x8e>
	...

080067f4 <_printf_i>:
 80067f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	7e0f      	ldrb	r7, [r1, #24]
 80067fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067fc:	2f78      	cmp	r7, #120	; 0x78
 80067fe:	4691      	mov	r9, r2
 8006800:	4680      	mov	r8, r0
 8006802:	460c      	mov	r4, r1
 8006804:	469a      	mov	sl, r3
 8006806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800680a:	d807      	bhi.n	800681c <_printf_i+0x28>
 800680c:	2f62      	cmp	r7, #98	; 0x62
 800680e:	d80a      	bhi.n	8006826 <_printf_i+0x32>
 8006810:	2f00      	cmp	r7, #0
 8006812:	f000 80d8 	beq.w	80069c6 <_printf_i+0x1d2>
 8006816:	2f58      	cmp	r7, #88	; 0x58
 8006818:	f000 80a3 	beq.w	8006962 <_printf_i+0x16e>
 800681c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006824:	e03a      	b.n	800689c <_printf_i+0xa8>
 8006826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800682a:	2b15      	cmp	r3, #21
 800682c:	d8f6      	bhi.n	800681c <_printf_i+0x28>
 800682e:	a101      	add	r1, pc, #4	; (adr r1, 8006834 <_printf_i+0x40>)
 8006830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006834:	0800688d 	.word	0x0800688d
 8006838:	080068a1 	.word	0x080068a1
 800683c:	0800681d 	.word	0x0800681d
 8006840:	0800681d 	.word	0x0800681d
 8006844:	0800681d 	.word	0x0800681d
 8006848:	0800681d 	.word	0x0800681d
 800684c:	080068a1 	.word	0x080068a1
 8006850:	0800681d 	.word	0x0800681d
 8006854:	0800681d 	.word	0x0800681d
 8006858:	0800681d 	.word	0x0800681d
 800685c:	0800681d 	.word	0x0800681d
 8006860:	080069ad 	.word	0x080069ad
 8006864:	080068d1 	.word	0x080068d1
 8006868:	0800698f 	.word	0x0800698f
 800686c:	0800681d 	.word	0x0800681d
 8006870:	0800681d 	.word	0x0800681d
 8006874:	080069cf 	.word	0x080069cf
 8006878:	0800681d 	.word	0x0800681d
 800687c:	080068d1 	.word	0x080068d1
 8006880:	0800681d 	.word	0x0800681d
 8006884:	0800681d 	.word	0x0800681d
 8006888:	08006997 	.word	0x08006997
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	1d1a      	adds	r2, r3, #4
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	602a      	str	r2, [r5, #0]
 8006894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800689c:	2301      	movs	r3, #1
 800689e:	e0a3      	b.n	80069e8 <_printf_i+0x1f4>
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	6829      	ldr	r1, [r5, #0]
 80068a4:	0606      	lsls	r6, r0, #24
 80068a6:	f101 0304 	add.w	r3, r1, #4
 80068aa:	d50a      	bpl.n	80068c2 <_printf_i+0xce>
 80068ac:	680e      	ldr	r6, [r1, #0]
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	2e00      	cmp	r6, #0
 80068b2:	da03      	bge.n	80068bc <_printf_i+0xc8>
 80068b4:	232d      	movs	r3, #45	; 0x2d
 80068b6:	4276      	negs	r6, r6
 80068b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068bc:	485e      	ldr	r0, [pc, #376]	; (8006a38 <_printf_i+0x244>)
 80068be:	230a      	movs	r3, #10
 80068c0:	e019      	b.n	80068f6 <_printf_i+0x102>
 80068c2:	680e      	ldr	r6, [r1, #0]
 80068c4:	602b      	str	r3, [r5, #0]
 80068c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068ca:	bf18      	it	ne
 80068cc:	b236      	sxthne	r6, r6
 80068ce:	e7ef      	b.n	80068b0 <_printf_i+0xbc>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	6820      	ldr	r0, [r4, #0]
 80068d4:	1d19      	adds	r1, r3, #4
 80068d6:	6029      	str	r1, [r5, #0]
 80068d8:	0601      	lsls	r1, r0, #24
 80068da:	d501      	bpl.n	80068e0 <_printf_i+0xec>
 80068dc:	681e      	ldr	r6, [r3, #0]
 80068de:	e002      	b.n	80068e6 <_printf_i+0xf2>
 80068e0:	0646      	lsls	r6, r0, #25
 80068e2:	d5fb      	bpl.n	80068dc <_printf_i+0xe8>
 80068e4:	881e      	ldrh	r6, [r3, #0]
 80068e6:	4854      	ldr	r0, [pc, #336]	; (8006a38 <_printf_i+0x244>)
 80068e8:	2f6f      	cmp	r7, #111	; 0x6f
 80068ea:	bf0c      	ite	eq
 80068ec:	2308      	moveq	r3, #8
 80068ee:	230a      	movne	r3, #10
 80068f0:	2100      	movs	r1, #0
 80068f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068f6:	6865      	ldr	r5, [r4, #4]
 80068f8:	60a5      	str	r5, [r4, #8]
 80068fa:	2d00      	cmp	r5, #0
 80068fc:	bfa2      	ittt	ge
 80068fe:	6821      	ldrge	r1, [r4, #0]
 8006900:	f021 0104 	bicge.w	r1, r1, #4
 8006904:	6021      	strge	r1, [r4, #0]
 8006906:	b90e      	cbnz	r6, 800690c <_printf_i+0x118>
 8006908:	2d00      	cmp	r5, #0
 800690a:	d04d      	beq.n	80069a8 <_printf_i+0x1b4>
 800690c:	4615      	mov	r5, r2
 800690e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006912:	fb03 6711 	mls	r7, r3, r1, r6
 8006916:	5dc7      	ldrb	r7, [r0, r7]
 8006918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800691c:	4637      	mov	r7, r6
 800691e:	42bb      	cmp	r3, r7
 8006920:	460e      	mov	r6, r1
 8006922:	d9f4      	bls.n	800690e <_printf_i+0x11a>
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10b      	bne.n	8006940 <_printf_i+0x14c>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	07de      	lsls	r6, r3, #31
 800692c:	d508      	bpl.n	8006940 <_printf_i+0x14c>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	6861      	ldr	r1, [r4, #4]
 8006932:	4299      	cmp	r1, r3
 8006934:	bfde      	ittt	le
 8006936:	2330      	movle	r3, #48	; 0x30
 8006938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800693c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006940:	1b52      	subs	r2, r2, r5
 8006942:	6122      	str	r2, [r4, #16]
 8006944:	f8cd a000 	str.w	sl, [sp]
 8006948:	464b      	mov	r3, r9
 800694a:	aa03      	add	r2, sp, #12
 800694c:	4621      	mov	r1, r4
 800694e:	4640      	mov	r0, r8
 8006950:	f7ff fee2 	bl	8006718 <_printf_common>
 8006954:	3001      	adds	r0, #1
 8006956:	d14c      	bne.n	80069f2 <_printf_i+0x1fe>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	b004      	add	sp, #16
 800695e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006962:	4835      	ldr	r0, [pc, #212]	; (8006a38 <_printf_i+0x244>)
 8006964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006968:	6829      	ldr	r1, [r5, #0]
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006970:	6029      	str	r1, [r5, #0]
 8006972:	061d      	lsls	r5, r3, #24
 8006974:	d514      	bpl.n	80069a0 <_printf_i+0x1ac>
 8006976:	07df      	lsls	r7, r3, #31
 8006978:	bf44      	itt	mi
 800697a:	f043 0320 	orrmi.w	r3, r3, #32
 800697e:	6023      	strmi	r3, [r4, #0]
 8006980:	b91e      	cbnz	r6, 800698a <_printf_i+0x196>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f023 0320 	bic.w	r3, r3, #32
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	2310      	movs	r3, #16
 800698c:	e7b0      	b.n	80068f0 <_printf_i+0xfc>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	f043 0320 	orr.w	r3, r3, #32
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	2378      	movs	r3, #120	; 0x78
 8006998:	4828      	ldr	r0, [pc, #160]	; (8006a3c <_printf_i+0x248>)
 800699a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800699e:	e7e3      	b.n	8006968 <_printf_i+0x174>
 80069a0:	0659      	lsls	r1, r3, #25
 80069a2:	bf48      	it	mi
 80069a4:	b2b6      	uxthmi	r6, r6
 80069a6:	e7e6      	b.n	8006976 <_printf_i+0x182>
 80069a8:	4615      	mov	r5, r2
 80069aa:	e7bb      	b.n	8006924 <_printf_i+0x130>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	6826      	ldr	r6, [r4, #0]
 80069b0:	6961      	ldr	r1, [r4, #20]
 80069b2:	1d18      	adds	r0, r3, #4
 80069b4:	6028      	str	r0, [r5, #0]
 80069b6:	0635      	lsls	r5, r6, #24
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	d501      	bpl.n	80069c0 <_printf_i+0x1cc>
 80069bc:	6019      	str	r1, [r3, #0]
 80069be:	e002      	b.n	80069c6 <_printf_i+0x1d2>
 80069c0:	0670      	lsls	r0, r6, #25
 80069c2:	d5fb      	bpl.n	80069bc <_printf_i+0x1c8>
 80069c4:	8019      	strh	r1, [r3, #0]
 80069c6:	2300      	movs	r3, #0
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	4615      	mov	r5, r2
 80069cc:	e7ba      	b.n	8006944 <_printf_i+0x150>
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	1d1a      	adds	r2, r3, #4
 80069d2:	602a      	str	r2, [r5, #0]
 80069d4:	681d      	ldr	r5, [r3, #0]
 80069d6:	6862      	ldr	r2, [r4, #4]
 80069d8:	2100      	movs	r1, #0
 80069da:	4628      	mov	r0, r5
 80069dc:	f7f9 fbf8 	bl	80001d0 <memchr>
 80069e0:	b108      	cbz	r0, 80069e6 <_printf_i+0x1f2>
 80069e2:	1b40      	subs	r0, r0, r5
 80069e4:	6060      	str	r0, [r4, #4]
 80069e6:	6863      	ldr	r3, [r4, #4]
 80069e8:	6123      	str	r3, [r4, #16]
 80069ea:	2300      	movs	r3, #0
 80069ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f0:	e7a8      	b.n	8006944 <_printf_i+0x150>
 80069f2:	6923      	ldr	r3, [r4, #16]
 80069f4:	462a      	mov	r2, r5
 80069f6:	4649      	mov	r1, r9
 80069f8:	4640      	mov	r0, r8
 80069fa:	47d0      	blx	sl
 80069fc:	3001      	adds	r0, #1
 80069fe:	d0ab      	beq.n	8006958 <_printf_i+0x164>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	079b      	lsls	r3, r3, #30
 8006a04:	d413      	bmi.n	8006a2e <_printf_i+0x23a>
 8006a06:	68e0      	ldr	r0, [r4, #12]
 8006a08:	9b03      	ldr	r3, [sp, #12]
 8006a0a:	4298      	cmp	r0, r3
 8006a0c:	bfb8      	it	lt
 8006a0e:	4618      	movlt	r0, r3
 8006a10:	e7a4      	b.n	800695c <_printf_i+0x168>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4632      	mov	r2, r6
 8006a16:	4649      	mov	r1, r9
 8006a18:	4640      	mov	r0, r8
 8006a1a:	47d0      	blx	sl
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	d09b      	beq.n	8006958 <_printf_i+0x164>
 8006a20:	3501      	adds	r5, #1
 8006a22:	68e3      	ldr	r3, [r4, #12]
 8006a24:	9903      	ldr	r1, [sp, #12]
 8006a26:	1a5b      	subs	r3, r3, r1
 8006a28:	42ab      	cmp	r3, r5
 8006a2a:	dcf2      	bgt.n	8006a12 <_printf_i+0x21e>
 8006a2c:	e7eb      	b.n	8006a06 <_printf_i+0x212>
 8006a2e:	2500      	movs	r5, #0
 8006a30:	f104 0619 	add.w	r6, r4, #25
 8006a34:	e7f5      	b.n	8006a22 <_printf_i+0x22e>
 8006a36:	bf00      	nop
 8006a38:	08007965 	.word	0x08007965
 8006a3c:	08007976 	.word	0x08007976

08006a40 <memcpy>:
 8006a40:	440a      	add	r2, r1
 8006a42:	4291      	cmp	r1, r2
 8006a44:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a48:	d100      	bne.n	8006a4c <memcpy+0xc>
 8006a4a:	4770      	bx	lr
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a56:	4291      	cmp	r1, r2
 8006a58:	d1f9      	bne.n	8006a4e <memcpy+0xe>
 8006a5a:	bd10      	pop	{r4, pc}

08006a5c <memmove>:
 8006a5c:	4288      	cmp	r0, r1
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	eb01 0402 	add.w	r4, r1, r2
 8006a64:	d902      	bls.n	8006a6c <memmove+0x10>
 8006a66:	4284      	cmp	r4, r0
 8006a68:	4623      	mov	r3, r4
 8006a6a:	d807      	bhi.n	8006a7c <memmove+0x20>
 8006a6c:	1e43      	subs	r3, r0, #1
 8006a6e:	42a1      	cmp	r1, r4
 8006a70:	d008      	beq.n	8006a84 <memmove+0x28>
 8006a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a7a:	e7f8      	b.n	8006a6e <memmove+0x12>
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4601      	mov	r1, r0
 8006a80:	428a      	cmp	r2, r1
 8006a82:	d100      	bne.n	8006a86 <memmove+0x2a>
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8e:	e7f7      	b.n	8006a80 <memmove+0x24>

08006a90 <_free_r>:
 8006a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a92:	2900      	cmp	r1, #0
 8006a94:	d044      	beq.n	8006b20 <_free_r+0x90>
 8006a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9a:	9001      	str	r0, [sp, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006aa2:	bfb8      	it	lt
 8006aa4:	18e4      	addlt	r4, r4, r3
 8006aa6:	f000 f913 	bl	8006cd0 <__malloc_lock>
 8006aaa:	4a1e      	ldr	r2, [pc, #120]	; (8006b24 <_free_r+0x94>)
 8006aac:	9801      	ldr	r0, [sp, #4]
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	b933      	cbnz	r3, 8006ac0 <_free_r+0x30>
 8006ab2:	6063      	str	r3, [r4, #4]
 8006ab4:	6014      	str	r4, [r2, #0]
 8006ab6:	b003      	add	sp, #12
 8006ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006abc:	f000 b90e 	b.w	8006cdc <__malloc_unlock>
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	d908      	bls.n	8006ad6 <_free_r+0x46>
 8006ac4:	6825      	ldr	r5, [r4, #0]
 8006ac6:	1961      	adds	r1, r4, r5
 8006ac8:	428b      	cmp	r3, r1
 8006aca:	bf01      	itttt	eq
 8006acc:	6819      	ldreq	r1, [r3, #0]
 8006ace:	685b      	ldreq	r3, [r3, #4]
 8006ad0:	1949      	addeq	r1, r1, r5
 8006ad2:	6021      	streq	r1, [r4, #0]
 8006ad4:	e7ed      	b.n	8006ab2 <_free_r+0x22>
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	b10b      	cbz	r3, 8006ae0 <_free_r+0x50>
 8006adc:	42a3      	cmp	r3, r4
 8006ade:	d9fa      	bls.n	8006ad6 <_free_r+0x46>
 8006ae0:	6811      	ldr	r1, [r2, #0]
 8006ae2:	1855      	adds	r5, r2, r1
 8006ae4:	42a5      	cmp	r5, r4
 8006ae6:	d10b      	bne.n	8006b00 <_free_r+0x70>
 8006ae8:	6824      	ldr	r4, [r4, #0]
 8006aea:	4421      	add	r1, r4
 8006aec:	1854      	adds	r4, r2, r1
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	6011      	str	r1, [r2, #0]
 8006af2:	d1e0      	bne.n	8006ab6 <_free_r+0x26>
 8006af4:	681c      	ldr	r4, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	6053      	str	r3, [r2, #4]
 8006afa:	4421      	add	r1, r4
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	e7da      	b.n	8006ab6 <_free_r+0x26>
 8006b00:	d902      	bls.n	8006b08 <_free_r+0x78>
 8006b02:	230c      	movs	r3, #12
 8006b04:	6003      	str	r3, [r0, #0]
 8006b06:	e7d6      	b.n	8006ab6 <_free_r+0x26>
 8006b08:	6825      	ldr	r5, [r4, #0]
 8006b0a:	1961      	adds	r1, r4, r5
 8006b0c:	428b      	cmp	r3, r1
 8006b0e:	bf04      	itt	eq
 8006b10:	6819      	ldreq	r1, [r3, #0]
 8006b12:	685b      	ldreq	r3, [r3, #4]
 8006b14:	6063      	str	r3, [r4, #4]
 8006b16:	bf04      	itt	eq
 8006b18:	1949      	addeq	r1, r1, r5
 8006b1a:	6021      	streq	r1, [r4, #0]
 8006b1c:	6054      	str	r4, [r2, #4]
 8006b1e:	e7ca      	b.n	8006ab6 <_free_r+0x26>
 8006b20:	b003      	add	sp, #12
 8006b22:	bd30      	pop	{r4, r5, pc}
 8006b24:	20000294 	.word	0x20000294

08006b28 <sbrk_aligned>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4e0e      	ldr	r6, [pc, #56]	; (8006b64 <sbrk_aligned+0x3c>)
 8006b2c:	460c      	mov	r4, r1
 8006b2e:	6831      	ldr	r1, [r6, #0]
 8006b30:	4605      	mov	r5, r0
 8006b32:	b911      	cbnz	r1, 8006b3a <sbrk_aligned+0x12>
 8006b34:	f000 f8bc 	bl	8006cb0 <_sbrk_r>
 8006b38:	6030      	str	r0, [r6, #0]
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 f8b7 	bl	8006cb0 <_sbrk_r>
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	d00a      	beq.n	8006b5c <sbrk_aligned+0x34>
 8006b46:	1cc4      	adds	r4, r0, #3
 8006b48:	f024 0403 	bic.w	r4, r4, #3
 8006b4c:	42a0      	cmp	r0, r4
 8006b4e:	d007      	beq.n	8006b60 <sbrk_aligned+0x38>
 8006b50:	1a21      	subs	r1, r4, r0
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 f8ac 	bl	8006cb0 <_sbrk_r>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d101      	bne.n	8006b60 <sbrk_aligned+0x38>
 8006b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b60:	4620      	mov	r0, r4
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	20000298 	.word	0x20000298

08006b68 <_malloc_r>:
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	1ccd      	adds	r5, r1, #3
 8006b6e:	f025 0503 	bic.w	r5, r5, #3
 8006b72:	3508      	adds	r5, #8
 8006b74:	2d0c      	cmp	r5, #12
 8006b76:	bf38      	it	cc
 8006b78:	250c      	movcc	r5, #12
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	db01      	blt.n	8006b84 <_malloc_r+0x1c>
 8006b80:	42a9      	cmp	r1, r5
 8006b82:	d905      	bls.n	8006b90 <_malloc_r+0x28>
 8006b84:	230c      	movs	r3, #12
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	2600      	movs	r6, #0
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	4e2e      	ldr	r6, [pc, #184]	; (8006c4c <_malloc_r+0xe4>)
 8006b92:	f000 f89d 	bl	8006cd0 <__malloc_lock>
 8006b96:	6833      	ldr	r3, [r6, #0]
 8006b98:	461c      	mov	r4, r3
 8006b9a:	bb34      	cbnz	r4, 8006bea <_malloc_r+0x82>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f7ff ffc2 	bl	8006b28 <sbrk_aligned>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	d14d      	bne.n	8006c46 <_malloc_r+0xde>
 8006baa:	6834      	ldr	r4, [r6, #0]
 8006bac:	4626      	mov	r6, r4
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	d140      	bne.n	8006c34 <_malloc_r+0xcc>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	eb04 0803 	add.w	r8, r4, r3
 8006bbc:	f000 f878 	bl	8006cb0 <_sbrk_r>
 8006bc0:	4580      	cmp	r8, r0
 8006bc2:	d13a      	bne.n	8006c3a <_malloc_r+0xd2>
 8006bc4:	6821      	ldr	r1, [r4, #0]
 8006bc6:	3503      	adds	r5, #3
 8006bc8:	1a6d      	subs	r5, r5, r1
 8006bca:	f025 0503 	bic.w	r5, r5, #3
 8006bce:	3508      	adds	r5, #8
 8006bd0:	2d0c      	cmp	r5, #12
 8006bd2:	bf38      	it	cc
 8006bd4:	250c      	movcc	r5, #12
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff ffa5 	bl	8006b28 <sbrk_aligned>
 8006bde:	3001      	adds	r0, #1
 8006be0:	d02b      	beq.n	8006c3a <_malloc_r+0xd2>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	442b      	add	r3, r5
 8006be6:	6023      	str	r3, [r4, #0]
 8006be8:	e00e      	b.n	8006c08 <_malloc_r+0xa0>
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	1b52      	subs	r2, r2, r5
 8006bee:	d41e      	bmi.n	8006c2e <_malloc_r+0xc6>
 8006bf0:	2a0b      	cmp	r2, #11
 8006bf2:	d916      	bls.n	8006c22 <_malloc_r+0xba>
 8006bf4:	1961      	adds	r1, r4, r5
 8006bf6:	42a3      	cmp	r3, r4
 8006bf8:	6025      	str	r5, [r4, #0]
 8006bfa:	bf18      	it	ne
 8006bfc:	6059      	strne	r1, [r3, #4]
 8006bfe:	6863      	ldr	r3, [r4, #4]
 8006c00:	bf08      	it	eq
 8006c02:	6031      	streq	r1, [r6, #0]
 8006c04:	5162      	str	r2, [r4, r5]
 8006c06:	604b      	str	r3, [r1, #4]
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f104 060b 	add.w	r6, r4, #11
 8006c0e:	f000 f865 	bl	8006cdc <__malloc_unlock>
 8006c12:	f026 0607 	bic.w	r6, r6, #7
 8006c16:	1d23      	adds	r3, r4, #4
 8006c18:	1af2      	subs	r2, r6, r3
 8006c1a:	d0b6      	beq.n	8006b8a <_malloc_r+0x22>
 8006c1c:	1b9b      	subs	r3, r3, r6
 8006c1e:	50a3      	str	r3, [r4, r2]
 8006c20:	e7b3      	b.n	8006b8a <_malloc_r+0x22>
 8006c22:	6862      	ldr	r2, [r4, #4]
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	bf0c      	ite	eq
 8006c28:	6032      	streq	r2, [r6, #0]
 8006c2a:	605a      	strne	r2, [r3, #4]
 8006c2c:	e7ec      	b.n	8006c08 <_malloc_r+0xa0>
 8006c2e:	4623      	mov	r3, r4
 8006c30:	6864      	ldr	r4, [r4, #4]
 8006c32:	e7b2      	b.n	8006b9a <_malloc_r+0x32>
 8006c34:	4634      	mov	r4, r6
 8006c36:	6876      	ldr	r6, [r6, #4]
 8006c38:	e7b9      	b.n	8006bae <_malloc_r+0x46>
 8006c3a:	230c      	movs	r3, #12
 8006c3c:	603b      	str	r3, [r7, #0]
 8006c3e:	4638      	mov	r0, r7
 8006c40:	f000 f84c 	bl	8006cdc <__malloc_unlock>
 8006c44:	e7a1      	b.n	8006b8a <_malloc_r+0x22>
 8006c46:	6025      	str	r5, [r4, #0]
 8006c48:	e7de      	b.n	8006c08 <_malloc_r+0xa0>
 8006c4a:	bf00      	nop
 8006c4c:	20000294 	.word	0x20000294

08006c50 <_realloc_r>:
 8006c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c54:	4680      	mov	r8, r0
 8006c56:	4614      	mov	r4, r2
 8006c58:	460e      	mov	r6, r1
 8006c5a:	b921      	cbnz	r1, 8006c66 <_realloc_r+0x16>
 8006c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c60:	4611      	mov	r1, r2
 8006c62:	f7ff bf81 	b.w	8006b68 <_malloc_r>
 8006c66:	b92a      	cbnz	r2, 8006c74 <_realloc_r+0x24>
 8006c68:	f7ff ff12 	bl	8006a90 <_free_r>
 8006c6c:	4625      	mov	r5, r4
 8006c6e:	4628      	mov	r0, r5
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	f000 f838 	bl	8006ce8 <_malloc_usable_size_r>
 8006c78:	4284      	cmp	r4, r0
 8006c7a:	4607      	mov	r7, r0
 8006c7c:	d802      	bhi.n	8006c84 <_realloc_r+0x34>
 8006c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c82:	d812      	bhi.n	8006caa <_realloc_r+0x5a>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff ff6e 	bl	8006b68 <_malloc_r>
 8006c8c:	4605      	mov	r5, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d0ed      	beq.n	8006c6e <_realloc_r+0x1e>
 8006c92:	42bc      	cmp	r4, r7
 8006c94:	4622      	mov	r2, r4
 8006c96:	4631      	mov	r1, r6
 8006c98:	bf28      	it	cs
 8006c9a:	463a      	movcs	r2, r7
 8006c9c:	f7ff fed0 	bl	8006a40 <memcpy>
 8006ca0:	4631      	mov	r1, r6
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7ff fef4 	bl	8006a90 <_free_r>
 8006ca8:	e7e1      	b.n	8006c6e <_realloc_r+0x1e>
 8006caa:	4635      	mov	r5, r6
 8006cac:	e7df      	b.n	8006c6e <_realloc_r+0x1e>
	...

08006cb0 <_sbrk_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_sbrk_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7fb fd5a 	bl	8002774 <_sbrk>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_sbrk_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_sbrk_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	2000029c 	.word	0x2000029c

08006cd0 <__malloc_lock>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	; (8006cd8 <__malloc_lock+0x8>)
 8006cd2:	f000 b811 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	200002a0 	.word	0x200002a0

08006cdc <__malloc_unlock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__malloc_unlock+0x8>)
 8006cde:	f000 b80c 	b.w	8006cfa <__retarget_lock_release_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	200002a0 	.word	0x200002a0

08006ce8 <_malloc_usable_size_r>:
 8006ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cec:	1f18      	subs	r0, r3, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfbc      	itt	lt
 8006cf2:	580b      	ldrlt	r3, [r1, r0]
 8006cf4:	18c0      	addlt	r0, r0, r3
 8006cf6:	4770      	bx	lr

08006cf8 <__retarget_lock_acquire_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_release_recursive>:
 8006cfa:	4770      	bx	lr

08006cfc <_init>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	bf00      	nop
 8006d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d02:	bc08      	pop	{r3}
 8006d04:	469e      	mov	lr, r3
 8006d06:	4770      	bx	lr

08006d08 <_fini>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr
